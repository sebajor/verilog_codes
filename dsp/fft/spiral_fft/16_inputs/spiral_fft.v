/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 16 complex words per cycle
//   Throughput: one transform every 64 cycles
//   Latency: 501 cycles

//   Resources required:
//     168 multipliers (16 x 16 bit)
//     408 adders (16 x 16 bit)
//     32 RAMs (8 words, 32 bits per word)
//     96 RAMs (128 words, 32 bits per word)
//     32 RAMs (32 words, 32 bits per word)
//     3 RAMs (6 words, 6 bits per word)
//     24 ROMs (64 words, 16 bits per word)
//     96 ROMs (64 words, 6 bits per word)
//     24 ROMs (16 words, 16 bits per word)

// Generated on Mon Jun 13 10:11:49 EDT 2022

// Latency: 501 clock cycles
// Throughput: 1 transform every 64 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 64 cycles.  This means that
// 64 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 501 cycles.  This means that
// the 'next_out' will be asserted 501 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [31:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   wire [15:0] X16;
   wire [15:0] Y16;
   wire [15:0] X17;
   wire [15:0] Y17;
   wire [15:0] X18;
   wire [15:0] Y18;
   wire [15:0] X19;
   wire [15:0] Y19;
   wire [15:0] X20;
   wire [15:0] Y20;
   wire [15:0] X21;
   wire [15:0] Y21;
   wire [15:0] X22;
   wire [15:0] Y22;
   wire [15:0] X23;
   wire [15:0] Y23;
   wire [15:0] X24;
   wire [15:0] Y24;
   wire [15:0] X25;
   wire [15:0] Y25;
   wire [15:0] X26;
   wire [15:0] Y26;
   wire [15:0] X27;
   wire [15:0] Y27;
   wire [15:0] X28;
   wire [15:0] Y28;
   wire [15:0] X29;
   wire [15:0] Y29;
   wire [15:0] X30;
   wire [15:0] Y30;
   wire [15:0] X31;
   wire [15:0] Y31;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];
   assign X16 = in[16];
   assign X17 = in[17];
   assign X18 = in[18];
   assign X19 = in[19];
   assign X20 = in[20];
   assign X21 = in[21];
   assign X22 = in[22];
   assign X23 = in[23];
   assign X24 = in[24];
   assign X25 = in[25];
   assign X26 = in[26];
   assign X27 = in[27];
   assign X28 = in[28];
   assign X29 = in[29];
   assign X30 = in[30];
   assign X31 = in[31];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15),
    .X16(X16), .Y16(Y16),
    .X17(X17), .Y17(Y17),
    .X18(X18), .Y18(Y18),
    .X19(X19), .Y19(Y19),
    .X20(X20), .Y20(Y20),
    .X21(X21), .Y21(Y21),
    .X22(X22), .Y22(Y22),
    .X23(X23), .Y23(Y23),
    .X24(X24), .Y24(Y24),
    .X25(X25), .Y25(Y25),
    .X26(X26), .Y26(Y26),
    .X27(X27), .Y27(Y27),
    .X28(X28), .Y28(Y28),
    .X29(X29), .Y29(Y29),
    .X30(X30), .Y30(Y30),
    .X31(X31), .Y31(Y31));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 1024 complex data points enter the system over 64 cycles
      for (j=0; j < 63; j = j+1) begin
          // Input: 16 complex words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= j*32 + k;
         end
         @(posedge clk);
      end
      j = 63;
      for (k=0; k < 32; k = k+1) begin
         in[k] <= j*32 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 62)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 63; j = j+1) begin
         // Input 32 words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= 2048 + j*32 + k;
          end
          @(posedge clk);
       end
       j = 63;
       for (k=0; k < 32; k = k+1) begin
          in[k] <= 2048 + j*32 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      in[16] <= 0;
      in[17] <= 0;
      in[18] <= 0;
      in[19] <= 0;
      in[20] <= 0;
      in[21] <= 0;
      in[22] <= 0;
      in[23] <= 0;
      in[24] <= 0;
      in[25] <= 0;
      in[26] <= 0;
      in[27] <= 0;
      in[28] <= 0;
      in[29] <= 0;
      in[30] <= 0;
      in[31] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 63; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 63; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      $finish;
   end
endmodule

// Latency: 501
// Gap: 64
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire [15:0] t0_16;
   wire [15:0] t0_17;
   wire [15:0] t0_18;
   wire [15:0] t0_19;
   wire [15:0] t0_20;
   wire [15:0] t0_21;
   wire [15:0] t0_22;
   wire [15:0] t0_23;
   wire [15:0] t0_24;
   wire [15:0] t0_25;
   wire [15:0] t0_26;
   wire [15:0] t0_27;
   wire [15:0] t0_28;
   wire [15:0] t0_29;
   wire [15:0] t0_30;
   wire [15:0] t0_31;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire [15:0] t1_16;
   wire [15:0] t1_17;
   wire [15:0] t1_18;
   wire [15:0] t1_19;
   wire [15:0] t1_20;
   wire [15:0] t1_21;
   wire [15:0] t1_22;
   wire [15:0] t1_23;
   wire [15:0] t1_24;
   wire [15:0] t1_25;
   wire [15:0] t1_26;
   wire [15:0] t1_27;
   wire [15:0] t1_28;
   wire [15:0] t1_29;
   wire [15:0] t1_30;
   wire [15:0] t1_31;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire [15:0] t2_16;
   wire [15:0] t2_17;
   wire [15:0] t2_18;
   wire [15:0] t2_19;
   wire [15:0] t2_20;
   wire [15:0] t2_21;
   wire [15:0] t2_22;
   wire [15:0] t2_23;
   wire [15:0] t2_24;
   wire [15:0] t2_25;
   wire [15:0] t2_26;
   wire [15:0] t2_27;
   wire [15:0] t2_28;
   wire [15:0] t2_29;
   wire [15:0] t2_30;
   wire [15:0] t2_31;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire [15:0] t3_16;
   wire [15:0] t3_17;
   wire [15:0] t3_18;
   wire [15:0] t3_19;
   wire [15:0] t3_20;
   wire [15:0] t3_21;
   wire [15:0] t3_22;
   wire [15:0] t3_23;
   wire [15:0] t3_24;
   wire [15:0] t3_25;
   wire [15:0] t3_26;
   wire [15:0] t3_27;
   wire [15:0] t3_28;
   wire [15:0] t3_29;
   wire [15:0] t3_30;
   wire [15:0] t3_31;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire [15:0] t4_16;
   wire [15:0] t4_17;
   wire [15:0] t4_18;
   wire [15:0] t4_19;
   wire [15:0] t4_20;
   wire [15:0] t4_21;
   wire [15:0] t4_22;
   wire [15:0] t4_23;
   wire [15:0] t4_24;
   wire [15:0] t4_25;
   wire [15:0] t4_26;
   wire [15:0] t4_27;
   wire [15:0] t4_28;
   wire [15:0] t4_29;
   wire [15:0] t4_30;
   wire [15:0] t4_31;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire [15:0] t5_16;
   wire [15:0] t5_17;
   wire [15:0] t5_18;
   wire [15:0] t5_19;
   wire [15:0] t5_20;
   wire [15:0] t5_21;
   wire [15:0] t5_22;
   wire [15:0] t5_23;
   wire [15:0] t5_24;
   wire [15:0] t5_25;
   wire [15:0] t5_26;
   wire [15:0] t5_27;
   wire [15:0] t5_28;
   wire [15:0] t5_29;
   wire [15:0] t5_30;
   wire [15:0] t5_31;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire [15:0] t6_8;
   wire [15:0] t6_9;
   wire [15:0] t6_10;
   wire [15:0] t6_11;
   wire [15:0] t6_12;
   wire [15:0] t6_13;
   wire [15:0] t6_14;
   wire [15:0] t6_15;
   wire [15:0] t6_16;
   wire [15:0] t6_17;
   wire [15:0] t6_18;
   wire [15:0] t6_19;
   wire [15:0] t6_20;
   wire [15:0] t6_21;
   wire [15:0] t6_22;
   wire [15:0] t6_23;
   wire [15:0] t6_24;
   wire [15:0] t6_25;
   wire [15:0] t6_26;
   wire [15:0] t6_27;
   wire [15:0] t6_28;
   wire [15:0] t6_29;
   wire [15:0] t6_30;
   wire [15:0] t6_31;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire [15:0] t7_8;
   wire [15:0] t7_9;
   wire [15:0] t7_10;
   wire [15:0] t7_11;
   wire [15:0] t7_12;
   wire [15:0] t7_13;
   wire [15:0] t7_14;
   wire [15:0] t7_15;
   wire [15:0] t7_16;
   wire [15:0] t7_17;
   wire [15:0] t7_18;
   wire [15:0] t7_19;
   wire [15:0] t7_20;
   wire [15:0] t7_21;
   wire [15:0] t7_22;
   wire [15:0] t7_23;
   wire [15:0] t7_24;
   wire [15:0] t7_25;
   wire [15:0] t7_26;
   wire [15:0] t7_27;
   wire [15:0] t7_28;
   wire [15:0] t7_29;
   wire [15:0] t7_30;
   wire [15:0] t7_31;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire [15:0] t8_8;
   wire [15:0] t8_9;
   wire [15:0] t8_10;
   wire [15:0] t8_11;
   wire [15:0] t8_12;
   wire [15:0] t8_13;
   wire [15:0] t8_14;
   wire [15:0] t8_15;
   wire [15:0] t8_16;
   wire [15:0] t8_17;
   wire [15:0] t8_18;
   wire [15:0] t8_19;
   wire [15:0] t8_20;
   wire [15:0] t8_21;
   wire [15:0] t8_22;
   wire [15:0] t8_23;
   wire [15:0] t8_24;
   wire [15:0] t8_25;
   wire [15:0] t8_26;
   wire [15:0] t8_27;
   wire [15:0] t8_28;
   wire [15:0] t8_29;
   wire [15:0] t8_30;
   wire [15:0] t8_31;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire [15:0] t9_8;
   wire [15:0] t9_9;
   wire [15:0] t9_10;
   wire [15:0] t9_11;
   wire [15:0] t9_12;
   wire [15:0] t9_13;
   wire [15:0] t9_14;
   wire [15:0] t9_15;
   wire [15:0] t9_16;
   wire [15:0] t9_17;
   wire [15:0] t9_18;
   wire [15:0] t9_19;
   wire [15:0] t9_20;
   wire [15:0] t9_21;
   wire [15:0] t9_22;
   wire [15:0] t9_23;
   wire [15:0] t9_24;
   wire [15:0] t9_25;
   wire [15:0] t9_26;
   wire [15:0] t9_27;
   wire [15:0] t9_28;
   wire [15:0] t9_29;
   wire [15:0] t9_30;
   wire [15:0] t9_31;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire [15:0] t10_8;
   wire [15:0] t10_9;
   wire [15:0] t10_10;
   wire [15:0] t10_11;
   wire [15:0] t10_12;
   wire [15:0] t10_13;
   wire [15:0] t10_14;
   wire [15:0] t10_15;
   wire [15:0] t10_16;
   wire [15:0] t10_17;
   wire [15:0] t10_18;
   wire [15:0] t10_19;
   wire [15:0] t10_20;
   wire [15:0] t10_21;
   wire [15:0] t10_22;
   wire [15:0] t10_23;
   wire [15:0] t10_24;
   wire [15:0] t10_25;
   wire [15:0] t10_26;
   wire [15:0] t10_27;
   wire [15:0] t10_28;
   wire [15:0] t10_29;
   wire [15:0] t10_30;
   wire [15:0] t10_31;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire [15:0] t11_8;
   wire [15:0] t11_9;
   wire [15:0] t11_10;
   wire [15:0] t11_11;
   wire [15:0] t11_12;
   wire [15:0] t11_13;
   wire [15:0] t11_14;
   wire [15:0] t11_15;
   wire [15:0] t11_16;
   wire [15:0] t11_17;
   wire [15:0] t11_18;
   wire [15:0] t11_19;
   wire [15:0] t11_20;
   wire [15:0] t11_21;
   wire [15:0] t11_22;
   wire [15:0] t11_23;
   wire [15:0] t11_24;
   wire [15:0] t11_25;
   wire [15:0] t11_26;
   wire [15:0] t11_27;
   wire [15:0] t11_28;
   wire [15:0] t11_29;
   wire [15:0] t11_30;
   wire [15:0] t11_31;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire [15:0] t12_8;
   wire [15:0] t12_9;
   wire [15:0] t12_10;
   wire [15:0] t12_11;
   wire [15:0] t12_12;
   wire [15:0] t12_13;
   wire [15:0] t12_14;
   wire [15:0] t12_15;
   wire [15:0] t12_16;
   wire [15:0] t12_17;
   wire [15:0] t12_18;
   wire [15:0] t12_19;
   wire [15:0] t12_20;
   wire [15:0] t12_21;
   wire [15:0] t12_22;
   wire [15:0] t12_23;
   wire [15:0] t12_24;
   wire [15:0] t12_25;
   wire [15:0] t12_26;
   wire [15:0] t12_27;
   wire [15:0] t12_28;
   wire [15:0] t12_29;
   wire [15:0] t12_30;
   wire [15:0] t12_31;
   wire next_12;
   wire [15:0] t13_0;
   wire [15:0] t13_1;
   wire [15:0] t13_2;
   wire [15:0] t13_3;
   wire [15:0] t13_4;
   wire [15:0] t13_5;
   wire [15:0] t13_6;
   wire [15:0] t13_7;
   wire [15:0] t13_8;
   wire [15:0] t13_9;
   wire [15:0] t13_10;
   wire [15:0] t13_11;
   wire [15:0] t13_12;
   wire [15:0] t13_13;
   wire [15:0] t13_14;
   wire [15:0] t13_15;
   wire [15:0] t13_16;
   wire [15:0] t13_17;
   wire [15:0] t13_18;
   wire [15:0] t13_19;
   wire [15:0] t13_20;
   wire [15:0] t13_21;
   wire [15:0] t13_22;
   wire [15:0] t13_23;
   wire [15:0] t13_24;
   wire [15:0] t13_25;
   wire [15:0] t13_26;
   wire [15:0] t13_27;
   wire [15:0] t13_28;
   wire [15:0] t13_29;
   wire [15:0] t13_30;
   wire [15:0] t13_31;
   wire next_13;
   assign t0_0 = X0;
   assign Y0 = t13_0;
   assign t0_1 = X1;
   assign Y1 = t13_1;
   assign t0_2 = X2;
   assign Y2 = t13_2;
   assign t0_3 = X3;
   assign Y3 = t13_3;
   assign t0_4 = X4;
   assign Y4 = t13_4;
   assign t0_5 = X5;
   assign Y5 = t13_5;
   assign t0_6 = X6;
   assign Y6 = t13_6;
   assign t0_7 = X7;
   assign Y7 = t13_7;
   assign t0_8 = X8;
   assign Y8 = t13_8;
   assign t0_9 = X9;
   assign Y9 = t13_9;
   assign t0_10 = X10;
   assign Y10 = t13_10;
   assign t0_11 = X11;
   assign Y11 = t13_11;
   assign t0_12 = X12;
   assign Y12 = t13_12;
   assign t0_13 = X13;
   assign Y13 = t13_13;
   assign t0_14 = X14;
   assign Y14 = t13_14;
   assign t0_15 = X15;
   assign Y15 = t13_15;
   assign t0_16 = X16;
   assign Y16 = t13_16;
   assign t0_17 = X17;
   assign Y17 = t13_17;
   assign t0_18 = X18;
   assign Y18 = t13_18;
   assign t0_19 = X19;
   assign Y19 = t13_19;
   assign t0_20 = X20;
   assign Y20 = t13_20;
   assign t0_21 = X21;
   assign Y21 = t13_21;
   assign t0_22 = X22;
   assign Y22 = t13_22;
   assign t0_23 = X23;
   assign Y23 = t13_23;
   assign t0_24 = X24;
   assign Y24 = t13_24;
   assign t0_25 = X25;
   assign Y25 = t13_25;
   assign t0_26 = X26;
   assign Y26 = t13_26;
   assign t0_27 = X27;
   assign Y27 = t13_27;
   assign t0_28 = X28;
   assign Y28 = t13_28;
   assign t0_29 = X29;
   assign Y29 = t13_29;
   assign t0_30 = X30;
   assign Y30 = t13_30;
   assign t0_31 = X31;
   assign Y31 = t13_31;
   assign next_0 = next;
   assign next_out = next_13;

// latency=135, gap=64
   rc7815 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15),
    .X16(t0_16), .Y16(t1_16),
    .X17(t0_17), .Y17(t1_17),
    .X18(t0_18), .Y18(t1_18),
    .X19(t0_19), .Y19(t1_19),
    .X20(t0_20), .Y20(t1_20),
    .X21(t0_21), .Y21(t1_21),
    .X22(t0_22), .Y22(t1_22),
    .X23(t0_23), .Y23(t1_23),
    .X24(t0_24), .Y24(t1_24),
    .X25(t0_25), .Y25(t1_25),
    .X26(t0_26), .Y26(t1_26),
    .X27(t0_27), .Y27(t1_27),
    .X28(t0_28), .Y28(t1_28),
    .X29(t0_29), .Y29(t1_29),
    .X30(t0_30), .Y30(t1_30),
    .X31(t0_31), .Y31(t1_31));


// latency=3, gap=64
   codeBlock7817 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15),
       .X16_in(t1_16), .Y16(t2_16),
       .X17_in(t1_17), .Y17(t2_17),
       .X18_in(t1_18), .Y18(t2_18),
       .X19_in(t1_19), .Y19(t2_19),
       .X20_in(t1_20), .Y20(t2_20),
       .X21_in(t1_21), .Y21(t2_21),
       .X22_in(t1_22), .Y22(t2_22),
       .X23_in(t1_23), .Y23(t2_23),
       .X24_in(t1_24), .Y24(t2_24),
       .X25_in(t1_25), .Y25(t2_25),
       .X26_in(t1_26), .Y26(t2_26),
       .X27_in(t1_27), .Y27(t2_27),
       .X28_in(t1_28), .Y28(t2_28),
       .X29_in(t1_29), .Y29(t2_29),
       .X30_in(t1_30), .Y30(t2_30),
       .X31_in(t1_31), .Y31(t2_31));


// latency=6, gap=64
   codeBlock8652 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15),
       .X16_in(t2_16), .Y16(t3_16),
       .X17_in(t2_17), .Y17(t3_17),
       .X18_in(t2_18), .Y18(t3_18),
       .X19_in(t2_19), .Y19(t3_19),
       .X20_in(t2_20), .Y20(t3_20),
       .X21_in(t2_21), .Y21(t3_21),
       .X22_in(t2_22), .Y22(t3_22),
       .X23_in(t2_23), .Y23(t3_23),
       .X24_in(t2_24), .Y24(t3_24),
       .X25_in(t2_25), .Y25(t3_25),
       .X26_in(t2_26), .Y26(t3_26),
       .X27_in(t2_27), .Y27(t3_27),
       .X28_in(t2_28), .Y28(t3_28),
       .X29_in(t2_29), .Y29(t3_29),
       .X30_in(t2_30), .Y30(t3_30),
       .X31_in(t2_31), .Y31(t3_31));


// latency=15, gap=64
   rc9738 stage3(.clk(clk), .reset(reset), .next(next_3), .next_out(next_4),
    .X0(t3_0), .Y0(t4_0),
    .X1(t3_1), .Y1(t4_1),
    .X2(t3_2), .Y2(t4_2),
    .X3(t3_3), .Y3(t4_3),
    .X4(t3_4), .Y4(t4_4),
    .X5(t3_5), .Y5(t4_5),
    .X6(t3_6), .Y6(t4_6),
    .X7(t3_7), .Y7(t4_7),
    .X8(t3_8), .Y8(t4_8),
    .X9(t3_9), .Y9(t4_9),
    .X10(t3_10), .Y10(t4_10),
    .X11(t3_11), .Y11(t4_11),
    .X12(t3_12), .Y12(t4_12),
    .X13(t3_13), .Y13(t4_13),
    .X14(t3_14), .Y14(t4_14),
    .X15(t3_15), .Y15(t4_15),
    .X16(t3_16), .Y16(t4_16),
    .X17(t3_17), .Y17(t4_17),
    .X18(t3_18), .Y18(t4_18),
    .X19(t3_19), .Y19(t4_19),
    .X20(t3_20), .Y20(t4_20),
    .X21(t3_21), .Y21(t4_21),
    .X22(t3_22), .Y22(t4_22),
    .X23(t3_23), .Y23(t4_23),
    .X24(t3_24), .Y24(t4_24),
    .X25(t3_25), .Y25(t4_25),
    .X26(t3_26), .Y26(t4_26),
    .X27(t3_27), .Y27(t4_27),
    .X28(t3_28), .Y28(t4_28),
    .X29(t3_29), .Y29(t4_29),
    .X30(t3_30), .Y30(t4_30),
    .X31(t3_31), .Y31(t4_31));


// latency=8, gap=64
   DirSum_11215 stage4(.next(next_4), .clk(clk), .reset(reset), .next_out(next_5),
       .X0(t4_0), .Y0(t5_0),
       .X1(t4_1), .Y1(t5_1),
       .X2(t4_2), .Y2(t5_2),
       .X3(t4_3), .Y3(t5_3),
       .X4(t4_4), .Y4(t5_4),
       .X5(t4_5), .Y5(t5_5),
       .X6(t4_6), .Y6(t5_6),
       .X7(t4_7), .Y7(t5_7),
       .X8(t4_8), .Y8(t5_8),
       .X9(t4_9), .Y9(t5_9),
       .X10(t4_10), .Y10(t5_10),
       .X11(t4_11), .Y11(t5_11),
       .X12(t4_12), .Y12(t5_12),
       .X13(t4_13), .Y13(t5_13),
       .X14(t4_14), .Y14(t5_14),
       .X15(t4_15), .Y15(t5_15),
       .X16(t4_16), .Y16(t5_16),
       .X17(t4_17), .Y17(t5_17),
       .X18(t4_18), .Y18(t5_18),
       .X19(t4_19), .Y19(t5_19),
       .X20(t4_20), .Y20(t5_20),
       .X21(t4_21), .Y21(t5_21),
       .X22(t4_22), .Y22(t5_22),
       .X23(t4_23), .Y23(t5_23),
       .X24(t4_24), .Y24(t5_24),
       .X25(t4_25), .Y25(t5_25),
       .X26(t4_26), .Y26(t5_26),
       .X27(t4_27), .Y27(t5_27),
       .X28(t4_28), .Y28(t5_28),
       .X29(t4_29), .Y29(t5_29),
       .X30(t4_30), .Y30(t5_30),
       .X31(t4_31), .Y31(t5_31));


// latency=3, gap=64
   codeBlock11218 stage5(.clk(clk), .reset(reset), .next_in(next_5), .next_out(next_6),
       .X0_in(t5_0), .Y0(t6_0),
       .X1_in(t5_1), .Y1(t6_1),
       .X2_in(t5_2), .Y2(t6_2),
       .X3_in(t5_3), .Y3(t6_3),
       .X4_in(t5_4), .Y4(t6_4),
       .X5_in(t5_5), .Y5(t6_5),
       .X6_in(t5_6), .Y6(t6_6),
       .X7_in(t5_7), .Y7(t6_7),
       .X8_in(t5_8), .Y8(t6_8),
       .X9_in(t5_9), .Y9(t6_9),
       .X10_in(t5_10), .Y10(t6_10),
       .X11_in(t5_11), .Y11(t6_11),
       .X12_in(t5_12), .Y12(t6_12),
       .X13_in(t5_13), .Y13(t6_13),
       .X14_in(t5_14), .Y14(t6_14),
       .X15_in(t5_15), .Y15(t6_15),
       .X16_in(t5_16), .Y16(t6_16),
       .X17_in(t5_17), .Y17(t6_17),
       .X18_in(t5_18), .Y18(t6_18),
       .X19_in(t5_19), .Y19(t6_19),
       .X20_in(t5_20), .Y20(t6_20),
       .X21_in(t5_21), .Y21(t6_21),
       .X22_in(t5_22), .Y22(t6_22),
       .X23_in(t5_23), .Y23(t6_23),
       .X24_in(t5_24), .Y24(t6_24),
       .X25_in(t5_25), .Y25(t6_25),
       .X26_in(t5_26), .Y26(t6_26),
       .X27_in(t5_27), .Y27(t6_27),
       .X28_in(t5_28), .Y28(t6_28),
       .X29_in(t5_29), .Y29(t6_29),
       .X30_in(t5_30), .Y30(t6_30),
       .X31_in(t5_31), .Y31(t6_31));


// latency=39, gap=64
   rc12056 stage6(.clk(clk), .reset(reset), .next(next_6), .next_out(next_7),
    .X0(t6_0), .Y0(t7_0),
    .X1(t6_1), .Y1(t7_1),
    .X2(t6_2), .Y2(t7_2),
    .X3(t6_3), .Y3(t7_3),
    .X4(t6_4), .Y4(t7_4),
    .X5(t6_5), .Y5(t7_5),
    .X6(t6_6), .Y6(t7_6),
    .X7(t6_7), .Y7(t7_7),
    .X8(t6_8), .Y8(t7_8),
    .X9(t6_9), .Y9(t7_9),
    .X10(t6_10), .Y10(t7_10),
    .X11(t6_11), .Y11(t7_11),
    .X12(t6_12), .Y12(t7_12),
    .X13(t6_13), .Y13(t7_13),
    .X14(t6_14), .Y14(t7_14),
    .X15(t6_15), .Y15(t7_15),
    .X16(t6_16), .Y16(t7_16),
    .X17(t6_17), .Y17(t7_17),
    .X18(t6_18), .Y18(t7_18),
    .X19(t6_19), .Y19(t7_19),
    .X20(t6_20), .Y20(t7_20),
    .X21(t6_21), .Y21(t7_21),
    .X22(t6_22), .Y22(t7_22),
    .X23(t6_23), .Y23(t7_23),
    .X24(t6_24), .Y24(t7_24),
    .X25(t6_25), .Y25(t7_25),
    .X26(t6_26), .Y26(t7_26),
    .X27(t6_27), .Y27(t7_27),
    .X28(t6_28), .Y28(t7_28),
    .X29(t6_29), .Y29(t7_29),
    .X30(t6_30), .Y30(t7_30),
    .X31(t6_31), .Y31(t7_31));


// latency=8, gap=64
   DirSum_13917 stage7(.next(next_7), .clk(clk), .reset(reset), .next_out(next_8),
       .X0(t7_0), .Y0(t8_0),
       .X1(t7_1), .Y1(t8_1),
       .X2(t7_2), .Y2(t8_2),
       .X3(t7_3), .Y3(t8_3),
       .X4(t7_4), .Y4(t8_4),
       .X5(t7_5), .Y5(t8_5),
       .X6(t7_6), .Y6(t8_6),
       .X7(t7_7), .Y7(t8_7),
       .X8(t7_8), .Y8(t8_8),
       .X9(t7_9), .Y9(t8_9),
       .X10(t7_10), .Y10(t8_10),
       .X11(t7_11), .Y11(t8_11),
       .X12(t7_12), .Y12(t8_12),
       .X13(t7_13), .Y13(t8_13),
       .X14(t7_14), .Y14(t8_14),
       .X15(t7_15), .Y15(t8_15),
       .X16(t7_16), .Y16(t8_16),
       .X17(t7_17), .Y17(t8_17),
       .X18(t7_18), .Y18(t8_18),
       .X19(t7_19), .Y19(t8_19),
       .X20(t7_20), .Y20(t8_20),
       .X21(t7_21), .Y21(t8_21),
       .X22(t7_22), .Y22(t8_22),
       .X23(t7_23), .Y23(t8_23),
       .X24(t7_24), .Y24(t8_24),
       .X25(t7_25), .Y25(t8_25),
       .X26(t7_26), .Y26(t8_26),
       .X27(t7_27), .Y27(t8_27),
       .X28(t7_28), .Y28(t8_28),
       .X29(t7_29), .Y29(t8_29),
       .X30(t7_30), .Y30(t8_30),
       .X31(t7_31), .Y31(t8_31));


// latency=3, gap=64
   codeBlock13920 stage8(.clk(clk), .reset(reset), .next_in(next_8), .next_out(next_9),
       .X0_in(t8_0), .Y0(t9_0),
       .X1_in(t8_1), .Y1(t9_1),
       .X2_in(t8_2), .Y2(t9_2),
       .X3_in(t8_3), .Y3(t9_3),
       .X4_in(t8_4), .Y4(t9_4),
       .X5_in(t8_5), .Y5(t9_5),
       .X6_in(t8_6), .Y6(t9_6),
       .X7_in(t8_7), .Y7(t9_7),
       .X8_in(t8_8), .Y8(t9_8),
       .X9_in(t8_9), .Y9(t9_9),
       .X10_in(t8_10), .Y10(t9_10),
       .X11_in(t8_11), .Y11(t9_11),
       .X12_in(t8_12), .Y12(t9_12),
       .X13_in(t8_13), .Y13(t9_13),
       .X14_in(t8_14), .Y14(t9_14),
       .X15_in(t8_15), .Y15(t9_15),
       .X16_in(t8_16), .Y16(t9_16),
       .X17_in(t8_17), .Y17(t9_17),
       .X18_in(t8_18), .Y18(t9_18),
       .X19_in(t8_19), .Y19(t9_19),
       .X20_in(t8_20), .Y20(t9_20),
       .X21_in(t8_21), .Y21(t9_21),
       .X22_in(t8_22), .Y22(t9_22),
       .X23_in(t8_23), .Y23(t9_23),
       .X24_in(t8_24), .Y24(t9_24),
       .X25_in(t8_25), .Y25(t9_25),
       .X26_in(t8_26), .Y26(t9_26),
       .X27_in(t8_27), .Y27(t9_27),
       .X28_in(t8_28), .Y28(t9_28),
       .X29_in(t8_29), .Y29(t9_29),
       .X30_in(t8_30), .Y30(t9_30),
       .X31_in(t8_31), .Y31(t9_31));


// latency=135, gap=64
   rc14758 stage9(.clk(clk), .reset(reset), .next(next_9), .next_out(next_10),
    .X0(t9_0), .Y0(t10_0),
    .X1(t9_1), .Y1(t10_1),
    .X2(t9_2), .Y2(t10_2),
    .X3(t9_3), .Y3(t10_3),
    .X4(t9_4), .Y4(t10_4),
    .X5(t9_5), .Y5(t10_5),
    .X6(t9_6), .Y6(t10_6),
    .X7(t9_7), .Y7(t10_7),
    .X8(t9_8), .Y8(t10_8),
    .X9(t9_9), .Y9(t10_9),
    .X10(t9_10), .Y10(t10_10),
    .X11(t9_11), .Y11(t10_11),
    .X12(t9_12), .Y12(t10_12),
    .X13(t9_13), .Y13(t10_13),
    .X14(t9_14), .Y14(t10_14),
    .X15(t9_15), .Y15(t10_15),
    .X16(t9_16), .Y16(t10_16),
    .X17(t9_17), .Y17(t10_17),
    .X18(t9_18), .Y18(t10_18),
    .X19(t9_19), .Y19(t10_19),
    .X20(t9_20), .Y20(t10_20),
    .X21(t9_21), .Y21(t10_21),
    .X22(t9_22), .Y22(t10_22),
    .X23(t9_23), .Y23(t10_23),
    .X24(t9_24), .Y24(t10_24),
    .X25(t9_25), .Y25(t10_25),
    .X26(t9_26), .Y26(t10_26),
    .X27(t9_27), .Y27(t10_27),
    .X28(t9_28), .Y28(t10_28),
    .X29(t9_29), .Y29(t10_29),
    .X30(t9_30), .Y30(t10_30),
    .X31(t9_31), .Y31(t10_31));


// latency=8, gap=64
   DirSum_18154 stage10(.next(next_10), .clk(clk), .reset(reset), .next_out(next_11),
       .X0(t10_0), .Y0(t11_0),
       .X1(t10_1), .Y1(t11_1),
       .X2(t10_2), .Y2(t11_2),
       .X3(t10_3), .Y3(t11_3),
       .X4(t10_4), .Y4(t11_4),
       .X5(t10_5), .Y5(t11_5),
       .X6(t10_6), .Y6(t11_6),
       .X7(t10_7), .Y7(t11_7),
       .X8(t10_8), .Y8(t11_8),
       .X9(t10_9), .Y9(t11_9),
       .X10(t10_10), .Y10(t11_10),
       .X11(t10_11), .Y11(t11_11),
       .X12(t10_12), .Y12(t11_12),
       .X13(t10_13), .Y13(t11_13),
       .X14(t10_14), .Y14(t11_14),
       .X15(t10_15), .Y15(t11_15),
       .X16(t10_16), .Y16(t11_16),
       .X17(t10_17), .Y17(t11_17),
       .X18(t10_18), .Y18(t11_18),
       .X19(t10_19), .Y19(t11_19),
       .X20(t10_20), .Y20(t11_20),
       .X21(t10_21), .Y21(t11_21),
       .X22(t10_22), .Y22(t11_22),
       .X23(t10_23), .Y23(t11_23),
       .X24(t10_24), .Y24(t11_24),
       .X25(t10_25), .Y25(t11_25),
       .X26(t10_26), .Y26(t11_26),
       .X27(t10_27), .Y27(t11_27),
       .X28(t10_28), .Y28(t11_28),
       .X29(t10_29), .Y29(t11_29),
       .X30(t10_30), .Y30(t11_30),
       .X31(t10_31), .Y31(t11_31));


// latency=3, gap=64
   codeBlock18157 stage11(.clk(clk), .reset(reset), .next_in(next_11), .next_out(next_12),
       .X0_in(t11_0), .Y0(t12_0),
       .X1_in(t11_1), .Y1(t12_1),
       .X2_in(t11_2), .Y2(t12_2),
       .X3_in(t11_3), .Y3(t12_3),
       .X4_in(t11_4), .Y4(t12_4),
       .X5_in(t11_5), .Y5(t12_5),
       .X6_in(t11_6), .Y6(t12_6),
       .X7_in(t11_7), .Y7(t12_7),
       .X8_in(t11_8), .Y8(t12_8),
       .X9_in(t11_9), .Y9(t12_9),
       .X10_in(t11_10), .Y10(t12_10),
       .X11_in(t11_11), .Y11(t12_11),
       .X12_in(t11_12), .Y12(t12_12),
       .X13_in(t11_13), .Y13(t12_13),
       .X14_in(t11_14), .Y14(t12_14),
       .X15_in(t11_15), .Y15(t12_15),
       .X16_in(t11_16), .Y16(t12_16),
       .X17_in(t11_17), .Y17(t12_17),
       .X18_in(t11_18), .Y18(t12_18),
       .X19_in(t11_19), .Y19(t12_19),
       .X20_in(t11_20), .Y20(t12_20),
       .X21_in(t11_21), .Y21(t12_21),
       .X22_in(t11_22), .Y22(t12_22),
       .X23_in(t11_23), .Y23(t12_23),
       .X24_in(t11_24), .Y24(t12_24),
       .X25_in(t11_25), .Y25(t12_25),
       .X26_in(t11_26), .Y26(t12_26),
       .X27_in(t11_27), .Y27(t12_27),
       .X28_in(t11_28), .Y28(t12_28),
       .X29_in(t11_29), .Y29(t12_29),
       .X30_in(t11_30), .Y30(t12_30),
       .X31_in(t11_31), .Y31(t12_31));


// latency=135, gap=64
   rc18995 stage12(.clk(clk), .reset(reset), .next(next_12), .next_out(next_13),
    .X0(t12_0), .Y0(t13_0),
    .X1(t12_1), .Y1(t13_1),
    .X2(t12_2), .Y2(t13_2),
    .X3(t12_3), .Y3(t13_3),
    .X4(t12_4), .Y4(t13_4),
    .X5(t12_5), .Y5(t13_5),
    .X6(t12_6), .Y6(t13_6),
    .X7(t12_7), .Y7(t13_7),
    .X8(t12_8), .Y8(t13_8),
    .X9(t12_9), .Y9(t13_9),
    .X10(t12_10), .Y10(t13_10),
    .X11(t12_11), .Y11(t13_11),
    .X12(t12_12), .Y12(t13_12),
    .X13(t12_13), .Y13(t13_13),
    .X14(t12_14), .Y14(t13_14),
    .X15(t12_15), .Y15(t13_15),
    .X16(t12_16), .Y16(t13_16),
    .X17(t12_17), .Y17(t13_17),
    .X18(t12_18), .Y18(t13_18),
    .X19(t12_19), .Y19(t13_19),
    .X20(t12_20), .Y20(t13_20),
    .X21(t12_21), .Y21(t13_21),
    .X22(t12_22), .Y22(t13_22),
    .X23(t12_23), .Y23(t13_23),
    .X24(t12_24), .Y24(t13_24),
    .X25(t12_25), .Y25(t13_25),
    .X26(t12_26), .Y26(t13_26),
    .X27(t12_27), .Y27(t13_27),
    .X28(t12_28), .Y28(t13_28),
    .X29(t12_29), .Y29(t13_29),
    .X30(t12_30), .Y30(t13_30),
    .X31(t12_31), .Y31(t13_31));


endmodule

// Latency: 135
// Gap: 64
module rc7815(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   wire [31:0] t8;
   wire [31:0] s8;
   assign t8 = {X16, X17};
   wire [31:0] t9;
   wire [31:0] s9;
   assign t9 = {X18, X19};
   wire [31:0] t10;
   wire [31:0] s10;
   assign t10 = {X20, X21};
   wire [31:0] t11;
   wire [31:0] s11;
   assign t11 = {X22, X23};
   wire [31:0] t12;
   wire [31:0] s12;
   assign t12 = {X24, X25};
   wire [31:0] t13;
   wire [31:0] s13;
   assign t13 = {X26, X27};
   wire [31:0] t14;
   wire [31:0] s14;
   assign t14 = {X28, X29};
   wire [31:0] t15;
   wire [31:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];
   assign Y16 = s8[31:16];
   assign Y17 = s8[15:0];
   assign Y18 = s9[31:16];
   assign Y19 = s9[15:0];
   assign Y20 = s10[31:16];
   assign Y21 = s10[15:0];
   assign Y22 = s11[31:16];
   assign Y23 = s11[15:0];
   assign Y24 = s12[31:16];
   assign Y25 = s12[15:0];
   assign Y26 = s13[31:16];
   assign Y27 = s13[15:0];
   assign Y28 = s14[31:16];
   assign Y29 = s14[15:0];
   assign Y30 = s15[31:16];
   assign Y31 = s15[15:0];

   perm7813 instPerm24462(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet7813(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
,       x8, y8
,       x9, y9
,       x10, y10
,       x11, y11
,       x12, y12
,       x13, y13
,       x14, y14
,       x15, y15
);

    parameter width = 32;

    input [5:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    input [width-1:0] x8;
    output reg [width-1:0] y8;
    input [width-1:0] x9;
    output reg [width-1:0] y9;
    input [width-1:0] x10;
    output reg [width-1:0] y10;
    input [width-1:0] x11;
    output reg [width-1:0] y11;
    input [width-1:0] x12;
    output reg [width-1:0] y12;
    input [width-1:0] x13;
    output reg [width-1:0] y13;
    input [width-1:0] x14;
    output reg [width-1:0] y14;
    input [width-1:0] x15;
    output reg [width-1:0] y15;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7, t0_8, t0_9, t0_10, t0_11, t0_12, t0_13, t0_14, t0_15;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7, t1_8, t1_9, t1_10, t1_11, t1_12, t1_13, t1_14, t1_15;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10, t6_11, t6_12, t6_13, t6_14, t6_15;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15;
    wire [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14, t9_15;
    wire [width-1:0] t10_0, t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14, t10_15;
    reg [width-1:0] t11_0, t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14, t11_15;
    wire [width-1:0] t12_0, t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9, t12_10, t12_11, t12_12, t12_13, t12_14, t12_15;
    reg [width-1:0] t13_0, t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13, t13_14, t13_15;

    reg [31:0] control;

    always @(posedge clk) begin
      case(ct)
        6'd0: control <= 32'b11111111111111111111111111111111;
        6'd1: control <= 32'b11111111111111111111111111111111;
        6'd2: control <= 32'b11111111111111111111111111111111;
        6'd3: control <= 32'b11111111111111111111111111111111;
        6'd4: control <= 32'b00000000111111111111111111111111;
        6'd5: control <= 32'b00000000111111111111111111111111;
        6'd6: control <= 32'b00000000111111111111111111111111;
        6'd7: control <= 32'b00000000111111111111111111111111;
        6'd8: control <= 32'b11111111000000001111111111111111;
        6'd9: control <= 32'b11111111000000001111111111111111;
        6'd10: control <= 32'b11111111000000001111111111111111;
        6'd11: control <= 32'b11111111000000001111111111111111;
        6'd12: control <= 32'b00000000000000001111111111111111;
        6'd13: control <= 32'b00000000000000001111111111111111;
        6'd14: control <= 32'b00000000000000001111111111111111;
        6'd15: control <= 32'b00000000000000001111111111111111;
        6'd16: control <= 32'b11111111111111110000000011111111;
        6'd17: control <= 32'b11111111111111110000000011111111;
        6'd18: control <= 32'b11111111111111110000000011111111;
        6'd19: control <= 32'b11111111111111110000000011111111;
        6'd20: control <= 32'b00000000111111110000000011111111;
        6'd21: control <= 32'b00000000111111110000000011111111;
        6'd22: control <= 32'b00000000111111110000000011111111;
        6'd23: control <= 32'b00000000111111110000000011111111;
        6'd24: control <= 32'b11111111000000000000000011111111;
        6'd25: control <= 32'b11111111000000000000000011111111;
        6'd26: control <= 32'b11111111000000000000000011111111;
        6'd27: control <= 32'b11111111000000000000000011111111;
        6'd28: control <= 32'b00000000000000000000000011111111;
        6'd29: control <= 32'b00000000000000000000000011111111;
        6'd30: control <= 32'b00000000000000000000000011111111;
        6'd31: control <= 32'b00000000000000000000000011111111;
        6'd32: control <= 32'b11111111111111111111111100000000;
        6'd33: control <= 32'b11111111111111111111111100000000;
        6'd34: control <= 32'b11111111111111111111111100000000;
        6'd35: control <= 32'b11111111111111111111111100000000;
        6'd36: control <= 32'b00000000111111111111111100000000;
        6'd37: control <= 32'b00000000111111111111111100000000;
        6'd38: control <= 32'b00000000111111111111111100000000;
        6'd39: control <= 32'b00000000111111111111111100000000;
        6'd40: control <= 32'b11111111000000001111111100000000;
        6'd41: control <= 32'b11111111000000001111111100000000;
        6'd42: control <= 32'b11111111000000001111111100000000;
        6'd43: control <= 32'b11111111000000001111111100000000;
        6'd44: control <= 32'b00000000000000001111111100000000;
        6'd45: control <= 32'b00000000000000001111111100000000;
        6'd46: control <= 32'b00000000000000001111111100000000;
        6'd47: control <= 32'b00000000000000001111111100000000;
        6'd48: control <= 32'b11111111111111110000000000000000;
        6'd49: control <= 32'b11111111111111110000000000000000;
        6'd50: control <= 32'b11111111111111110000000000000000;
        6'd51: control <= 32'b11111111111111110000000000000000;
        6'd52: control <= 32'b00000000111111110000000000000000;
        6'd53: control <= 32'b00000000111111110000000000000000;
        6'd54: control <= 32'b00000000111111110000000000000000;
        6'd55: control <= 32'b00000000111111110000000000000000;
        6'd56: control <= 32'b11111111000000000000000000000000;
        6'd57: control <= 32'b11111111000000000000000000000000;
        6'd58: control <= 32'b11111111000000000000000000000000;
        6'd59: control <= 32'b11111111000000000000000000000000;
        6'd60: control <= 32'b00000000000000000000000000000000;
        6'd61: control <= 32'b00000000000000000000000000000000;
        6'd62: control <= 32'b00000000000000000000000000000000;
        6'd63: control <= 32'b00000000000000000000000000000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [31:0] control0;
   reg [31:0] control1;
   reg [31:0] control2;
   reg [31:0] control3;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
        control3 <= control2;
    end
    assign t0_0 = x0;
    assign t0_1 = x8;
    assign t0_2 = x1;
    assign t0_3 = x9;
    assign t0_4 = x2;
    assign t0_5 = x10;
    assign t0_6 = x3;
    assign t0_7 = x11;
    assign t0_8 = x4;
    assign t0_9 = x12;
    assign t0_10 = x5;
    assign t0_11 = x13;
    assign t0_12 = x6;
    assign t0_13 = x14;
    assign t0_14 = x7;
    assign t0_15 = x15;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
     assign t1_8 = t0_8;
     assign t1_9 = t0_9;
     assign t1_10 = t0_10;
     assign t1_11 = t0_11;
     assign t1_12 = t0_12;
     assign t1_13 = t0_13;
     assign t1_14 = t0_14;
     assign t1_15 = t0_15;
    assign t2_0 = t1_0;
    assign t2_1 = t1_8;
    assign t2_2 = t1_1;
    assign t2_3 = t1_9;
    assign t2_4 = t1_2;
    assign t2_5 = t1_10;
    assign t2_6 = t1_3;
    assign t2_7 = t1_11;
    assign t2_8 = t1_4;
    assign t2_9 = t1_12;
    assign t2_10 = t1_5;
    assign t2_11 = t1_13;
    assign t2_12 = t1_6;
    assign t2_13 = t1_14;
    assign t2_14 = t1_7;
    assign t2_15 = t1_15;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
         t3_8 <= t2_8;
         t3_9 <= t2_9;
         t3_10 <= t2_10;
         t3_11 <= t2_11;
         t3_12 <= t2_12;
         t3_13 <= t2_13;
         t3_14 <= t2_14;
         t3_15 <= t2_15;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_8;
    assign t4_2 = t3_1;
    assign t4_3 = t3_9;
    assign t4_4 = t3_2;
    assign t4_5 = t3_10;
    assign t4_6 = t3_3;
    assign t4_7 = t3_11;
    assign t4_8 = t3_4;
    assign t4_9 = t3_12;
    assign t4_10 = t3_5;
    assign t4_11 = t3_13;
    assign t4_12 = t3_6;
    assign t4_13 = t3_14;
    assign t4_14 = t3_7;
    assign t4_15 = t3_15;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_2;
     assign t5_3 = t4_3;
     assign t5_4 = t4_4;
     assign t5_5 = t4_5;
     assign t5_6 = t4_6;
     assign t5_7 = t4_7;
     assign t5_8 = t4_8;
     assign t5_9 = t4_9;
     assign t5_10 = t4_10;
     assign t5_11 = t4_11;
     assign t5_12 = t4_12;
     assign t5_13 = t4_13;
     assign t5_14 = t4_14;
     assign t5_15 = t4_15;
    assign t6_0 = t5_0;
    assign t6_1 = t5_8;
    assign t6_2 = t5_1;
    assign t6_3 = t5_9;
    assign t6_4 = t5_2;
    assign t6_5 = t5_10;
    assign t6_6 = t5_3;
    assign t6_7 = t5_11;
    assign t6_8 = t5_4;
    assign t6_9 = t5_12;
    assign t6_10 = t5_5;
    assign t6_11 = t5_13;
    assign t6_12 = t5_6;
    assign t6_13 = t5_14;
    assign t6_14 = t5_7;
    assign t6_15 = t5_15;
   always @(posedge clk) begin
         t7_0 <= (control1[31] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[31] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[30] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[30] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[29] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[29] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[28] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[28] == 0) ? t6_7 : t6_6;
         t7_8 <= (control1[27] == 0) ? t6_8 : t6_9;
         t7_9 <= (control1[27] == 0) ? t6_9 : t6_8;
         t7_10 <= (control1[26] == 0) ? t6_10 : t6_11;
         t7_11 <= (control1[26] == 0) ? t6_11 : t6_10;
         t7_12 <= (control1[25] == 0) ? t6_12 : t6_13;
         t7_13 <= (control1[25] == 0) ? t6_13 : t6_12;
         t7_14 <= (control1[24] == 0) ? t6_14 : t6_15;
         t7_15 <= (control1[24] == 0) ? t6_15 : t6_14;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_8;
    assign t8_5 = t7_10;
    assign t8_6 = t7_12;
    assign t8_7 = t7_14;
    assign t8_8 = t7_1;
    assign t8_9 = t7_3;
    assign t8_10 = t7_5;
    assign t8_11 = t7_7;
    assign t8_12 = t7_9;
    assign t8_13 = t7_11;
    assign t8_14 = t7_13;
    assign t8_15 = t7_15;
     assign t9_0 = (control2[23] == 0) ? t8_0 : t8_1;
     assign t9_1 = (control2[23] == 0) ? t8_1 : t8_0;
     assign t9_2 = (control2[22] == 0) ? t8_2 : t8_3;
     assign t9_3 = (control2[22] == 0) ? t8_3 : t8_2;
     assign t9_4 = (control2[21] == 0) ? t8_4 : t8_5;
     assign t9_5 = (control2[21] == 0) ? t8_5 : t8_4;
     assign t9_6 = (control2[20] == 0) ? t8_6 : t8_7;
     assign t9_7 = (control2[20] == 0) ? t8_7 : t8_6;
     assign t9_8 = (control2[19] == 0) ? t8_8 : t8_9;
     assign t9_9 = (control2[19] == 0) ? t8_9 : t8_8;
     assign t9_10 = (control2[18] == 0) ? t8_10 : t8_11;
     assign t9_11 = (control2[18] == 0) ? t8_11 : t8_10;
     assign t9_12 = (control2[17] == 0) ? t8_12 : t8_13;
     assign t9_13 = (control2[17] == 0) ? t8_13 : t8_12;
     assign t9_14 = (control2[16] == 0) ? t8_14 : t8_15;
     assign t9_15 = (control2[16] == 0) ? t8_15 : t8_14;
    assign t10_0 = t9_0;
    assign t10_1 = t9_2;
    assign t10_2 = t9_4;
    assign t10_3 = t9_6;
    assign t10_4 = t9_8;
    assign t10_5 = t9_10;
    assign t10_6 = t9_12;
    assign t10_7 = t9_14;
    assign t10_8 = t9_1;
    assign t10_9 = t9_3;
    assign t10_10 = t9_5;
    assign t10_11 = t9_7;
    assign t10_12 = t9_9;
    assign t10_13 = t9_11;
    assign t10_14 = t9_13;
    assign t10_15 = t9_15;
   always @(posedge clk) begin
         t11_0 <= (control2[15] == 0) ? t10_0 : t10_1;
         t11_1 <= (control2[15] == 0) ? t10_1 : t10_0;
         t11_2 <= (control2[14] == 0) ? t10_2 : t10_3;
         t11_3 <= (control2[14] == 0) ? t10_3 : t10_2;
         t11_4 <= (control2[13] == 0) ? t10_4 : t10_5;
         t11_5 <= (control2[13] == 0) ? t10_5 : t10_4;
         t11_6 <= (control2[12] == 0) ? t10_6 : t10_7;
         t11_7 <= (control2[12] == 0) ? t10_7 : t10_6;
         t11_8 <= (control2[11] == 0) ? t10_8 : t10_9;
         t11_9 <= (control2[11] == 0) ? t10_9 : t10_8;
         t11_10 <= (control2[10] == 0) ? t10_10 : t10_11;
         t11_11 <= (control2[10] == 0) ? t10_11 : t10_10;
         t11_12 <= (control2[9] == 0) ? t10_12 : t10_13;
         t11_13 <= (control2[9] == 0) ? t10_13 : t10_12;
         t11_14 <= (control2[8] == 0) ? t10_14 : t10_15;
         t11_15 <= (control2[8] == 0) ? t10_15 : t10_14;
   end
    assign t12_0 = t11_0;
    assign t12_1 = t11_2;
    assign t12_2 = t11_4;
    assign t12_3 = t11_6;
    assign t12_4 = t11_8;
    assign t12_5 = t11_10;
    assign t12_6 = t11_12;
    assign t12_7 = t11_14;
    assign t12_8 = t11_1;
    assign t12_9 = t11_3;
    assign t12_10 = t11_5;
    assign t12_11 = t11_7;
    assign t12_12 = t11_9;
    assign t12_13 = t11_11;
    assign t12_14 = t11_13;
    assign t12_15 = t11_15;
   always @(posedge clk) begin
         t13_0 <= (control3[7] == 0) ? t12_0 : t12_1;
         t13_1 <= (control3[7] == 0) ? t12_1 : t12_0;
         t13_2 <= (control3[6] == 0) ? t12_2 : t12_3;
         t13_3 <= (control3[6] == 0) ? t12_3 : t12_2;
         t13_4 <= (control3[5] == 0) ? t12_4 : t12_5;
         t13_5 <= (control3[5] == 0) ? t12_5 : t12_4;
         t13_6 <= (control3[4] == 0) ? t12_6 : t12_7;
         t13_7 <= (control3[4] == 0) ? t12_7 : t12_6;
         t13_8 <= (control3[3] == 0) ? t12_8 : t12_9;
         t13_9 <= (control3[3] == 0) ? t12_9 : t12_8;
         t13_10 <= (control3[2] == 0) ? t12_10 : t12_11;
         t13_11 <= (control3[2] == 0) ? t12_11 : t12_10;
         t13_12 <= (control3[1] == 0) ? t12_12 : t12_13;
         t13_13 <= (control3[1] == 0) ? t12_13 : t12_12;
         t13_14 <= (control3[0] == 0) ? t12_14 : t12_15;
         t13_15 <= (control3[0] == 0) ? t12_15 : t12_14;
   end
    always @(posedge clk) begin
        y0 <= t13_0;
        y1 <= t13_2;
        y2 <= t13_4;
        y3 <= t13_6;
        y4 <= t13_8;
        y5 <= t13_10;
        y6 <= t13_12;
        y7 <= t13_14;
        y8 <= t13_1;
        y9 <= t13_3;
        y10 <= t13_5;
        y11 <= t13_7;
        y12 <= t13_9;
        y13 <= t13_11;
        y14 <= t13_13;
        y15 <= t13_15;
    end
endmodule

// Latency: 135
// Gap: 64
module perm7813(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter width = 32;

   parameter depth = 64;

   parameter addrbits = 6;

   parameter muxbits = 4;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  t8;
   wire [width-1:0]  s8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  t9;
   wire [width-1:0]  s9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  t10;
   wire [width-1:0]  s10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  t11;
   wire [width-1:0]  s11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  t12;
   wire [width-1:0]  s12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  t13;
   wire [width-1:0]  s13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  t14;
   wire [width-1:0]  s14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  t15;
   wire [width-1:0]  s15;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg [addrbits-1:0] s1rd8, s2wr8, s2rd8;
   reg [addrbits-1:0] s1rd9, s2wr9, s2rd9;
   reg [addrbits-1:0] s1rd10, s2wr10, s2rd10;
   reg [addrbits-1:0] s1rd11, s2wr11, s2rd11;
   reg [addrbits-1:0] s1rd12, s2wr12, s2rd12;
   reg [addrbits-1:0] s1rd13, s2wr13, s2rd13;
   reg [addrbits-1:0] s1rd14, s2wr14, s2rd14;
   reg [addrbits-1:0] s1rd15, s2wr15, s2rd15;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm0;
   assign tm0 = 0;

shiftRegFIFO #(6, 1) shiftFIFO_24467(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24468(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem8(x8, t8, {inFlip0, s1wr0}, {outFlip0, s1rd8}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem9(x9, t9, {inFlip0, s1wr0}, {outFlip0, s1rd9}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem10(x10, t10, {inFlip0, s1wr0}, {outFlip0, s1rd10}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem11(x11, t11, {inFlip0, s1wr0}, {outFlip0, s1rd11}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem12(x12, t12, {inFlip0, s1wr0}, {outFlip0, s1rd12}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem13(x13, t13, {inFlip0, s1wr0}, {outFlip0, s1rd13}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem14(x14, t14, {inFlip0, s1wr0}, {outFlip0, s1rd14}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem15(x15, t15, {inFlip0, s1wr0}, {outFlip0, s1rd15}, s1wr_en, clk);

nextReg #(63, 6) nextReg_24479(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_24480(.X(next2), .Y(next3), .clk(clk));
nextReg #(64, 6) nextReg_24483(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24484(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(63, 1) shiftFIFO_24487(.X(tm0), .Y(tm0_d), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_24490(.X(tm0_d), .Y(tm0_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(6, 6) shiftFIFO_24495(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(7, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem8(s8, y8, {inFlip1, s2wr8}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem9(s9, y9, {inFlip1, s2wr9}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem10(s10, y10, {inFlip1, s2wr10}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem11(s11, y11, {inFlip1, s2wr11}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem12(s12, y12, {inFlip1, s2wr12}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem13(s13, y13, {inFlip1, s2wr13}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem14(s14, y14, {inFlip1, s2wr14}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem15(s15, y15, {inFlip1, s2wr15}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd0 <= 60;
	     {1'd0,  6'd1}: s1rd0 <= 61;
	     {1'd0,  6'd2}: s1rd0 <= 62;
	     {1'd0,  6'd3}: s1rd0 <= 63;
	     {1'd0,  6'd4}: s1rd0 <= 44;
	     {1'd0,  6'd5}: s1rd0 <= 45;
	     {1'd0,  6'd6}: s1rd0 <= 46;
	     {1'd0,  6'd7}: s1rd0 <= 47;
	     {1'd0,  6'd8}: s1rd0 <= 28;
	     {1'd0,  6'd9}: s1rd0 <= 29;
	     {1'd0,  6'd10}: s1rd0 <= 30;
	     {1'd0,  6'd11}: s1rd0 <= 31;
	     {1'd0,  6'd12}: s1rd0 <= 12;
	     {1'd0,  6'd13}: s1rd0 <= 13;
	     {1'd0,  6'd14}: s1rd0 <= 14;
	     {1'd0,  6'd15}: s1rd0 <= 15;
	     {1'd0,  6'd16}: s1rd0 <= 56;
	     {1'd0,  6'd17}: s1rd0 <= 57;
	     {1'd0,  6'd18}: s1rd0 <= 58;
	     {1'd0,  6'd19}: s1rd0 <= 59;
	     {1'd0,  6'd20}: s1rd0 <= 40;
	     {1'd0,  6'd21}: s1rd0 <= 41;
	     {1'd0,  6'd22}: s1rd0 <= 42;
	     {1'd0,  6'd23}: s1rd0 <= 43;
	     {1'd0,  6'd24}: s1rd0 <= 24;
	     {1'd0,  6'd25}: s1rd0 <= 25;
	     {1'd0,  6'd26}: s1rd0 <= 26;
	     {1'd0,  6'd27}: s1rd0 <= 27;
	     {1'd0,  6'd28}: s1rd0 <= 8;
	     {1'd0,  6'd29}: s1rd0 <= 9;
	     {1'd0,  6'd30}: s1rd0 <= 10;
	     {1'd0,  6'd31}: s1rd0 <= 11;
	     {1'd0,  6'd32}: s1rd0 <= 52;
	     {1'd0,  6'd33}: s1rd0 <= 53;
	     {1'd0,  6'd34}: s1rd0 <= 54;
	     {1'd0,  6'd35}: s1rd0 <= 55;
	     {1'd0,  6'd36}: s1rd0 <= 36;
	     {1'd0,  6'd37}: s1rd0 <= 37;
	     {1'd0,  6'd38}: s1rd0 <= 38;
	     {1'd0,  6'd39}: s1rd0 <= 39;
	     {1'd0,  6'd40}: s1rd0 <= 20;
	     {1'd0,  6'd41}: s1rd0 <= 21;
	     {1'd0,  6'd42}: s1rd0 <= 22;
	     {1'd0,  6'd43}: s1rd0 <= 23;
	     {1'd0,  6'd44}: s1rd0 <= 4;
	     {1'd0,  6'd45}: s1rd0 <= 5;
	     {1'd0,  6'd46}: s1rd0 <= 6;
	     {1'd0,  6'd47}: s1rd0 <= 7;
	     {1'd0,  6'd48}: s1rd0 <= 48;
	     {1'd0,  6'd49}: s1rd0 <= 49;
	     {1'd0,  6'd50}: s1rd0 <= 50;
	     {1'd0,  6'd51}: s1rd0 <= 51;
	     {1'd0,  6'd52}: s1rd0 <= 32;
	     {1'd0,  6'd53}: s1rd0 <= 33;
	     {1'd0,  6'd54}: s1rd0 <= 34;
	     {1'd0,  6'd55}: s1rd0 <= 35;
	     {1'd0,  6'd56}: s1rd0 <= 16;
	     {1'd0,  6'd57}: s1rd0 <= 17;
	     {1'd0,  6'd58}: s1rd0 <= 18;
	     {1'd0,  6'd59}: s1rd0 <= 19;
	     {1'd0,  6'd60}: s1rd0 <= 0;
	     {1'd0,  6'd61}: s1rd0 <= 1;
	     {1'd0,  6'd62}: s1rd0 <= 2;
	     {1'd0,  6'd63}: s1rd0 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd1 <= 44;
	     {1'd0,  6'd1}: s1rd1 <= 45;
	     {1'd0,  6'd2}: s1rd1 <= 46;
	     {1'd0,  6'd3}: s1rd1 <= 47;
	     {1'd0,  6'd4}: s1rd1 <= 60;
	     {1'd0,  6'd5}: s1rd1 <= 61;
	     {1'd0,  6'd6}: s1rd1 <= 62;
	     {1'd0,  6'd7}: s1rd1 <= 63;
	     {1'd0,  6'd8}: s1rd1 <= 12;
	     {1'd0,  6'd9}: s1rd1 <= 13;
	     {1'd0,  6'd10}: s1rd1 <= 14;
	     {1'd0,  6'd11}: s1rd1 <= 15;
	     {1'd0,  6'd12}: s1rd1 <= 28;
	     {1'd0,  6'd13}: s1rd1 <= 29;
	     {1'd0,  6'd14}: s1rd1 <= 30;
	     {1'd0,  6'd15}: s1rd1 <= 31;
	     {1'd0,  6'd16}: s1rd1 <= 40;
	     {1'd0,  6'd17}: s1rd1 <= 41;
	     {1'd0,  6'd18}: s1rd1 <= 42;
	     {1'd0,  6'd19}: s1rd1 <= 43;
	     {1'd0,  6'd20}: s1rd1 <= 56;
	     {1'd0,  6'd21}: s1rd1 <= 57;
	     {1'd0,  6'd22}: s1rd1 <= 58;
	     {1'd0,  6'd23}: s1rd1 <= 59;
	     {1'd0,  6'd24}: s1rd1 <= 8;
	     {1'd0,  6'd25}: s1rd1 <= 9;
	     {1'd0,  6'd26}: s1rd1 <= 10;
	     {1'd0,  6'd27}: s1rd1 <= 11;
	     {1'd0,  6'd28}: s1rd1 <= 24;
	     {1'd0,  6'd29}: s1rd1 <= 25;
	     {1'd0,  6'd30}: s1rd1 <= 26;
	     {1'd0,  6'd31}: s1rd1 <= 27;
	     {1'd0,  6'd32}: s1rd1 <= 36;
	     {1'd0,  6'd33}: s1rd1 <= 37;
	     {1'd0,  6'd34}: s1rd1 <= 38;
	     {1'd0,  6'd35}: s1rd1 <= 39;
	     {1'd0,  6'd36}: s1rd1 <= 52;
	     {1'd0,  6'd37}: s1rd1 <= 53;
	     {1'd0,  6'd38}: s1rd1 <= 54;
	     {1'd0,  6'd39}: s1rd1 <= 55;
	     {1'd0,  6'd40}: s1rd1 <= 4;
	     {1'd0,  6'd41}: s1rd1 <= 5;
	     {1'd0,  6'd42}: s1rd1 <= 6;
	     {1'd0,  6'd43}: s1rd1 <= 7;
	     {1'd0,  6'd44}: s1rd1 <= 20;
	     {1'd0,  6'd45}: s1rd1 <= 21;
	     {1'd0,  6'd46}: s1rd1 <= 22;
	     {1'd0,  6'd47}: s1rd1 <= 23;
	     {1'd0,  6'd48}: s1rd1 <= 32;
	     {1'd0,  6'd49}: s1rd1 <= 33;
	     {1'd0,  6'd50}: s1rd1 <= 34;
	     {1'd0,  6'd51}: s1rd1 <= 35;
	     {1'd0,  6'd52}: s1rd1 <= 48;
	     {1'd0,  6'd53}: s1rd1 <= 49;
	     {1'd0,  6'd54}: s1rd1 <= 50;
	     {1'd0,  6'd55}: s1rd1 <= 51;
	     {1'd0,  6'd56}: s1rd1 <= 0;
	     {1'd0,  6'd57}: s1rd1 <= 1;
	     {1'd0,  6'd58}: s1rd1 <= 2;
	     {1'd0,  6'd59}: s1rd1 <= 3;
	     {1'd0,  6'd60}: s1rd1 <= 16;
	     {1'd0,  6'd61}: s1rd1 <= 17;
	     {1'd0,  6'd62}: s1rd1 <= 18;
	     {1'd0,  6'd63}: s1rd1 <= 19;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd2 <= 28;
	     {1'd0,  6'd1}: s1rd2 <= 29;
	     {1'd0,  6'd2}: s1rd2 <= 30;
	     {1'd0,  6'd3}: s1rd2 <= 31;
	     {1'd0,  6'd4}: s1rd2 <= 12;
	     {1'd0,  6'd5}: s1rd2 <= 13;
	     {1'd0,  6'd6}: s1rd2 <= 14;
	     {1'd0,  6'd7}: s1rd2 <= 15;
	     {1'd0,  6'd8}: s1rd2 <= 60;
	     {1'd0,  6'd9}: s1rd2 <= 61;
	     {1'd0,  6'd10}: s1rd2 <= 62;
	     {1'd0,  6'd11}: s1rd2 <= 63;
	     {1'd0,  6'd12}: s1rd2 <= 44;
	     {1'd0,  6'd13}: s1rd2 <= 45;
	     {1'd0,  6'd14}: s1rd2 <= 46;
	     {1'd0,  6'd15}: s1rd2 <= 47;
	     {1'd0,  6'd16}: s1rd2 <= 24;
	     {1'd0,  6'd17}: s1rd2 <= 25;
	     {1'd0,  6'd18}: s1rd2 <= 26;
	     {1'd0,  6'd19}: s1rd2 <= 27;
	     {1'd0,  6'd20}: s1rd2 <= 8;
	     {1'd0,  6'd21}: s1rd2 <= 9;
	     {1'd0,  6'd22}: s1rd2 <= 10;
	     {1'd0,  6'd23}: s1rd2 <= 11;
	     {1'd0,  6'd24}: s1rd2 <= 56;
	     {1'd0,  6'd25}: s1rd2 <= 57;
	     {1'd0,  6'd26}: s1rd2 <= 58;
	     {1'd0,  6'd27}: s1rd2 <= 59;
	     {1'd0,  6'd28}: s1rd2 <= 40;
	     {1'd0,  6'd29}: s1rd2 <= 41;
	     {1'd0,  6'd30}: s1rd2 <= 42;
	     {1'd0,  6'd31}: s1rd2 <= 43;
	     {1'd0,  6'd32}: s1rd2 <= 20;
	     {1'd0,  6'd33}: s1rd2 <= 21;
	     {1'd0,  6'd34}: s1rd2 <= 22;
	     {1'd0,  6'd35}: s1rd2 <= 23;
	     {1'd0,  6'd36}: s1rd2 <= 4;
	     {1'd0,  6'd37}: s1rd2 <= 5;
	     {1'd0,  6'd38}: s1rd2 <= 6;
	     {1'd0,  6'd39}: s1rd2 <= 7;
	     {1'd0,  6'd40}: s1rd2 <= 52;
	     {1'd0,  6'd41}: s1rd2 <= 53;
	     {1'd0,  6'd42}: s1rd2 <= 54;
	     {1'd0,  6'd43}: s1rd2 <= 55;
	     {1'd0,  6'd44}: s1rd2 <= 36;
	     {1'd0,  6'd45}: s1rd2 <= 37;
	     {1'd0,  6'd46}: s1rd2 <= 38;
	     {1'd0,  6'd47}: s1rd2 <= 39;
	     {1'd0,  6'd48}: s1rd2 <= 16;
	     {1'd0,  6'd49}: s1rd2 <= 17;
	     {1'd0,  6'd50}: s1rd2 <= 18;
	     {1'd0,  6'd51}: s1rd2 <= 19;
	     {1'd0,  6'd52}: s1rd2 <= 0;
	     {1'd0,  6'd53}: s1rd2 <= 1;
	     {1'd0,  6'd54}: s1rd2 <= 2;
	     {1'd0,  6'd55}: s1rd2 <= 3;
	     {1'd0,  6'd56}: s1rd2 <= 48;
	     {1'd0,  6'd57}: s1rd2 <= 49;
	     {1'd0,  6'd58}: s1rd2 <= 50;
	     {1'd0,  6'd59}: s1rd2 <= 51;
	     {1'd0,  6'd60}: s1rd2 <= 32;
	     {1'd0,  6'd61}: s1rd2 <= 33;
	     {1'd0,  6'd62}: s1rd2 <= 34;
	     {1'd0,  6'd63}: s1rd2 <= 35;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd3 <= 12;
	     {1'd0,  6'd1}: s1rd3 <= 13;
	     {1'd0,  6'd2}: s1rd3 <= 14;
	     {1'd0,  6'd3}: s1rd3 <= 15;
	     {1'd0,  6'd4}: s1rd3 <= 28;
	     {1'd0,  6'd5}: s1rd3 <= 29;
	     {1'd0,  6'd6}: s1rd3 <= 30;
	     {1'd0,  6'd7}: s1rd3 <= 31;
	     {1'd0,  6'd8}: s1rd3 <= 44;
	     {1'd0,  6'd9}: s1rd3 <= 45;
	     {1'd0,  6'd10}: s1rd3 <= 46;
	     {1'd0,  6'd11}: s1rd3 <= 47;
	     {1'd0,  6'd12}: s1rd3 <= 60;
	     {1'd0,  6'd13}: s1rd3 <= 61;
	     {1'd0,  6'd14}: s1rd3 <= 62;
	     {1'd0,  6'd15}: s1rd3 <= 63;
	     {1'd0,  6'd16}: s1rd3 <= 8;
	     {1'd0,  6'd17}: s1rd3 <= 9;
	     {1'd0,  6'd18}: s1rd3 <= 10;
	     {1'd0,  6'd19}: s1rd3 <= 11;
	     {1'd0,  6'd20}: s1rd3 <= 24;
	     {1'd0,  6'd21}: s1rd3 <= 25;
	     {1'd0,  6'd22}: s1rd3 <= 26;
	     {1'd0,  6'd23}: s1rd3 <= 27;
	     {1'd0,  6'd24}: s1rd3 <= 40;
	     {1'd0,  6'd25}: s1rd3 <= 41;
	     {1'd0,  6'd26}: s1rd3 <= 42;
	     {1'd0,  6'd27}: s1rd3 <= 43;
	     {1'd0,  6'd28}: s1rd3 <= 56;
	     {1'd0,  6'd29}: s1rd3 <= 57;
	     {1'd0,  6'd30}: s1rd3 <= 58;
	     {1'd0,  6'd31}: s1rd3 <= 59;
	     {1'd0,  6'd32}: s1rd3 <= 4;
	     {1'd0,  6'd33}: s1rd3 <= 5;
	     {1'd0,  6'd34}: s1rd3 <= 6;
	     {1'd0,  6'd35}: s1rd3 <= 7;
	     {1'd0,  6'd36}: s1rd3 <= 20;
	     {1'd0,  6'd37}: s1rd3 <= 21;
	     {1'd0,  6'd38}: s1rd3 <= 22;
	     {1'd0,  6'd39}: s1rd3 <= 23;
	     {1'd0,  6'd40}: s1rd3 <= 36;
	     {1'd0,  6'd41}: s1rd3 <= 37;
	     {1'd0,  6'd42}: s1rd3 <= 38;
	     {1'd0,  6'd43}: s1rd3 <= 39;
	     {1'd0,  6'd44}: s1rd3 <= 52;
	     {1'd0,  6'd45}: s1rd3 <= 53;
	     {1'd0,  6'd46}: s1rd3 <= 54;
	     {1'd0,  6'd47}: s1rd3 <= 55;
	     {1'd0,  6'd48}: s1rd3 <= 0;
	     {1'd0,  6'd49}: s1rd3 <= 1;
	     {1'd0,  6'd50}: s1rd3 <= 2;
	     {1'd0,  6'd51}: s1rd3 <= 3;
	     {1'd0,  6'd52}: s1rd3 <= 16;
	     {1'd0,  6'd53}: s1rd3 <= 17;
	     {1'd0,  6'd54}: s1rd3 <= 18;
	     {1'd0,  6'd55}: s1rd3 <= 19;
	     {1'd0,  6'd56}: s1rd3 <= 32;
	     {1'd0,  6'd57}: s1rd3 <= 33;
	     {1'd0,  6'd58}: s1rd3 <= 34;
	     {1'd0,  6'd59}: s1rd3 <= 35;
	     {1'd0,  6'd60}: s1rd3 <= 48;
	     {1'd0,  6'd61}: s1rd3 <= 49;
	     {1'd0,  6'd62}: s1rd3 <= 50;
	     {1'd0,  6'd63}: s1rd3 <= 51;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd4 <= 56;
	     {1'd0,  6'd1}: s1rd4 <= 57;
	     {1'd0,  6'd2}: s1rd4 <= 58;
	     {1'd0,  6'd3}: s1rd4 <= 59;
	     {1'd0,  6'd4}: s1rd4 <= 40;
	     {1'd0,  6'd5}: s1rd4 <= 41;
	     {1'd0,  6'd6}: s1rd4 <= 42;
	     {1'd0,  6'd7}: s1rd4 <= 43;
	     {1'd0,  6'd8}: s1rd4 <= 24;
	     {1'd0,  6'd9}: s1rd4 <= 25;
	     {1'd0,  6'd10}: s1rd4 <= 26;
	     {1'd0,  6'd11}: s1rd4 <= 27;
	     {1'd0,  6'd12}: s1rd4 <= 8;
	     {1'd0,  6'd13}: s1rd4 <= 9;
	     {1'd0,  6'd14}: s1rd4 <= 10;
	     {1'd0,  6'd15}: s1rd4 <= 11;
	     {1'd0,  6'd16}: s1rd4 <= 60;
	     {1'd0,  6'd17}: s1rd4 <= 61;
	     {1'd0,  6'd18}: s1rd4 <= 62;
	     {1'd0,  6'd19}: s1rd4 <= 63;
	     {1'd0,  6'd20}: s1rd4 <= 44;
	     {1'd0,  6'd21}: s1rd4 <= 45;
	     {1'd0,  6'd22}: s1rd4 <= 46;
	     {1'd0,  6'd23}: s1rd4 <= 47;
	     {1'd0,  6'd24}: s1rd4 <= 28;
	     {1'd0,  6'd25}: s1rd4 <= 29;
	     {1'd0,  6'd26}: s1rd4 <= 30;
	     {1'd0,  6'd27}: s1rd4 <= 31;
	     {1'd0,  6'd28}: s1rd4 <= 12;
	     {1'd0,  6'd29}: s1rd4 <= 13;
	     {1'd0,  6'd30}: s1rd4 <= 14;
	     {1'd0,  6'd31}: s1rd4 <= 15;
	     {1'd0,  6'd32}: s1rd4 <= 48;
	     {1'd0,  6'd33}: s1rd4 <= 49;
	     {1'd0,  6'd34}: s1rd4 <= 50;
	     {1'd0,  6'd35}: s1rd4 <= 51;
	     {1'd0,  6'd36}: s1rd4 <= 32;
	     {1'd0,  6'd37}: s1rd4 <= 33;
	     {1'd0,  6'd38}: s1rd4 <= 34;
	     {1'd0,  6'd39}: s1rd4 <= 35;
	     {1'd0,  6'd40}: s1rd4 <= 16;
	     {1'd0,  6'd41}: s1rd4 <= 17;
	     {1'd0,  6'd42}: s1rd4 <= 18;
	     {1'd0,  6'd43}: s1rd4 <= 19;
	     {1'd0,  6'd44}: s1rd4 <= 0;
	     {1'd0,  6'd45}: s1rd4 <= 1;
	     {1'd0,  6'd46}: s1rd4 <= 2;
	     {1'd0,  6'd47}: s1rd4 <= 3;
	     {1'd0,  6'd48}: s1rd4 <= 52;
	     {1'd0,  6'd49}: s1rd4 <= 53;
	     {1'd0,  6'd50}: s1rd4 <= 54;
	     {1'd0,  6'd51}: s1rd4 <= 55;
	     {1'd0,  6'd52}: s1rd4 <= 36;
	     {1'd0,  6'd53}: s1rd4 <= 37;
	     {1'd0,  6'd54}: s1rd4 <= 38;
	     {1'd0,  6'd55}: s1rd4 <= 39;
	     {1'd0,  6'd56}: s1rd4 <= 20;
	     {1'd0,  6'd57}: s1rd4 <= 21;
	     {1'd0,  6'd58}: s1rd4 <= 22;
	     {1'd0,  6'd59}: s1rd4 <= 23;
	     {1'd0,  6'd60}: s1rd4 <= 4;
	     {1'd0,  6'd61}: s1rd4 <= 5;
	     {1'd0,  6'd62}: s1rd4 <= 6;
	     {1'd0,  6'd63}: s1rd4 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd5 <= 40;
	     {1'd0,  6'd1}: s1rd5 <= 41;
	     {1'd0,  6'd2}: s1rd5 <= 42;
	     {1'd0,  6'd3}: s1rd5 <= 43;
	     {1'd0,  6'd4}: s1rd5 <= 56;
	     {1'd0,  6'd5}: s1rd5 <= 57;
	     {1'd0,  6'd6}: s1rd5 <= 58;
	     {1'd0,  6'd7}: s1rd5 <= 59;
	     {1'd0,  6'd8}: s1rd5 <= 8;
	     {1'd0,  6'd9}: s1rd5 <= 9;
	     {1'd0,  6'd10}: s1rd5 <= 10;
	     {1'd0,  6'd11}: s1rd5 <= 11;
	     {1'd0,  6'd12}: s1rd5 <= 24;
	     {1'd0,  6'd13}: s1rd5 <= 25;
	     {1'd0,  6'd14}: s1rd5 <= 26;
	     {1'd0,  6'd15}: s1rd5 <= 27;
	     {1'd0,  6'd16}: s1rd5 <= 44;
	     {1'd0,  6'd17}: s1rd5 <= 45;
	     {1'd0,  6'd18}: s1rd5 <= 46;
	     {1'd0,  6'd19}: s1rd5 <= 47;
	     {1'd0,  6'd20}: s1rd5 <= 60;
	     {1'd0,  6'd21}: s1rd5 <= 61;
	     {1'd0,  6'd22}: s1rd5 <= 62;
	     {1'd0,  6'd23}: s1rd5 <= 63;
	     {1'd0,  6'd24}: s1rd5 <= 12;
	     {1'd0,  6'd25}: s1rd5 <= 13;
	     {1'd0,  6'd26}: s1rd5 <= 14;
	     {1'd0,  6'd27}: s1rd5 <= 15;
	     {1'd0,  6'd28}: s1rd5 <= 28;
	     {1'd0,  6'd29}: s1rd5 <= 29;
	     {1'd0,  6'd30}: s1rd5 <= 30;
	     {1'd0,  6'd31}: s1rd5 <= 31;
	     {1'd0,  6'd32}: s1rd5 <= 32;
	     {1'd0,  6'd33}: s1rd5 <= 33;
	     {1'd0,  6'd34}: s1rd5 <= 34;
	     {1'd0,  6'd35}: s1rd5 <= 35;
	     {1'd0,  6'd36}: s1rd5 <= 48;
	     {1'd0,  6'd37}: s1rd5 <= 49;
	     {1'd0,  6'd38}: s1rd5 <= 50;
	     {1'd0,  6'd39}: s1rd5 <= 51;
	     {1'd0,  6'd40}: s1rd5 <= 0;
	     {1'd0,  6'd41}: s1rd5 <= 1;
	     {1'd0,  6'd42}: s1rd5 <= 2;
	     {1'd0,  6'd43}: s1rd5 <= 3;
	     {1'd0,  6'd44}: s1rd5 <= 16;
	     {1'd0,  6'd45}: s1rd5 <= 17;
	     {1'd0,  6'd46}: s1rd5 <= 18;
	     {1'd0,  6'd47}: s1rd5 <= 19;
	     {1'd0,  6'd48}: s1rd5 <= 36;
	     {1'd0,  6'd49}: s1rd5 <= 37;
	     {1'd0,  6'd50}: s1rd5 <= 38;
	     {1'd0,  6'd51}: s1rd5 <= 39;
	     {1'd0,  6'd52}: s1rd5 <= 52;
	     {1'd0,  6'd53}: s1rd5 <= 53;
	     {1'd0,  6'd54}: s1rd5 <= 54;
	     {1'd0,  6'd55}: s1rd5 <= 55;
	     {1'd0,  6'd56}: s1rd5 <= 4;
	     {1'd0,  6'd57}: s1rd5 <= 5;
	     {1'd0,  6'd58}: s1rd5 <= 6;
	     {1'd0,  6'd59}: s1rd5 <= 7;
	     {1'd0,  6'd60}: s1rd5 <= 20;
	     {1'd0,  6'd61}: s1rd5 <= 21;
	     {1'd0,  6'd62}: s1rd5 <= 22;
	     {1'd0,  6'd63}: s1rd5 <= 23;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd6 <= 24;
	     {1'd0,  6'd1}: s1rd6 <= 25;
	     {1'd0,  6'd2}: s1rd6 <= 26;
	     {1'd0,  6'd3}: s1rd6 <= 27;
	     {1'd0,  6'd4}: s1rd6 <= 8;
	     {1'd0,  6'd5}: s1rd6 <= 9;
	     {1'd0,  6'd6}: s1rd6 <= 10;
	     {1'd0,  6'd7}: s1rd6 <= 11;
	     {1'd0,  6'd8}: s1rd6 <= 56;
	     {1'd0,  6'd9}: s1rd6 <= 57;
	     {1'd0,  6'd10}: s1rd6 <= 58;
	     {1'd0,  6'd11}: s1rd6 <= 59;
	     {1'd0,  6'd12}: s1rd6 <= 40;
	     {1'd0,  6'd13}: s1rd6 <= 41;
	     {1'd0,  6'd14}: s1rd6 <= 42;
	     {1'd0,  6'd15}: s1rd6 <= 43;
	     {1'd0,  6'd16}: s1rd6 <= 28;
	     {1'd0,  6'd17}: s1rd6 <= 29;
	     {1'd0,  6'd18}: s1rd6 <= 30;
	     {1'd0,  6'd19}: s1rd6 <= 31;
	     {1'd0,  6'd20}: s1rd6 <= 12;
	     {1'd0,  6'd21}: s1rd6 <= 13;
	     {1'd0,  6'd22}: s1rd6 <= 14;
	     {1'd0,  6'd23}: s1rd6 <= 15;
	     {1'd0,  6'd24}: s1rd6 <= 60;
	     {1'd0,  6'd25}: s1rd6 <= 61;
	     {1'd0,  6'd26}: s1rd6 <= 62;
	     {1'd0,  6'd27}: s1rd6 <= 63;
	     {1'd0,  6'd28}: s1rd6 <= 44;
	     {1'd0,  6'd29}: s1rd6 <= 45;
	     {1'd0,  6'd30}: s1rd6 <= 46;
	     {1'd0,  6'd31}: s1rd6 <= 47;
	     {1'd0,  6'd32}: s1rd6 <= 16;
	     {1'd0,  6'd33}: s1rd6 <= 17;
	     {1'd0,  6'd34}: s1rd6 <= 18;
	     {1'd0,  6'd35}: s1rd6 <= 19;
	     {1'd0,  6'd36}: s1rd6 <= 0;
	     {1'd0,  6'd37}: s1rd6 <= 1;
	     {1'd0,  6'd38}: s1rd6 <= 2;
	     {1'd0,  6'd39}: s1rd6 <= 3;
	     {1'd0,  6'd40}: s1rd6 <= 48;
	     {1'd0,  6'd41}: s1rd6 <= 49;
	     {1'd0,  6'd42}: s1rd6 <= 50;
	     {1'd0,  6'd43}: s1rd6 <= 51;
	     {1'd0,  6'd44}: s1rd6 <= 32;
	     {1'd0,  6'd45}: s1rd6 <= 33;
	     {1'd0,  6'd46}: s1rd6 <= 34;
	     {1'd0,  6'd47}: s1rd6 <= 35;
	     {1'd0,  6'd48}: s1rd6 <= 20;
	     {1'd0,  6'd49}: s1rd6 <= 21;
	     {1'd0,  6'd50}: s1rd6 <= 22;
	     {1'd0,  6'd51}: s1rd6 <= 23;
	     {1'd0,  6'd52}: s1rd6 <= 4;
	     {1'd0,  6'd53}: s1rd6 <= 5;
	     {1'd0,  6'd54}: s1rd6 <= 6;
	     {1'd0,  6'd55}: s1rd6 <= 7;
	     {1'd0,  6'd56}: s1rd6 <= 52;
	     {1'd0,  6'd57}: s1rd6 <= 53;
	     {1'd0,  6'd58}: s1rd6 <= 54;
	     {1'd0,  6'd59}: s1rd6 <= 55;
	     {1'd0,  6'd60}: s1rd6 <= 36;
	     {1'd0,  6'd61}: s1rd6 <= 37;
	     {1'd0,  6'd62}: s1rd6 <= 38;
	     {1'd0,  6'd63}: s1rd6 <= 39;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd7 <= 8;
	     {1'd0,  6'd1}: s1rd7 <= 9;
	     {1'd0,  6'd2}: s1rd7 <= 10;
	     {1'd0,  6'd3}: s1rd7 <= 11;
	     {1'd0,  6'd4}: s1rd7 <= 24;
	     {1'd0,  6'd5}: s1rd7 <= 25;
	     {1'd0,  6'd6}: s1rd7 <= 26;
	     {1'd0,  6'd7}: s1rd7 <= 27;
	     {1'd0,  6'd8}: s1rd7 <= 40;
	     {1'd0,  6'd9}: s1rd7 <= 41;
	     {1'd0,  6'd10}: s1rd7 <= 42;
	     {1'd0,  6'd11}: s1rd7 <= 43;
	     {1'd0,  6'd12}: s1rd7 <= 56;
	     {1'd0,  6'd13}: s1rd7 <= 57;
	     {1'd0,  6'd14}: s1rd7 <= 58;
	     {1'd0,  6'd15}: s1rd7 <= 59;
	     {1'd0,  6'd16}: s1rd7 <= 12;
	     {1'd0,  6'd17}: s1rd7 <= 13;
	     {1'd0,  6'd18}: s1rd7 <= 14;
	     {1'd0,  6'd19}: s1rd7 <= 15;
	     {1'd0,  6'd20}: s1rd7 <= 28;
	     {1'd0,  6'd21}: s1rd7 <= 29;
	     {1'd0,  6'd22}: s1rd7 <= 30;
	     {1'd0,  6'd23}: s1rd7 <= 31;
	     {1'd0,  6'd24}: s1rd7 <= 44;
	     {1'd0,  6'd25}: s1rd7 <= 45;
	     {1'd0,  6'd26}: s1rd7 <= 46;
	     {1'd0,  6'd27}: s1rd7 <= 47;
	     {1'd0,  6'd28}: s1rd7 <= 60;
	     {1'd0,  6'd29}: s1rd7 <= 61;
	     {1'd0,  6'd30}: s1rd7 <= 62;
	     {1'd0,  6'd31}: s1rd7 <= 63;
	     {1'd0,  6'd32}: s1rd7 <= 0;
	     {1'd0,  6'd33}: s1rd7 <= 1;
	     {1'd0,  6'd34}: s1rd7 <= 2;
	     {1'd0,  6'd35}: s1rd7 <= 3;
	     {1'd0,  6'd36}: s1rd7 <= 16;
	     {1'd0,  6'd37}: s1rd7 <= 17;
	     {1'd0,  6'd38}: s1rd7 <= 18;
	     {1'd0,  6'd39}: s1rd7 <= 19;
	     {1'd0,  6'd40}: s1rd7 <= 32;
	     {1'd0,  6'd41}: s1rd7 <= 33;
	     {1'd0,  6'd42}: s1rd7 <= 34;
	     {1'd0,  6'd43}: s1rd7 <= 35;
	     {1'd0,  6'd44}: s1rd7 <= 48;
	     {1'd0,  6'd45}: s1rd7 <= 49;
	     {1'd0,  6'd46}: s1rd7 <= 50;
	     {1'd0,  6'd47}: s1rd7 <= 51;
	     {1'd0,  6'd48}: s1rd7 <= 4;
	     {1'd0,  6'd49}: s1rd7 <= 5;
	     {1'd0,  6'd50}: s1rd7 <= 6;
	     {1'd0,  6'd51}: s1rd7 <= 7;
	     {1'd0,  6'd52}: s1rd7 <= 20;
	     {1'd0,  6'd53}: s1rd7 <= 21;
	     {1'd0,  6'd54}: s1rd7 <= 22;
	     {1'd0,  6'd55}: s1rd7 <= 23;
	     {1'd0,  6'd56}: s1rd7 <= 36;
	     {1'd0,  6'd57}: s1rd7 <= 37;
	     {1'd0,  6'd58}: s1rd7 <= 38;
	     {1'd0,  6'd59}: s1rd7 <= 39;
	     {1'd0,  6'd60}: s1rd7 <= 52;
	     {1'd0,  6'd61}: s1rd7 <= 53;
	     {1'd0,  6'd62}: s1rd7 <= 54;
	     {1'd0,  6'd63}: s1rd7 <= 55;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd8 <= 52;
	     {1'd0,  6'd1}: s1rd8 <= 53;
	     {1'd0,  6'd2}: s1rd8 <= 54;
	     {1'd0,  6'd3}: s1rd8 <= 55;
	     {1'd0,  6'd4}: s1rd8 <= 36;
	     {1'd0,  6'd5}: s1rd8 <= 37;
	     {1'd0,  6'd6}: s1rd8 <= 38;
	     {1'd0,  6'd7}: s1rd8 <= 39;
	     {1'd0,  6'd8}: s1rd8 <= 20;
	     {1'd0,  6'd9}: s1rd8 <= 21;
	     {1'd0,  6'd10}: s1rd8 <= 22;
	     {1'd0,  6'd11}: s1rd8 <= 23;
	     {1'd0,  6'd12}: s1rd8 <= 4;
	     {1'd0,  6'd13}: s1rd8 <= 5;
	     {1'd0,  6'd14}: s1rd8 <= 6;
	     {1'd0,  6'd15}: s1rd8 <= 7;
	     {1'd0,  6'd16}: s1rd8 <= 48;
	     {1'd0,  6'd17}: s1rd8 <= 49;
	     {1'd0,  6'd18}: s1rd8 <= 50;
	     {1'd0,  6'd19}: s1rd8 <= 51;
	     {1'd0,  6'd20}: s1rd8 <= 32;
	     {1'd0,  6'd21}: s1rd8 <= 33;
	     {1'd0,  6'd22}: s1rd8 <= 34;
	     {1'd0,  6'd23}: s1rd8 <= 35;
	     {1'd0,  6'd24}: s1rd8 <= 16;
	     {1'd0,  6'd25}: s1rd8 <= 17;
	     {1'd0,  6'd26}: s1rd8 <= 18;
	     {1'd0,  6'd27}: s1rd8 <= 19;
	     {1'd0,  6'd28}: s1rd8 <= 0;
	     {1'd0,  6'd29}: s1rd8 <= 1;
	     {1'd0,  6'd30}: s1rd8 <= 2;
	     {1'd0,  6'd31}: s1rd8 <= 3;
	     {1'd0,  6'd32}: s1rd8 <= 60;
	     {1'd0,  6'd33}: s1rd8 <= 61;
	     {1'd0,  6'd34}: s1rd8 <= 62;
	     {1'd0,  6'd35}: s1rd8 <= 63;
	     {1'd0,  6'd36}: s1rd8 <= 44;
	     {1'd0,  6'd37}: s1rd8 <= 45;
	     {1'd0,  6'd38}: s1rd8 <= 46;
	     {1'd0,  6'd39}: s1rd8 <= 47;
	     {1'd0,  6'd40}: s1rd8 <= 28;
	     {1'd0,  6'd41}: s1rd8 <= 29;
	     {1'd0,  6'd42}: s1rd8 <= 30;
	     {1'd0,  6'd43}: s1rd8 <= 31;
	     {1'd0,  6'd44}: s1rd8 <= 12;
	     {1'd0,  6'd45}: s1rd8 <= 13;
	     {1'd0,  6'd46}: s1rd8 <= 14;
	     {1'd0,  6'd47}: s1rd8 <= 15;
	     {1'd0,  6'd48}: s1rd8 <= 56;
	     {1'd0,  6'd49}: s1rd8 <= 57;
	     {1'd0,  6'd50}: s1rd8 <= 58;
	     {1'd0,  6'd51}: s1rd8 <= 59;
	     {1'd0,  6'd52}: s1rd8 <= 40;
	     {1'd0,  6'd53}: s1rd8 <= 41;
	     {1'd0,  6'd54}: s1rd8 <= 42;
	     {1'd0,  6'd55}: s1rd8 <= 43;
	     {1'd0,  6'd56}: s1rd8 <= 24;
	     {1'd0,  6'd57}: s1rd8 <= 25;
	     {1'd0,  6'd58}: s1rd8 <= 26;
	     {1'd0,  6'd59}: s1rd8 <= 27;
	     {1'd0,  6'd60}: s1rd8 <= 8;
	     {1'd0,  6'd61}: s1rd8 <= 9;
	     {1'd0,  6'd62}: s1rd8 <= 10;
	     {1'd0,  6'd63}: s1rd8 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd8 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd9 <= 36;
	     {1'd0,  6'd1}: s1rd9 <= 37;
	     {1'd0,  6'd2}: s1rd9 <= 38;
	     {1'd0,  6'd3}: s1rd9 <= 39;
	     {1'd0,  6'd4}: s1rd9 <= 52;
	     {1'd0,  6'd5}: s1rd9 <= 53;
	     {1'd0,  6'd6}: s1rd9 <= 54;
	     {1'd0,  6'd7}: s1rd9 <= 55;
	     {1'd0,  6'd8}: s1rd9 <= 4;
	     {1'd0,  6'd9}: s1rd9 <= 5;
	     {1'd0,  6'd10}: s1rd9 <= 6;
	     {1'd0,  6'd11}: s1rd9 <= 7;
	     {1'd0,  6'd12}: s1rd9 <= 20;
	     {1'd0,  6'd13}: s1rd9 <= 21;
	     {1'd0,  6'd14}: s1rd9 <= 22;
	     {1'd0,  6'd15}: s1rd9 <= 23;
	     {1'd0,  6'd16}: s1rd9 <= 32;
	     {1'd0,  6'd17}: s1rd9 <= 33;
	     {1'd0,  6'd18}: s1rd9 <= 34;
	     {1'd0,  6'd19}: s1rd9 <= 35;
	     {1'd0,  6'd20}: s1rd9 <= 48;
	     {1'd0,  6'd21}: s1rd9 <= 49;
	     {1'd0,  6'd22}: s1rd9 <= 50;
	     {1'd0,  6'd23}: s1rd9 <= 51;
	     {1'd0,  6'd24}: s1rd9 <= 0;
	     {1'd0,  6'd25}: s1rd9 <= 1;
	     {1'd0,  6'd26}: s1rd9 <= 2;
	     {1'd0,  6'd27}: s1rd9 <= 3;
	     {1'd0,  6'd28}: s1rd9 <= 16;
	     {1'd0,  6'd29}: s1rd9 <= 17;
	     {1'd0,  6'd30}: s1rd9 <= 18;
	     {1'd0,  6'd31}: s1rd9 <= 19;
	     {1'd0,  6'd32}: s1rd9 <= 44;
	     {1'd0,  6'd33}: s1rd9 <= 45;
	     {1'd0,  6'd34}: s1rd9 <= 46;
	     {1'd0,  6'd35}: s1rd9 <= 47;
	     {1'd0,  6'd36}: s1rd9 <= 60;
	     {1'd0,  6'd37}: s1rd9 <= 61;
	     {1'd0,  6'd38}: s1rd9 <= 62;
	     {1'd0,  6'd39}: s1rd9 <= 63;
	     {1'd0,  6'd40}: s1rd9 <= 12;
	     {1'd0,  6'd41}: s1rd9 <= 13;
	     {1'd0,  6'd42}: s1rd9 <= 14;
	     {1'd0,  6'd43}: s1rd9 <= 15;
	     {1'd0,  6'd44}: s1rd9 <= 28;
	     {1'd0,  6'd45}: s1rd9 <= 29;
	     {1'd0,  6'd46}: s1rd9 <= 30;
	     {1'd0,  6'd47}: s1rd9 <= 31;
	     {1'd0,  6'd48}: s1rd9 <= 40;
	     {1'd0,  6'd49}: s1rd9 <= 41;
	     {1'd0,  6'd50}: s1rd9 <= 42;
	     {1'd0,  6'd51}: s1rd9 <= 43;
	     {1'd0,  6'd52}: s1rd9 <= 56;
	     {1'd0,  6'd53}: s1rd9 <= 57;
	     {1'd0,  6'd54}: s1rd9 <= 58;
	     {1'd0,  6'd55}: s1rd9 <= 59;
	     {1'd0,  6'd56}: s1rd9 <= 8;
	     {1'd0,  6'd57}: s1rd9 <= 9;
	     {1'd0,  6'd58}: s1rd9 <= 10;
	     {1'd0,  6'd59}: s1rd9 <= 11;
	     {1'd0,  6'd60}: s1rd9 <= 24;
	     {1'd0,  6'd61}: s1rd9 <= 25;
	     {1'd0,  6'd62}: s1rd9 <= 26;
	     {1'd0,  6'd63}: s1rd9 <= 27;
      endcase      
   end

// synthesis attribute rom_style of s1rd9 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd10 <= 20;
	     {1'd0,  6'd1}: s1rd10 <= 21;
	     {1'd0,  6'd2}: s1rd10 <= 22;
	     {1'd0,  6'd3}: s1rd10 <= 23;
	     {1'd0,  6'd4}: s1rd10 <= 4;
	     {1'd0,  6'd5}: s1rd10 <= 5;
	     {1'd0,  6'd6}: s1rd10 <= 6;
	     {1'd0,  6'd7}: s1rd10 <= 7;
	     {1'd0,  6'd8}: s1rd10 <= 52;
	     {1'd0,  6'd9}: s1rd10 <= 53;
	     {1'd0,  6'd10}: s1rd10 <= 54;
	     {1'd0,  6'd11}: s1rd10 <= 55;
	     {1'd0,  6'd12}: s1rd10 <= 36;
	     {1'd0,  6'd13}: s1rd10 <= 37;
	     {1'd0,  6'd14}: s1rd10 <= 38;
	     {1'd0,  6'd15}: s1rd10 <= 39;
	     {1'd0,  6'd16}: s1rd10 <= 16;
	     {1'd0,  6'd17}: s1rd10 <= 17;
	     {1'd0,  6'd18}: s1rd10 <= 18;
	     {1'd0,  6'd19}: s1rd10 <= 19;
	     {1'd0,  6'd20}: s1rd10 <= 0;
	     {1'd0,  6'd21}: s1rd10 <= 1;
	     {1'd0,  6'd22}: s1rd10 <= 2;
	     {1'd0,  6'd23}: s1rd10 <= 3;
	     {1'd0,  6'd24}: s1rd10 <= 48;
	     {1'd0,  6'd25}: s1rd10 <= 49;
	     {1'd0,  6'd26}: s1rd10 <= 50;
	     {1'd0,  6'd27}: s1rd10 <= 51;
	     {1'd0,  6'd28}: s1rd10 <= 32;
	     {1'd0,  6'd29}: s1rd10 <= 33;
	     {1'd0,  6'd30}: s1rd10 <= 34;
	     {1'd0,  6'd31}: s1rd10 <= 35;
	     {1'd0,  6'd32}: s1rd10 <= 28;
	     {1'd0,  6'd33}: s1rd10 <= 29;
	     {1'd0,  6'd34}: s1rd10 <= 30;
	     {1'd0,  6'd35}: s1rd10 <= 31;
	     {1'd0,  6'd36}: s1rd10 <= 12;
	     {1'd0,  6'd37}: s1rd10 <= 13;
	     {1'd0,  6'd38}: s1rd10 <= 14;
	     {1'd0,  6'd39}: s1rd10 <= 15;
	     {1'd0,  6'd40}: s1rd10 <= 60;
	     {1'd0,  6'd41}: s1rd10 <= 61;
	     {1'd0,  6'd42}: s1rd10 <= 62;
	     {1'd0,  6'd43}: s1rd10 <= 63;
	     {1'd0,  6'd44}: s1rd10 <= 44;
	     {1'd0,  6'd45}: s1rd10 <= 45;
	     {1'd0,  6'd46}: s1rd10 <= 46;
	     {1'd0,  6'd47}: s1rd10 <= 47;
	     {1'd0,  6'd48}: s1rd10 <= 24;
	     {1'd0,  6'd49}: s1rd10 <= 25;
	     {1'd0,  6'd50}: s1rd10 <= 26;
	     {1'd0,  6'd51}: s1rd10 <= 27;
	     {1'd0,  6'd52}: s1rd10 <= 8;
	     {1'd0,  6'd53}: s1rd10 <= 9;
	     {1'd0,  6'd54}: s1rd10 <= 10;
	     {1'd0,  6'd55}: s1rd10 <= 11;
	     {1'd0,  6'd56}: s1rd10 <= 56;
	     {1'd0,  6'd57}: s1rd10 <= 57;
	     {1'd0,  6'd58}: s1rd10 <= 58;
	     {1'd0,  6'd59}: s1rd10 <= 59;
	     {1'd0,  6'd60}: s1rd10 <= 40;
	     {1'd0,  6'd61}: s1rd10 <= 41;
	     {1'd0,  6'd62}: s1rd10 <= 42;
	     {1'd0,  6'd63}: s1rd10 <= 43;
      endcase      
   end

// synthesis attribute rom_style of s1rd10 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd11 <= 4;
	     {1'd0,  6'd1}: s1rd11 <= 5;
	     {1'd0,  6'd2}: s1rd11 <= 6;
	     {1'd0,  6'd3}: s1rd11 <= 7;
	     {1'd0,  6'd4}: s1rd11 <= 20;
	     {1'd0,  6'd5}: s1rd11 <= 21;
	     {1'd0,  6'd6}: s1rd11 <= 22;
	     {1'd0,  6'd7}: s1rd11 <= 23;
	     {1'd0,  6'd8}: s1rd11 <= 36;
	     {1'd0,  6'd9}: s1rd11 <= 37;
	     {1'd0,  6'd10}: s1rd11 <= 38;
	     {1'd0,  6'd11}: s1rd11 <= 39;
	     {1'd0,  6'd12}: s1rd11 <= 52;
	     {1'd0,  6'd13}: s1rd11 <= 53;
	     {1'd0,  6'd14}: s1rd11 <= 54;
	     {1'd0,  6'd15}: s1rd11 <= 55;
	     {1'd0,  6'd16}: s1rd11 <= 0;
	     {1'd0,  6'd17}: s1rd11 <= 1;
	     {1'd0,  6'd18}: s1rd11 <= 2;
	     {1'd0,  6'd19}: s1rd11 <= 3;
	     {1'd0,  6'd20}: s1rd11 <= 16;
	     {1'd0,  6'd21}: s1rd11 <= 17;
	     {1'd0,  6'd22}: s1rd11 <= 18;
	     {1'd0,  6'd23}: s1rd11 <= 19;
	     {1'd0,  6'd24}: s1rd11 <= 32;
	     {1'd0,  6'd25}: s1rd11 <= 33;
	     {1'd0,  6'd26}: s1rd11 <= 34;
	     {1'd0,  6'd27}: s1rd11 <= 35;
	     {1'd0,  6'd28}: s1rd11 <= 48;
	     {1'd0,  6'd29}: s1rd11 <= 49;
	     {1'd0,  6'd30}: s1rd11 <= 50;
	     {1'd0,  6'd31}: s1rd11 <= 51;
	     {1'd0,  6'd32}: s1rd11 <= 12;
	     {1'd0,  6'd33}: s1rd11 <= 13;
	     {1'd0,  6'd34}: s1rd11 <= 14;
	     {1'd0,  6'd35}: s1rd11 <= 15;
	     {1'd0,  6'd36}: s1rd11 <= 28;
	     {1'd0,  6'd37}: s1rd11 <= 29;
	     {1'd0,  6'd38}: s1rd11 <= 30;
	     {1'd0,  6'd39}: s1rd11 <= 31;
	     {1'd0,  6'd40}: s1rd11 <= 44;
	     {1'd0,  6'd41}: s1rd11 <= 45;
	     {1'd0,  6'd42}: s1rd11 <= 46;
	     {1'd0,  6'd43}: s1rd11 <= 47;
	     {1'd0,  6'd44}: s1rd11 <= 60;
	     {1'd0,  6'd45}: s1rd11 <= 61;
	     {1'd0,  6'd46}: s1rd11 <= 62;
	     {1'd0,  6'd47}: s1rd11 <= 63;
	     {1'd0,  6'd48}: s1rd11 <= 8;
	     {1'd0,  6'd49}: s1rd11 <= 9;
	     {1'd0,  6'd50}: s1rd11 <= 10;
	     {1'd0,  6'd51}: s1rd11 <= 11;
	     {1'd0,  6'd52}: s1rd11 <= 24;
	     {1'd0,  6'd53}: s1rd11 <= 25;
	     {1'd0,  6'd54}: s1rd11 <= 26;
	     {1'd0,  6'd55}: s1rd11 <= 27;
	     {1'd0,  6'd56}: s1rd11 <= 40;
	     {1'd0,  6'd57}: s1rd11 <= 41;
	     {1'd0,  6'd58}: s1rd11 <= 42;
	     {1'd0,  6'd59}: s1rd11 <= 43;
	     {1'd0,  6'd60}: s1rd11 <= 56;
	     {1'd0,  6'd61}: s1rd11 <= 57;
	     {1'd0,  6'd62}: s1rd11 <= 58;
	     {1'd0,  6'd63}: s1rd11 <= 59;
      endcase      
   end

// synthesis attribute rom_style of s1rd11 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd12 <= 48;
	     {1'd0,  6'd1}: s1rd12 <= 49;
	     {1'd0,  6'd2}: s1rd12 <= 50;
	     {1'd0,  6'd3}: s1rd12 <= 51;
	     {1'd0,  6'd4}: s1rd12 <= 32;
	     {1'd0,  6'd5}: s1rd12 <= 33;
	     {1'd0,  6'd6}: s1rd12 <= 34;
	     {1'd0,  6'd7}: s1rd12 <= 35;
	     {1'd0,  6'd8}: s1rd12 <= 16;
	     {1'd0,  6'd9}: s1rd12 <= 17;
	     {1'd0,  6'd10}: s1rd12 <= 18;
	     {1'd0,  6'd11}: s1rd12 <= 19;
	     {1'd0,  6'd12}: s1rd12 <= 0;
	     {1'd0,  6'd13}: s1rd12 <= 1;
	     {1'd0,  6'd14}: s1rd12 <= 2;
	     {1'd0,  6'd15}: s1rd12 <= 3;
	     {1'd0,  6'd16}: s1rd12 <= 52;
	     {1'd0,  6'd17}: s1rd12 <= 53;
	     {1'd0,  6'd18}: s1rd12 <= 54;
	     {1'd0,  6'd19}: s1rd12 <= 55;
	     {1'd0,  6'd20}: s1rd12 <= 36;
	     {1'd0,  6'd21}: s1rd12 <= 37;
	     {1'd0,  6'd22}: s1rd12 <= 38;
	     {1'd0,  6'd23}: s1rd12 <= 39;
	     {1'd0,  6'd24}: s1rd12 <= 20;
	     {1'd0,  6'd25}: s1rd12 <= 21;
	     {1'd0,  6'd26}: s1rd12 <= 22;
	     {1'd0,  6'd27}: s1rd12 <= 23;
	     {1'd0,  6'd28}: s1rd12 <= 4;
	     {1'd0,  6'd29}: s1rd12 <= 5;
	     {1'd0,  6'd30}: s1rd12 <= 6;
	     {1'd0,  6'd31}: s1rd12 <= 7;
	     {1'd0,  6'd32}: s1rd12 <= 56;
	     {1'd0,  6'd33}: s1rd12 <= 57;
	     {1'd0,  6'd34}: s1rd12 <= 58;
	     {1'd0,  6'd35}: s1rd12 <= 59;
	     {1'd0,  6'd36}: s1rd12 <= 40;
	     {1'd0,  6'd37}: s1rd12 <= 41;
	     {1'd0,  6'd38}: s1rd12 <= 42;
	     {1'd0,  6'd39}: s1rd12 <= 43;
	     {1'd0,  6'd40}: s1rd12 <= 24;
	     {1'd0,  6'd41}: s1rd12 <= 25;
	     {1'd0,  6'd42}: s1rd12 <= 26;
	     {1'd0,  6'd43}: s1rd12 <= 27;
	     {1'd0,  6'd44}: s1rd12 <= 8;
	     {1'd0,  6'd45}: s1rd12 <= 9;
	     {1'd0,  6'd46}: s1rd12 <= 10;
	     {1'd0,  6'd47}: s1rd12 <= 11;
	     {1'd0,  6'd48}: s1rd12 <= 60;
	     {1'd0,  6'd49}: s1rd12 <= 61;
	     {1'd0,  6'd50}: s1rd12 <= 62;
	     {1'd0,  6'd51}: s1rd12 <= 63;
	     {1'd0,  6'd52}: s1rd12 <= 44;
	     {1'd0,  6'd53}: s1rd12 <= 45;
	     {1'd0,  6'd54}: s1rd12 <= 46;
	     {1'd0,  6'd55}: s1rd12 <= 47;
	     {1'd0,  6'd56}: s1rd12 <= 28;
	     {1'd0,  6'd57}: s1rd12 <= 29;
	     {1'd0,  6'd58}: s1rd12 <= 30;
	     {1'd0,  6'd59}: s1rd12 <= 31;
	     {1'd0,  6'd60}: s1rd12 <= 12;
	     {1'd0,  6'd61}: s1rd12 <= 13;
	     {1'd0,  6'd62}: s1rd12 <= 14;
	     {1'd0,  6'd63}: s1rd12 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd12 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd13 <= 32;
	     {1'd0,  6'd1}: s1rd13 <= 33;
	     {1'd0,  6'd2}: s1rd13 <= 34;
	     {1'd0,  6'd3}: s1rd13 <= 35;
	     {1'd0,  6'd4}: s1rd13 <= 48;
	     {1'd0,  6'd5}: s1rd13 <= 49;
	     {1'd0,  6'd6}: s1rd13 <= 50;
	     {1'd0,  6'd7}: s1rd13 <= 51;
	     {1'd0,  6'd8}: s1rd13 <= 0;
	     {1'd0,  6'd9}: s1rd13 <= 1;
	     {1'd0,  6'd10}: s1rd13 <= 2;
	     {1'd0,  6'd11}: s1rd13 <= 3;
	     {1'd0,  6'd12}: s1rd13 <= 16;
	     {1'd0,  6'd13}: s1rd13 <= 17;
	     {1'd0,  6'd14}: s1rd13 <= 18;
	     {1'd0,  6'd15}: s1rd13 <= 19;
	     {1'd0,  6'd16}: s1rd13 <= 36;
	     {1'd0,  6'd17}: s1rd13 <= 37;
	     {1'd0,  6'd18}: s1rd13 <= 38;
	     {1'd0,  6'd19}: s1rd13 <= 39;
	     {1'd0,  6'd20}: s1rd13 <= 52;
	     {1'd0,  6'd21}: s1rd13 <= 53;
	     {1'd0,  6'd22}: s1rd13 <= 54;
	     {1'd0,  6'd23}: s1rd13 <= 55;
	     {1'd0,  6'd24}: s1rd13 <= 4;
	     {1'd0,  6'd25}: s1rd13 <= 5;
	     {1'd0,  6'd26}: s1rd13 <= 6;
	     {1'd0,  6'd27}: s1rd13 <= 7;
	     {1'd0,  6'd28}: s1rd13 <= 20;
	     {1'd0,  6'd29}: s1rd13 <= 21;
	     {1'd0,  6'd30}: s1rd13 <= 22;
	     {1'd0,  6'd31}: s1rd13 <= 23;
	     {1'd0,  6'd32}: s1rd13 <= 40;
	     {1'd0,  6'd33}: s1rd13 <= 41;
	     {1'd0,  6'd34}: s1rd13 <= 42;
	     {1'd0,  6'd35}: s1rd13 <= 43;
	     {1'd0,  6'd36}: s1rd13 <= 56;
	     {1'd0,  6'd37}: s1rd13 <= 57;
	     {1'd0,  6'd38}: s1rd13 <= 58;
	     {1'd0,  6'd39}: s1rd13 <= 59;
	     {1'd0,  6'd40}: s1rd13 <= 8;
	     {1'd0,  6'd41}: s1rd13 <= 9;
	     {1'd0,  6'd42}: s1rd13 <= 10;
	     {1'd0,  6'd43}: s1rd13 <= 11;
	     {1'd0,  6'd44}: s1rd13 <= 24;
	     {1'd0,  6'd45}: s1rd13 <= 25;
	     {1'd0,  6'd46}: s1rd13 <= 26;
	     {1'd0,  6'd47}: s1rd13 <= 27;
	     {1'd0,  6'd48}: s1rd13 <= 44;
	     {1'd0,  6'd49}: s1rd13 <= 45;
	     {1'd0,  6'd50}: s1rd13 <= 46;
	     {1'd0,  6'd51}: s1rd13 <= 47;
	     {1'd0,  6'd52}: s1rd13 <= 60;
	     {1'd0,  6'd53}: s1rd13 <= 61;
	     {1'd0,  6'd54}: s1rd13 <= 62;
	     {1'd0,  6'd55}: s1rd13 <= 63;
	     {1'd0,  6'd56}: s1rd13 <= 12;
	     {1'd0,  6'd57}: s1rd13 <= 13;
	     {1'd0,  6'd58}: s1rd13 <= 14;
	     {1'd0,  6'd59}: s1rd13 <= 15;
	     {1'd0,  6'd60}: s1rd13 <= 28;
	     {1'd0,  6'd61}: s1rd13 <= 29;
	     {1'd0,  6'd62}: s1rd13 <= 30;
	     {1'd0,  6'd63}: s1rd13 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd13 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd14 <= 16;
	     {1'd0,  6'd1}: s1rd14 <= 17;
	     {1'd0,  6'd2}: s1rd14 <= 18;
	     {1'd0,  6'd3}: s1rd14 <= 19;
	     {1'd0,  6'd4}: s1rd14 <= 0;
	     {1'd0,  6'd5}: s1rd14 <= 1;
	     {1'd0,  6'd6}: s1rd14 <= 2;
	     {1'd0,  6'd7}: s1rd14 <= 3;
	     {1'd0,  6'd8}: s1rd14 <= 48;
	     {1'd0,  6'd9}: s1rd14 <= 49;
	     {1'd0,  6'd10}: s1rd14 <= 50;
	     {1'd0,  6'd11}: s1rd14 <= 51;
	     {1'd0,  6'd12}: s1rd14 <= 32;
	     {1'd0,  6'd13}: s1rd14 <= 33;
	     {1'd0,  6'd14}: s1rd14 <= 34;
	     {1'd0,  6'd15}: s1rd14 <= 35;
	     {1'd0,  6'd16}: s1rd14 <= 20;
	     {1'd0,  6'd17}: s1rd14 <= 21;
	     {1'd0,  6'd18}: s1rd14 <= 22;
	     {1'd0,  6'd19}: s1rd14 <= 23;
	     {1'd0,  6'd20}: s1rd14 <= 4;
	     {1'd0,  6'd21}: s1rd14 <= 5;
	     {1'd0,  6'd22}: s1rd14 <= 6;
	     {1'd0,  6'd23}: s1rd14 <= 7;
	     {1'd0,  6'd24}: s1rd14 <= 52;
	     {1'd0,  6'd25}: s1rd14 <= 53;
	     {1'd0,  6'd26}: s1rd14 <= 54;
	     {1'd0,  6'd27}: s1rd14 <= 55;
	     {1'd0,  6'd28}: s1rd14 <= 36;
	     {1'd0,  6'd29}: s1rd14 <= 37;
	     {1'd0,  6'd30}: s1rd14 <= 38;
	     {1'd0,  6'd31}: s1rd14 <= 39;
	     {1'd0,  6'd32}: s1rd14 <= 24;
	     {1'd0,  6'd33}: s1rd14 <= 25;
	     {1'd0,  6'd34}: s1rd14 <= 26;
	     {1'd0,  6'd35}: s1rd14 <= 27;
	     {1'd0,  6'd36}: s1rd14 <= 8;
	     {1'd0,  6'd37}: s1rd14 <= 9;
	     {1'd0,  6'd38}: s1rd14 <= 10;
	     {1'd0,  6'd39}: s1rd14 <= 11;
	     {1'd0,  6'd40}: s1rd14 <= 56;
	     {1'd0,  6'd41}: s1rd14 <= 57;
	     {1'd0,  6'd42}: s1rd14 <= 58;
	     {1'd0,  6'd43}: s1rd14 <= 59;
	     {1'd0,  6'd44}: s1rd14 <= 40;
	     {1'd0,  6'd45}: s1rd14 <= 41;
	     {1'd0,  6'd46}: s1rd14 <= 42;
	     {1'd0,  6'd47}: s1rd14 <= 43;
	     {1'd0,  6'd48}: s1rd14 <= 28;
	     {1'd0,  6'd49}: s1rd14 <= 29;
	     {1'd0,  6'd50}: s1rd14 <= 30;
	     {1'd0,  6'd51}: s1rd14 <= 31;
	     {1'd0,  6'd52}: s1rd14 <= 12;
	     {1'd0,  6'd53}: s1rd14 <= 13;
	     {1'd0,  6'd54}: s1rd14 <= 14;
	     {1'd0,  6'd55}: s1rd14 <= 15;
	     {1'd0,  6'd56}: s1rd14 <= 60;
	     {1'd0,  6'd57}: s1rd14 <= 61;
	     {1'd0,  6'd58}: s1rd14 <= 62;
	     {1'd0,  6'd59}: s1rd14 <= 63;
	     {1'd0,  6'd60}: s1rd14 <= 44;
	     {1'd0,  6'd61}: s1rd14 <= 45;
	     {1'd0,  6'd62}: s1rd14 <= 46;
	     {1'd0,  6'd63}: s1rd14 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd14 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd15 <= 0;
	     {1'd0,  6'd1}: s1rd15 <= 1;
	     {1'd0,  6'd2}: s1rd15 <= 2;
	     {1'd0,  6'd3}: s1rd15 <= 3;
	     {1'd0,  6'd4}: s1rd15 <= 16;
	     {1'd0,  6'd5}: s1rd15 <= 17;
	     {1'd0,  6'd6}: s1rd15 <= 18;
	     {1'd0,  6'd7}: s1rd15 <= 19;
	     {1'd0,  6'd8}: s1rd15 <= 32;
	     {1'd0,  6'd9}: s1rd15 <= 33;
	     {1'd0,  6'd10}: s1rd15 <= 34;
	     {1'd0,  6'd11}: s1rd15 <= 35;
	     {1'd0,  6'd12}: s1rd15 <= 48;
	     {1'd0,  6'd13}: s1rd15 <= 49;
	     {1'd0,  6'd14}: s1rd15 <= 50;
	     {1'd0,  6'd15}: s1rd15 <= 51;
	     {1'd0,  6'd16}: s1rd15 <= 4;
	     {1'd0,  6'd17}: s1rd15 <= 5;
	     {1'd0,  6'd18}: s1rd15 <= 6;
	     {1'd0,  6'd19}: s1rd15 <= 7;
	     {1'd0,  6'd20}: s1rd15 <= 20;
	     {1'd0,  6'd21}: s1rd15 <= 21;
	     {1'd0,  6'd22}: s1rd15 <= 22;
	     {1'd0,  6'd23}: s1rd15 <= 23;
	     {1'd0,  6'd24}: s1rd15 <= 36;
	     {1'd0,  6'd25}: s1rd15 <= 37;
	     {1'd0,  6'd26}: s1rd15 <= 38;
	     {1'd0,  6'd27}: s1rd15 <= 39;
	     {1'd0,  6'd28}: s1rd15 <= 52;
	     {1'd0,  6'd29}: s1rd15 <= 53;
	     {1'd0,  6'd30}: s1rd15 <= 54;
	     {1'd0,  6'd31}: s1rd15 <= 55;
	     {1'd0,  6'd32}: s1rd15 <= 8;
	     {1'd0,  6'd33}: s1rd15 <= 9;
	     {1'd0,  6'd34}: s1rd15 <= 10;
	     {1'd0,  6'd35}: s1rd15 <= 11;
	     {1'd0,  6'd36}: s1rd15 <= 24;
	     {1'd0,  6'd37}: s1rd15 <= 25;
	     {1'd0,  6'd38}: s1rd15 <= 26;
	     {1'd0,  6'd39}: s1rd15 <= 27;
	     {1'd0,  6'd40}: s1rd15 <= 40;
	     {1'd0,  6'd41}: s1rd15 <= 41;
	     {1'd0,  6'd42}: s1rd15 <= 42;
	     {1'd0,  6'd43}: s1rd15 <= 43;
	     {1'd0,  6'd44}: s1rd15 <= 56;
	     {1'd0,  6'd45}: s1rd15 <= 57;
	     {1'd0,  6'd46}: s1rd15 <= 58;
	     {1'd0,  6'd47}: s1rd15 <= 59;
	     {1'd0,  6'd48}: s1rd15 <= 12;
	     {1'd0,  6'd49}: s1rd15 <= 13;
	     {1'd0,  6'd50}: s1rd15 <= 14;
	     {1'd0,  6'd51}: s1rd15 <= 15;
	     {1'd0,  6'd52}: s1rd15 <= 28;
	     {1'd0,  6'd53}: s1rd15 <= 29;
	     {1'd0,  6'd54}: s1rd15 <= 30;
	     {1'd0,  6'd55}: s1rd15 <= 31;
	     {1'd0,  6'd56}: s1rd15 <= 44;
	     {1'd0,  6'd57}: s1rd15 <= 45;
	     {1'd0,  6'd58}: s1rd15 <= 46;
	     {1'd0,  6'd59}: s1rd15 <= 47;
	     {1'd0,  6'd60}: s1rd15 <= 60;
	     {1'd0,  6'd61}: s1rd15 <= 61;
	     {1'd0,  6'd62}: s1rd15 <= 62;
	     {1'd0,  6'd63}: s1rd15 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd15 is "block"
    swNet7813 sw(tm0_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7, t8, s8, t9, s9, t10, s10, t11, s11, t12, s12, t13, s13, t14, s14, t15, s15);

   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr0 <= 60;
	      {1'd0, 6'd1}: s2wr0 <= 61;
	      {1'd0, 6'd2}: s2wr0 <= 62;
	      {1'd0, 6'd3}: s2wr0 <= 63;
	      {1'd0, 6'd4}: s2wr0 <= 44;
	      {1'd0, 6'd5}: s2wr0 <= 45;
	      {1'd0, 6'd6}: s2wr0 <= 46;
	      {1'd0, 6'd7}: s2wr0 <= 47;
	      {1'd0, 6'd8}: s2wr0 <= 28;
	      {1'd0, 6'd9}: s2wr0 <= 29;
	      {1'd0, 6'd10}: s2wr0 <= 30;
	      {1'd0, 6'd11}: s2wr0 <= 31;
	      {1'd0, 6'd12}: s2wr0 <= 12;
	      {1'd0, 6'd13}: s2wr0 <= 13;
	      {1'd0, 6'd14}: s2wr0 <= 14;
	      {1'd0, 6'd15}: s2wr0 <= 15;
	      {1'd0, 6'd16}: s2wr0 <= 56;
	      {1'd0, 6'd17}: s2wr0 <= 57;
	      {1'd0, 6'd18}: s2wr0 <= 58;
	      {1'd0, 6'd19}: s2wr0 <= 59;
	      {1'd0, 6'd20}: s2wr0 <= 40;
	      {1'd0, 6'd21}: s2wr0 <= 41;
	      {1'd0, 6'd22}: s2wr0 <= 42;
	      {1'd0, 6'd23}: s2wr0 <= 43;
	      {1'd0, 6'd24}: s2wr0 <= 24;
	      {1'd0, 6'd25}: s2wr0 <= 25;
	      {1'd0, 6'd26}: s2wr0 <= 26;
	      {1'd0, 6'd27}: s2wr0 <= 27;
	      {1'd0, 6'd28}: s2wr0 <= 8;
	      {1'd0, 6'd29}: s2wr0 <= 9;
	      {1'd0, 6'd30}: s2wr0 <= 10;
	      {1'd0, 6'd31}: s2wr0 <= 11;
	      {1'd0, 6'd32}: s2wr0 <= 52;
	      {1'd0, 6'd33}: s2wr0 <= 53;
	      {1'd0, 6'd34}: s2wr0 <= 54;
	      {1'd0, 6'd35}: s2wr0 <= 55;
	      {1'd0, 6'd36}: s2wr0 <= 36;
	      {1'd0, 6'd37}: s2wr0 <= 37;
	      {1'd0, 6'd38}: s2wr0 <= 38;
	      {1'd0, 6'd39}: s2wr0 <= 39;
	      {1'd0, 6'd40}: s2wr0 <= 20;
	      {1'd0, 6'd41}: s2wr0 <= 21;
	      {1'd0, 6'd42}: s2wr0 <= 22;
	      {1'd0, 6'd43}: s2wr0 <= 23;
	      {1'd0, 6'd44}: s2wr0 <= 4;
	      {1'd0, 6'd45}: s2wr0 <= 5;
	      {1'd0, 6'd46}: s2wr0 <= 6;
	      {1'd0, 6'd47}: s2wr0 <= 7;
	      {1'd0, 6'd48}: s2wr0 <= 48;
	      {1'd0, 6'd49}: s2wr0 <= 49;
	      {1'd0, 6'd50}: s2wr0 <= 50;
	      {1'd0, 6'd51}: s2wr0 <= 51;
	      {1'd0, 6'd52}: s2wr0 <= 32;
	      {1'd0, 6'd53}: s2wr0 <= 33;
	      {1'd0, 6'd54}: s2wr0 <= 34;
	      {1'd0, 6'd55}: s2wr0 <= 35;
	      {1'd0, 6'd56}: s2wr0 <= 16;
	      {1'd0, 6'd57}: s2wr0 <= 17;
	      {1'd0, 6'd58}: s2wr0 <= 18;
	      {1'd0, 6'd59}: s2wr0 <= 19;
	      {1'd0, 6'd60}: s2wr0 <= 0;
	      {1'd0, 6'd61}: s2wr0 <= 1;
	      {1'd0, 6'd62}: s2wr0 <= 2;
	      {1'd0, 6'd63}: s2wr0 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr1 <= 44;
	      {1'd0, 6'd1}: s2wr1 <= 45;
	      {1'd0, 6'd2}: s2wr1 <= 46;
	      {1'd0, 6'd3}: s2wr1 <= 47;
	      {1'd0, 6'd4}: s2wr1 <= 60;
	      {1'd0, 6'd5}: s2wr1 <= 61;
	      {1'd0, 6'd6}: s2wr1 <= 62;
	      {1'd0, 6'd7}: s2wr1 <= 63;
	      {1'd0, 6'd8}: s2wr1 <= 12;
	      {1'd0, 6'd9}: s2wr1 <= 13;
	      {1'd0, 6'd10}: s2wr1 <= 14;
	      {1'd0, 6'd11}: s2wr1 <= 15;
	      {1'd0, 6'd12}: s2wr1 <= 28;
	      {1'd0, 6'd13}: s2wr1 <= 29;
	      {1'd0, 6'd14}: s2wr1 <= 30;
	      {1'd0, 6'd15}: s2wr1 <= 31;
	      {1'd0, 6'd16}: s2wr1 <= 40;
	      {1'd0, 6'd17}: s2wr1 <= 41;
	      {1'd0, 6'd18}: s2wr1 <= 42;
	      {1'd0, 6'd19}: s2wr1 <= 43;
	      {1'd0, 6'd20}: s2wr1 <= 56;
	      {1'd0, 6'd21}: s2wr1 <= 57;
	      {1'd0, 6'd22}: s2wr1 <= 58;
	      {1'd0, 6'd23}: s2wr1 <= 59;
	      {1'd0, 6'd24}: s2wr1 <= 8;
	      {1'd0, 6'd25}: s2wr1 <= 9;
	      {1'd0, 6'd26}: s2wr1 <= 10;
	      {1'd0, 6'd27}: s2wr1 <= 11;
	      {1'd0, 6'd28}: s2wr1 <= 24;
	      {1'd0, 6'd29}: s2wr1 <= 25;
	      {1'd0, 6'd30}: s2wr1 <= 26;
	      {1'd0, 6'd31}: s2wr1 <= 27;
	      {1'd0, 6'd32}: s2wr1 <= 36;
	      {1'd0, 6'd33}: s2wr1 <= 37;
	      {1'd0, 6'd34}: s2wr1 <= 38;
	      {1'd0, 6'd35}: s2wr1 <= 39;
	      {1'd0, 6'd36}: s2wr1 <= 52;
	      {1'd0, 6'd37}: s2wr1 <= 53;
	      {1'd0, 6'd38}: s2wr1 <= 54;
	      {1'd0, 6'd39}: s2wr1 <= 55;
	      {1'd0, 6'd40}: s2wr1 <= 4;
	      {1'd0, 6'd41}: s2wr1 <= 5;
	      {1'd0, 6'd42}: s2wr1 <= 6;
	      {1'd0, 6'd43}: s2wr1 <= 7;
	      {1'd0, 6'd44}: s2wr1 <= 20;
	      {1'd0, 6'd45}: s2wr1 <= 21;
	      {1'd0, 6'd46}: s2wr1 <= 22;
	      {1'd0, 6'd47}: s2wr1 <= 23;
	      {1'd0, 6'd48}: s2wr1 <= 32;
	      {1'd0, 6'd49}: s2wr1 <= 33;
	      {1'd0, 6'd50}: s2wr1 <= 34;
	      {1'd0, 6'd51}: s2wr1 <= 35;
	      {1'd0, 6'd52}: s2wr1 <= 48;
	      {1'd0, 6'd53}: s2wr1 <= 49;
	      {1'd0, 6'd54}: s2wr1 <= 50;
	      {1'd0, 6'd55}: s2wr1 <= 51;
	      {1'd0, 6'd56}: s2wr1 <= 0;
	      {1'd0, 6'd57}: s2wr1 <= 1;
	      {1'd0, 6'd58}: s2wr1 <= 2;
	      {1'd0, 6'd59}: s2wr1 <= 3;
	      {1'd0, 6'd60}: s2wr1 <= 16;
	      {1'd0, 6'd61}: s2wr1 <= 17;
	      {1'd0, 6'd62}: s2wr1 <= 18;
	      {1'd0, 6'd63}: s2wr1 <= 19;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr2 <= 28;
	      {1'd0, 6'd1}: s2wr2 <= 29;
	      {1'd0, 6'd2}: s2wr2 <= 30;
	      {1'd0, 6'd3}: s2wr2 <= 31;
	      {1'd0, 6'd4}: s2wr2 <= 12;
	      {1'd0, 6'd5}: s2wr2 <= 13;
	      {1'd0, 6'd6}: s2wr2 <= 14;
	      {1'd0, 6'd7}: s2wr2 <= 15;
	      {1'd0, 6'd8}: s2wr2 <= 60;
	      {1'd0, 6'd9}: s2wr2 <= 61;
	      {1'd0, 6'd10}: s2wr2 <= 62;
	      {1'd0, 6'd11}: s2wr2 <= 63;
	      {1'd0, 6'd12}: s2wr2 <= 44;
	      {1'd0, 6'd13}: s2wr2 <= 45;
	      {1'd0, 6'd14}: s2wr2 <= 46;
	      {1'd0, 6'd15}: s2wr2 <= 47;
	      {1'd0, 6'd16}: s2wr2 <= 24;
	      {1'd0, 6'd17}: s2wr2 <= 25;
	      {1'd0, 6'd18}: s2wr2 <= 26;
	      {1'd0, 6'd19}: s2wr2 <= 27;
	      {1'd0, 6'd20}: s2wr2 <= 8;
	      {1'd0, 6'd21}: s2wr2 <= 9;
	      {1'd0, 6'd22}: s2wr2 <= 10;
	      {1'd0, 6'd23}: s2wr2 <= 11;
	      {1'd0, 6'd24}: s2wr2 <= 56;
	      {1'd0, 6'd25}: s2wr2 <= 57;
	      {1'd0, 6'd26}: s2wr2 <= 58;
	      {1'd0, 6'd27}: s2wr2 <= 59;
	      {1'd0, 6'd28}: s2wr2 <= 40;
	      {1'd0, 6'd29}: s2wr2 <= 41;
	      {1'd0, 6'd30}: s2wr2 <= 42;
	      {1'd0, 6'd31}: s2wr2 <= 43;
	      {1'd0, 6'd32}: s2wr2 <= 20;
	      {1'd0, 6'd33}: s2wr2 <= 21;
	      {1'd0, 6'd34}: s2wr2 <= 22;
	      {1'd0, 6'd35}: s2wr2 <= 23;
	      {1'd0, 6'd36}: s2wr2 <= 4;
	      {1'd0, 6'd37}: s2wr2 <= 5;
	      {1'd0, 6'd38}: s2wr2 <= 6;
	      {1'd0, 6'd39}: s2wr2 <= 7;
	      {1'd0, 6'd40}: s2wr2 <= 52;
	      {1'd0, 6'd41}: s2wr2 <= 53;
	      {1'd0, 6'd42}: s2wr2 <= 54;
	      {1'd0, 6'd43}: s2wr2 <= 55;
	      {1'd0, 6'd44}: s2wr2 <= 36;
	      {1'd0, 6'd45}: s2wr2 <= 37;
	      {1'd0, 6'd46}: s2wr2 <= 38;
	      {1'd0, 6'd47}: s2wr2 <= 39;
	      {1'd0, 6'd48}: s2wr2 <= 16;
	      {1'd0, 6'd49}: s2wr2 <= 17;
	      {1'd0, 6'd50}: s2wr2 <= 18;
	      {1'd0, 6'd51}: s2wr2 <= 19;
	      {1'd0, 6'd52}: s2wr2 <= 0;
	      {1'd0, 6'd53}: s2wr2 <= 1;
	      {1'd0, 6'd54}: s2wr2 <= 2;
	      {1'd0, 6'd55}: s2wr2 <= 3;
	      {1'd0, 6'd56}: s2wr2 <= 48;
	      {1'd0, 6'd57}: s2wr2 <= 49;
	      {1'd0, 6'd58}: s2wr2 <= 50;
	      {1'd0, 6'd59}: s2wr2 <= 51;
	      {1'd0, 6'd60}: s2wr2 <= 32;
	      {1'd0, 6'd61}: s2wr2 <= 33;
	      {1'd0, 6'd62}: s2wr2 <= 34;
	      {1'd0, 6'd63}: s2wr2 <= 35;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr3 <= 12;
	      {1'd0, 6'd1}: s2wr3 <= 13;
	      {1'd0, 6'd2}: s2wr3 <= 14;
	      {1'd0, 6'd3}: s2wr3 <= 15;
	      {1'd0, 6'd4}: s2wr3 <= 28;
	      {1'd0, 6'd5}: s2wr3 <= 29;
	      {1'd0, 6'd6}: s2wr3 <= 30;
	      {1'd0, 6'd7}: s2wr3 <= 31;
	      {1'd0, 6'd8}: s2wr3 <= 44;
	      {1'd0, 6'd9}: s2wr3 <= 45;
	      {1'd0, 6'd10}: s2wr3 <= 46;
	      {1'd0, 6'd11}: s2wr3 <= 47;
	      {1'd0, 6'd12}: s2wr3 <= 60;
	      {1'd0, 6'd13}: s2wr3 <= 61;
	      {1'd0, 6'd14}: s2wr3 <= 62;
	      {1'd0, 6'd15}: s2wr3 <= 63;
	      {1'd0, 6'd16}: s2wr3 <= 8;
	      {1'd0, 6'd17}: s2wr3 <= 9;
	      {1'd0, 6'd18}: s2wr3 <= 10;
	      {1'd0, 6'd19}: s2wr3 <= 11;
	      {1'd0, 6'd20}: s2wr3 <= 24;
	      {1'd0, 6'd21}: s2wr3 <= 25;
	      {1'd0, 6'd22}: s2wr3 <= 26;
	      {1'd0, 6'd23}: s2wr3 <= 27;
	      {1'd0, 6'd24}: s2wr3 <= 40;
	      {1'd0, 6'd25}: s2wr3 <= 41;
	      {1'd0, 6'd26}: s2wr3 <= 42;
	      {1'd0, 6'd27}: s2wr3 <= 43;
	      {1'd0, 6'd28}: s2wr3 <= 56;
	      {1'd0, 6'd29}: s2wr3 <= 57;
	      {1'd0, 6'd30}: s2wr3 <= 58;
	      {1'd0, 6'd31}: s2wr3 <= 59;
	      {1'd0, 6'd32}: s2wr3 <= 4;
	      {1'd0, 6'd33}: s2wr3 <= 5;
	      {1'd0, 6'd34}: s2wr3 <= 6;
	      {1'd0, 6'd35}: s2wr3 <= 7;
	      {1'd0, 6'd36}: s2wr3 <= 20;
	      {1'd0, 6'd37}: s2wr3 <= 21;
	      {1'd0, 6'd38}: s2wr3 <= 22;
	      {1'd0, 6'd39}: s2wr3 <= 23;
	      {1'd0, 6'd40}: s2wr3 <= 36;
	      {1'd0, 6'd41}: s2wr3 <= 37;
	      {1'd0, 6'd42}: s2wr3 <= 38;
	      {1'd0, 6'd43}: s2wr3 <= 39;
	      {1'd0, 6'd44}: s2wr3 <= 52;
	      {1'd0, 6'd45}: s2wr3 <= 53;
	      {1'd0, 6'd46}: s2wr3 <= 54;
	      {1'd0, 6'd47}: s2wr3 <= 55;
	      {1'd0, 6'd48}: s2wr3 <= 0;
	      {1'd0, 6'd49}: s2wr3 <= 1;
	      {1'd0, 6'd50}: s2wr3 <= 2;
	      {1'd0, 6'd51}: s2wr3 <= 3;
	      {1'd0, 6'd52}: s2wr3 <= 16;
	      {1'd0, 6'd53}: s2wr3 <= 17;
	      {1'd0, 6'd54}: s2wr3 <= 18;
	      {1'd0, 6'd55}: s2wr3 <= 19;
	      {1'd0, 6'd56}: s2wr3 <= 32;
	      {1'd0, 6'd57}: s2wr3 <= 33;
	      {1'd0, 6'd58}: s2wr3 <= 34;
	      {1'd0, 6'd59}: s2wr3 <= 35;
	      {1'd0, 6'd60}: s2wr3 <= 48;
	      {1'd0, 6'd61}: s2wr3 <= 49;
	      {1'd0, 6'd62}: s2wr3 <= 50;
	      {1'd0, 6'd63}: s2wr3 <= 51;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr4 <= 56;
	      {1'd0, 6'd1}: s2wr4 <= 57;
	      {1'd0, 6'd2}: s2wr4 <= 58;
	      {1'd0, 6'd3}: s2wr4 <= 59;
	      {1'd0, 6'd4}: s2wr4 <= 40;
	      {1'd0, 6'd5}: s2wr4 <= 41;
	      {1'd0, 6'd6}: s2wr4 <= 42;
	      {1'd0, 6'd7}: s2wr4 <= 43;
	      {1'd0, 6'd8}: s2wr4 <= 24;
	      {1'd0, 6'd9}: s2wr4 <= 25;
	      {1'd0, 6'd10}: s2wr4 <= 26;
	      {1'd0, 6'd11}: s2wr4 <= 27;
	      {1'd0, 6'd12}: s2wr4 <= 8;
	      {1'd0, 6'd13}: s2wr4 <= 9;
	      {1'd0, 6'd14}: s2wr4 <= 10;
	      {1'd0, 6'd15}: s2wr4 <= 11;
	      {1'd0, 6'd16}: s2wr4 <= 60;
	      {1'd0, 6'd17}: s2wr4 <= 61;
	      {1'd0, 6'd18}: s2wr4 <= 62;
	      {1'd0, 6'd19}: s2wr4 <= 63;
	      {1'd0, 6'd20}: s2wr4 <= 44;
	      {1'd0, 6'd21}: s2wr4 <= 45;
	      {1'd0, 6'd22}: s2wr4 <= 46;
	      {1'd0, 6'd23}: s2wr4 <= 47;
	      {1'd0, 6'd24}: s2wr4 <= 28;
	      {1'd0, 6'd25}: s2wr4 <= 29;
	      {1'd0, 6'd26}: s2wr4 <= 30;
	      {1'd0, 6'd27}: s2wr4 <= 31;
	      {1'd0, 6'd28}: s2wr4 <= 12;
	      {1'd0, 6'd29}: s2wr4 <= 13;
	      {1'd0, 6'd30}: s2wr4 <= 14;
	      {1'd0, 6'd31}: s2wr4 <= 15;
	      {1'd0, 6'd32}: s2wr4 <= 48;
	      {1'd0, 6'd33}: s2wr4 <= 49;
	      {1'd0, 6'd34}: s2wr4 <= 50;
	      {1'd0, 6'd35}: s2wr4 <= 51;
	      {1'd0, 6'd36}: s2wr4 <= 32;
	      {1'd0, 6'd37}: s2wr4 <= 33;
	      {1'd0, 6'd38}: s2wr4 <= 34;
	      {1'd0, 6'd39}: s2wr4 <= 35;
	      {1'd0, 6'd40}: s2wr4 <= 16;
	      {1'd0, 6'd41}: s2wr4 <= 17;
	      {1'd0, 6'd42}: s2wr4 <= 18;
	      {1'd0, 6'd43}: s2wr4 <= 19;
	      {1'd0, 6'd44}: s2wr4 <= 0;
	      {1'd0, 6'd45}: s2wr4 <= 1;
	      {1'd0, 6'd46}: s2wr4 <= 2;
	      {1'd0, 6'd47}: s2wr4 <= 3;
	      {1'd0, 6'd48}: s2wr4 <= 52;
	      {1'd0, 6'd49}: s2wr4 <= 53;
	      {1'd0, 6'd50}: s2wr4 <= 54;
	      {1'd0, 6'd51}: s2wr4 <= 55;
	      {1'd0, 6'd52}: s2wr4 <= 36;
	      {1'd0, 6'd53}: s2wr4 <= 37;
	      {1'd0, 6'd54}: s2wr4 <= 38;
	      {1'd0, 6'd55}: s2wr4 <= 39;
	      {1'd0, 6'd56}: s2wr4 <= 20;
	      {1'd0, 6'd57}: s2wr4 <= 21;
	      {1'd0, 6'd58}: s2wr4 <= 22;
	      {1'd0, 6'd59}: s2wr4 <= 23;
	      {1'd0, 6'd60}: s2wr4 <= 4;
	      {1'd0, 6'd61}: s2wr4 <= 5;
	      {1'd0, 6'd62}: s2wr4 <= 6;
	      {1'd0, 6'd63}: s2wr4 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr5 <= 40;
	      {1'd0, 6'd1}: s2wr5 <= 41;
	      {1'd0, 6'd2}: s2wr5 <= 42;
	      {1'd0, 6'd3}: s2wr5 <= 43;
	      {1'd0, 6'd4}: s2wr5 <= 56;
	      {1'd0, 6'd5}: s2wr5 <= 57;
	      {1'd0, 6'd6}: s2wr5 <= 58;
	      {1'd0, 6'd7}: s2wr5 <= 59;
	      {1'd0, 6'd8}: s2wr5 <= 8;
	      {1'd0, 6'd9}: s2wr5 <= 9;
	      {1'd0, 6'd10}: s2wr5 <= 10;
	      {1'd0, 6'd11}: s2wr5 <= 11;
	      {1'd0, 6'd12}: s2wr5 <= 24;
	      {1'd0, 6'd13}: s2wr5 <= 25;
	      {1'd0, 6'd14}: s2wr5 <= 26;
	      {1'd0, 6'd15}: s2wr5 <= 27;
	      {1'd0, 6'd16}: s2wr5 <= 44;
	      {1'd0, 6'd17}: s2wr5 <= 45;
	      {1'd0, 6'd18}: s2wr5 <= 46;
	      {1'd0, 6'd19}: s2wr5 <= 47;
	      {1'd0, 6'd20}: s2wr5 <= 60;
	      {1'd0, 6'd21}: s2wr5 <= 61;
	      {1'd0, 6'd22}: s2wr5 <= 62;
	      {1'd0, 6'd23}: s2wr5 <= 63;
	      {1'd0, 6'd24}: s2wr5 <= 12;
	      {1'd0, 6'd25}: s2wr5 <= 13;
	      {1'd0, 6'd26}: s2wr5 <= 14;
	      {1'd0, 6'd27}: s2wr5 <= 15;
	      {1'd0, 6'd28}: s2wr5 <= 28;
	      {1'd0, 6'd29}: s2wr5 <= 29;
	      {1'd0, 6'd30}: s2wr5 <= 30;
	      {1'd0, 6'd31}: s2wr5 <= 31;
	      {1'd0, 6'd32}: s2wr5 <= 32;
	      {1'd0, 6'd33}: s2wr5 <= 33;
	      {1'd0, 6'd34}: s2wr5 <= 34;
	      {1'd0, 6'd35}: s2wr5 <= 35;
	      {1'd0, 6'd36}: s2wr5 <= 48;
	      {1'd0, 6'd37}: s2wr5 <= 49;
	      {1'd0, 6'd38}: s2wr5 <= 50;
	      {1'd0, 6'd39}: s2wr5 <= 51;
	      {1'd0, 6'd40}: s2wr5 <= 0;
	      {1'd0, 6'd41}: s2wr5 <= 1;
	      {1'd0, 6'd42}: s2wr5 <= 2;
	      {1'd0, 6'd43}: s2wr5 <= 3;
	      {1'd0, 6'd44}: s2wr5 <= 16;
	      {1'd0, 6'd45}: s2wr5 <= 17;
	      {1'd0, 6'd46}: s2wr5 <= 18;
	      {1'd0, 6'd47}: s2wr5 <= 19;
	      {1'd0, 6'd48}: s2wr5 <= 36;
	      {1'd0, 6'd49}: s2wr5 <= 37;
	      {1'd0, 6'd50}: s2wr5 <= 38;
	      {1'd0, 6'd51}: s2wr5 <= 39;
	      {1'd0, 6'd52}: s2wr5 <= 52;
	      {1'd0, 6'd53}: s2wr5 <= 53;
	      {1'd0, 6'd54}: s2wr5 <= 54;
	      {1'd0, 6'd55}: s2wr5 <= 55;
	      {1'd0, 6'd56}: s2wr5 <= 4;
	      {1'd0, 6'd57}: s2wr5 <= 5;
	      {1'd0, 6'd58}: s2wr5 <= 6;
	      {1'd0, 6'd59}: s2wr5 <= 7;
	      {1'd0, 6'd60}: s2wr5 <= 20;
	      {1'd0, 6'd61}: s2wr5 <= 21;
	      {1'd0, 6'd62}: s2wr5 <= 22;
	      {1'd0, 6'd63}: s2wr5 <= 23;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr6 <= 24;
	      {1'd0, 6'd1}: s2wr6 <= 25;
	      {1'd0, 6'd2}: s2wr6 <= 26;
	      {1'd0, 6'd3}: s2wr6 <= 27;
	      {1'd0, 6'd4}: s2wr6 <= 8;
	      {1'd0, 6'd5}: s2wr6 <= 9;
	      {1'd0, 6'd6}: s2wr6 <= 10;
	      {1'd0, 6'd7}: s2wr6 <= 11;
	      {1'd0, 6'd8}: s2wr6 <= 56;
	      {1'd0, 6'd9}: s2wr6 <= 57;
	      {1'd0, 6'd10}: s2wr6 <= 58;
	      {1'd0, 6'd11}: s2wr6 <= 59;
	      {1'd0, 6'd12}: s2wr6 <= 40;
	      {1'd0, 6'd13}: s2wr6 <= 41;
	      {1'd0, 6'd14}: s2wr6 <= 42;
	      {1'd0, 6'd15}: s2wr6 <= 43;
	      {1'd0, 6'd16}: s2wr6 <= 28;
	      {1'd0, 6'd17}: s2wr6 <= 29;
	      {1'd0, 6'd18}: s2wr6 <= 30;
	      {1'd0, 6'd19}: s2wr6 <= 31;
	      {1'd0, 6'd20}: s2wr6 <= 12;
	      {1'd0, 6'd21}: s2wr6 <= 13;
	      {1'd0, 6'd22}: s2wr6 <= 14;
	      {1'd0, 6'd23}: s2wr6 <= 15;
	      {1'd0, 6'd24}: s2wr6 <= 60;
	      {1'd0, 6'd25}: s2wr6 <= 61;
	      {1'd0, 6'd26}: s2wr6 <= 62;
	      {1'd0, 6'd27}: s2wr6 <= 63;
	      {1'd0, 6'd28}: s2wr6 <= 44;
	      {1'd0, 6'd29}: s2wr6 <= 45;
	      {1'd0, 6'd30}: s2wr6 <= 46;
	      {1'd0, 6'd31}: s2wr6 <= 47;
	      {1'd0, 6'd32}: s2wr6 <= 16;
	      {1'd0, 6'd33}: s2wr6 <= 17;
	      {1'd0, 6'd34}: s2wr6 <= 18;
	      {1'd0, 6'd35}: s2wr6 <= 19;
	      {1'd0, 6'd36}: s2wr6 <= 0;
	      {1'd0, 6'd37}: s2wr6 <= 1;
	      {1'd0, 6'd38}: s2wr6 <= 2;
	      {1'd0, 6'd39}: s2wr6 <= 3;
	      {1'd0, 6'd40}: s2wr6 <= 48;
	      {1'd0, 6'd41}: s2wr6 <= 49;
	      {1'd0, 6'd42}: s2wr6 <= 50;
	      {1'd0, 6'd43}: s2wr6 <= 51;
	      {1'd0, 6'd44}: s2wr6 <= 32;
	      {1'd0, 6'd45}: s2wr6 <= 33;
	      {1'd0, 6'd46}: s2wr6 <= 34;
	      {1'd0, 6'd47}: s2wr6 <= 35;
	      {1'd0, 6'd48}: s2wr6 <= 20;
	      {1'd0, 6'd49}: s2wr6 <= 21;
	      {1'd0, 6'd50}: s2wr6 <= 22;
	      {1'd0, 6'd51}: s2wr6 <= 23;
	      {1'd0, 6'd52}: s2wr6 <= 4;
	      {1'd0, 6'd53}: s2wr6 <= 5;
	      {1'd0, 6'd54}: s2wr6 <= 6;
	      {1'd0, 6'd55}: s2wr6 <= 7;
	      {1'd0, 6'd56}: s2wr6 <= 52;
	      {1'd0, 6'd57}: s2wr6 <= 53;
	      {1'd0, 6'd58}: s2wr6 <= 54;
	      {1'd0, 6'd59}: s2wr6 <= 55;
	      {1'd0, 6'd60}: s2wr6 <= 36;
	      {1'd0, 6'd61}: s2wr6 <= 37;
	      {1'd0, 6'd62}: s2wr6 <= 38;
	      {1'd0, 6'd63}: s2wr6 <= 39;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr7 <= 8;
	      {1'd0, 6'd1}: s2wr7 <= 9;
	      {1'd0, 6'd2}: s2wr7 <= 10;
	      {1'd0, 6'd3}: s2wr7 <= 11;
	      {1'd0, 6'd4}: s2wr7 <= 24;
	      {1'd0, 6'd5}: s2wr7 <= 25;
	      {1'd0, 6'd6}: s2wr7 <= 26;
	      {1'd0, 6'd7}: s2wr7 <= 27;
	      {1'd0, 6'd8}: s2wr7 <= 40;
	      {1'd0, 6'd9}: s2wr7 <= 41;
	      {1'd0, 6'd10}: s2wr7 <= 42;
	      {1'd0, 6'd11}: s2wr7 <= 43;
	      {1'd0, 6'd12}: s2wr7 <= 56;
	      {1'd0, 6'd13}: s2wr7 <= 57;
	      {1'd0, 6'd14}: s2wr7 <= 58;
	      {1'd0, 6'd15}: s2wr7 <= 59;
	      {1'd0, 6'd16}: s2wr7 <= 12;
	      {1'd0, 6'd17}: s2wr7 <= 13;
	      {1'd0, 6'd18}: s2wr7 <= 14;
	      {1'd0, 6'd19}: s2wr7 <= 15;
	      {1'd0, 6'd20}: s2wr7 <= 28;
	      {1'd0, 6'd21}: s2wr7 <= 29;
	      {1'd0, 6'd22}: s2wr7 <= 30;
	      {1'd0, 6'd23}: s2wr7 <= 31;
	      {1'd0, 6'd24}: s2wr7 <= 44;
	      {1'd0, 6'd25}: s2wr7 <= 45;
	      {1'd0, 6'd26}: s2wr7 <= 46;
	      {1'd0, 6'd27}: s2wr7 <= 47;
	      {1'd0, 6'd28}: s2wr7 <= 60;
	      {1'd0, 6'd29}: s2wr7 <= 61;
	      {1'd0, 6'd30}: s2wr7 <= 62;
	      {1'd0, 6'd31}: s2wr7 <= 63;
	      {1'd0, 6'd32}: s2wr7 <= 0;
	      {1'd0, 6'd33}: s2wr7 <= 1;
	      {1'd0, 6'd34}: s2wr7 <= 2;
	      {1'd0, 6'd35}: s2wr7 <= 3;
	      {1'd0, 6'd36}: s2wr7 <= 16;
	      {1'd0, 6'd37}: s2wr7 <= 17;
	      {1'd0, 6'd38}: s2wr7 <= 18;
	      {1'd0, 6'd39}: s2wr7 <= 19;
	      {1'd0, 6'd40}: s2wr7 <= 32;
	      {1'd0, 6'd41}: s2wr7 <= 33;
	      {1'd0, 6'd42}: s2wr7 <= 34;
	      {1'd0, 6'd43}: s2wr7 <= 35;
	      {1'd0, 6'd44}: s2wr7 <= 48;
	      {1'd0, 6'd45}: s2wr7 <= 49;
	      {1'd0, 6'd46}: s2wr7 <= 50;
	      {1'd0, 6'd47}: s2wr7 <= 51;
	      {1'd0, 6'd48}: s2wr7 <= 4;
	      {1'd0, 6'd49}: s2wr7 <= 5;
	      {1'd0, 6'd50}: s2wr7 <= 6;
	      {1'd0, 6'd51}: s2wr7 <= 7;
	      {1'd0, 6'd52}: s2wr7 <= 20;
	      {1'd0, 6'd53}: s2wr7 <= 21;
	      {1'd0, 6'd54}: s2wr7 <= 22;
	      {1'd0, 6'd55}: s2wr7 <= 23;
	      {1'd0, 6'd56}: s2wr7 <= 36;
	      {1'd0, 6'd57}: s2wr7 <= 37;
	      {1'd0, 6'd58}: s2wr7 <= 38;
	      {1'd0, 6'd59}: s2wr7 <= 39;
	      {1'd0, 6'd60}: s2wr7 <= 52;
	      {1'd0, 6'd61}: s2wr7 <= 53;
	      {1'd0, 6'd62}: s2wr7 <= 54;
	      {1'd0, 6'd63}: s2wr7 <= 55;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr8 <= 52;
	      {1'd0, 6'd1}: s2wr8 <= 53;
	      {1'd0, 6'd2}: s2wr8 <= 54;
	      {1'd0, 6'd3}: s2wr8 <= 55;
	      {1'd0, 6'd4}: s2wr8 <= 36;
	      {1'd0, 6'd5}: s2wr8 <= 37;
	      {1'd0, 6'd6}: s2wr8 <= 38;
	      {1'd0, 6'd7}: s2wr8 <= 39;
	      {1'd0, 6'd8}: s2wr8 <= 20;
	      {1'd0, 6'd9}: s2wr8 <= 21;
	      {1'd0, 6'd10}: s2wr8 <= 22;
	      {1'd0, 6'd11}: s2wr8 <= 23;
	      {1'd0, 6'd12}: s2wr8 <= 4;
	      {1'd0, 6'd13}: s2wr8 <= 5;
	      {1'd0, 6'd14}: s2wr8 <= 6;
	      {1'd0, 6'd15}: s2wr8 <= 7;
	      {1'd0, 6'd16}: s2wr8 <= 48;
	      {1'd0, 6'd17}: s2wr8 <= 49;
	      {1'd0, 6'd18}: s2wr8 <= 50;
	      {1'd0, 6'd19}: s2wr8 <= 51;
	      {1'd0, 6'd20}: s2wr8 <= 32;
	      {1'd0, 6'd21}: s2wr8 <= 33;
	      {1'd0, 6'd22}: s2wr8 <= 34;
	      {1'd0, 6'd23}: s2wr8 <= 35;
	      {1'd0, 6'd24}: s2wr8 <= 16;
	      {1'd0, 6'd25}: s2wr8 <= 17;
	      {1'd0, 6'd26}: s2wr8 <= 18;
	      {1'd0, 6'd27}: s2wr8 <= 19;
	      {1'd0, 6'd28}: s2wr8 <= 0;
	      {1'd0, 6'd29}: s2wr8 <= 1;
	      {1'd0, 6'd30}: s2wr8 <= 2;
	      {1'd0, 6'd31}: s2wr8 <= 3;
	      {1'd0, 6'd32}: s2wr8 <= 60;
	      {1'd0, 6'd33}: s2wr8 <= 61;
	      {1'd0, 6'd34}: s2wr8 <= 62;
	      {1'd0, 6'd35}: s2wr8 <= 63;
	      {1'd0, 6'd36}: s2wr8 <= 44;
	      {1'd0, 6'd37}: s2wr8 <= 45;
	      {1'd0, 6'd38}: s2wr8 <= 46;
	      {1'd0, 6'd39}: s2wr8 <= 47;
	      {1'd0, 6'd40}: s2wr8 <= 28;
	      {1'd0, 6'd41}: s2wr8 <= 29;
	      {1'd0, 6'd42}: s2wr8 <= 30;
	      {1'd0, 6'd43}: s2wr8 <= 31;
	      {1'd0, 6'd44}: s2wr8 <= 12;
	      {1'd0, 6'd45}: s2wr8 <= 13;
	      {1'd0, 6'd46}: s2wr8 <= 14;
	      {1'd0, 6'd47}: s2wr8 <= 15;
	      {1'd0, 6'd48}: s2wr8 <= 56;
	      {1'd0, 6'd49}: s2wr8 <= 57;
	      {1'd0, 6'd50}: s2wr8 <= 58;
	      {1'd0, 6'd51}: s2wr8 <= 59;
	      {1'd0, 6'd52}: s2wr8 <= 40;
	      {1'd0, 6'd53}: s2wr8 <= 41;
	      {1'd0, 6'd54}: s2wr8 <= 42;
	      {1'd0, 6'd55}: s2wr8 <= 43;
	      {1'd0, 6'd56}: s2wr8 <= 24;
	      {1'd0, 6'd57}: s2wr8 <= 25;
	      {1'd0, 6'd58}: s2wr8 <= 26;
	      {1'd0, 6'd59}: s2wr8 <= 27;
	      {1'd0, 6'd60}: s2wr8 <= 8;
	      {1'd0, 6'd61}: s2wr8 <= 9;
	      {1'd0, 6'd62}: s2wr8 <= 10;
	      {1'd0, 6'd63}: s2wr8 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr8 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr9 <= 36;
	      {1'd0, 6'd1}: s2wr9 <= 37;
	      {1'd0, 6'd2}: s2wr9 <= 38;
	      {1'd0, 6'd3}: s2wr9 <= 39;
	      {1'd0, 6'd4}: s2wr9 <= 52;
	      {1'd0, 6'd5}: s2wr9 <= 53;
	      {1'd0, 6'd6}: s2wr9 <= 54;
	      {1'd0, 6'd7}: s2wr9 <= 55;
	      {1'd0, 6'd8}: s2wr9 <= 4;
	      {1'd0, 6'd9}: s2wr9 <= 5;
	      {1'd0, 6'd10}: s2wr9 <= 6;
	      {1'd0, 6'd11}: s2wr9 <= 7;
	      {1'd0, 6'd12}: s2wr9 <= 20;
	      {1'd0, 6'd13}: s2wr9 <= 21;
	      {1'd0, 6'd14}: s2wr9 <= 22;
	      {1'd0, 6'd15}: s2wr9 <= 23;
	      {1'd0, 6'd16}: s2wr9 <= 32;
	      {1'd0, 6'd17}: s2wr9 <= 33;
	      {1'd0, 6'd18}: s2wr9 <= 34;
	      {1'd0, 6'd19}: s2wr9 <= 35;
	      {1'd0, 6'd20}: s2wr9 <= 48;
	      {1'd0, 6'd21}: s2wr9 <= 49;
	      {1'd0, 6'd22}: s2wr9 <= 50;
	      {1'd0, 6'd23}: s2wr9 <= 51;
	      {1'd0, 6'd24}: s2wr9 <= 0;
	      {1'd0, 6'd25}: s2wr9 <= 1;
	      {1'd0, 6'd26}: s2wr9 <= 2;
	      {1'd0, 6'd27}: s2wr9 <= 3;
	      {1'd0, 6'd28}: s2wr9 <= 16;
	      {1'd0, 6'd29}: s2wr9 <= 17;
	      {1'd0, 6'd30}: s2wr9 <= 18;
	      {1'd0, 6'd31}: s2wr9 <= 19;
	      {1'd0, 6'd32}: s2wr9 <= 44;
	      {1'd0, 6'd33}: s2wr9 <= 45;
	      {1'd0, 6'd34}: s2wr9 <= 46;
	      {1'd0, 6'd35}: s2wr9 <= 47;
	      {1'd0, 6'd36}: s2wr9 <= 60;
	      {1'd0, 6'd37}: s2wr9 <= 61;
	      {1'd0, 6'd38}: s2wr9 <= 62;
	      {1'd0, 6'd39}: s2wr9 <= 63;
	      {1'd0, 6'd40}: s2wr9 <= 12;
	      {1'd0, 6'd41}: s2wr9 <= 13;
	      {1'd0, 6'd42}: s2wr9 <= 14;
	      {1'd0, 6'd43}: s2wr9 <= 15;
	      {1'd0, 6'd44}: s2wr9 <= 28;
	      {1'd0, 6'd45}: s2wr9 <= 29;
	      {1'd0, 6'd46}: s2wr9 <= 30;
	      {1'd0, 6'd47}: s2wr9 <= 31;
	      {1'd0, 6'd48}: s2wr9 <= 40;
	      {1'd0, 6'd49}: s2wr9 <= 41;
	      {1'd0, 6'd50}: s2wr9 <= 42;
	      {1'd0, 6'd51}: s2wr9 <= 43;
	      {1'd0, 6'd52}: s2wr9 <= 56;
	      {1'd0, 6'd53}: s2wr9 <= 57;
	      {1'd0, 6'd54}: s2wr9 <= 58;
	      {1'd0, 6'd55}: s2wr9 <= 59;
	      {1'd0, 6'd56}: s2wr9 <= 8;
	      {1'd0, 6'd57}: s2wr9 <= 9;
	      {1'd0, 6'd58}: s2wr9 <= 10;
	      {1'd0, 6'd59}: s2wr9 <= 11;
	      {1'd0, 6'd60}: s2wr9 <= 24;
	      {1'd0, 6'd61}: s2wr9 <= 25;
	      {1'd0, 6'd62}: s2wr9 <= 26;
	      {1'd0, 6'd63}: s2wr9 <= 27;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr9 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr10 <= 20;
	      {1'd0, 6'd1}: s2wr10 <= 21;
	      {1'd0, 6'd2}: s2wr10 <= 22;
	      {1'd0, 6'd3}: s2wr10 <= 23;
	      {1'd0, 6'd4}: s2wr10 <= 4;
	      {1'd0, 6'd5}: s2wr10 <= 5;
	      {1'd0, 6'd6}: s2wr10 <= 6;
	      {1'd0, 6'd7}: s2wr10 <= 7;
	      {1'd0, 6'd8}: s2wr10 <= 52;
	      {1'd0, 6'd9}: s2wr10 <= 53;
	      {1'd0, 6'd10}: s2wr10 <= 54;
	      {1'd0, 6'd11}: s2wr10 <= 55;
	      {1'd0, 6'd12}: s2wr10 <= 36;
	      {1'd0, 6'd13}: s2wr10 <= 37;
	      {1'd0, 6'd14}: s2wr10 <= 38;
	      {1'd0, 6'd15}: s2wr10 <= 39;
	      {1'd0, 6'd16}: s2wr10 <= 16;
	      {1'd0, 6'd17}: s2wr10 <= 17;
	      {1'd0, 6'd18}: s2wr10 <= 18;
	      {1'd0, 6'd19}: s2wr10 <= 19;
	      {1'd0, 6'd20}: s2wr10 <= 0;
	      {1'd0, 6'd21}: s2wr10 <= 1;
	      {1'd0, 6'd22}: s2wr10 <= 2;
	      {1'd0, 6'd23}: s2wr10 <= 3;
	      {1'd0, 6'd24}: s2wr10 <= 48;
	      {1'd0, 6'd25}: s2wr10 <= 49;
	      {1'd0, 6'd26}: s2wr10 <= 50;
	      {1'd0, 6'd27}: s2wr10 <= 51;
	      {1'd0, 6'd28}: s2wr10 <= 32;
	      {1'd0, 6'd29}: s2wr10 <= 33;
	      {1'd0, 6'd30}: s2wr10 <= 34;
	      {1'd0, 6'd31}: s2wr10 <= 35;
	      {1'd0, 6'd32}: s2wr10 <= 28;
	      {1'd0, 6'd33}: s2wr10 <= 29;
	      {1'd0, 6'd34}: s2wr10 <= 30;
	      {1'd0, 6'd35}: s2wr10 <= 31;
	      {1'd0, 6'd36}: s2wr10 <= 12;
	      {1'd0, 6'd37}: s2wr10 <= 13;
	      {1'd0, 6'd38}: s2wr10 <= 14;
	      {1'd0, 6'd39}: s2wr10 <= 15;
	      {1'd0, 6'd40}: s2wr10 <= 60;
	      {1'd0, 6'd41}: s2wr10 <= 61;
	      {1'd0, 6'd42}: s2wr10 <= 62;
	      {1'd0, 6'd43}: s2wr10 <= 63;
	      {1'd0, 6'd44}: s2wr10 <= 44;
	      {1'd0, 6'd45}: s2wr10 <= 45;
	      {1'd0, 6'd46}: s2wr10 <= 46;
	      {1'd0, 6'd47}: s2wr10 <= 47;
	      {1'd0, 6'd48}: s2wr10 <= 24;
	      {1'd0, 6'd49}: s2wr10 <= 25;
	      {1'd0, 6'd50}: s2wr10 <= 26;
	      {1'd0, 6'd51}: s2wr10 <= 27;
	      {1'd0, 6'd52}: s2wr10 <= 8;
	      {1'd0, 6'd53}: s2wr10 <= 9;
	      {1'd0, 6'd54}: s2wr10 <= 10;
	      {1'd0, 6'd55}: s2wr10 <= 11;
	      {1'd0, 6'd56}: s2wr10 <= 56;
	      {1'd0, 6'd57}: s2wr10 <= 57;
	      {1'd0, 6'd58}: s2wr10 <= 58;
	      {1'd0, 6'd59}: s2wr10 <= 59;
	      {1'd0, 6'd60}: s2wr10 <= 40;
	      {1'd0, 6'd61}: s2wr10 <= 41;
	      {1'd0, 6'd62}: s2wr10 <= 42;
	      {1'd0, 6'd63}: s2wr10 <= 43;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr10 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr11 <= 4;
	      {1'd0, 6'd1}: s2wr11 <= 5;
	      {1'd0, 6'd2}: s2wr11 <= 6;
	      {1'd0, 6'd3}: s2wr11 <= 7;
	      {1'd0, 6'd4}: s2wr11 <= 20;
	      {1'd0, 6'd5}: s2wr11 <= 21;
	      {1'd0, 6'd6}: s2wr11 <= 22;
	      {1'd0, 6'd7}: s2wr11 <= 23;
	      {1'd0, 6'd8}: s2wr11 <= 36;
	      {1'd0, 6'd9}: s2wr11 <= 37;
	      {1'd0, 6'd10}: s2wr11 <= 38;
	      {1'd0, 6'd11}: s2wr11 <= 39;
	      {1'd0, 6'd12}: s2wr11 <= 52;
	      {1'd0, 6'd13}: s2wr11 <= 53;
	      {1'd0, 6'd14}: s2wr11 <= 54;
	      {1'd0, 6'd15}: s2wr11 <= 55;
	      {1'd0, 6'd16}: s2wr11 <= 0;
	      {1'd0, 6'd17}: s2wr11 <= 1;
	      {1'd0, 6'd18}: s2wr11 <= 2;
	      {1'd0, 6'd19}: s2wr11 <= 3;
	      {1'd0, 6'd20}: s2wr11 <= 16;
	      {1'd0, 6'd21}: s2wr11 <= 17;
	      {1'd0, 6'd22}: s2wr11 <= 18;
	      {1'd0, 6'd23}: s2wr11 <= 19;
	      {1'd0, 6'd24}: s2wr11 <= 32;
	      {1'd0, 6'd25}: s2wr11 <= 33;
	      {1'd0, 6'd26}: s2wr11 <= 34;
	      {1'd0, 6'd27}: s2wr11 <= 35;
	      {1'd0, 6'd28}: s2wr11 <= 48;
	      {1'd0, 6'd29}: s2wr11 <= 49;
	      {1'd0, 6'd30}: s2wr11 <= 50;
	      {1'd0, 6'd31}: s2wr11 <= 51;
	      {1'd0, 6'd32}: s2wr11 <= 12;
	      {1'd0, 6'd33}: s2wr11 <= 13;
	      {1'd0, 6'd34}: s2wr11 <= 14;
	      {1'd0, 6'd35}: s2wr11 <= 15;
	      {1'd0, 6'd36}: s2wr11 <= 28;
	      {1'd0, 6'd37}: s2wr11 <= 29;
	      {1'd0, 6'd38}: s2wr11 <= 30;
	      {1'd0, 6'd39}: s2wr11 <= 31;
	      {1'd0, 6'd40}: s2wr11 <= 44;
	      {1'd0, 6'd41}: s2wr11 <= 45;
	      {1'd0, 6'd42}: s2wr11 <= 46;
	      {1'd0, 6'd43}: s2wr11 <= 47;
	      {1'd0, 6'd44}: s2wr11 <= 60;
	      {1'd0, 6'd45}: s2wr11 <= 61;
	      {1'd0, 6'd46}: s2wr11 <= 62;
	      {1'd0, 6'd47}: s2wr11 <= 63;
	      {1'd0, 6'd48}: s2wr11 <= 8;
	      {1'd0, 6'd49}: s2wr11 <= 9;
	      {1'd0, 6'd50}: s2wr11 <= 10;
	      {1'd0, 6'd51}: s2wr11 <= 11;
	      {1'd0, 6'd52}: s2wr11 <= 24;
	      {1'd0, 6'd53}: s2wr11 <= 25;
	      {1'd0, 6'd54}: s2wr11 <= 26;
	      {1'd0, 6'd55}: s2wr11 <= 27;
	      {1'd0, 6'd56}: s2wr11 <= 40;
	      {1'd0, 6'd57}: s2wr11 <= 41;
	      {1'd0, 6'd58}: s2wr11 <= 42;
	      {1'd0, 6'd59}: s2wr11 <= 43;
	      {1'd0, 6'd60}: s2wr11 <= 56;
	      {1'd0, 6'd61}: s2wr11 <= 57;
	      {1'd0, 6'd62}: s2wr11 <= 58;
	      {1'd0, 6'd63}: s2wr11 <= 59;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr11 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr12 <= 48;
	      {1'd0, 6'd1}: s2wr12 <= 49;
	      {1'd0, 6'd2}: s2wr12 <= 50;
	      {1'd0, 6'd3}: s2wr12 <= 51;
	      {1'd0, 6'd4}: s2wr12 <= 32;
	      {1'd0, 6'd5}: s2wr12 <= 33;
	      {1'd0, 6'd6}: s2wr12 <= 34;
	      {1'd0, 6'd7}: s2wr12 <= 35;
	      {1'd0, 6'd8}: s2wr12 <= 16;
	      {1'd0, 6'd9}: s2wr12 <= 17;
	      {1'd0, 6'd10}: s2wr12 <= 18;
	      {1'd0, 6'd11}: s2wr12 <= 19;
	      {1'd0, 6'd12}: s2wr12 <= 0;
	      {1'd0, 6'd13}: s2wr12 <= 1;
	      {1'd0, 6'd14}: s2wr12 <= 2;
	      {1'd0, 6'd15}: s2wr12 <= 3;
	      {1'd0, 6'd16}: s2wr12 <= 52;
	      {1'd0, 6'd17}: s2wr12 <= 53;
	      {1'd0, 6'd18}: s2wr12 <= 54;
	      {1'd0, 6'd19}: s2wr12 <= 55;
	      {1'd0, 6'd20}: s2wr12 <= 36;
	      {1'd0, 6'd21}: s2wr12 <= 37;
	      {1'd0, 6'd22}: s2wr12 <= 38;
	      {1'd0, 6'd23}: s2wr12 <= 39;
	      {1'd0, 6'd24}: s2wr12 <= 20;
	      {1'd0, 6'd25}: s2wr12 <= 21;
	      {1'd0, 6'd26}: s2wr12 <= 22;
	      {1'd0, 6'd27}: s2wr12 <= 23;
	      {1'd0, 6'd28}: s2wr12 <= 4;
	      {1'd0, 6'd29}: s2wr12 <= 5;
	      {1'd0, 6'd30}: s2wr12 <= 6;
	      {1'd0, 6'd31}: s2wr12 <= 7;
	      {1'd0, 6'd32}: s2wr12 <= 56;
	      {1'd0, 6'd33}: s2wr12 <= 57;
	      {1'd0, 6'd34}: s2wr12 <= 58;
	      {1'd0, 6'd35}: s2wr12 <= 59;
	      {1'd0, 6'd36}: s2wr12 <= 40;
	      {1'd0, 6'd37}: s2wr12 <= 41;
	      {1'd0, 6'd38}: s2wr12 <= 42;
	      {1'd0, 6'd39}: s2wr12 <= 43;
	      {1'd0, 6'd40}: s2wr12 <= 24;
	      {1'd0, 6'd41}: s2wr12 <= 25;
	      {1'd0, 6'd42}: s2wr12 <= 26;
	      {1'd0, 6'd43}: s2wr12 <= 27;
	      {1'd0, 6'd44}: s2wr12 <= 8;
	      {1'd0, 6'd45}: s2wr12 <= 9;
	      {1'd0, 6'd46}: s2wr12 <= 10;
	      {1'd0, 6'd47}: s2wr12 <= 11;
	      {1'd0, 6'd48}: s2wr12 <= 60;
	      {1'd0, 6'd49}: s2wr12 <= 61;
	      {1'd0, 6'd50}: s2wr12 <= 62;
	      {1'd0, 6'd51}: s2wr12 <= 63;
	      {1'd0, 6'd52}: s2wr12 <= 44;
	      {1'd0, 6'd53}: s2wr12 <= 45;
	      {1'd0, 6'd54}: s2wr12 <= 46;
	      {1'd0, 6'd55}: s2wr12 <= 47;
	      {1'd0, 6'd56}: s2wr12 <= 28;
	      {1'd0, 6'd57}: s2wr12 <= 29;
	      {1'd0, 6'd58}: s2wr12 <= 30;
	      {1'd0, 6'd59}: s2wr12 <= 31;
	      {1'd0, 6'd60}: s2wr12 <= 12;
	      {1'd0, 6'd61}: s2wr12 <= 13;
	      {1'd0, 6'd62}: s2wr12 <= 14;
	      {1'd0, 6'd63}: s2wr12 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr12 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr13 <= 32;
	      {1'd0, 6'd1}: s2wr13 <= 33;
	      {1'd0, 6'd2}: s2wr13 <= 34;
	      {1'd0, 6'd3}: s2wr13 <= 35;
	      {1'd0, 6'd4}: s2wr13 <= 48;
	      {1'd0, 6'd5}: s2wr13 <= 49;
	      {1'd0, 6'd6}: s2wr13 <= 50;
	      {1'd0, 6'd7}: s2wr13 <= 51;
	      {1'd0, 6'd8}: s2wr13 <= 0;
	      {1'd0, 6'd9}: s2wr13 <= 1;
	      {1'd0, 6'd10}: s2wr13 <= 2;
	      {1'd0, 6'd11}: s2wr13 <= 3;
	      {1'd0, 6'd12}: s2wr13 <= 16;
	      {1'd0, 6'd13}: s2wr13 <= 17;
	      {1'd0, 6'd14}: s2wr13 <= 18;
	      {1'd0, 6'd15}: s2wr13 <= 19;
	      {1'd0, 6'd16}: s2wr13 <= 36;
	      {1'd0, 6'd17}: s2wr13 <= 37;
	      {1'd0, 6'd18}: s2wr13 <= 38;
	      {1'd0, 6'd19}: s2wr13 <= 39;
	      {1'd0, 6'd20}: s2wr13 <= 52;
	      {1'd0, 6'd21}: s2wr13 <= 53;
	      {1'd0, 6'd22}: s2wr13 <= 54;
	      {1'd0, 6'd23}: s2wr13 <= 55;
	      {1'd0, 6'd24}: s2wr13 <= 4;
	      {1'd0, 6'd25}: s2wr13 <= 5;
	      {1'd0, 6'd26}: s2wr13 <= 6;
	      {1'd0, 6'd27}: s2wr13 <= 7;
	      {1'd0, 6'd28}: s2wr13 <= 20;
	      {1'd0, 6'd29}: s2wr13 <= 21;
	      {1'd0, 6'd30}: s2wr13 <= 22;
	      {1'd0, 6'd31}: s2wr13 <= 23;
	      {1'd0, 6'd32}: s2wr13 <= 40;
	      {1'd0, 6'd33}: s2wr13 <= 41;
	      {1'd0, 6'd34}: s2wr13 <= 42;
	      {1'd0, 6'd35}: s2wr13 <= 43;
	      {1'd0, 6'd36}: s2wr13 <= 56;
	      {1'd0, 6'd37}: s2wr13 <= 57;
	      {1'd0, 6'd38}: s2wr13 <= 58;
	      {1'd0, 6'd39}: s2wr13 <= 59;
	      {1'd0, 6'd40}: s2wr13 <= 8;
	      {1'd0, 6'd41}: s2wr13 <= 9;
	      {1'd0, 6'd42}: s2wr13 <= 10;
	      {1'd0, 6'd43}: s2wr13 <= 11;
	      {1'd0, 6'd44}: s2wr13 <= 24;
	      {1'd0, 6'd45}: s2wr13 <= 25;
	      {1'd0, 6'd46}: s2wr13 <= 26;
	      {1'd0, 6'd47}: s2wr13 <= 27;
	      {1'd0, 6'd48}: s2wr13 <= 44;
	      {1'd0, 6'd49}: s2wr13 <= 45;
	      {1'd0, 6'd50}: s2wr13 <= 46;
	      {1'd0, 6'd51}: s2wr13 <= 47;
	      {1'd0, 6'd52}: s2wr13 <= 60;
	      {1'd0, 6'd53}: s2wr13 <= 61;
	      {1'd0, 6'd54}: s2wr13 <= 62;
	      {1'd0, 6'd55}: s2wr13 <= 63;
	      {1'd0, 6'd56}: s2wr13 <= 12;
	      {1'd0, 6'd57}: s2wr13 <= 13;
	      {1'd0, 6'd58}: s2wr13 <= 14;
	      {1'd0, 6'd59}: s2wr13 <= 15;
	      {1'd0, 6'd60}: s2wr13 <= 28;
	      {1'd0, 6'd61}: s2wr13 <= 29;
	      {1'd0, 6'd62}: s2wr13 <= 30;
	      {1'd0, 6'd63}: s2wr13 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr13 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr14 <= 16;
	      {1'd0, 6'd1}: s2wr14 <= 17;
	      {1'd0, 6'd2}: s2wr14 <= 18;
	      {1'd0, 6'd3}: s2wr14 <= 19;
	      {1'd0, 6'd4}: s2wr14 <= 0;
	      {1'd0, 6'd5}: s2wr14 <= 1;
	      {1'd0, 6'd6}: s2wr14 <= 2;
	      {1'd0, 6'd7}: s2wr14 <= 3;
	      {1'd0, 6'd8}: s2wr14 <= 48;
	      {1'd0, 6'd9}: s2wr14 <= 49;
	      {1'd0, 6'd10}: s2wr14 <= 50;
	      {1'd0, 6'd11}: s2wr14 <= 51;
	      {1'd0, 6'd12}: s2wr14 <= 32;
	      {1'd0, 6'd13}: s2wr14 <= 33;
	      {1'd0, 6'd14}: s2wr14 <= 34;
	      {1'd0, 6'd15}: s2wr14 <= 35;
	      {1'd0, 6'd16}: s2wr14 <= 20;
	      {1'd0, 6'd17}: s2wr14 <= 21;
	      {1'd0, 6'd18}: s2wr14 <= 22;
	      {1'd0, 6'd19}: s2wr14 <= 23;
	      {1'd0, 6'd20}: s2wr14 <= 4;
	      {1'd0, 6'd21}: s2wr14 <= 5;
	      {1'd0, 6'd22}: s2wr14 <= 6;
	      {1'd0, 6'd23}: s2wr14 <= 7;
	      {1'd0, 6'd24}: s2wr14 <= 52;
	      {1'd0, 6'd25}: s2wr14 <= 53;
	      {1'd0, 6'd26}: s2wr14 <= 54;
	      {1'd0, 6'd27}: s2wr14 <= 55;
	      {1'd0, 6'd28}: s2wr14 <= 36;
	      {1'd0, 6'd29}: s2wr14 <= 37;
	      {1'd0, 6'd30}: s2wr14 <= 38;
	      {1'd0, 6'd31}: s2wr14 <= 39;
	      {1'd0, 6'd32}: s2wr14 <= 24;
	      {1'd0, 6'd33}: s2wr14 <= 25;
	      {1'd0, 6'd34}: s2wr14 <= 26;
	      {1'd0, 6'd35}: s2wr14 <= 27;
	      {1'd0, 6'd36}: s2wr14 <= 8;
	      {1'd0, 6'd37}: s2wr14 <= 9;
	      {1'd0, 6'd38}: s2wr14 <= 10;
	      {1'd0, 6'd39}: s2wr14 <= 11;
	      {1'd0, 6'd40}: s2wr14 <= 56;
	      {1'd0, 6'd41}: s2wr14 <= 57;
	      {1'd0, 6'd42}: s2wr14 <= 58;
	      {1'd0, 6'd43}: s2wr14 <= 59;
	      {1'd0, 6'd44}: s2wr14 <= 40;
	      {1'd0, 6'd45}: s2wr14 <= 41;
	      {1'd0, 6'd46}: s2wr14 <= 42;
	      {1'd0, 6'd47}: s2wr14 <= 43;
	      {1'd0, 6'd48}: s2wr14 <= 28;
	      {1'd0, 6'd49}: s2wr14 <= 29;
	      {1'd0, 6'd50}: s2wr14 <= 30;
	      {1'd0, 6'd51}: s2wr14 <= 31;
	      {1'd0, 6'd52}: s2wr14 <= 12;
	      {1'd0, 6'd53}: s2wr14 <= 13;
	      {1'd0, 6'd54}: s2wr14 <= 14;
	      {1'd0, 6'd55}: s2wr14 <= 15;
	      {1'd0, 6'd56}: s2wr14 <= 60;
	      {1'd0, 6'd57}: s2wr14 <= 61;
	      {1'd0, 6'd58}: s2wr14 <= 62;
	      {1'd0, 6'd59}: s2wr14 <= 63;
	      {1'd0, 6'd60}: s2wr14 <= 44;
	      {1'd0, 6'd61}: s2wr14 <= 45;
	      {1'd0, 6'd62}: s2wr14 <= 46;
	      {1'd0, 6'd63}: s2wr14 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr14 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr15 <= 0;
	      {1'd0, 6'd1}: s2wr15 <= 1;
	      {1'd0, 6'd2}: s2wr15 <= 2;
	      {1'd0, 6'd3}: s2wr15 <= 3;
	      {1'd0, 6'd4}: s2wr15 <= 16;
	      {1'd0, 6'd5}: s2wr15 <= 17;
	      {1'd0, 6'd6}: s2wr15 <= 18;
	      {1'd0, 6'd7}: s2wr15 <= 19;
	      {1'd0, 6'd8}: s2wr15 <= 32;
	      {1'd0, 6'd9}: s2wr15 <= 33;
	      {1'd0, 6'd10}: s2wr15 <= 34;
	      {1'd0, 6'd11}: s2wr15 <= 35;
	      {1'd0, 6'd12}: s2wr15 <= 48;
	      {1'd0, 6'd13}: s2wr15 <= 49;
	      {1'd0, 6'd14}: s2wr15 <= 50;
	      {1'd0, 6'd15}: s2wr15 <= 51;
	      {1'd0, 6'd16}: s2wr15 <= 4;
	      {1'd0, 6'd17}: s2wr15 <= 5;
	      {1'd0, 6'd18}: s2wr15 <= 6;
	      {1'd0, 6'd19}: s2wr15 <= 7;
	      {1'd0, 6'd20}: s2wr15 <= 20;
	      {1'd0, 6'd21}: s2wr15 <= 21;
	      {1'd0, 6'd22}: s2wr15 <= 22;
	      {1'd0, 6'd23}: s2wr15 <= 23;
	      {1'd0, 6'd24}: s2wr15 <= 36;
	      {1'd0, 6'd25}: s2wr15 <= 37;
	      {1'd0, 6'd26}: s2wr15 <= 38;
	      {1'd0, 6'd27}: s2wr15 <= 39;
	      {1'd0, 6'd28}: s2wr15 <= 52;
	      {1'd0, 6'd29}: s2wr15 <= 53;
	      {1'd0, 6'd30}: s2wr15 <= 54;
	      {1'd0, 6'd31}: s2wr15 <= 55;
	      {1'd0, 6'd32}: s2wr15 <= 8;
	      {1'd0, 6'd33}: s2wr15 <= 9;
	      {1'd0, 6'd34}: s2wr15 <= 10;
	      {1'd0, 6'd35}: s2wr15 <= 11;
	      {1'd0, 6'd36}: s2wr15 <= 24;
	      {1'd0, 6'd37}: s2wr15 <= 25;
	      {1'd0, 6'd38}: s2wr15 <= 26;
	      {1'd0, 6'd39}: s2wr15 <= 27;
	      {1'd0, 6'd40}: s2wr15 <= 40;
	      {1'd0, 6'd41}: s2wr15 <= 41;
	      {1'd0, 6'd42}: s2wr15 <= 42;
	      {1'd0, 6'd43}: s2wr15 <= 43;
	      {1'd0, 6'd44}: s2wr15 <= 56;
	      {1'd0, 6'd45}: s2wr15 <= 57;
	      {1'd0, 6'd46}: s2wr15 <= 58;
	      {1'd0, 6'd47}: s2wr15 <= 59;
	      {1'd0, 6'd48}: s2wr15 <= 12;
	      {1'd0, 6'd49}: s2wr15 <= 13;
	      {1'd0, 6'd50}: s2wr15 <= 14;
	      {1'd0, 6'd51}: s2wr15 <= 15;
	      {1'd0, 6'd52}: s2wr15 <= 28;
	      {1'd0, 6'd53}: s2wr15 <= 29;
	      {1'd0, 6'd54}: s2wr15 <= 30;
	      {1'd0, 6'd55}: s2wr15 <= 31;
	      {1'd0, 6'd56}: s2wr15 <= 44;
	      {1'd0, 6'd57}: s2wr15 <= 45;
	      {1'd0, 6'd58}: s2wr15 <= 46;
	      {1'd0, 6'd59}: s2wr15 <= 47;
	      {1'd0, 6'd60}: s2wr15 <= 60;
	      {1'd0, 6'd61}: s2wr15 <= 61;
	      {1'd0, 6'd62}: s2wr15 <= 62;
	      {1'd0, 6'd63}: s2wr15 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr15 is "block"
endmodule




module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock7817(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(2, 1) shiftFIFO_24502(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1682;
   wire signed [15:0] a1683;
   wire signed [15:0] a1684;
   wire signed [15:0] a1685;
   wire signed [15:0] a1690;
   wire signed [15:0] a1691;
   wire signed [15:0] a1692;
   wire signed [15:0] a1693;
   wire signed [15:0] a1698;
   wire signed [15:0] a1699;
   wire signed [15:0] a1700;
   wire signed [15:0] a1701;
   wire signed [15:0] a1706;
   wire signed [15:0] a1707;
   wire signed [15:0] a1708;
   wire signed [15:0] a1709;
   wire signed [15:0] a1714;
   wire signed [15:0] a1715;
   wire signed [15:0] a1716;
   wire signed [15:0] a1717;
   wire signed [15:0] a1722;
   wire signed [15:0] a1723;
   wire signed [15:0] a1724;
   wire signed [15:0] a1725;
   wire signed [15:0] a1730;
   wire signed [15:0] a1731;
   wire signed [15:0] a1732;
   wire signed [15:0] a1733;
   wire signed [15:0] a1738;
   wire signed [15:0] a1739;
   wire signed [15:0] a1740;
   wire signed [15:0] a1741;
   wire signed [16:0] tm485;
   wire signed [16:0] tm486;
   wire signed [16:0] tm487;
   wire signed [16:0] tm488;
   wire signed [16:0] tm489;
   wire signed [16:0] tm490;
   wire signed [16:0] tm491;
   wire signed [16:0] tm492;
   wire signed [16:0] tm501;
   wire signed [16:0] tm502;
   wire signed [16:0] tm503;
   wire signed [16:0] tm504;
   wire signed [16:0] tm505;
   wire signed [16:0] tm506;
   wire signed [16:0] tm507;
   wire signed [16:0] tm508;
   wire signed [16:0] tm517;
   wire signed [16:0] tm518;
   wire signed [16:0] tm519;
   wire signed [16:0] tm520;
   wire signed [16:0] tm521;
   wire signed [16:0] tm522;
   wire signed [16:0] tm523;
   wire signed [16:0] tm524;
   wire signed [16:0] tm533;
   wire signed [16:0] tm534;
   wire signed [16:0] tm535;
   wire signed [16:0] tm536;
   wire signed [16:0] tm537;
   wire signed [16:0] tm538;
   wire signed [16:0] tm539;
   wire signed [16:0] tm540;
   wire signed [15:0] t2322;
   wire signed [15:0] t2323;
   wire signed [15:0] t2324;
   wire signed [15:0] t2325;
   wire signed [15:0] t2326;
   wire signed [15:0] t2327;
   wire signed [15:0] t2328;
   wire signed [15:0] t2329;
   wire signed [15:0] t2338;
   wire signed [15:0] t2339;
   wire signed [15:0] t2340;
   wire signed [15:0] t2341;
   wire signed [15:0] t2342;
   wire signed [15:0] t2343;
   wire signed [15:0] t2344;
   wire signed [15:0] t2345;
   wire signed [15:0] t2354;
   wire signed [15:0] t2355;
   wire signed [15:0] t2356;
   wire signed [15:0] t2357;
   wire signed [15:0] t2358;
   wire signed [15:0] t2359;
   wire signed [15:0] t2360;
   wire signed [15:0] t2361;
   wire signed [15:0] t2370;
   wire signed [15:0] t2371;
   wire signed [15:0] t2372;
   wire signed [15:0] t2373;
   wire signed [15:0] t2374;
   wire signed [15:0] t2375;
   wire signed [15:0] t2376;
   wire signed [15:0] t2377;
   wire signed [16:0] tm493;
   wire signed [16:0] tm494;
   wire signed [16:0] tm495;
   wire signed [16:0] tm496;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm497;
   wire signed [16:0] tm498;
   wire signed [16:0] tm499;
   wire signed [16:0] tm500;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm509;
   wire signed [16:0] tm510;
   wire signed [16:0] tm511;
   wire signed [16:0] tm512;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm513;
   wire signed [16:0] tm514;
   wire signed [16:0] tm515;
   wire signed [16:0] tm516;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm525;
   wire signed [16:0] tm526;
   wire signed [16:0] tm527;
   wire signed [16:0] tm528;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm529;
   wire signed [16:0] tm530;
   wire signed [16:0] tm531;
   wire signed [16:0] tm532;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm541;
   wire signed [16:0] tm542;
   wire signed [16:0] tm543;
   wire signed [16:0] tm544;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm545;
   wire signed [16:0] tm546;
   wire signed [16:0] tm547;
   wire signed [16:0] tm548;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t2330;
   wire signed [15:0] t2331;
   wire signed [15:0] t2332;
   wire signed [15:0] t2333;
   wire signed [15:0] t2334;
   wire signed [15:0] t2335;
   wire signed [15:0] t2336;
   wire signed [15:0] t2337;
   wire signed [15:0] t2346;
   wire signed [15:0] t2347;
   wire signed [15:0] t2348;
   wire signed [15:0] t2349;
   wire signed [15:0] t2350;
   wire signed [15:0] t2351;
   wire signed [15:0] t2352;
   wire signed [15:0] t2353;
   wire signed [15:0] t2362;
   wire signed [15:0] t2363;
   wire signed [15:0] t2364;
   wire signed [15:0] t2365;
   wire signed [15:0] t2366;
   wire signed [15:0] t2367;
   wire signed [15:0] t2368;
   wire signed [15:0] t2369;
   wire signed [15:0] t2378;
   wire signed [15:0] t2379;
   wire signed [15:0] t2380;
   wire signed [15:0] t2381;
   wire signed [15:0] t2382;
   wire signed [15:0] t2383;
   wire signed [15:0] t2384;
   wire signed [15:0] t2385;


   assign a1682 = X0;
   assign a1683 = X4;
   assign a1684 = X1;
   assign a1685 = X5;
   assign a1690 = X2;
   assign a1691 = X6;
   assign a1692 = X3;
   assign a1693 = X7;
   assign a1698 = X8;
   assign a1699 = X12;
   assign a1700 = X9;
   assign a1701 = X13;
   assign a1706 = X10;
   assign a1707 = X14;
   assign a1708 = X11;
   assign a1709 = X15;
   assign a1714 = X16;
   assign a1715 = X20;
   assign a1716 = X17;
   assign a1717 = X21;
   assign a1722 = X18;
   assign a1723 = X22;
   assign a1724 = X19;
   assign a1725 = X23;
   assign a1730 = X24;
   assign a1731 = X28;
   assign a1732 = X25;
   assign a1733 = X29;
   assign a1738 = X26;
   assign a1739 = X30;
   assign a1740 = X27;
   assign a1741 = X31;
   assign t2322 = tm485[16:1];
   assign t2323 = tm486[16:1];
   assign t2324 = tm487[16:1];
   assign t2325 = tm488[16:1];
   assign t2326 = tm489[16:1];
   assign t2327 = tm490[16:1];
   assign t2328 = tm491[16:1];
   assign t2329 = tm492[16:1];
   assign t2338 = tm501[16:1];
   assign t2339 = tm502[16:1];
   assign t2340 = tm503[16:1];
   assign t2341 = tm504[16:1];
   assign t2342 = tm505[16:1];
   assign t2343 = tm506[16:1];
   assign t2344 = tm507[16:1];
   assign t2345 = tm508[16:1];
   assign t2354 = tm517[16:1];
   assign t2355 = tm518[16:1];
   assign t2356 = tm519[16:1];
   assign t2357 = tm520[16:1];
   assign t2358 = tm521[16:1];
   assign t2359 = tm522[16:1];
   assign t2360 = tm523[16:1];
   assign t2361 = tm524[16:1];
   assign t2370 = tm533[16:1];
   assign t2371 = tm534[16:1];
   assign t2372 = tm535[16:1];
   assign t2373 = tm536[16:1];
   assign t2374 = tm537[16:1];
   assign t2375 = tm538[16:1];
   assign t2376 = tm539[16:1];
   assign t2377 = tm540[16:1];
   assign Y0 = t2330;
   assign Y1 = t2331;
   assign Y4 = t2332;
   assign Y5 = t2333;
   assign Y2 = t2334;
   assign Y3 = t2335;
   assign Y6 = t2336;
   assign Y7 = t2337;
   assign Y8 = t2346;
   assign Y9 = t2347;
   assign Y12 = t2348;
   assign Y13 = t2349;
   assign Y10 = t2350;
   assign Y11 = t2351;
   assign Y14 = t2352;
   assign Y15 = t2353;
   assign Y16 = t2362;
   assign Y17 = t2363;
   assign Y20 = t2364;
   assign Y21 = t2365;
   assign Y18 = t2366;
   assign Y19 = t2367;
   assign Y22 = t2368;
   assign Y23 = t2369;
   assign Y24 = t2378;
   assign Y25 = t2379;
   assign Y28 = t2380;
   assign Y29 = t2381;
   assign Y26 = t2382;
   assign Y27 = t2383;
   assign Y30 = t2384;
   assign Y31 = t2385;
   assign t2330 = tm493[16:1];
   assign t2331 = tm494[16:1];
   assign t2332 = tm495[16:1];
   assign t2333 = tm496[16:1];
   assign t2334 = tm497[16:1];
   assign t2335 = tm498[16:1];
   assign t2336 = tm499[16:1];
   assign t2337 = tm500[16:1];
   assign t2346 = tm509[16:1];
   assign t2347 = tm510[16:1];
   assign t2348 = tm511[16:1];
   assign t2349 = tm512[16:1];
   assign t2350 = tm513[16:1];
   assign t2351 = tm514[16:1];
   assign t2352 = tm515[16:1];
   assign t2353 = tm516[16:1];
   assign t2362 = tm525[16:1];
   assign t2363 = tm526[16:1];
   assign t2364 = tm527[16:1];
   assign t2365 = tm528[16:1];
   assign t2366 = tm529[16:1];
   assign t2367 = tm530[16:1];
   assign t2368 = tm531[16:1];
   assign t2369 = tm532[16:1];
   assign t2378 = tm541[16:1];
   assign t2379 = tm542[16:1];
   assign t2380 = tm543[16:1];
   assign t2381 = tm544[16:1];
   assign t2382 = tm545[16:1];
   assign t2383 = tm546[16:1];
   assign t2384 = tm547[16:1];
   assign t2385 = tm548[16:1];

    addfxp #(17, 1) add7829(.a({{1{a1682[15]}}, a1682}), .b({{1{a1683[15]}}, a1683}), .clk(clk), .q(tm485));    // 0
    addfxp #(17, 1) add7844(.a({{1{a1684[15]}}, a1684}), .b({{1{a1685[15]}}, a1685}), .clk(clk), .q(tm486));    // 0
    subfxp #(17, 1) sub7859(.a({{1{a1682[15]}}, a1682}), .b({{1{a1683[15]}}, a1683}), .clk(clk), .q(tm487));    // 0
    subfxp #(17, 1) sub7874(.a({{1{a1684[15]}}, a1684}), .b({{1{a1685[15]}}, a1685}), .clk(clk), .q(tm488));    // 0
    addfxp #(17, 1) add7889(.a({{1{a1690[15]}}, a1690}), .b({{1{a1691[15]}}, a1691}), .clk(clk), .q(tm489));    // 0
    addfxp #(17, 1) add7904(.a({{1{a1692[15]}}, a1692}), .b({{1{a1693[15]}}, a1693}), .clk(clk), .q(tm490));    // 0
    subfxp #(17, 1) sub7919(.a({{1{a1690[15]}}, a1690}), .b({{1{a1691[15]}}, a1691}), .clk(clk), .q(tm491));    // 0
    subfxp #(17, 1) sub7934(.a({{1{a1692[15]}}, a1692}), .b({{1{a1693[15]}}, a1693}), .clk(clk), .q(tm492));    // 0
    addfxp #(17, 1) add8037(.a({{1{a1698[15]}}, a1698}), .b({{1{a1699[15]}}, a1699}), .clk(clk), .q(tm501));    // 0
    addfxp #(17, 1) add8052(.a({{1{a1700[15]}}, a1700}), .b({{1{a1701[15]}}, a1701}), .clk(clk), .q(tm502));    // 0
    subfxp #(17, 1) sub8067(.a({{1{a1698[15]}}, a1698}), .b({{1{a1699[15]}}, a1699}), .clk(clk), .q(tm503));    // 0
    subfxp #(17, 1) sub8082(.a({{1{a1700[15]}}, a1700}), .b({{1{a1701[15]}}, a1701}), .clk(clk), .q(tm504));    // 0
    addfxp #(17, 1) add8097(.a({{1{a1706[15]}}, a1706}), .b({{1{a1707[15]}}, a1707}), .clk(clk), .q(tm505));    // 0
    addfxp #(17, 1) add8112(.a({{1{a1708[15]}}, a1708}), .b({{1{a1709[15]}}, a1709}), .clk(clk), .q(tm506));    // 0
    subfxp #(17, 1) sub8127(.a({{1{a1706[15]}}, a1706}), .b({{1{a1707[15]}}, a1707}), .clk(clk), .q(tm507));    // 0
    subfxp #(17, 1) sub8142(.a({{1{a1708[15]}}, a1708}), .b({{1{a1709[15]}}, a1709}), .clk(clk), .q(tm508));    // 0
    addfxp #(17, 1) add8245(.a({{1{a1714[15]}}, a1714}), .b({{1{a1715[15]}}, a1715}), .clk(clk), .q(tm517));    // 0
    addfxp #(17, 1) add8260(.a({{1{a1716[15]}}, a1716}), .b({{1{a1717[15]}}, a1717}), .clk(clk), .q(tm518));    // 0
    subfxp #(17, 1) sub8275(.a({{1{a1714[15]}}, a1714}), .b({{1{a1715[15]}}, a1715}), .clk(clk), .q(tm519));    // 0
    subfxp #(17, 1) sub8290(.a({{1{a1716[15]}}, a1716}), .b({{1{a1717[15]}}, a1717}), .clk(clk), .q(tm520));    // 0
    addfxp #(17, 1) add8305(.a({{1{a1722[15]}}, a1722}), .b({{1{a1723[15]}}, a1723}), .clk(clk), .q(tm521));    // 0
    addfxp #(17, 1) add8320(.a({{1{a1724[15]}}, a1724}), .b({{1{a1725[15]}}, a1725}), .clk(clk), .q(tm522));    // 0
    subfxp #(17, 1) sub8335(.a({{1{a1722[15]}}, a1722}), .b({{1{a1723[15]}}, a1723}), .clk(clk), .q(tm523));    // 0
    subfxp #(17, 1) sub8350(.a({{1{a1724[15]}}, a1724}), .b({{1{a1725[15]}}, a1725}), .clk(clk), .q(tm524));    // 0
    addfxp #(17, 1) add8453(.a({{1{a1730[15]}}, a1730}), .b({{1{a1731[15]}}, a1731}), .clk(clk), .q(tm533));    // 0
    addfxp #(17, 1) add8468(.a({{1{a1732[15]}}, a1732}), .b({{1{a1733[15]}}, a1733}), .clk(clk), .q(tm534));    // 0
    subfxp #(17, 1) sub8483(.a({{1{a1730[15]}}, a1730}), .b({{1{a1731[15]}}, a1731}), .clk(clk), .q(tm535));    // 0
    subfxp #(17, 1) sub8498(.a({{1{a1732[15]}}, a1732}), .b({{1{a1733[15]}}, a1733}), .clk(clk), .q(tm536));    // 0
    addfxp #(17, 1) add8513(.a({{1{a1738[15]}}, a1738}), .b({{1{a1739[15]}}, a1739}), .clk(clk), .q(tm537));    // 0
    addfxp #(17, 1) add8528(.a({{1{a1740[15]}}, a1740}), .b({{1{a1741[15]}}, a1741}), .clk(clk), .q(tm538));    // 0
    subfxp #(17, 1) sub8543(.a({{1{a1738[15]}}, a1738}), .b({{1{a1739[15]}}, a1739}), .clk(clk), .q(tm539));    // 0
    subfxp #(17, 1) sub8558(.a({{1{a1740[15]}}, a1740}), .b({{1{a1741[15]}}, a1741}), .clk(clk), .q(tm540));    // 0
    addfxp #(17, 1) add7941(.a({{1{t2322[15]}}, t2322}), .b({{1{t2326[15]}}, t2326}), .clk(clk), .q(tm493));    // 1
    addfxp #(17, 1) add7948(.a({{1{t2323[15]}}, t2323}), .b({{1{t2327[15]}}, t2327}), .clk(clk), .q(tm494));    // 1
    subfxp #(17, 1) sub7955(.a({{1{t2322[15]}}, t2322}), .b({{1{t2326[15]}}, t2326}), .clk(clk), .q(tm495));    // 1
    subfxp #(17, 1) sub7962(.a({{1{t2323[15]}}, t2323}), .b({{1{t2327[15]}}, t2327}), .clk(clk), .q(tm496));    // 1
    addfxp #(17, 1) add7985(.a({{1{t2324[15]}}, t2324}), .b({{1{t2329[15]}}, t2329}), .clk(clk), .q(tm497));    // 1
    subfxp #(17, 1) sub7992(.a({{1{t2325[15]}}, t2325}), .b({{1{t2328[15]}}, t2328}), .clk(clk), .q(tm498));    // 1
    subfxp #(17, 1) sub7999(.a({{1{t2324[15]}}, t2324}), .b({{1{t2329[15]}}, t2329}), .clk(clk), .q(tm499));    // 1
    addfxp #(17, 1) add8006(.a({{1{t2325[15]}}, t2325}), .b({{1{t2328[15]}}, t2328}), .clk(clk), .q(tm500));    // 1
    addfxp #(17, 1) add8149(.a({{1{t2338[15]}}, t2338}), .b({{1{t2342[15]}}, t2342}), .clk(clk), .q(tm509));    // 1
    addfxp #(17, 1) add8156(.a({{1{t2339[15]}}, t2339}), .b({{1{t2343[15]}}, t2343}), .clk(clk), .q(tm510));    // 1
    subfxp #(17, 1) sub8163(.a({{1{t2338[15]}}, t2338}), .b({{1{t2342[15]}}, t2342}), .clk(clk), .q(tm511));    // 1
    subfxp #(17, 1) sub8170(.a({{1{t2339[15]}}, t2339}), .b({{1{t2343[15]}}, t2343}), .clk(clk), .q(tm512));    // 1
    addfxp #(17, 1) add8193(.a({{1{t2340[15]}}, t2340}), .b({{1{t2345[15]}}, t2345}), .clk(clk), .q(tm513));    // 1
    subfxp #(17, 1) sub8200(.a({{1{t2341[15]}}, t2341}), .b({{1{t2344[15]}}, t2344}), .clk(clk), .q(tm514));    // 1
    subfxp #(17, 1) sub8207(.a({{1{t2340[15]}}, t2340}), .b({{1{t2345[15]}}, t2345}), .clk(clk), .q(tm515));    // 1
    addfxp #(17, 1) add8214(.a({{1{t2341[15]}}, t2341}), .b({{1{t2344[15]}}, t2344}), .clk(clk), .q(tm516));    // 1
    addfxp #(17, 1) add8357(.a({{1{t2354[15]}}, t2354}), .b({{1{t2358[15]}}, t2358}), .clk(clk), .q(tm525));    // 1
    addfxp #(17, 1) add8364(.a({{1{t2355[15]}}, t2355}), .b({{1{t2359[15]}}, t2359}), .clk(clk), .q(tm526));    // 1
    subfxp #(17, 1) sub8371(.a({{1{t2354[15]}}, t2354}), .b({{1{t2358[15]}}, t2358}), .clk(clk), .q(tm527));    // 1
    subfxp #(17, 1) sub8378(.a({{1{t2355[15]}}, t2355}), .b({{1{t2359[15]}}, t2359}), .clk(clk), .q(tm528));    // 1
    addfxp #(17, 1) add8401(.a({{1{t2356[15]}}, t2356}), .b({{1{t2361[15]}}, t2361}), .clk(clk), .q(tm529));    // 1
    subfxp #(17, 1) sub8408(.a({{1{t2357[15]}}, t2357}), .b({{1{t2360[15]}}, t2360}), .clk(clk), .q(tm530));    // 1
    subfxp #(17, 1) sub8415(.a({{1{t2356[15]}}, t2356}), .b({{1{t2361[15]}}, t2361}), .clk(clk), .q(tm531));    // 1
    addfxp #(17, 1) add8422(.a({{1{t2357[15]}}, t2357}), .b({{1{t2360[15]}}, t2360}), .clk(clk), .q(tm532));    // 1
    addfxp #(17, 1) add8565(.a({{1{t2370[15]}}, t2370}), .b({{1{t2374[15]}}, t2374}), .clk(clk), .q(tm541));    // 1
    addfxp #(17, 1) add8572(.a({{1{t2371[15]}}, t2371}), .b({{1{t2375[15]}}, t2375}), .clk(clk), .q(tm542));    // 1
    subfxp #(17, 1) sub8579(.a({{1{t2370[15]}}, t2370}), .b({{1{t2374[15]}}, t2374}), .clk(clk), .q(tm543));    // 1
    subfxp #(17, 1) sub8586(.a({{1{t2371[15]}}, t2371}), .b({{1{t2375[15]}}, t2375}), .clk(clk), .q(tm544));    // 1
    addfxp #(17, 1) add8609(.a({{1{t2372[15]}}, t2372}), .b({{1{t2377[15]}}, t2377}), .clk(clk), .q(tm545));    // 1
    subfxp #(17, 1) sub8616(.a({{1{t2373[15]}}, t2373}), .b({{1{t2376[15]}}, t2376}), .clk(clk), .q(tm546));    // 1
    subfxp #(17, 1) sub8623(.a({{1{t2372[15]}}, t2372}), .b({{1{t2377[15]}}, t2377}), .clk(clk), .q(tm547));    // 1
    addfxp #(17, 1) add8630(.a({{1{t2373[15]}}, t2373}), .b({{1{t2376[15]}}, t2376}), .clk(clk), .q(tm548));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 6
// Gap: 1
module codeBlock8652(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(5, 1) shiftFIFO_24505(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1562;
   wire signed [15:0] a1563;
   wire signed [15:0] a1564;
   wire signed [15:0] a1565;
   wire signed [15:0] a1570;
   wire signed [15:0] a1571;
   wire signed [15:0] a1572;
   wire signed [15:0] a1573;
   wire signed [15:0] a1578;
   wire signed [15:0] a1579;
   wire signed [15:0] a1580;
   wire signed [15:0] a1581;
   wire signed [15:0] a1584;
   wire signed [15:0] a1585;
   wire signed [15:0] a1588;
   wire signed [15:0] a1589;
   wire signed [15:0] a1592;
   wire signed [15:0] a1593;
   wire signed [15:0] a1594;
   wire signed [15:0] a1595;
   wire signed [15:0] a1600;
   wire signed [15:0] a1601;
   wire signed [15:0] a1602;
   wire signed [15:0] a1603;
   wire signed [15:0] a1604;
   wire signed [15:0] a1605;
   wire signed [15:0] a1606;
   wire signed [15:0] a1607;
   wire signed [15:0] a1610;
   wire signed [15:0] a1611;
   wire signed [15:0] a1614;
   wire signed [15:0] a1615;
   wire signed [16:0] tm549;
   wire signed [16:0] tm550;
   wire signed [16:0] tm551;
   wire signed [16:0] tm552;
   wire signed [16:0] tm553;
   wire signed [16:0] tm554;
   wire signed [16:0] tm555;
   wire signed [16:0] tm556;
   wire signed [16:0] tm581;
   wire signed [16:0] tm582;
   wire signed [16:0] tm583;
   wire signed [16:0] tm584;
   wire signed [15:0] t1842;
   wire signed [15:0] t1843;
   wire signed [15:0] t1844;
   wire signed [15:0] t1845;
   wire signed [15:0] t1846;
   wire signed [15:0] t1847;
   wire signed [15:0] t1848;
   wire signed [15:0] t1849;
   wire signed [15:0] t1880;
   wire signed [15:0] t1881;
   wire signed [15:0] t1882;
   wire signed [15:0] t1883;
   reg signed [15:0] tm805;
   reg signed [15:0] tm808;
   reg signed [15:0] tm841;
   reg signed [15:0] tm844;
   wire signed [16:0] tm557;
   wire signed [16:0] tm558;
   wire signed [16:0] tm559;
   wire signed [16:0] tm560;
   wire signed [16:0] tm561;
   wire signed [16:0] tm562;
   wire signed [16:0] tm563;
   wire signed [16:0] tm564;
   wire signed [15:0] a1538;
   wire signed [15:0] a1539;
   wire signed [15:0] a1540;
   wire signed [15:0] a1541;
   wire signed [15:0] a1542;
   wire signed [15:0] a1543;
   wire signed [15:0] a1544;
   wire signed [15:0] a1545;
   wire signed [15:0] a1546;
   wire signed [15:0] a1547;
   wire signed [15:0] a1548;
   wire signed [15:0] a1549;
   wire signed [15:0] a1550;
   wire signed [15:0] a1551;
   wire signed [15:0] a1552;
   wire signed [15:0] a1553;
   wire signed [15:0] a1554;
   wire signed [15:0] a1555;
   wire signed [15:0] a1556;
   wire signed [15:0] a1557;
   wire signed [15:0] a1558;
   wire signed [15:0] a1559;
   wire signed [15:0] a1560;
   wire signed [15:0] a1561;
   wire signed [15:0] t1850;
   wire signed [15:0] t1851;
   wire signed [15:0] t1852;
   wire signed [15:0] t1853;
   wire signed [15:0] t1854;
   wire signed [15:0] t1855;
   wire signed [15:0] t1856;
   wire signed [15:0] t1857;
   reg signed [15:0] tm806;
   reg signed [15:0] tm809;
   reg signed [15:0] tm817;
   reg signed [15:0] tm820;
   reg signed [15:0] tm829;
   reg signed [15:0] tm832;
   reg signed [15:0] tm842;
   reg signed [15:0] tm845;
   wire signed [15:0] t1858;
   wire signed [15:0] t1859;
   wire signed [15:0] t1864;
   wire signed [15:0] t1865;
   wire signed [15:0] t1866;
   wire signed [15:0] t1867;
   wire signed [15:0] t1884;
   wire signed [15:0] t1885;
   wire signed [15:0] t1886;
   wire signed [15:0] t1887;
   wire signed [15:0] t1900;
   wire signed [15:0] t1901;
   wire signed [15:0] t1906;
   wire signed [15:0] t1907;
   wire signed [15:0] t1908;
   wire signed [15:0] t1909;
   reg signed [15:0] tm807;
   reg signed [15:0] tm810;
   reg signed [15:0] tm818;
   reg signed [15:0] tm821;
   reg signed [15:0] tm830;
   reg signed [15:0] tm833;
   reg signed [15:0] tm843;
   reg signed [15:0] tm846;
   reg signed [15:0] tm853;
   reg signed [15:0] tm856;
   reg signed [15:0] tm859;
   reg signed [15:0] tm862;
   reg signed [15:0] tm865;
   reg signed [15:0] tm868;
   reg signed [15:0] tm871;
   reg signed [15:0] tm874;
   wire signed [16:0] tm565;
   wire signed [16:0] tm566;
   wire signed [16:0] tm567;
   wire signed [16:0] tm568;
   wire signed [16:0] tm569;
   wire signed [16:0] tm570;
   wire signed [16:0] tm571;
   wire signed [16:0] tm572;
   wire signed [16:0] tm585;
   wire signed [16:0] tm586;
   wire signed [16:0] tm587;
   wire signed [16:0] tm588;
   wire signed [16:0] tm597;
   wire signed [16:0] tm598;
   wire signed [16:0] tm599;
   wire signed [16:0] tm600;
   wire signed [16:0] tm601;
   wire signed [16:0] tm602;
   wire signed [16:0] tm603;
   wire signed [16:0] tm604;
   wire signed [15:0] t1860;
   wire signed [15:0] t1861;
   wire signed [15:0] t1862;
   wire signed [15:0] t1863;
   wire signed [15:0] t1868;
   wire signed [15:0] t1869;
   wire signed [15:0] t1870;
   wire signed [15:0] t1871;
   wire signed [15:0] t1888;
   wire signed [15:0] t1889;
   wire signed [15:0] t1890;
   wire signed [15:0] t1891;
   wire signed [15:0] t1902;
   wire signed [15:0] t1903;
   wire signed [15:0] t1904;
   wire signed [15:0] t1905;
   wire signed [15:0] t1910;
   wire signed [15:0] t1911;
   wire signed [15:0] t1912;
   wire signed [15:0] t1913;
   reg signed [15:0] tm819;
   reg signed [15:0] tm822;
   reg signed [15:0] tm831;
   reg signed [15:0] tm834;
   reg signed [15:0] tm854;
   reg signed [15:0] tm857;
   reg signed [15:0] tm860;
   reg signed [15:0] tm863;
   reg signed [15:0] tm866;
   reg signed [15:0] tm869;
   reg signed [15:0] tm872;
   reg signed [15:0] tm875;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm573;
   wire signed [16:0] tm574;
   wire signed [16:0] tm575;
   wire signed [16:0] tm576;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm577;
   wire signed [16:0] tm578;
   wire signed [16:0] tm579;
   wire signed [16:0] tm580;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm589;
   wire signed [16:0] tm590;
   wire signed [16:0] tm591;
   wire signed [16:0] tm592;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm593;
   wire signed [16:0] tm594;
   wire signed [16:0] tm595;
   wire signed [16:0] tm596;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm605;
   wire signed [16:0] tm606;
   wire signed [16:0] tm607;
   wire signed [16:0] tm608;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm609;
   wire signed [16:0] tm610;
   wire signed [16:0] tm611;
   wire signed [16:0] tm612;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t1872;
   wire signed [15:0] t1873;
   wire signed [15:0] t1874;
   wire signed [15:0] t1875;
   wire signed [15:0] t1876;
   wire signed [15:0] t1877;
   wire signed [15:0] t1878;
   wire signed [15:0] t1879;
   wire signed [15:0] t1892;
   wire signed [15:0] t1893;
   wire signed [15:0] t1894;
   wire signed [15:0] t1895;
   wire signed [15:0] t1896;
   wire signed [15:0] t1897;
   wire signed [15:0] t1898;
   wire signed [15:0] t1899;
   wire signed [15:0] t1914;
   wire signed [15:0] t1915;
   wire signed [15:0] t1916;
   wire signed [15:0] t1917;
   wire signed [15:0] t1918;
   wire signed [15:0] t1919;
   wire signed [15:0] t1920;
   wire signed [15:0] t1921;
   reg signed [15:0] tm855;
   reg signed [15:0] tm858;
   reg signed [15:0] tm861;
   reg signed [15:0] tm864;
   reg signed [15:0] tm867;
   reg signed [15:0] tm870;
   reg signed [15:0] tm873;
   reg signed [15:0] tm876;

   wire signed [15:0] tm1;
   assign tm1 = 16'h2d41;
   wire signed [15:0] tm3;
   assign tm3 = 16'h3b21;
   wire signed [15:0] tm4;
   assign tm4 = 16'h187e;

   assign a1562 = X0;
   assign a1563 = X16;
   assign a1564 = X1;
   assign a1565 = X17;
   assign a1570 = X8;
   assign a1571 = X24;
   assign a1572 = X9;
   assign a1573 = X25;
   assign a1578 = X18;
   assign a1579 = X19;
   assign a1580 = X2;
   assign a1581 = X3;
   assign a1584 = X10;
   assign a1585 = X11;
   assign a1588 = X26;
   assign a1589 = X27;
   assign a1592 = X4;
   assign a1593 = X21;
   assign a1594 = X5;
   assign a1595 = X20;
   assign a1600 = X12;
   assign a1601 = X13;
   assign a1602 = X29;
   assign a1603 = X28;
   assign a1604 = X23;
   assign a1605 = X22;
   assign a1606 = X6;
   assign a1607 = X7;
   assign a1610 = X14;
   assign a1611 = X15;
   assign a1614 = X30;
   assign a1615 = X31;
   assign t1842 = tm549[16:1];
   assign t1843 = tm550[16:1];
   assign t1844 = tm551[16:1];
   assign t1845 = tm552[16:1];
   assign t1846 = tm553[16:1];
   assign t1847 = tm554[16:1];
   assign t1848 = tm555[16:1];
   assign t1849 = tm556[16:1];
   assign t1880 = tm581[16:1];
   assign t1881 = tm582[16:1];
   assign t1882 = tm583[16:1];
   assign t1883 = tm584[16:1];
   assign t1850 = tm557[16:1];
   assign t1851 = tm558[16:1];
   assign t1852 = tm559[16:1];
   assign t1853 = tm560[16:1];
   assign t1854 = tm561[16:1];
   assign t1855 = tm562[16:1];
   assign t1856 = tm563[16:1];
   assign t1857 = tm564[16:1];
   assign t1860 = tm565[16:1];
   assign t1861 = tm566[16:1];
   assign t1862 = tm567[16:1];
   assign t1863 = tm568[16:1];
   assign t1868 = tm569[16:1];
   assign t1869 = tm570[16:1];
   assign t1870 = tm571[16:1];
   assign t1871 = tm572[16:1];
   assign t1888 = tm585[16:1];
   assign t1889 = tm586[16:1];
   assign t1890 = tm587[16:1];
   assign t1891 = tm588[16:1];
   assign t1902 = tm597[16:1];
   assign t1903 = tm598[16:1];
   assign t1904 = tm599[16:1];
   assign t1905 = tm600[16:1];
   assign t1910 = tm601[16:1];
   assign t1911 = tm602[16:1];
   assign t1912 = tm603[16:1];
   assign t1913 = tm604[16:1];
   assign Y0 = tm855;
   assign Y1 = tm858;
   assign Y4 = tm861;
   assign Y5 = tm864;
   assign Y2 = tm867;
   assign Y3 = tm870;
   assign Y6 = tm873;
   assign Y7 = tm876;
   assign Y8 = t1872;
   assign Y9 = t1873;
   assign Y12 = t1874;
   assign Y13 = t1875;
   assign Y10 = t1876;
   assign Y11 = t1877;
   assign Y14 = t1878;
   assign Y15 = t1879;
   assign Y16 = t1892;
   assign Y17 = t1893;
   assign Y20 = t1894;
   assign Y21 = t1895;
   assign Y18 = t1896;
   assign Y19 = t1897;
   assign Y22 = t1898;
   assign Y23 = t1899;
   assign Y24 = t1914;
   assign Y25 = t1915;
   assign Y28 = t1916;
   assign Y29 = t1917;
   assign Y26 = t1918;
   assign Y27 = t1919;
   assign Y30 = t1920;
   assign Y31 = t1921;
   assign t1872 = tm573[16:1];
   assign t1873 = tm574[16:1];
   assign t1874 = tm575[16:1];
   assign t1875 = tm576[16:1];
   assign t1876 = tm577[16:1];
   assign t1877 = tm578[16:1];
   assign t1878 = tm579[16:1];
   assign t1879 = tm580[16:1];
   assign t1892 = tm589[16:1];
   assign t1893 = tm590[16:1];
   assign t1894 = tm591[16:1];
   assign t1895 = tm592[16:1];
   assign t1896 = tm593[16:1];
   assign t1897 = tm594[16:1];
   assign t1898 = tm595[16:1];
   assign t1899 = tm596[16:1];
   assign t1914 = tm605[16:1];
   assign t1915 = tm606[16:1];
   assign t1916 = tm607[16:1];
   assign t1917 = tm608[16:1];
   assign t1918 = tm609[16:1];
   assign t1919 = tm610[16:1];
   assign t1920 = tm611[16:1];
   assign t1921 = tm612[16:1];

    addfxp #(17, 1) add8664(.a({{1{a1562[15]}}, a1562}), .b({{1{a1563[15]}}, a1563}), .clk(clk), .q(tm549));    // 0
    addfxp #(17, 1) add8679(.a({{1{a1564[15]}}, a1564}), .b({{1{a1565[15]}}, a1565}), .clk(clk), .q(tm550));    // 0
    subfxp #(17, 1) sub8694(.a({{1{a1562[15]}}, a1562}), .b({{1{a1563[15]}}, a1563}), .clk(clk), .q(tm551));    // 0
    subfxp #(17, 1) sub8709(.a({{1{a1564[15]}}, a1564}), .b({{1{a1565[15]}}, a1565}), .clk(clk), .q(tm552));    // 0
    addfxp #(17, 1) add8724(.a({{1{a1570[15]}}, a1570}), .b({{1{a1571[15]}}, a1571}), .clk(clk), .q(tm553));    // 0
    addfxp #(17, 1) add8739(.a({{1{a1572[15]}}, a1572}), .b({{1{a1573[15]}}, a1573}), .clk(clk), .q(tm554));    // 0
    subfxp #(17, 1) sub8754(.a({{1{a1570[15]}}, a1570}), .b({{1{a1571[15]}}, a1571}), .clk(clk), .q(tm555));    // 0
    subfxp #(17, 1) sub8769(.a({{1{a1572[15]}}, a1572}), .b({{1{a1573[15]}}, a1573}), .clk(clk), .q(tm556));    // 0
    addfxp #(17, 1) add9184(.a({{1{a1592[15]}}, a1592}), .b({{1{a1593[15]}}, a1593}), .clk(clk), .q(tm581));    // 0
    subfxp #(17, 1) sub9199(.a({{1{a1594[15]}}, a1594}), .b({{1{a1595[15]}}, a1595}), .clk(clk), .q(tm582));    // 0
    subfxp #(17, 1) sub9214(.a({{1{a1592[15]}}, a1592}), .b({{1{a1593[15]}}, a1593}), .clk(clk), .q(tm583));    // 0
    addfxp #(17, 1) add9229(.a({{1{a1594[15]}}, a1594}), .b({{1{a1595[15]}}, a1595}), .clk(clk), .q(tm584));    // 0
    addfxp #(17, 1) add8776(.a({{1{t1842[15]}}, t1842}), .b({{1{t1846[15]}}, t1846}), .clk(clk), .q(tm557));    // 1
    addfxp #(17, 1) add8783(.a({{1{t1843[15]}}, t1843}), .b({{1{t1847[15]}}, t1847}), .clk(clk), .q(tm558));    // 1
    subfxp #(17, 1) sub8790(.a({{1{t1842[15]}}, t1842}), .b({{1{t1846[15]}}, t1846}), .clk(clk), .q(tm559));    // 1
    subfxp #(17, 1) sub8797(.a({{1{t1843[15]}}, t1843}), .b({{1{t1847[15]}}, t1847}), .clk(clk), .q(tm560));    // 1
    addfxp #(17, 1) add8820(.a({{1{t1844[15]}}, t1844}), .b({{1{t1849[15]}}, t1849}), .clk(clk), .q(tm561));    // 1
    subfxp #(17, 1) sub8827(.a({{1{t1845[15]}}, t1845}), .b({{1{t1848[15]}}, t1848}), .clk(clk), .q(tm562));    // 1
    subfxp #(17, 1) sub8834(.a({{1{t1844[15]}}, t1844}), .b({{1{t1849[15]}}, t1849}), .clk(clk), .q(tm563));    // 1
    addfxp #(17, 1) add8841(.a({{1{t1845[15]}}, t1845}), .b({{1{t1848[15]}}, t1848}), .clk(clk), .q(tm564));    // 1
    multfix #(16, 2) m8868(.a(tm1), .b(a1578), .clk(clk), .q_sc(a1538), .q_unsc(), .rst(reset));
    multfix #(16, 2) m8879(.a(tm1), .b(a1579), .clk(clk), .q_sc(a1539), .q_unsc(), .rst(reset));
    multfix #(16, 2) m8948(.a(tm3), .b(a1584), .clk(clk), .q_sc(a1540), .q_unsc(), .rst(reset));
    multfix #(16, 2) m8959(.a(tm4), .b(a1585), .clk(clk), .q_sc(a1541), .q_unsc(), .rst(reset));
    multfix #(16, 2) m8977(.a(tm3), .b(a1585), .clk(clk), .q_sc(a1542), .q_unsc(), .rst(reset));
    multfix #(16, 2) m8988(.a(tm4), .b(a1584), .clk(clk), .q_sc(a1543), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9006(.a(tm4), .b(a1588), .clk(clk), .q_sc(a1544), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9017(.a(tm3), .b(a1589), .clk(clk), .q_sc(a1545), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9035(.a(tm4), .b(a1589), .clk(clk), .q_sc(a1546), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9046(.a(tm3), .b(a1588), .clk(clk), .q_sc(a1547), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9240(.a(tm1), .b(a1600), .clk(clk), .q_sc(a1548), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9251(.a(tm1), .b(a1601), .clk(clk), .q_sc(a1549), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9276(.a(tm1), .b(a1602), .clk(clk), .q_sc(a1550), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9287(.a(tm1), .b(a1603), .clk(clk), .q_sc(a1551), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9428(.a(tm1), .b(a1604), .clk(clk), .q_sc(a1552), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9439(.a(tm1), .b(a1605), .clk(clk), .q_sc(a1553), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9508(.a(tm4), .b(a1610), .clk(clk), .q_sc(a1554), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9519(.a(tm3), .b(a1611), .clk(clk), .q_sc(a1555), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9537(.a(tm4), .b(a1611), .clk(clk), .q_sc(a1556), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9548(.a(tm3), .b(a1610), .clk(clk), .q_sc(a1557), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9566(.a(tm3), .b(a1614), .clk(clk), .q_sc(a1558), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9577(.a(tm4), .b(a1615), .clk(clk), .q_sc(a1559), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9595(.a(tm4), .b(a1614), .clk(clk), .q_sc(a1560), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9606(.a(tm3), .b(a1615), .clk(clk), .q_sc(a1561), .q_unsc(), .rst(reset));
    addfxp #(16, 1) add8886(.a(a1538), .b(a1539), .clk(clk), .q(t1858));    // 2
    subfxp #(16, 1) sub8893(.a(a1539), .b(a1538), .clk(clk), .q(t1859));    // 2
    addfxp #(16, 1) add8966(.a(a1540), .b(a1541), .clk(clk), .q(t1864));    // 2
    subfxp #(16, 1) sub8995(.a(a1542), .b(a1543), .clk(clk), .q(t1865));    // 2
    addfxp #(16, 1) add9024(.a(a1544), .b(a1545), .clk(clk), .q(t1866));    // 2
    subfxp #(16, 1) sub9053(.a(a1546), .b(a1547), .clk(clk), .q(t1867));    // 2
    addfxp #(16, 1) add9258(.a(a1548), .b(a1549), .clk(clk), .q(t1884));    // 2
    subfxp #(16, 1) sub9265(.a(a1549), .b(a1548), .clk(clk), .q(t1885));    // 2
    subfxp #(16, 1) sub9294(.a(a1550), .b(a1551), .clk(clk), .q(t1886));    // 2
    addfxp #(16, 1) add9301(.a(a1551), .b(a1550), .clk(clk), .q(t1887));    // 2
    subfxp #(16, 1) sub9446(.a(a1552), .b(a1553), .clk(clk), .q(t1900));    // 2
    addfxp #(16, 1) add9453(.a(a1553), .b(a1552), .clk(clk), .q(t1901));    // 2
    addfxp #(16, 1) add9526(.a(a1554), .b(a1555), .clk(clk), .q(t1906));    // 2
    subfxp #(16, 1) sub9555(.a(a1556), .b(a1557), .clk(clk), .q(t1907));    // 2
    addfxp #(16, 1) add9584(.a(a1558), .b(a1559), .clk(clk), .q(t1908));    // 2
    subfxp #(16, 1) sub9613(.a(a1560), .b(a1561), .clk(clk), .q(t1909));    // 2
    addfxp #(17, 1) add8904(.a({{1{tm807[15]}}, tm807}), .b({{1{t1858[15]}}, t1858}), .clk(clk), .q(tm565));    // 3
    addfxp #(17, 1) add8915(.a({{1{tm810[15]}}, tm810}), .b({{1{t1859[15]}}, t1859}), .clk(clk), .q(tm566));    // 3
    subfxp #(17, 1) sub8926(.a({{1{tm807[15]}}, tm807}), .b({{1{t1858[15]}}, t1858}), .clk(clk), .q(tm567));    // 3
    subfxp #(17, 1) sub8937(.a({{1{tm810[15]}}, tm810}), .b({{1{t1859[15]}}, t1859}), .clk(clk), .q(tm568));    // 3
    addfxp #(17, 1) add9060(.a({{1{t1864[15]}}, t1864}), .b({{1{t1866[15]}}, t1866}), .clk(clk), .q(tm569));    // 3
    addfxp #(17, 1) add9067(.a({{1{t1865[15]}}, t1865}), .b({{1{t1867[15]}}, t1867}), .clk(clk), .q(tm570));    // 3
    subfxp #(17, 1) sub9074(.a({{1{t1864[15]}}, t1864}), .b({{1{t1866[15]}}, t1866}), .clk(clk), .q(tm571));    // 3
    subfxp #(17, 1) sub9081(.a({{1{t1865[15]}}, t1865}), .b({{1{t1867[15]}}, t1867}), .clk(clk), .q(tm572));    // 3
    addfxp #(17, 1) add9308(.a({{1{t1884[15]}}, t1884}), .b({{1{t1886[15]}}, t1886}), .clk(clk), .q(tm585));    // 3
    subfxp #(17, 1) sub9315(.a({{1{t1885[15]}}, t1885}), .b({{1{t1887[15]}}, t1887}), .clk(clk), .q(tm586));    // 3
    subfxp #(17, 1) sub9322(.a({{1{t1884[15]}}, t1884}), .b({{1{t1886[15]}}, t1886}), .clk(clk), .q(tm587));    // 3
    addfxp #(17, 1) add9329(.a({{1{t1885[15]}}, t1885}), .b({{1{t1887[15]}}, t1887}), .clk(clk), .q(tm588));    // 3
    addfxp #(17, 1) add9464(.a({{1{tm843[15]}}, tm843}), .b({{1{t1900[15]}}, t1900}), .clk(clk), .q(tm597));    // 3
    subfxp #(17, 1) sub9475(.a({{1{tm846[15]}}, tm846}), .b({{1{t1901[15]}}, t1901}), .clk(clk), .q(tm598));    // 3
    subfxp #(17, 1) sub9486(.a({{1{tm843[15]}}, tm843}), .b({{1{t1900[15]}}, t1900}), .clk(clk), .q(tm599));    // 3
    addfxp #(17, 1) add9497(.a({{1{tm846[15]}}, tm846}), .b({{1{t1901[15]}}, t1901}), .clk(clk), .q(tm600));    // 3
    subfxp #(17, 1) sub9620(.a({{1{t1906[15]}}, t1906}), .b({{1{t1908[15]}}, t1908}), .clk(clk), .q(tm601));    // 3
    addfxp #(17, 1) add9627(.a({{1{t1907[15]}}, t1907}), .b({{1{t1909[15]}}, t1909}), .clk(clk), .q(tm602));    // 3
    addfxp #(17, 1) add9634(.a({{1{t1906[15]}}, t1906}), .b({{1{t1908[15]}}, t1908}), .clk(clk), .q(tm603));    // 3
    subfxp #(17, 1) sub9641(.a({{1{t1907[15]}}, t1907}), .b({{1{t1909[15]}}, t1909}), .clk(clk), .q(tm604));    // 3
    addfxp #(17, 1) add9088(.a({{1{t1860[15]}}, t1860}), .b({{1{t1868[15]}}, t1868}), .clk(clk), .q(tm573));    // 4
    addfxp #(17, 1) add9095(.a({{1{t1861[15]}}, t1861}), .b({{1{t1869[15]}}, t1869}), .clk(clk), .q(tm574));    // 4
    subfxp #(17, 1) sub9102(.a({{1{t1860[15]}}, t1860}), .b({{1{t1868[15]}}, t1868}), .clk(clk), .q(tm575));    // 4
    subfxp #(17, 1) sub9109(.a({{1{t1861[15]}}, t1861}), .b({{1{t1869[15]}}, t1869}), .clk(clk), .q(tm576));    // 4
    addfxp #(17, 1) add9132(.a({{1{t1862[15]}}, t1862}), .b({{1{t1871[15]}}, t1871}), .clk(clk), .q(tm577));    // 4
    subfxp #(17, 1) sub9139(.a({{1{t1863[15]}}, t1863}), .b({{1{t1870[15]}}, t1870}), .clk(clk), .q(tm578));    // 4
    subfxp #(17, 1) sub9146(.a({{1{t1862[15]}}, t1862}), .b({{1{t1871[15]}}, t1871}), .clk(clk), .q(tm579));    // 4
    addfxp #(17, 1) add9153(.a({{1{t1863[15]}}, t1863}), .b({{1{t1870[15]}}, t1870}), .clk(clk), .q(tm580));    // 4
    addfxp #(17, 1) add9336(.a({{1{tm819[15]}}, tm819}), .b({{1{t1888[15]}}, t1888}), .clk(clk), .q(tm589));    // 4
    addfxp #(17, 1) add9343(.a({{1{tm822[15]}}, tm822}), .b({{1{t1889[15]}}, t1889}), .clk(clk), .q(tm590));    // 4
    subfxp #(17, 1) sub9350(.a({{1{tm819[15]}}, tm819}), .b({{1{t1888[15]}}, t1888}), .clk(clk), .q(tm591));    // 4
    subfxp #(17, 1) sub9357(.a({{1{tm822[15]}}, tm822}), .b({{1{t1889[15]}}, t1889}), .clk(clk), .q(tm592));    // 4
    addfxp #(17, 1) add9380(.a({{1{tm831[15]}}, tm831}), .b({{1{t1891[15]}}, t1891}), .clk(clk), .q(tm593));    // 4
    subfxp #(17, 1) sub9387(.a({{1{tm834[15]}}, tm834}), .b({{1{t1890[15]}}, t1890}), .clk(clk), .q(tm594));    // 4
    subfxp #(17, 1) sub9394(.a({{1{tm831[15]}}, tm831}), .b({{1{t1891[15]}}, t1891}), .clk(clk), .q(tm595));    // 4
    addfxp #(17, 1) add9401(.a({{1{tm834[15]}}, tm834}), .b({{1{t1890[15]}}, t1890}), .clk(clk), .q(tm596));    // 4
    addfxp #(17, 1) add9648(.a({{1{t1902[15]}}, t1902}), .b({{1{t1910[15]}}, t1910}), .clk(clk), .q(tm605));    // 4
    addfxp #(17, 1) add9655(.a({{1{t1903[15]}}, t1903}), .b({{1{t1911[15]}}, t1911}), .clk(clk), .q(tm606));    // 4
    subfxp #(17, 1) sub9662(.a({{1{t1902[15]}}, t1902}), .b({{1{t1910[15]}}, t1910}), .clk(clk), .q(tm607));    // 4
    subfxp #(17, 1) sub9669(.a({{1{t1903[15]}}, t1903}), .b({{1{t1911[15]}}, t1911}), .clk(clk), .q(tm608));    // 4
    addfxp #(17, 1) add9692(.a({{1{t1904[15]}}, t1904}), .b({{1{t1913[15]}}, t1913}), .clk(clk), .q(tm609));    // 4
    subfxp #(17, 1) sub9699(.a({{1{t1905[15]}}, t1905}), .b({{1{t1912[15]}}, t1912}), .clk(clk), .q(tm610));    // 4
    subfxp #(17, 1) sub9706(.a({{1{t1904[15]}}, t1904}), .b({{1{t1913[15]}}, t1913}), .clk(clk), .q(tm611));    // 4
    addfxp #(17, 1) add9713(.a({{1{t1905[15]}}, t1905}), .b({{1{t1912[15]}}, t1912}), .clk(clk), .q(tm612));    // 4


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm805 <= a1580;
         tm808 <= a1581;
         tm841 <= a1606;
         tm844 <= a1607;
         tm806 <= tm805;
         tm809 <= tm808;
         tm817 <= t1880;
         tm820 <= t1881;
         tm829 <= t1882;
         tm832 <= t1883;
         tm842 <= tm841;
         tm845 <= tm844;
         tm807 <= tm806;
         tm810 <= tm809;
         tm818 <= tm817;
         tm821 <= tm820;
         tm830 <= tm829;
         tm833 <= tm832;
         tm843 <= tm842;
         tm846 <= tm845;
         tm853 <= t1850;
         tm856 <= t1851;
         tm859 <= t1852;
         tm862 <= t1853;
         tm865 <= t1854;
         tm868 <= t1855;
         tm871 <= t1856;
         tm874 <= t1857;
         tm819 <= tm818;
         tm822 <= tm821;
         tm831 <= tm830;
         tm834 <= tm833;
         tm854 <= tm853;
         tm857 <= tm856;
         tm860 <= tm859;
         tm863 <= tm862;
         tm866 <= tm865;
         tm869 <= tm868;
         tm872 <= tm871;
         tm875 <= tm874;
         tm855 <= tm854;
         tm858 <= tm857;
         tm861 <= tm860;
         tm864 <= tm863;
         tm867 <= tm866;
         tm870 <= tm869;
         tm873 <= tm872;
         tm876 <= tm875;
      end
   end
endmodule

// Latency: 15
// Gap: 4
module rc9738(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   wire [31:0] t8;
   wire [31:0] s8;
   assign t8 = {X16, X17};
   wire [31:0] t9;
   wire [31:0] s9;
   assign t9 = {X18, X19};
   wire [31:0] t10;
   wire [31:0] s10;
   assign t10 = {X20, X21};
   wire [31:0] t11;
   wire [31:0] s11;
   assign t11 = {X22, X23};
   wire [31:0] t12;
   wire [31:0] s12;
   assign t12 = {X24, X25};
   wire [31:0] t13;
   wire [31:0] s13;
   assign t13 = {X26, X27};
   wire [31:0] t14;
   wire [31:0] s14;
   assign t14 = {X28, X29};
   wire [31:0] t15;
   wire [31:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];
   assign Y16 = s8[31:16];
   assign Y17 = s8[15:0];
   assign Y18 = s9[31:16];
   assign Y19 = s9[15:0];
   assign Y20 = s10[31:16];
   assign Y21 = s10[15:0];
   assign Y22 = s11[31:16];
   assign Y23 = s11[15:0];
   assign Y24 = s12[31:16];
   assign Y25 = s12[15:0];
   assign Y26 = s13[31:16];
   assign Y27 = s13[15:0];
   assign Y28 = s14[31:16];
   assign Y29 = s14[15:0];
   assign Y30 = s15[31:16];
   assign Y31 = s15[15:0];

   perm9736 instPerm24506(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet9736(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
,       x8, y8
,       x9, y9
,       x10, y10
,       x11, y11
,       x12, y12
,       x13, y13
,       x14, y14
,       x15, y15
);

    parameter width = 32;

    input [1:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    input [width-1:0] x8;
    output reg [width-1:0] y8;
    input [width-1:0] x9;
    output reg [width-1:0] y9;
    input [width-1:0] x10;
    output reg [width-1:0] y10;
    input [width-1:0] x11;
    output reg [width-1:0] y11;
    input [width-1:0] x12;
    output reg [width-1:0] y12;
    input [width-1:0] x13;
    output reg [width-1:0] y13;
    input [width-1:0] x14;
    output reg [width-1:0] y14;
    input [width-1:0] x15;
    output reg [width-1:0] y15;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7, t0_8, t0_9, t0_10, t0_11, t0_12, t0_13, t0_14, t0_15;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7, t1_8, t1_9, t1_10, t1_11, t1_12, t1_13, t1_14, t1_15;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10, t6_11, t6_12, t6_13, t6_14, t6_15;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15;
    wire [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14, t9_15;
    wire [width-1:0] t10_0, t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14, t10_15;
    reg [width-1:0] t11_0, t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14, t11_15;
    wire [width-1:0] t12_0, t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9, t12_10, t12_11, t12_12, t12_13, t12_14, t12_15;
    reg [width-1:0] t13_0, t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13, t13_14, t13_15;

    reg [15:0] control;

    always @(posedge clk) begin
      case(ct)
        2'd0: control <= 16'b1111111111111111;
        2'd1: control <= 16'b0000000011111111;
        2'd2: control <= 16'b1111111100000000;
        2'd3: control <= 16'b0000000000000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [15:0] control0;
   reg [15:0] control1;
   reg [15:0] control2;
   reg [15:0] control3;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
        control3 <= control2;
    end
    assign t0_0 = x0;
    assign t0_1 = x8;
    assign t0_2 = x1;
    assign t0_3 = x9;
    assign t0_4 = x2;
    assign t0_5 = x10;
    assign t0_6 = x3;
    assign t0_7 = x11;
    assign t0_8 = x4;
    assign t0_9 = x12;
    assign t0_10 = x5;
    assign t0_11 = x13;
    assign t0_12 = x6;
    assign t0_13 = x14;
    assign t0_14 = x7;
    assign t0_15 = x15;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
     assign t1_8 = t0_8;
     assign t1_9 = t0_9;
     assign t1_10 = t0_10;
     assign t1_11 = t0_11;
     assign t1_12 = t0_12;
     assign t1_13 = t0_13;
     assign t1_14 = t0_14;
     assign t1_15 = t0_15;
    assign t2_0 = t1_0;
    assign t2_1 = t1_8;
    assign t2_2 = t1_1;
    assign t2_3 = t1_9;
    assign t2_4 = t1_2;
    assign t2_5 = t1_10;
    assign t2_6 = t1_3;
    assign t2_7 = t1_11;
    assign t2_8 = t1_4;
    assign t2_9 = t1_12;
    assign t2_10 = t1_5;
    assign t2_11 = t1_13;
    assign t2_12 = t1_6;
    assign t2_13 = t1_14;
    assign t2_14 = t1_7;
    assign t2_15 = t1_15;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
         t3_8 <= t2_8;
         t3_9 <= t2_9;
         t3_10 <= t2_10;
         t3_11 <= t2_11;
         t3_12 <= t2_12;
         t3_13 <= t2_13;
         t3_14 <= t2_14;
         t3_15 <= t2_15;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_8;
    assign t4_2 = t3_1;
    assign t4_3 = t3_9;
    assign t4_4 = t3_2;
    assign t4_5 = t3_10;
    assign t4_6 = t3_3;
    assign t4_7 = t3_11;
    assign t4_8 = t3_4;
    assign t4_9 = t3_12;
    assign t4_10 = t3_5;
    assign t4_11 = t3_13;
    assign t4_12 = t3_6;
    assign t4_13 = t3_14;
    assign t4_14 = t3_7;
    assign t4_15 = t3_15;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_2;
     assign t5_3 = t4_3;
     assign t5_4 = t4_4;
     assign t5_5 = t4_5;
     assign t5_6 = t4_6;
     assign t5_7 = t4_7;
     assign t5_8 = t4_8;
     assign t5_9 = t4_9;
     assign t5_10 = t4_10;
     assign t5_11 = t4_11;
     assign t5_12 = t4_12;
     assign t5_13 = t4_13;
     assign t5_14 = t4_14;
     assign t5_15 = t4_15;
    assign t6_0 = t5_0;
    assign t6_1 = t5_8;
    assign t6_2 = t5_1;
    assign t6_3 = t5_9;
    assign t6_4 = t5_2;
    assign t6_5 = t5_10;
    assign t6_6 = t5_3;
    assign t6_7 = t5_11;
    assign t6_8 = t5_4;
    assign t6_9 = t5_12;
    assign t6_10 = t5_5;
    assign t6_11 = t5_13;
    assign t6_12 = t5_6;
    assign t6_13 = t5_14;
    assign t6_14 = t5_7;
    assign t6_15 = t5_15;
   always @(posedge clk) begin
         t7_0 <= (control1[15] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[15] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[14] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[14] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[13] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[13] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[12] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[12] == 0) ? t6_7 : t6_6;
         t7_8 <= (control1[11] == 0) ? t6_8 : t6_9;
         t7_9 <= (control1[11] == 0) ? t6_9 : t6_8;
         t7_10 <= (control1[10] == 0) ? t6_10 : t6_11;
         t7_11 <= (control1[10] == 0) ? t6_11 : t6_10;
         t7_12 <= (control1[9] == 0) ? t6_12 : t6_13;
         t7_13 <= (control1[9] == 0) ? t6_13 : t6_12;
         t7_14 <= (control1[8] == 0) ? t6_14 : t6_15;
         t7_15 <= (control1[8] == 0) ? t6_15 : t6_14;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_8;
    assign t8_5 = t7_10;
    assign t8_6 = t7_12;
    assign t8_7 = t7_14;
    assign t8_8 = t7_1;
    assign t8_9 = t7_3;
    assign t8_10 = t7_5;
    assign t8_11 = t7_7;
    assign t8_12 = t7_9;
    assign t8_13 = t7_11;
    assign t8_14 = t7_13;
    assign t8_15 = t7_15;
     assign t9_0 = (control2[7] == 0) ? t8_0 : t8_1;
     assign t9_1 = (control2[7] == 0) ? t8_1 : t8_0;
     assign t9_2 = (control2[6] == 0) ? t8_2 : t8_3;
     assign t9_3 = (control2[6] == 0) ? t8_3 : t8_2;
     assign t9_4 = (control2[5] == 0) ? t8_4 : t8_5;
     assign t9_5 = (control2[5] == 0) ? t8_5 : t8_4;
     assign t9_6 = (control2[4] == 0) ? t8_6 : t8_7;
     assign t9_7 = (control2[4] == 0) ? t8_7 : t8_6;
     assign t9_8 = (control2[3] == 0) ? t8_8 : t8_9;
     assign t9_9 = (control2[3] == 0) ? t8_9 : t8_8;
     assign t9_10 = (control2[2] == 0) ? t8_10 : t8_11;
     assign t9_11 = (control2[2] == 0) ? t8_11 : t8_10;
     assign t9_12 = (control2[1] == 0) ? t8_12 : t8_13;
     assign t9_13 = (control2[1] == 0) ? t8_13 : t8_12;
     assign t9_14 = (control2[0] == 0) ? t8_14 : t8_15;
     assign t9_15 = (control2[0] == 0) ? t8_15 : t8_14;
    assign t10_0 = t9_0;
    assign t10_1 = t9_2;
    assign t10_2 = t9_4;
    assign t10_3 = t9_6;
    assign t10_4 = t9_8;
    assign t10_5 = t9_10;
    assign t10_6 = t9_12;
    assign t10_7 = t9_14;
    assign t10_8 = t9_1;
    assign t10_9 = t9_3;
    assign t10_10 = t9_5;
    assign t10_11 = t9_7;
    assign t10_12 = t9_9;
    assign t10_13 = t9_11;
    assign t10_14 = t9_13;
    assign t10_15 = t9_15;
   always @(posedge clk) begin
         t11_0 <= t10_0;
         t11_1 <= t10_1;
         t11_2 <= t10_2;
         t11_3 <= t10_3;
         t11_4 <= t10_4;
         t11_5 <= t10_5;
         t11_6 <= t10_6;
         t11_7 <= t10_7;
         t11_8 <= t10_8;
         t11_9 <= t10_9;
         t11_10 <= t10_10;
         t11_11 <= t10_11;
         t11_12 <= t10_12;
         t11_13 <= t10_13;
         t11_14 <= t10_14;
         t11_15 <= t10_15;
   end
    assign t12_0 = t11_0;
    assign t12_1 = t11_2;
    assign t12_2 = t11_4;
    assign t12_3 = t11_6;
    assign t12_4 = t11_8;
    assign t12_5 = t11_10;
    assign t12_6 = t11_12;
    assign t12_7 = t11_14;
    assign t12_8 = t11_1;
    assign t12_9 = t11_3;
    assign t12_10 = t11_5;
    assign t12_11 = t11_7;
    assign t12_12 = t11_9;
    assign t12_13 = t11_11;
    assign t12_14 = t11_13;
    assign t12_15 = t11_15;
   always @(posedge clk) begin
         t13_0 <= t12_0;
         t13_1 <= t12_1;
         t13_2 <= t12_2;
         t13_3 <= t12_3;
         t13_4 <= t12_4;
         t13_5 <= t12_5;
         t13_6 <= t12_6;
         t13_7 <= t12_7;
         t13_8 <= t12_8;
         t13_9 <= t12_9;
         t13_10 <= t12_10;
         t13_11 <= t12_11;
         t13_12 <= t12_12;
         t13_13 <= t12_13;
         t13_14 <= t12_14;
         t13_15 <= t12_15;
   end
    always @(posedge clk) begin
        y0 <= t13_0;
        y1 <= t13_2;
        y2 <= t13_4;
        y3 <= t13_6;
        y4 <= t13_8;
        y5 <= t13_10;
        y6 <= t13_12;
        y7 <= t13_14;
        y8 <= t13_1;
        y9 <= t13_3;
        y10 <= t13_5;
        y11 <= t13_7;
        y12 <= t13_9;
        y13 <= t13_11;
        y14 <= t13_13;
        y15 <= t13_15;
    end
endmodule

// Latency: 15
// Gap: 4
module perm9736(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter width = 32;

   parameter depth = 4;

   parameter addrbits = 2;

   parameter muxbits = 4;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  t8;
   wire [width-1:0]  s8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  t9;
   wire [width-1:0]  s9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  t10;
   wire [width-1:0]  s10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  t11;
   wire [width-1:0]  s11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  t12;
   wire [width-1:0]  s12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  t13;
   wire [width-1:0]  s13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  t14;
   wire [width-1:0]  s14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  t15;
   wire [width-1:0]  s15;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg [addrbits-1:0] s1rd8, s2wr8, s2rd8;
   reg [addrbits-1:0] s1rd9, s2wr9, s2rd9;
   reg [addrbits-1:0] s1rd10, s2wr10, s2rd10;
   reg [addrbits-1:0] s1rd11, s2wr11, s2rd11;
   reg [addrbits-1:0] s1rd12, s2wr12, s2rd12;
   reg [addrbits-1:0] s1rd13, s2wr13, s2rd13;
   reg [addrbits-1:0] s1rd14, s2wr14, s2rd14;
   reg [addrbits-1:0] s1rd15, s2wr15, s2rd15;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm25;
   assign tm25 = 0;

shiftRegFIFO #(6, 1) shiftFIFO_24511(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24512(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem8(x8, t8, {inFlip0, s1wr0}, {outFlip0, s1rd8}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem9(x9, t9, {inFlip0, s1wr0}, {outFlip0, s1rd9}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem10(x10, t10, {inFlip0, s1wr0}, {outFlip0, s1rd10}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem11(x11, t11, {inFlip0, s1wr0}, {outFlip0, s1rd11}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem12(x12, t12, {inFlip0, s1wr0}, {outFlip0, s1rd12}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem13(x13, t13, {inFlip0, s1wr0}, {outFlip0, s1rd13}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem14(x14, t14, {inFlip0, s1wr0}, {outFlip0, s1rd14}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem15(x15, t15, {inFlip0, s1wr0}, {outFlip0, s1rd15}, s1wr_en, clk);

shiftRegFIFO #(3, 1) shiftFIFO_24521(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_24522(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_24523(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24524(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(3, 1) shiftFIFO_24527(.X(tm25), .Y(tm25_d), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_24530(.X(tm25_d), .Y(tm25_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(6, 2) shiftFIFO_24535(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(7, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem8(s8, y8, {inFlip1, s2wr8}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem9(s9, y9, {inFlip1, s2wr9}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem10(s10, y10, {inFlip1, s2wr10}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem11(s11, y11, {inFlip1, s2wr11}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem12(s12, y12, {inFlip1, s2wr12}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem13(s13, y13, {inFlip1, s2wr13}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem14(s14, y14, {inFlip1, s2wr14}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem15(s15, y15, {inFlip1, s2wr15}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd0 <= 3;
	     {1'd0,  2'd1}: s1rd0 <= 2;
	     {1'd0,  2'd2}: s1rd0 <= 1;
	     {1'd0,  2'd3}: s1rd0 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd1 <= 2;
	     {1'd0,  2'd1}: s1rd1 <= 3;
	     {1'd0,  2'd2}: s1rd1 <= 0;
	     {1'd0,  2'd3}: s1rd1 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd2 <= 1;
	     {1'd0,  2'd1}: s1rd2 <= 0;
	     {1'd0,  2'd2}: s1rd2 <= 3;
	     {1'd0,  2'd3}: s1rd2 <= 2;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd3 <= 0;
	     {1'd0,  2'd1}: s1rd3 <= 1;
	     {1'd0,  2'd2}: s1rd3 <= 2;
	     {1'd0,  2'd3}: s1rd3 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd4 <= 3;
	     {1'd0,  2'd1}: s1rd4 <= 2;
	     {1'd0,  2'd2}: s1rd4 <= 1;
	     {1'd0,  2'd3}: s1rd4 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd5 <= 2;
	     {1'd0,  2'd1}: s1rd5 <= 3;
	     {1'd0,  2'd2}: s1rd5 <= 0;
	     {1'd0,  2'd3}: s1rd5 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd6 <= 1;
	     {1'd0,  2'd1}: s1rd6 <= 0;
	     {1'd0,  2'd2}: s1rd6 <= 3;
	     {1'd0,  2'd3}: s1rd6 <= 2;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd7 <= 0;
	     {1'd0,  2'd1}: s1rd7 <= 1;
	     {1'd0,  2'd2}: s1rd7 <= 2;
	     {1'd0,  2'd3}: s1rd7 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd8 <= 3;
	     {1'd0,  2'd1}: s1rd8 <= 2;
	     {1'd0,  2'd2}: s1rd8 <= 1;
	     {1'd0,  2'd3}: s1rd8 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd8 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd9 <= 2;
	     {1'd0,  2'd1}: s1rd9 <= 3;
	     {1'd0,  2'd2}: s1rd9 <= 0;
	     {1'd0,  2'd3}: s1rd9 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd9 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd10 <= 1;
	     {1'd0,  2'd1}: s1rd10 <= 0;
	     {1'd0,  2'd2}: s1rd10 <= 3;
	     {1'd0,  2'd3}: s1rd10 <= 2;
      endcase      
   end

// synthesis attribute rom_style of s1rd10 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd11 <= 0;
	     {1'd0,  2'd1}: s1rd11 <= 1;
	     {1'd0,  2'd2}: s1rd11 <= 2;
	     {1'd0,  2'd3}: s1rd11 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd11 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd12 <= 3;
	     {1'd0,  2'd1}: s1rd12 <= 2;
	     {1'd0,  2'd2}: s1rd12 <= 1;
	     {1'd0,  2'd3}: s1rd12 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd12 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd13 <= 2;
	     {1'd0,  2'd1}: s1rd13 <= 3;
	     {1'd0,  2'd2}: s1rd13 <= 0;
	     {1'd0,  2'd3}: s1rd13 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd13 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd14 <= 1;
	     {1'd0,  2'd1}: s1rd14 <= 0;
	     {1'd0,  2'd2}: s1rd14 <= 3;
	     {1'd0,  2'd3}: s1rd14 <= 2;
      endcase      
   end

// synthesis attribute rom_style of s1rd14 is "block"
   always @(posedge clk) begin
      case({tm25_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd15 <= 0;
	     {1'd0,  2'd1}: s1rd15 <= 1;
	     {1'd0,  2'd2}: s1rd15 <= 2;
	     {1'd0,  2'd3}: s1rd15 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd15 is "block"
    swNet9736 sw(tm25_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7, t8, s8, t9, s9, t10, s10, t11, s11, t12, s12, t13, s13, t14, s14, t15, s15);

   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr0 <= 3;
	      {1'd0, 2'd1}: s2wr0 <= 2;
	      {1'd0, 2'd2}: s2wr0 <= 1;
	      {1'd0, 2'd3}: s2wr0 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr1 <= 2;
	      {1'd0, 2'd1}: s2wr1 <= 3;
	      {1'd0, 2'd2}: s2wr1 <= 0;
	      {1'd0, 2'd3}: s2wr1 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr2 <= 1;
	      {1'd0, 2'd1}: s2wr2 <= 0;
	      {1'd0, 2'd2}: s2wr2 <= 3;
	      {1'd0, 2'd3}: s2wr2 <= 2;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr3 <= 0;
	      {1'd0, 2'd1}: s2wr3 <= 1;
	      {1'd0, 2'd2}: s2wr3 <= 2;
	      {1'd0, 2'd3}: s2wr3 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr4 <= 3;
	      {1'd0, 2'd1}: s2wr4 <= 2;
	      {1'd0, 2'd2}: s2wr4 <= 1;
	      {1'd0, 2'd3}: s2wr4 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr5 <= 2;
	      {1'd0, 2'd1}: s2wr5 <= 3;
	      {1'd0, 2'd2}: s2wr5 <= 0;
	      {1'd0, 2'd3}: s2wr5 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr6 <= 1;
	      {1'd0, 2'd1}: s2wr6 <= 0;
	      {1'd0, 2'd2}: s2wr6 <= 3;
	      {1'd0, 2'd3}: s2wr6 <= 2;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr7 <= 0;
	      {1'd0, 2'd1}: s2wr7 <= 1;
	      {1'd0, 2'd2}: s2wr7 <= 2;
	      {1'd0, 2'd3}: s2wr7 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr8 <= 3;
	      {1'd0, 2'd1}: s2wr8 <= 2;
	      {1'd0, 2'd2}: s2wr8 <= 1;
	      {1'd0, 2'd3}: s2wr8 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr8 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr9 <= 2;
	      {1'd0, 2'd1}: s2wr9 <= 3;
	      {1'd0, 2'd2}: s2wr9 <= 0;
	      {1'd0, 2'd3}: s2wr9 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr9 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr10 <= 1;
	      {1'd0, 2'd1}: s2wr10 <= 0;
	      {1'd0, 2'd2}: s2wr10 <= 3;
	      {1'd0, 2'd3}: s2wr10 <= 2;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr10 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr11 <= 0;
	      {1'd0, 2'd1}: s2wr11 <= 1;
	      {1'd0, 2'd2}: s2wr11 <= 2;
	      {1'd0, 2'd3}: s2wr11 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr11 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr12 <= 3;
	      {1'd0, 2'd1}: s2wr12 <= 2;
	      {1'd0, 2'd2}: s2wr12 <= 1;
	      {1'd0, 2'd3}: s2wr12 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr12 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr13 <= 2;
	      {1'd0, 2'd1}: s2wr13 <= 3;
	      {1'd0, 2'd2}: s2wr13 <= 0;
	      {1'd0, 2'd3}: s2wr13 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr13 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr14 <= 1;
	      {1'd0, 2'd1}: s2wr14 <= 0;
	      {1'd0, 2'd2}: s2wr14 <= 3;
	      {1'd0, 2'd3}: s2wr14 <= 2;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr14 is "block"
   always @(posedge clk) begin
      case({tm25_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr15 <= 0;
	      {1'd0, 2'd1}: s2wr15 <= 1;
	      {1'd0, 2'd2}: s2wr15 <= 2;
	      {1'd0, 2'd3}: s2wr15 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr15 is "block"
endmodule


// Latency: 8
// Gap: 4
module DirSum_11215(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   input clk, reset, next;

   reg [1:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 3)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock9741 codeBlockIsnt24536(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15),
       .X16_in(X16), .Y16(Y16),
       .X17_in(X17), .Y17(Y17),
       .X18_in(X18), .Y18(Y18),
       .X19_in(X19), .Y19(Y19),
       .X20_in(X20), .Y20(Y20),
       .X21_in(X21), .Y21(Y21),
       .X22_in(X22), .Y22(Y22),
       .X23_in(X23), .Y23(Y23),
       .X24_in(X24), .Y24(Y24),
       .X25_in(X25), .Y25(Y25),
       .X26_in(X26), .Y26(Y26),
       .X27_in(X27), .Y27(Y27),
       .X28_in(X28), .Y28(Y28),
       .X29_in(X29), .Y29(Y29),
       .X30_in(X30), .Y30(Y30),
       .X31_in(X31), .Y31(Y31));

endmodule

module D72_11033(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D73_11039(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      2: out3 <= 16'h0;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D74_11045(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h187e;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D76_11057(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3871;
      2: out3 <= 16'h289a;
      3: out3 <= 16'h1294;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D77_11063(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h238e;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hcac9;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D78_11069(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3d3f;
      1: out3 <= 16'h646;
      2: out3 <= 16'hc78f;
      3: out3 <= 16'hce87;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D80_11081(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h238e;
      3: out3 <= 16'hc7c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D81_11087(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'h187e;
      2: out3 <= 16'he782;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D82_11093(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3537;
      1: out3 <= 16'hf384;
      2: out3 <= 16'hc13b;
      3: out3 <= 16'hdc72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D84_11105(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3d3f;
      1: out3 <= 16'h3179;
      2: out3 <= 16'h1e2b;
      3: out3 <= 16'h646;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D85_11111(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3537;
      1: out3 <= 16'hc7c;
      2: out3 <= 16'hdc72;
      3: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D86_11117(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h289a;
      1: out3 <= 16'he1d5;
      2: out3 <= 16'hc04f;
      3: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D88_11129(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D89_11135(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      2: out3 <= 16'hc000;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D90_11141(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc4df;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D92_11153(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'he1d5;
      2: out3 <= 16'hce87;
      3: out3 <= 16'hc2c1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D93_11159(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hcac9;
      2: out3 <= 16'hc13b;
      3: out3 <= 16'hdc72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D94_11165(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hed6c;
      1: out3 <= 16'hc04f;
      2: out3 <= 16'he1d5;
      3: out3 <= 16'h289a;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D96_11177(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D97_11183(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      2: out3 <= 16'hc4df;
      3: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D98_11189(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hdc72;
      1: out3 <= 16'hc13b;
      2: out3 <= 16'hf384;
      3: out3 <= 16'h3537;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D100_11201(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hed6c;
      1: out3 <= 16'hd766;
      2: out3 <= 16'hc78f;
      3: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D101_11207(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hdc72;
      1: out3 <= 16'hc13b;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D102_11213(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hce87;
      1: out3 <= 16'hc78f;
      2: out3 <= 16'h646;
      3: out3 <= 16'h3d3f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock9741(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i3_in;
   reg [1:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(7, 1) shiftFIFO_24539(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1378;
   wire signed [15:0] a1283;
   wire signed [15:0] a1381;
   wire signed [15:0] a1287;
   wire signed [15:0] a1382;
   wire signed [15:0] a1383;
   wire signed [15:0] a1386;
   wire signed [15:0] a1387;
   wire signed [15:0] a1390;
   wire signed [15:0] a1391;
   wire signed [15:0] a1394;
   wire signed [15:0] a1307;
   wire signed [15:0] a1397;
   wire signed [15:0] a1311;
   wire signed [15:0] a1398;
   wire signed [15:0] a1399;
   wire signed [15:0] a1402;
   wire signed [15:0] a1403;
   wire signed [15:0] a1406;
   wire signed [15:0] a1407;
   wire signed [15:0] a1410;
   wire signed [15:0] a1331;
   wire signed [15:0] a1413;
   wire signed [15:0] a1335;
   wire signed [15:0] a1414;
   wire signed [15:0] a1415;
   wire signed [15:0] a1418;
   wire signed [15:0] a1419;
   wire signed [15:0] a1422;
   wire signed [15:0] a1423;
   wire signed [15:0] a1426;
   wire signed [15:0] a1355;
   wire signed [15:0] a1429;
   wire signed [15:0] a1359;
   wire signed [15:0] a1430;
   wire signed [15:0] a1431;
   wire signed [15:0] a1434;
   wire signed [15:0] a1435;
   wire signed [15:0] a1438;
   wire signed [15:0] a1439;
   reg signed [15:0] tm877;
   reg signed [15:0] tm881;
   reg signed [15:0] tm893;
   reg signed [15:0] tm897;
   reg signed [15:0] tm909;
   reg signed [15:0] tm913;
   reg signed [15:0] tm925;
   reg signed [15:0] tm929;
   reg signed [15:0] tm941;
   reg signed [15:0] tm945;
   reg signed [15:0] tm957;
   reg signed [15:0] tm961;
   reg signed [15:0] tm973;
   reg signed [15:0] tm977;
   reg signed [15:0] tm989;
   reg signed [15:0] tm993;
   reg signed [15:0] tm1005;
   reg signed [15:0] tm1009;
   reg signed [15:0] tm1021;
   reg signed [15:0] tm1025;
   reg signed [15:0] tm1037;
   reg signed [15:0] tm1041;
   reg signed [15:0] tm1053;
   reg signed [15:0] tm1057;
   reg signed [15:0] tm1069;
   reg signed [15:0] tm1076;
   reg signed [15:0] tm1083;
   reg signed [15:0] tm1090;
   reg signed [15:0] tm1097;
   reg signed [15:0] tm1104;
   reg signed [15:0] tm1111;
   reg signed [15:0] tm1118;
   reg signed [15:0] tm878;
   reg signed [15:0] tm882;
   reg signed [15:0] tm894;
   reg signed [15:0] tm898;
   reg signed [15:0] tm910;
   reg signed [15:0] tm914;
   reg signed [15:0] tm926;
   reg signed [15:0] tm930;
   reg signed [15:0] tm942;
   reg signed [15:0] tm946;
   reg signed [15:0] tm958;
   reg signed [15:0] tm962;
   reg signed [15:0] tm974;
   reg signed [15:0] tm978;
   reg signed [15:0] tm990;
   reg signed [15:0] tm994;
   reg signed [15:0] tm1006;
   reg signed [15:0] tm1010;
   reg signed [15:0] tm1022;
   reg signed [15:0] tm1026;
   reg signed [15:0] tm1038;
   reg signed [15:0] tm1042;
   reg signed [15:0] tm1054;
   reg signed [15:0] tm1058;
   reg signed [15:0] tm1070;
   reg signed [15:0] tm1077;
   reg signed [15:0] tm1084;
   reg signed [15:0] tm1091;
   reg signed [15:0] tm1098;
   reg signed [15:0] tm1105;
   reg signed [15:0] tm1112;
   reg signed [15:0] tm1119;
   wire signed [15:0] tm28;
   wire signed [15:0] a1288;
   wire signed [15:0] tm29;
   wire signed [15:0] a1290;
   wire signed [15:0] tm30;
   wire signed [15:0] a1294;
   wire signed [15:0] tm31;
   wire signed [15:0] a1296;
   wire signed [15:0] tm32;
   wire signed [15:0] a1300;
   wire signed [15:0] tm33;
   wire signed [15:0] a1302;
   wire signed [15:0] tm36;
   wire signed [15:0] a1312;
   wire signed [15:0] tm37;
   wire signed [15:0] a1314;
   wire signed [15:0] tm38;
   wire signed [15:0] a1318;
   wire signed [15:0] tm39;
   wire signed [15:0] a1320;
   wire signed [15:0] tm40;
   wire signed [15:0] a1324;
   wire signed [15:0] tm41;
   wire signed [15:0] a1326;
   wire signed [15:0] tm44;
   wire signed [15:0] a1336;
   wire signed [15:0] tm45;
   wire signed [15:0] a1338;
   wire signed [15:0] tm46;
   wire signed [15:0] a1342;
   wire signed [15:0] tm47;
   wire signed [15:0] a1344;
   wire signed [15:0] tm48;
   wire signed [15:0] a1348;
   wire signed [15:0] tm49;
   wire signed [15:0] a1350;
   wire signed [15:0] tm52;
   wire signed [15:0] a1360;
   wire signed [15:0] tm53;
   wire signed [15:0] a1362;
   wire signed [15:0] tm54;
   wire signed [15:0] a1366;
   wire signed [15:0] tm55;
   wire signed [15:0] a1368;
   wire signed [15:0] tm56;
   wire signed [15:0] a1372;
   wire signed [15:0] tm57;
   wire signed [15:0] a1374;
   reg signed [15:0] tm879;
   reg signed [15:0] tm883;
   reg signed [15:0] tm895;
   reg signed [15:0] tm899;
   reg signed [15:0] tm911;
   reg signed [15:0] tm915;
   reg signed [15:0] tm927;
   reg signed [15:0] tm931;
   reg signed [15:0] tm943;
   reg signed [15:0] tm947;
   reg signed [15:0] tm959;
   reg signed [15:0] tm963;
   reg signed [15:0] tm975;
   reg signed [15:0] tm979;
   reg signed [15:0] tm991;
   reg signed [15:0] tm995;
   reg signed [15:0] tm1007;
   reg signed [15:0] tm1011;
   reg signed [15:0] tm1023;
   reg signed [15:0] tm1027;
   reg signed [15:0] tm1039;
   reg signed [15:0] tm1043;
   reg signed [15:0] tm1055;
   reg signed [15:0] tm1059;
   reg signed [15:0] tm1071;
   reg signed [15:0] tm1078;
   reg signed [15:0] tm1085;
   reg signed [15:0] tm1092;
   reg signed [15:0] tm1099;
   reg signed [15:0] tm1106;
   reg signed [15:0] tm1113;
   reg signed [15:0] tm1120;
   reg signed [15:0] tm129;
   reg signed [15:0] tm130;
   reg signed [15:0] tm133;
   reg signed [15:0] tm134;
   reg signed [15:0] tm137;
   reg signed [15:0] tm138;
   reg signed [15:0] tm145;
   reg signed [15:0] tm146;
   reg signed [15:0] tm149;
   reg signed [15:0] tm150;
   reg signed [15:0] tm153;
   reg signed [15:0] tm154;
   reg signed [15:0] tm161;
   reg signed [15:0] tm162;
   reg signed [15:0] tm165;
   reg signed [15:0] tm166;
   reg signed [15:0] tm169;
   reg signed [15:0] tm170;
   reg signed [15:0] tm177;
   reg signed [15:0] tm178;
   reg signed [15:0] tm181;
   reg signed [15:0] tm182;
   reg signed [15:0] tm185;
   reg signed [15:0] tm186;
   reg signed [15:0] tm880;
   reg signed [15:0] tm884;
   reg signed [15:0] tm896;
   reg signed [15:0] tm900;
   reg signed [15:0] tm912;
   reg signed [15:0] tm916;
   reg signed [15:0] tm928;
   reg signed [15:0] tm932;
   reg signed [15:0] tm944;
   reg signed [15:0] tm948;
   reg signed [15:0] tm960;
   reg signed [15:0] tm964;
   reg signed [15:0] tm976;
   reg signed [15:0] tm980;
   reg signed [15:0] tm992;
   reg signed [15:0] tm996;
   reg signed [15:0] tm1008;
   reg signed [15:0] tm1012;
   reg signed [15:0] tm1024;
   reg signed [15:0] tm1028;
   reg signed [15:0] tm1040;
   reg signed [15:0] tm1044;
   reg signed [15:0] tm1056;
   reg signed [15:0] tm1060;
   reg signed [15:0] tm1072;
   reg signed [15:0] tm1079;
   reg signed [15:0] tm1086;
   reg signed [15:0] tm1093;
   reg signed [15:0] tm1100;
   reg signed [15:0] tm1107;
   reg signed [15:0] tm1114;
   reg signed [15:0] tm1121;
   reg signed [15:0] tm1073;
   reg signed [15:0] tm1080;
   reg signed [15:0] tm1087;
   reg signed [15:0] tm1094;
   reg signed [15:0] tm1101;
   reg signed [15:0] tm1108;
   reg signed [15:0] tm1115;
   reg signed [15:0] tm1122;
   wire signed [15:0] a1289;
   wire signed [15:0] a1291;
   wire signed [15:0] a1292;
   wire signed [15:0] a1293;
   wire signed [15:0] a1295;
   wire signed [15:0] a1297;
   wire signed [15:0] a1298;
   wire signed [15:0] a1299;
   wire signed [15:0] a1301;
   wire signed [15:0] a1303;
   wire signed [15:0] a1304;
   wire signed [15:0] a1305;
   wire signed [15:0] a1313;
   wire signed [15:0] a1315;
   wire signed [15:0] a1316;
   wire signed [15:0] a1317;
   wire signed [15:0] a1319;
   wire signed [15:0] a1321;
   wire signed [15:0] a1322;
   wire signed [15:0] a1323;
   wire signed [15:0] a1325;
   wire signed [15:0] a1327;
   wire signed [15:0] a1328;
   wire signed [15:0] a1329;
   wire signed [15:0] a1337;
   wire signed [15:0] a1339;
   wire signed [15:0] a1340;
   wire signed [15:0] a1341;
   wire signed [15:0] a1343;
   wire signed [15:0] a1345;
   wire signed [15:0] a1346;
   wire signed [15:0] a1347;
   wire signed [15:0] a1349;
   wire signed [15:0] a1351;
   wire signed [15:0] a1352;
   wire signed [15:0] a1353;
   wire signed [15:0] a1361;
   wire signed [15:0] a1363;
   wire signed [15:0] a1364;
   wire signed [15:0] a1365;
   wire signed [15:0] a1367;
   wire signed [15:0] a1369;
   wire signed [15:0] a1370;
   wire signed [15:0] a1371;
   wire signed [15:0] a1373;
   wire signed [15:0] a1375;
   wire signed [15:0] a1376;
   wire signed [15:0] a1377;
   reg signed [15:0] tm1074;
   reg signed [15:0] tm1081;
   reg signed [15:0] tm1088;
   reg signed [15:0] tm1095;
   reg signed [15:0] tm1102;
   reg signed [15:0] tm1109;
   reg signed [15:0] tm1116;
   reg signed [15:0] tm1123;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   reg signed [15:0] tm1075;
   reg signed [15:0] tm1082;
   reg signed [15:0] tm1089;
   reg signed [15:0] tm1096;
   reg signed [15:0] tm1103;
   reg signed [15:0] tm1110;
   reg signed [15:0] tm1117;
   reg signed [15:0] tm1124;


   assign a1378 = X0;
   assign a1283 = a1378;
   assign a1381 = X1;
   assign a1287 = a1381;
   assign a1382 = X2;
   assign a1383 = X3;
   assign a1386 = X4;
   assign a1387 = X5;
   assign a1390 = X6;
   assign a1391 = X7;
   assign a1394 = X8;
   assign a1307 = a1394;
   assign a1397 = X9;
   assign a1311 = a1397;
   assign a1398 = X10;
   assign a1399 = X11;
   assign a1402 = X12;
   assign a1403 = X13;
   assign a1406 = X14;
   assign a1407 = X15;
   assign a1410 = X16;
   assign a1331 = a1410;
   assign a1413 = X17;
   assign a1335 = a1413;
   assign a1414 = X18;
   assign a1415 = X19;
   assign a1418 = X20;
   assign a1419 = X21;
   assign a1422 = X22;
   assign a1423 = X23;
   assign a1426 = X24;
   assign a1355 = a1426;
   assign a1429 = X25;
   assign a1359 = a1429;
   assign a1430 = X26;
   assign a1431 = X27;
   assign a1434 = X28;
   assign a1435 = X29;
   assign a1438 = X30;
   assign a1439 = X31;
   assign a1288 = tm28;
   assign a1290 = tm29;
   assign a1294 = tm30;
   assign a1296 = tm31;
   assign a1300 = tm32;
   assign a1302 = tm33;
   assign a1312 = tm36;
   assign a1314 = tm37;
   assign a1318 = tm38;
   assign a1320 = tm39;
   assign a1324 = tm40;
   assign a1326 = tm41;
   assign a1336 = tm44;
   assign a1338 = tm45;
   assign a1342 = tm46;
   assign a1344 = tm47;
   assign a1348 = tm48;
   assign a1350 = tm49;
   assign a1360 = tm52;
   assign a1362 = tm53;
   assign a1366 = tm54;
   assign a1368 = tm55;
   assign a1372 = tm56;
   assign a1374 = tm57;
   assign Y0 = tm1075;
   assign Y1 = tm1082;
   assign Y8 = tm1089;
   assign Y9 = tm1096;
   assign Y16 = tm1103;
   assign Y17 = tm1110;
   assign Y24 = tm1117;
   assign Y25 = tm1124;

   D72_11033 instD72inst0_11033(.addr(i3[1:0]), .out(tm28), .clk(clk));

   D73_11039 instD73inst0_11039(.addr(i3[1:0]), .out(tm30), .clk(clk));

   D74_11045 instD74inst0_11045(.addr(i3[1:0]), .out(tm32), .clk(clk));

   D76_11057 instD76inst0_11057(.addr(i3[1:0]), .out(tm36), .clk(clk));

   D77_11063 instD77inst0_11063(.addr(i3[1:0]), .out(tm38), .clk(clk));

   D78_11069 instD78inst0_11069(.addr(i3[1:0]), .out(tm40), .clk(clk));

   D80_11081 instD80inst0_11081(.addr(i3[1:0]), .out(tm44), .clk(clk));

   D81_11087 instD81inst0_11087(.addr(i3[1:0]), .out(tm46), .clk(clk));

   D82_11093 instD82inst0_11093(.addr(i3[1:0]), .out(tm48), .clk(clk));

   D84_11105 instD84inst0_11105(.addr(i3[1:0]), .out(tm52), .clk(clk));

   D85_11111 instD85inst0_11111(.addr(i3[1:0]), .out(tm54), .clk(clk));

   D86_11117 instD86inst0_11117(.addr(i3[1:0]), .out(tm56), .clk(clk));

   D88_11129 instD88inst0_11129(.addr(i3[1:0]), .out(tm29), .clk(clk));

   D89_11135 instD89inst0_11135(.addr(i3[1:0]), .out(tm31), .clk(clk));

   D90_11141 instD90inst0_11141(.addr(i3[1:0]), .out(tm33), .clk(clk));

   D92_11153 instD92inst0_11153(.addr(i3[1:0]), .out(tm37), .clk(clk));

   D93_11159 instD93inst0_11159(.addr(i3[1:0]), .out(tm39), .clk(clk));

   D94_11165 instD94inst0_11165(.addr(i3[1:0]), .out(tm41), .clk(clk));

   D96_11177 instD96inst0_11177(.addr(i3[1:0]), .out(tm45), .clk(clk));

   D97_11183 instD97inst0_11183(.addr(i3[1:0]), .out(tm47), .clk(clk));

   D98_11189 instD98inst0_11189(.addr(i3[1:0]), .out(tm49), .clk(clk));

   D100_11201 instD100inst0_11201(.addr(i3[1:0]), .out(tm53), .clk(clk));

   D101_11207 instD101inst0_11207(.addr(i3[1:0]), .out(tm55), .clk(clk));

   D102_11213 instD102inst0_11213(.addr(i3[1:0]), .out(tm57), .clk(clk));

    multfix #(16, 2) m9840(.a(tm129), .b(tm880), .clk(clk), .q_sc(a1289), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9862(.a(tm130), .b(tm884), .clk(clk), .q_sc(a1291), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9880(.a(tm130), .b(tm880), .clk(clk), .q_sc(a1292), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9891(.a(tm129), .b(tm884), .clk(clk), .q_sc(a1293), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9920(.a(tm133), .b(tm896), .clk(clk), .q_sc(a1295), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9942(.a(tm134), .b(tm900), .clk(clk), .q_sc(a1297), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9960(.a(tm134), .b(tm896), .clk(clk), .q_sc(a1298), .q_unsc(), .rst(reset));
    multfix #(16, 2) m9971(.a(tm133), .b(tm900), .clk(clk), .q_sc(a1299), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10000(.a(tm137), .b(tm912), .clk(clk), .q_sc(a1301), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10022(.a(tm138), .b(tm916), .clk(clk), .q_sc(a1303), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10040(.a(tm138), .b(tm912), .clk(clk), .q_sc(a1304), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10051(.a(tm137), .b(tm916), .clk(clk), .q_sc(a1305), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10160(.a(tm145), .b(tm928), .clk(clk), .q_sc(a1313), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10182(.a(tm146), .b(tm932), .clk(clk), .q_sc(a1315), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10200(.a(tm146), .b(tm928), .clk(clk), .q_sc(a1316), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10211(.a(tm145), .b(tm932), .clk(clk), .q_sc(a1317), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10240(.a(tm149), .b(tm944), .clk(clk), .q_sc(a1319), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10262(.a(tm150), .b(tm948), .clk(clk), .q_sc(a1321), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10280(.a(tm150), .b(tm944), .clk(clk), .q_sc(a1322), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10291(.a(tm149), .b(tm948), .clk(clk), .q_sc(a1323), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10320(.a(tm153), .b(tm960), .clk(clk), .q_sc(a1325), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10342(.a(tm154), .b(tm964), .clk(clk), .q_sc(a1327), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10360(.a(tm154), .b(tm960), .clk(clk), .q_sc(a1328), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10371(.a(tm153), .b(tm964), .clk(clk), .q_sc(a1329), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10480(.a(tm161), .b(tm976), .clk(clk), .q_sc(a1337), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10502(.a(tm162), .b(tm980), .clk(clk), .q_sc(a1339), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10520(.a(tm162), .b(tm976), .clk(clk), .q_sc(a1340), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10531(.a(tm161), .b(tm980), .clk(clk), .q_sc(a1341), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10560(.a(tm165), .b(tm992), .clk(clk), .q_sc(a1343), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10582(.a(tm166), .b(tm996), .clk(clk), .q_sc(a1345), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10600(.a(tm166), .b(tm992), .clk(clk), .q_sc(a1346), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10611(.a(tm165), .b(tm996), .clk(clk), .q_sc(a1347), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10640(.a(tm169), .b(tm1008), .clk(clk), .q_sc(a1349), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10662(.a(tm170), .b(tm1012), .clk(clk), .q_sc(a1351), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10680(.a(tm170), .b(tm1008), .clk(clk), .q_sc(a1352), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10691(.a(tm169), .b(tm1012), .clk(clk), .q_sc(a1353), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10800(.a(tm177), .b(tm1024), .clk(clk), .q_sc(a1361), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10822(.a(tm178), .b(tm1028), .clk(clk), .q_sc(a1363), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10840(.a(tm178), .b(tm1024), .clk(clk), .q_sc(a1364), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10851(.a(tm177), .b(tm1028), .clk(clk), .q_sc(a1365), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10880(.a(tm181), .b(tm1040), .clk(clk), .q_sc(a1367), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10902(.a(tm182), .b(tm1044), .clk(clk), .q_sc(a1369), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10920(.a(tm182), .b(tm1040), .clk(clk), .q_sc(a1370), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10931(.a(tm181), .b(tm1044), .clk(clk), .q_sc(a1371), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10960(.a(tm185), .b(tm1056), .clk(clk), .q_sc(a1373), .q_unsc(), .rst(reset));
    multfix #(16, 2) m10982(.a(tm186), .b(tm1060), .clk(clk), .q_sc(a1375), .q_unsc(), .rst(reset));
    multfix #(16, 2) m11000(.a(tm186), .b(tm1056), .clk(clk), .q_sc(a1376), .q_unsc(), .rst(reset));
    multfix #(16, 2) m11011(.a(tm185), .b(tm1060), .clk(clk), .q_sc(a1377), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub9869(.a(a1289), .b(a1291), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add9898(.a(a1292), .b(a1293), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub9949(.a(a1295), .b(a1297), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add9978(.a(a1298), .b(a1299), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub10029(.a(a1301), .b(a1303), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add10058(.a(a1304), .b(a1305), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub10189(.a(a1313), .b(a1315), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add10218(.a(a1316), .b(a1317), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub10269(.a(a1319), .b(a1321), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add10298(.a(a1322), .b(a1323), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub10349(.a(a1325), .b(a1327), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add10378(.a(a1328), .b(a1329), .clk(clk), .q(Y15));    // 6
    subfxp #(16, 1) sub10509(.a(a1337), .b(a1339), .clk(clk), .q(Y18));    // 6
    addfxp #(16, 1) add10538(.a(a1340), .b(a1341), .clk(clk), .q(Y19));    // 6
    subfxp #(16, 1) sub10589(.a(a1343), .b(a1345), .clk(clk), .q(Y20));    // 6
    addfxp #(16, 1) add10618(.a(a1346), .b(a1347), .clk(clk), .q(Y21));    // 6
    subfxp #(16, 1) sub10669(.a(a1349), .b(a1351), .clk(clk), .q(Y22));    // 6
    addfxp #(16, 1) add10698(.a(a1352), .b(a1353), .clk(clk), .q(Y23));    // 6
    subfxp #(16, 1) sub10829(.a(a1361), .b(a1363), .clk(clk), .q(Y26));    // 6
    addfxp #(16, 1) add10858(.a(a1364), .b(a1365), .clk(clk), .q(Y27));    // 6
    subfxp #(16, 1) sub10909(.a(a1367), .b(a1369), .clk(clk), .q(Y28));    // 6
    addfxp #(16, 1) add10938(.a(a1370), .b(a1371), .clk(clk), .q(Y29));    // 6
    subfxp #(16, 1) sub10989(.a(a1373), .b(a1375), .clk(clk), .q(Y30));    // 6
    addfxp #(16, 1) add11018(.a(a1376), .b(a1377), .clk(clk), .q(Y31));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm129 <= 0;
         tm880 <= 0;
         tm130 <= 0;
         tm884 <= 0;
         tm130 <= 0;
         tm880 <= 0;
         tm129 <= 0;
         tm884 <= 0;
         tm133 <= 0;
         tm896 <= 0;
         tm134 <= 0;
         tm900 <= 0;
         tm134 <= 0;
         tm896 <= 0;
         tm133 <= 0;
         tm900 <= 0;
         tm137 <= 0;
         tm912 <= 0;
         tm138 <= 0;
         tm916 <= 0;
         tm138 <= 0;
         tm912 <= 0;
         tm137 <= 0;
         tm916 <= 0;
         tm145 <= 0;
         tm928 <= 0;
         tm146 <= 0;
         tm932 <= 0;
         tm146 <= 0;
         tm928 <= 0;
         tm145 <= 0;
         tm932 <= 0;
         tm149 <= 0;
         tm944 <= 0;
         tm150 <= 0;
         tm948 <= 0;
         tm150 <= 0;
         tm944 <= 0;
         tm149 <= 0;
         tm948 <= 0;
         tm153 <= 0;
         tm960 <= 0;
         tm154 <= 0;
         tm964 <= 0;
         tm154 <= 0;
         tm960 <= 0;
         tm153 <= 0;
         tm964 <= 0;
         tm161 <= 0;
         tm976 <= 0;
         tm162 <= 0;
         tm980 <= 0;
         tm162 <= 0;
         tm976 <= 0;
         tm161 <= 0;
         tm980 <= 0;
         tm165 <= 0;
         tm992 <= 0;
         tm166 <= 0;
         tm996 <= 0;
         tm166 <= 0;
         tm992 <= 0;
         tm165 <= 0;
         tm996 <= 0;
         tm169 <= 0;
         tm1008 <= 0;
         tm170 <= 0;
         tm1012 <= 0;
         tm170 <= 0;
         tm1008 <= 0;
         tm169 <= 0;
         tm1012 <= 0;
         tm177 <= 0;
         tm1024 <= 0;
         tm178 <= 0;
         tm1028 <= 0;
         tm178 <= 0;
         tm1024 <= 0;
         tm177 <= 0;
         tm1028 <= 0;
         tm181 <= 0;
         tm1040 <= 0;
         tm182 <= 0;
         tm1044 <= 0;
         tm182 <= 0;
         tm1040 <= 0;
         tm181 <= 0;
         tm1044 <= 0;
         tm185 <= 0;
         tm1056 <= 0;
         tm186 <= 0;
         tm1060 <= 0;
         tm186 <= 0;
         tm1056 <= 0;
         tm185 <= 0;
         tm1060 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm877 <= a1382;
         tm881 <= a1383;
         tm893 <= a1386;
         tm897 <= a1387;
         tm909 <= a1390;
         tm913 <= a1391;
         tm925 <= a1398;
         tm929 <= a1399;
         tm941 <= a1402;
         tm945 <= a1403;
         tm957 <= a1406;
         tm961 <= a1407;
         tm973 <= a1414;
         tm977 <= a1415;
         tm989 <= a1418;
         tm993 <= a1419;
         tm1005 <= a1422;
         tm1009 <= a1423;
         tm1021 <= a1430;
         tm1025 <= a1431;
         tm1037 <= a1434;
         tm1041 <= a1435;
         tm1053 <= a1438;
         tm1057 <= a1439;
         tm1069 <= a1283;
         tm1076 <= a1287;
         tm1083 <= a1307;
         tm1090 <= a1311;
         tm1097 <= a1331;
         tm1104 <= a1335;
         tm1111 <= a1355;
         tm1118 <= a1359;
         tm878 <= tm877;
         tm882 <= tm881;
         tm894 <= tm893;
         tm898 <= tm897;
         tm910 <= tm909;
         tm914 <= tm913;
         tm926 <= tm925;
         tm930 <= tm929;
         tm942 <= tm941;
         tm946 <= tm945;
         tm958 <= tm957;
         tm962 <= tm961;
         tm974 <= tm973;
         tm978 <= tm977;
         tm990 <= tm989;
         tm994 <= tm993;
         tm1006 <= tm1005;
         tm1010 <= tm1009;
         tm1022 <= tm1021;
         tm1026 <= tm1025;
         tm1038 <= tm1037;
         tm1042 <= tm1041;
         tm1054 <= tm1053;
         tm1058 <= tm1057;
         tm1070 <= tm1069;
         tm1077 <= tm1076;
         tm1084 <= tm1083;
         tm1091 <= tm1090;
         tm1098 <= tm1097;
         tm1105 <= tm1104;
         tm1112 <= tm1111;
         tm1119 <= tm1118;
         tm879 <= tm878;
         tm883 <= tm882;
         tm895 <= tm894;
         tm899 <= tm898;
         tm911 <= tm910;
         tm915 <= tm914;
         tm927 <= tm926;
         tm931 <= tm930;
         tm943 <= tm942;
         tm947 <= tm946;
         tm959 <= tm958;
         tm963 <= tm962;
         tm975 <= tm974;
         tm979 <= tm978;
         tm991 <= tm990;
         tm995 <= tm994;
         tm1007 <= tm1006;
         tm1011 <= tm1010;
         tm1023 <= tm1022;
         tm1027 <= tm1026;
         tm1039 <= tm1038;
         tm1043 <= tm1042;
         tm1055 <= tm1054;
         tm1059 <= tm1058;
         tm1071 <= tm1070;
         tm1078 <= tm1077;
         tm1085 <= tm1084;
         tm1092 <= tm1091;
         tm1099 <= tm1098;
         tm1106 <= tm1105;
         tm1113 <= tm1112;
         tm1120 <= tm1119;
         tm129 <= a1288;
         tm130 <= a1290;
         tm133 <= a1294;
         tm134 <= a1296;
         tm137 <= a1300;
         tm138 <= a1302;
         tm145 <= a1312;
         tm146 <= a1314;
         tm149 <= a1318;
         tm150 <= a1320;
         tm153 <= a1324;
         tm154 <= a1326;
         tm161 <= a1336;
         tm162 <= a1338;
         tm165 <= a1342;
         tm166 <= a1344;
         tm169 <= a1348;
         tm170 <= a1350;
         tm177 <= a1360;
         tm178 <= a1362;
         tm181 <= a1366;
         tm182 <= a1368;
         tm185 <= a1372;
         tm186 <= a1374;
         tm880 <= tm879;
         tm884 <= tm883;
         tm896 <= tm895;
         tm900 <= tm899;
         tm912 <= tm911;
         tm916 <= tm915;
         tm928 <= tm927;
         tm932 <= tm931;
         tm944 <= tm943;
         tm948 <= tm947;
         tm960 <= tm959;
         tm964 <= tm963;
         tm976 <= tm975;
         tm980 <= tm979;
         tm992 <= tm991;
         tm996 <= tm995;
         tm1008 <= tm1007;
         tm1012 <= tm1011;
         tm1024 <= tm1023;
         tm1028 <= tm1027;
         tm1040 <= tm1039;
         tm1044 <= tm1043;
         tm1056 <= tm1055;
         tm1060 <= tm1059;
         tm1072 <= tm1071;
         tm1079 <= tm1078;
         tm1086 <= tm1085;
         tm1093 <= tm1092;
         tm1100 <= tm1099;
         tm1107 <= tm1106;
         tm1114 <= tm1113;
         tm1121 <= tm1120;
         tm1073 <= tm1072;
         tm1080 <= tm1079;
         tm1087 <= tm1086;
         tm1094 <= tm1093;
         tm1101 <= tm1100;
         tm1108 <= tm1107;
         tm1115 <= tm1114;
         tm1122 <= tm1121;
         tm1074 <= tm1073;
         tm1081 <= tm1080;
         tm1088 <= tm1087;
         tm1095 <= tm1094;
         tm1102 <= tm1101;
         tm1109 <= tm1108;
         tm1116 <= tm1115;
         tm1123 <= tm1122;
         tm1075 <= tm1074;
         tm1082 <= tm1081;
         tm1089 <= tm1088;
         tm1096 <= tm1095;
         tm1103 <= tm1102;
         tm1110 <= tm1109;
         tm1117 <= tm1116;
         tm1124 <= tm1123;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock11218(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(2, 1) shiftFIFO_24542(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1026;
   wire signed [15:0] a1027;
   wire signed [15:0] a1028;
   wire signed [15:0] a1029;
   wire signed [15:0] a1034;
   wire signed [15:0] a1035;
   wire signed [15:0] a1036;
   wire signed [15:0] a1037;
   wire signed [15:0] a1042;
   wire signed [15:0] a1043;
   wire signed [15:0] a1044;
   wire signed [15:0] a1045;
   wire signed [15:0] a1050;
   wire signed [15:0] a1051;
   wire signed [15:0] a1052;
   wire signed [15:0] a1053;
   wire signed [15:0] a1058;
   wire signed [15:0] a1059;
   wire signed [15:0] a1060;
   wire signed [15:0] a1061;
   wire signed [15:0] a1066;
   wire signed [15:0] a1067;
   wire signed [15:0] a1068;
   wire signed [15:0] a1069;
   wire signed [15:0] a1074;
   wire signed [15:0] a1075;
   wire signed [15:0] a1076;
   wire signed [15:0] a1077;
   wire signed [15:0] a1082;
   wire signed [15:0] a1083;
   wire signed [15:0] a1084;
   wire signed [15:0] a1085;
   wire signed [16:0] tm613;
   wire signed [16:0] tm614;
   wire signed [16:0] tm615;
   wire signed [16:0] tm616;
   wire signed [16:0] tm617;
   wire signed [16:0] tm618;
   wire signed [16:0] tm619;
   wire signed [16:0] tm620;
   wire signed [16:0] tm629;
   wire signed [16:0] tm630;
   wire signed [16:0] tm631;
   wire signed [16:0] tm632;
   wire signed [16:0] tm633;
   wire signed [16:0] tm634;
   wire signed [16:0] tm635;
   wire signed [16:0] tm636;
   wire signed [16:0] tm645;
   wire signed [16:0] tm646;
   wire signed [16:0] tm647;
   wire signed [16:0] tm648;
   wire signed [16:0] tm649;
   wire signed [16:0] tm650;
   wire signed [16:0] tm651;
   wire signed [16:0] tm652;
   wire signed [16:0] tm661;
   wire signed [16:0] tm662;
   wire signed [16:0] tm663;
   wire signed [16:0] tm664;
   wire signed [16:0] tm665;
   wire signed [16:0] tm666;
   wire signed [16:0] tm667;
   wire signed [16:0] tm668;
   wire signed [15:0] t1330;
   wire signed [15:0] t1331;
   wire signed [15:0] t1332;
   wire signed [15:0] t1333;
   wire signed [15:0] t1334;
   wire signed [15:0] t1335;
   wire signed [15:0] t1336;
   wire signed [15:0] t1337;
   wire signed [15:0] t1346;
   wire signed [15:0] t1347;
   wire signed [15:0] t1348;
   wire signed [15:0] t1349;
   wire signed [15:0] t1350;
   wire signed [15:0] t1351;
   wire signed [15:0] t1352;
   wire signed [15:0] t1353;
   wire signed [15:0] t1362;
   wire signed [15:0] t1363;
   wire signed [15:0] t1364;
   wire signed [15:0] t1365;
   wire signed [15:0] t1366;
   wire signed [15:0] t1367;
   wire signed [15:0] t1368;
   wire signed [15:0] t1369;
   wire signed [15:0] t1378;
   wire signed [15:0] t1379;
   wire signed [15:0] t1380;
   wire signed [15:0] t1381;
   wire signed [15:0] t1382;
   wire signed [15:0] t1383;
   wire signed [15:0] t1384;
   wire signed [15:0] t1385;
   wire signed [16:0] tm621;
   wire signed [16:0] tm622;
   wire signed [16:0] tm623;
   wire signed [16:0] tm624;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm625;
   wire signed [16:0] tm626;
   wire signed [16:0] tm627;
   wire signed [16:0] tm628;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm637;
   wire signed [16:0] tm638;
   wire signed [16:0] tm639;
   wire signed [16:0] tm640;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm641;
   wire signed [16:0] tm642;
   wire signed [16:0] tm643;
   wire signed [16:0] tm644;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm653;
   wire signed [16:0] tm654;
   wire signed [16:0] tm655;
   wire signed [16:0] tm656;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm657;
   wire signed [16:0] tm658;
   wire signed [16:0] tm659;
   wire signed [16:0] tm660;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm669;
   wire signed [16:0] tm670;
   wire signed [16:0] tm671;
   wire signed [16:0] tm672;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm673;
   wire signed [16:0] tm674;
   wire signed [16:0] tm675;
   wire signed [16:0] tm676;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t1338;
   wire signed [15:0] t1339;
   wire signed [15:0] t1340;
   wire signed [15:0] t1341;
   wire signed [15:0] t1342;
   wire signed [15:0] t1343;
   wire signed [15:0] t1344;
   wire signed [15:0] t1345;
   wire signed [15:0] t1354;
   wire signed [15:0] t1355;
   wire signed [15:0] t1356;
   wire signed [15:0] t1357;
   wire signed [15:0] t1358;
   wire signed [15:0] t1359;
   wire signed [15:0] t1360;
   wire signed [15:0] t1361;
   wire signed [15:0] t1370;
   wire signed [15:0] t1371;
   wire signed [15:0] t1372;
   wire signed [15:0] t1373;
   wire signed [15:0] t1374;
   wire signed [15:0] t1375;
   wire signed [15:0] t1376;
   wire signed [15:0] t1377;
   wire signed [15:0] t1386;
   wire signed [15:0] t1387;
   wire signed [15:0] t1388;
   wire signed [15:0] t1389;
   wire signed [15:0] t1390;
   wire signed [15:0] t1391;
   wire signed [15:0] t1392;
   wire signed [15:0] t1393;


   assign a1026 = X0;
   assign a1027 = X4;
   assign a1028 = X1;
   assign a1029 = X5;
   assign a1034 = X2;
   assign a1035 = X6;
   assign a1036 = X3;
   assign a1037 = X7;
   assign a1042 = X8;
   assign a1043 = X12;
   assign a1044 = X9;
   assign a1045 = X13;
   assign a1050 = X10;
   assign a1051 = X14;
   assign a1052 = X11;
   assign a1053 = X15;
   assign a1058 = X16;
   assign a1059 = X20;
   assign a1060 = X17;
   assign a1061 = X21;
   assign a1066 = X18;
   assign a1067 = X22;
   assign a1068 = X19;
   assign a1069 = X23;
   assign a1074 = X24;
   assign a1075 = X28;
   assign a1076 = X25;
   assign a1077 = X29;
   assign a1082 = X26;
   assign a1083 = X30;
   assign a1084 = X27;
   assign a1085 = X31;
   assign t1330 = tm613[16:1];
   assign t1331 = tm614[16:1];
   assign t1332 = tm615[16:1];
   assign t1333 = tm616[16:1];
   assign t1334 = tm617[16:1];
   assign t1335 = tm618[16:1];
   assign t1336 = tm619[16:1];
   assign t1337 = tm620[16:1];
   assign t1346 = tm629[16:1];
   assign t1347 = tm630[16:1];
   assign t1348 = tm631[16:1];
   assign t1349 = tm632[16:1];
   assign t1350 = tm633[16:1];
   assign t1351 = tm634[16:1];
   assign t1352 = tm635[16:1];
   assign t1353 = tm636[16:1];
   assign t1362 = tm645[16:1];
   assign t1363 = tm646[16:1];
   assign t1364 = tm647[16:1];
   assign t1365 = tm648[16:1];
   assign t1366 = tm649[16:1];
   assign t1367 = tm650[16:1];
   assign t1368 = tm651[16:1];
   assign t1369 = tm652[16:1];
   assign t1378 = tm661[16:1];
   assign t1379 = tm662[16:1];
   assign t1380 = tm663[16:1];
   assign t1381 = tm664[16:1];
   assign t1382 = tm665[16:1];
   assign t1383 = tm666[16:1];
   assign t1384 = tm667[16:1];
   assign t1385 = tm668[16:1];
   assign Y0 = t1338;
   assign Y1 = t1339;
   assign Y4 = t1340;
   assign Y5 = t1341;
   assign Y2 = t1342;
   assign Y3 = t1343;
   assign Y6 = t1344;
   assign Y7 = t1345;
   assign Y8 = t1354;
   assign Y9 = t1355;
   assign Y12 = t1356;
   assign Y13 = t1357;
   assign Y10 = t1358;
   assign Y11 = t1359;
   assign Y14 = t1360;
   assign Y15 = t1361;
   assign Y16 = t1370;
   assign Y17 = t1371;
   assign Y20 = t1372;
   assign Y21 = t1373;
   assign Y18 = t1374;
   assign Y19 = t1375;
   assign Y22 = t1376;
   assign Y23 = t1377;
   assign Y24 = t1386;
   assign Y25 = t1387;
   assign Y28 = t1388;
   assign Y29 = t1389;
   assign Y26 = t1390;
   assign Y27 = t1391;
   assign Y30 = t1392;
   assign Y31 = t1393;
   assign t1338 = tm621[16:1];
   assign t1339 = tm622[16:1];
   assign t1340 = tm623[16:1];
   assign t1341 = tm624[16:1];
   assign t1342 = tm625[16:1];
   assign t1343 = tm626[16:1];
   assign t1344 = tm627[16:1];
   assign t1345 = tm628[16:1];
   assign t1354 = tm637[16:1];
   assign t1355 = tm638[16:1];
   assign t1356 = tm639[16:1];
   assign t1357 = tm640[16:1];
   assign t1358 = tm641[16:1];
   assign t1359 = tm642[16:1];
   assign t1360 = tm643[16:1];
   assign t1361 = tm644[16:1];
   assign t1370 = tm653[16:1];
   assign t1371 = tm654[16:1];
   assign t1372 = tm655[16:1];
   assign t1373 = tm656[16:1];
   assign t1374 = tm657[16:1];
   assign t1375 = tm658[16:1];
   assign t1376 = tm659[16:1];
   assign t1377 = tm660[16:1];
   assign t1386 = tm669[16:1];
   assign t1387 = tm670[16:1];
   assign t1388 = tm671[16:1];
   assign t1389 = tm672[16:1];
   assign t1390 = tm673[16:1];
   assign t1391 = tm674[16:1];
   assign t1392 = tm675[16:1];
   assign t1393 = tm676[16:1];

    addfxp #(17, 1) add11230(.a({{1{a1026[15]}}, a1026}), .b({{1{a1027[15]}}, a1027}), .clk(clk), .q(tm613));    // 0
    addfxp #(17, 1) add11245(.a({{1{a1028[15]}}, a1028}), .b({{1{a1029[15]}}, a1029}), .clk(clk), .q(tm614));    // 0
    subfxp #(17, 1) sub11260(.a({{1{a1026[15]}}, a1026}), .b({{1{a1027[15]}}, a1027}), .clk(clk), .q(tm615));    // 0
    subfxp #(17, 1) sub11275(.a({{1{a1028[15]}}, a1028}), .b({{1{a1029[15]}}, a1029}), .clk(clk), .q(tm616));    // 0
    addfxp #(17, 1) add11290(.a({{1{a1034[15]}}, a1034}), .b({{1{a1035[15]}}, a1035}), .clk(clk), .q(tm617));    // 0
    addfxp #(17, 1) add11305(.a({{1{a1036[15]}}, a1036}), .b({{1{a1037[15]}}, a1037}), .clk(clk), .q(tm618));    // 0
    subfxp #(17, 1) sub11320(.a({{1{a1034[15]}}, a1034}), .b({{1{a1035[15]}}, a1035}), .clk(clk), .q(tm619));    // 0
    subfxp #(17, 1) sub11335(.a({{1{a1036[15]}}, a1036}), .b({{1{a1037[15]}}, a1037}), .clk(clk), .q(tm620));    // 0
    addfxp #(17, 1) add11438(.a({{1{a1042[15]}}, a1042}), .b({{1{a1043[15]}}, a1043}), .clk(clk), .q(tm629));    // 0
    addfxp #(17, 1) add11453(.a({{1{a1044[15]}}, a1044}), .b({{1{a1045[15]}}, a1045}), .clk(clk), .q(tm630));    // 0
    subfxp #(17, 1) sub11468(.a({{1{a1042[15]}}, a1042}), .b({{1{a1043[15]}}, a1043}), .clk(clk), .q(tm631));    // 0
    subfxp #(17, 1) sub11483(.a({{1{a1044[15]}}, a1044}), .b({{1{a1045[15]}}, a1045}), .clk(clk), .q(tm632));    // 0
    addfxp #(17, 1) add11498(.a({{1{a1050[15]}}, a1050}), .b({{1{a1051[15]}}, a1051}), .clk(clk), .q(tm633));    // 0
    addfxp #(17, 1) add11513(.a({{1{a1052[15]}}, a1052}), .b({{1{a1053[15]}}, a1053}), .clk(clk), .q(tm634));    // 0
    subfxp #(17, 1) sub11528(.a({{1{a1050[15]}}, a1050}), .b({{1{a1051[15]}}, a1051}), .clk(clk), .q(tm635));    // 0
    subfxp #(17, 1) sub11543(.a({{1{a1052[15]}}, a1052}), .b({{1{a1053[15]}}, a1053}), .clk(clk), .q(tm636));    // 0
    addfxp #(17, 1) add11646(.a({{1{a1058[15]}}, a1058}), .b({{1{a1059[15]}}, a1059}), .clk(clk), .q(tm645));    // 0
    addfxp #(17, 1) add11661(.a({{1{a1060[15]}}, a1060}), .b({{1{a1061[15]}}, a1061}), .clk(clk), .q(tm646));    // 0
    subfxp #(17, 1) sub11676(.a({{1{a1058[15]}}, a1058}), .b({{1{a1059[15]}}, a1059}), .clk(clk), .q(tm647));    // 0
    subfxp #(17, 1) sub11691(.a({{1{a1060[15]}}, a1060}), .b({{1{a1061[15]}}, a1061}), .clk(clk), .q(tm648));    // 0
    addfxp #(17, 1) add11706(.a({{1{a1066[15]}}, a1066}), .b({{1{a1067[15]}}, a1067}), .clk(clk), .q(tm649));    // 0
    addfxp #(17, 1) add11721(.a({{1{a1068[15]}}, a1068}), .b({{1{a1069[15]}}, a1069}), .clk(clk), .q(tm650));    // 0
    subfxp #(17, 1) sub11736(.a({{1{a1066[15]}}, a1066}), .b({{1{a1067[15]}}, a1067}), .clk(clk), .q(tm651));    // 0
    subfxp #(17, 1) sub11751(.a({{1{a1068[15]}}, a1068}), .b({{1{a1069[15]}}, a1069}), .clk(clk), .q(tm652));    // 0
    addfxp #(17, 1) add11854(.a({{1{a1074[15]}}, a1074}), .b({{1{a1075[15]}}, a1075}), .clk(clk), .q(tm661));    // 0
    addfxp #(17, 1) add11869(.a({{1{a1076[15]}}, a1076}), .b({{1{a1077[15]}}, a1077}), .clk(clk), .q(tm662));    // 0
    subfxp #(17, 1) sub11884(.a({{1{a1074[15]}}, a1074}), .b({{1{a1075[15]}}, a1075}), .clk(clk), .q(tm663));    // 0
    subfxp #(17, 1) sub11899(.a({{1{a1076[15]}}, a1076}), .b({{1{a1077[15]}}, a1077}), .clk(clk), .q(tm664));    // 0
    addfxp #(17, 1) add11914(.a({{1{a1082[15]}}, a1082}), .b({{1{a1083[15]}}, a1083}), .clk(clk), .q(tm665));    // 0
    addfxp #(17, 1) add11929(.a({{1{a1084[15]}}, a1084}), .b({{1{a1085[15]}}, a1085}), .clk(clk), .q(tm666));    // 0
    subfxp #(17, 1) sub11944(.a({{1{a1082[15]}}, a1082}), .b({{1{a1083[15]}}, a1083}), .clk(clk), .q(tm667));    // 0
    subfxp #(17, 1) sub11959(.a({{1{a1084[15]}}, a1084}), .b({{1{a1085[15]}}, a1085}), .clk(clk), .q(tm668));    // 0
    addfxp #(17, 1) add11342(.a({{1{t1330[15]}}, t1330}), .b({{1{t1334[15]}}, t1334}), .clk(clk), .q(tm621));    // 1
    addfxp #(17, 1) add11349(.a({{1{t1331[15]}}, t1331}), .b({{1{t1335[15]}}, t1335}), .clk(clk), .q(tm622));    // 1
    subfxp #(17, 1) sub11356(.a({{1{t1330[15]}}, t1330}), .b({{1{t1334[15]}}, t1334}), .clk(clk), .q(tm623));    // 1
    subfxp #(17, 1) sub11363(.a({{1{t1331[15]}}, t1331}), .b({{1{t1335[15]}}, t1335}), .clk(clk), .q(tm624));    // 1
    addfxp #(17, 1) add11386(.a({{1{t1332[15]}}, t1332}), .b({{1{t1337[15]}}, t1337}), .clk(clk), .q(tm625));    // 1
    subfxp #(17, 1) sub11393(.a({{1{t1333[15]}}, t1333}), .b({{1{t1336[15]}}, t1336}), .clk(clk), .q(tm626));    // 1
    subfxp #(17, 1) sub11400(.a({{1{t1332[15]}}, t1332}), .b({{1{t1337[15]}}, t1337}), .clk(clk), .q(tm627));    // 1
    addfxp #(17, 1) add11407(.a({{1{t1333[15]}}, t1333}), .b({{1{t1336[15]}}, t1336}), .clk(clk), .q(tm628));    // 1
    addfxp #(17, 1) add11550(.a({{1{t1346[15]}}, t1346}), .b({{1{t1350[15]}}, t1350}), .clk(clk), .q(tm637));    // 1
    addfxp #(17, 1) add11557(.a({{1{t1347[15]}}, t1347}), .b({{1{t1351[15]}}, t1351}), .clk(clk), .q(tm638));    // 1
    subfxp #(17, 1) sub11564(.a({{1{t1346[15]}}, t1346}), .b({{1{t1350[15]}}, t1350}), .clk(clk), .q(tm639));    // 1
    subfxp #(17, 1) sub11571(.a({{1{t1347[15]}}, t1347}), .b({{1{t1351[15]}}, t1351}), .clk(clk), .q(tm640));    // 1
    addfxp #(17, 1) add11594(.a({{1{t1348[15]}}, t1348}), .b({{1{t1353[15]}}, t1353}), .clk(clk), .q(tm641));    // 1
    subfxp #(17, 1) sub11601(.a({{1{t1349[15]}}, t1349}), .b({{1{t1352[15]}}, t1352}), .clk(clk), .q(tm642));    // 1
    subfxp #(17, 1) sub11608(.a({{1{t1348[15]}}, t1348}), .b({{1{t1353[15]}}, t1353}), .clk(clk), .q(tm643));    // 1
    addfxp #(17, 1) add11615(.a({{1{t1349[15]}}, t1349}), .b({{1{t1352[15]}}, t1352}), .clk(clk), .q(tm644));    // 1
    addfxp #(17, 1) add11758(.a({{1{t1362[15]}}, t1362}), .b({{1{t1366[15]}}, t1366}), .clk(clk), .q(tm653));    // 1
    addfxp #(17, 1) add11765(.a({{1{t1363[15]}}, t1363}), .b({{1{t1367[15]}}, t1367}), .clk(clk), .q(tm654));    // 1
    subfxp #(17, 1) sub11772(.a({{1{t1362[15]}}, t1362}), .b({{1{t1366[15]}}, t1366}), .clk(clk), .q(tm655));    // 1
    subfxp #(17, 1) sub11779(.a({{1{t1363[15]}}, t1363}), .b({{1{t1367[15]}}, t1367}), .clk(clk), .q(tm656));    // 1
    addfxp #(17, 1) add11802(.a({{1{t1364[15]}}, t1364}), .b({{1{t1369[15]}}, t1369}), .clk(clk), .q(tm657));    // 1
    subfxp #(17, 1) sub11809(.a({{1{t1365[15]}}, t1365}), .b({{1{t1368[15]}}, t1368}), .clk(clk), .q(tm658));    // 1
    subfxp #(17, 1) sub11816(.a({{1{t1364[15]}}, t1364}), .b({{1{t1369[15]}}, t1369}), .clk(clk), .q(tm659));    // 1
    addfxp #(17, 1) add11823(.a({{1{t1365[15]}}, t1365}), .b({{1{t1368[15]}}, t1368}), .clk(clk), .q(tm660));    // 1
    addfxp #(17, 1) add11966(.a({{1{t1378[15]}}, t1378}), .b({{1{t1382[15]}}, t1382}), .clk(clk), .q(tm669));    // 1
    addfxp #(17, 1) add11973(.a({{1{t1379[15]}}, t1379}), .b({{1{t1383[15]}}, t1383}), .clk(clk), .q(tm670));    // 1
    subfxp #(17, 1) sub11980(.a({{1{t1378[15]}}, t1378}), .b({{1{t1382[15]}}, t1382}), .clk(clk), .q(tm671));    // 1
    subfxp #(17, 1) sub11987(.a({{1{t1379[15]}}, t1379}), .b({{1{t1383[15]}}, t1383}), .clk(clk), .q(tm672));    // 1
    addfxp #(17, 1) add12010(.a({{1{t1380[15]}}, t1380}), .b({{1{t1385[15]}}, t1385}), .clk(clk), .q(tm673));    // 1
    subfxp #(17, 1) sub12017(.a({{1{t1381[15]}}, t1381}), .b({{1{t1384[15]}}, t1384}), .clk(clk), .q(tm674));    // 1
    subfxp #(17, 1) sub12024(.a({{1{t1380[15]}}, t1380}), .b({{1{t1385[15]}}, t1385}), .clk(clk), .q(tm675));    // 1
    addfxp #(17, 1) add12031(.a({{1{t1381[15]}}, t1381}), .b({{1{t1384[15]}}, t1384}), .clk(clk), .q(tm676));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 39
// Gap: 16
module rc12056(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   wire [31:0] t8;
   wire [31:0] s8;
   assign t8 = {X16, X17};
   wire [31:0] t9;
   wire [31:0] s9;
   assign t9 = {X18, X19};
   wire [31:0] t10;
   wire [31:0] s10;
   assign t10 = {X20, X21};
   wire [31:0] t11;
   wire [31:0] s11;
   assign t11 = {X22, X23};
   wire [31:0] t12;
   wire [31:0] s12;
   assign t12 = {X24, X25};
   wire [31:0] t13;
   wire [31:0] s13;
   assign t13 = {X26, X27};
   wire [31:0] t14;
   wire [31:0] s14;
   assign t14 = {X28, X29};
   wire [31:0] t15;
   wire [31:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];
   assign Y16 = s8[31:16];
   assign Y17 = s8[15:0];
   assign Y18 = s9[31:16];
   assign Y19 = s9[15:0];
   assign Y20 = s10[31:16];
   assign Y21 = s10[15:0];
   assign Y22 = s11[31:16];
   assign Y23 = s11[15:0];
   assign Y24 = s12[31:16];
   assign Y25 = s12[15:0];
   assign Y26 = s13[31:16];
   assign Y27 = s13[15:0];
   assign Y28 = s14[31:16];
   assign Y29 = s14[15:0];
   assign Y30 = s15[31:16];
   assign Y31 = s15[15:0];

   perm12054 instPerm24543(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet12054(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
,       x8, y8
,       x9, y9
,       x10, y10
,       x11, y11
,       x12, y12
,       x13, y13
,       x14, y14
,       x15, y15
);

    parameter width = 32;

    input [3:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    input [width-1:0] x8;
    output reg [width-1:0] y8;
    input [width-1:0] x9;
    output reg [width-1:0] y9;
    input [width-1:0] x10;
    output reg [width-1:0] y10;
    input [width-1:0] x11;
    output reg [width-1:0] y11;
    input [width-1:0] x12;
    output reg [width-1:0] y12;
    input [width-1:0] x13;
    output reg [width-1:0] y13;
    input [width-1:0] x14;
    output reg [width-1:0] y14;
    input [width-1:0] x15;
    output reg [width-1:0] y15;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7, t0_8, t0_9, t0_10, t0_11, t0_12, t0_13, t0_14, t0_15;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7, t1_8, t1_9, t1_10, t1_11, t1_12, t1_13, t1_14, t1_15;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10, t6_11, t6_12, t6_13, t6_14, t6_15;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15;
    wire [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14, t9_15;
    wire [width-1:0] t10_0, t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14, t10_15;
    reg [width-1:0] t11_0, t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14, t11_15;
    wire [width-1:0] t12_0, t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9, t12_10, t12_11, t12_12, t12_13, t12_14, t12_15;
    reg [width-1:0] t13_0, t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13, t13_14, t13_15;

    reg [15:0] control;

    always @(posedge clk) begin
      case(ct)
        4'd0: control <= 16'b1111111111111111;
        4'd1: control <= 16'b1111111111111111;
        4'd2: control <= 16'b1111111111111111;
        4'd3: control <= 16'b1111111111111111;
        4'd4: control <= 16'b0000000011111111;
        4'd5: control <= 16'b0000000011111111;
        4'd6: control <= 16'b0000000011111111;
        4'd7: control <= 16'b0000000011111111;
        4'd8: control <= 16'b1111111100000000;
        4'd9: control <= 16'b1111111100000000;
        4'd10: control <= 16'b1111111100000000;
        4'd11: control <= 16'b1111111100000000;
        4'd12: control <= 16'b0000000000000000;
        4'd13: control <= 16'b0000000000000000;
        4'd14: control <= 16'b0000000000000000;
        4'd15: control <= 16'b0000000000000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [15:0] control0;
   reg [15:0] control1;
   reg [15:0] control2;
   reg [15:0] control3;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
        control3 <= control2;
    end
    assign t0_0 = x0;
    assign t0_1 = x8;
    assign t0_2 = x1;
    assign t0_3 = x9;
    assign t0_4 = x2;
    assign t0_5 = x10;
    assign t0_6 = x3;
    assign t0_7 = x11;
    assign t0_8 = x4;
    assign t0_9 = x12;
    assign t0_10 = x5;
    assign t0_11 = x13;
    assign t0_12 = x6;
    assign t0_13 = x14;
    assign t0_14 = x7;
    assign t0_15 = x15;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
     assign t1_8 = t0_8;
     assign t1_9 = t0_9;
     assign t1_10 = t0_10;
     assign t1_11 = t0_11;
     assign t1_12 = t0_12;
     assign t1_13 = t0_13;
     assign t1_14 = t0_14;
     assign t1_15 = t0_15;
    assign t2_0 = t1_0;
    assign t2_1 = t1_8;
    assign t2_2 = t1_1;
    assign t2_3 = t1_9;
    assign t2_4 = t1_2;
    assign t2_5 = t1_10;
    assign t2_6 = t1_3;
    assign t2_7 = t1_11;
    assign t2_8 = t1_4;
    assign t2_9 = t1_12;
    assign t2_10 = t1_5;
    assign t2_11 = t1_13;
    assign t2_12 = t1_6;
    assign t2_13 = t1_14;
    assign t2_14 = t1_7;
    assign t2_15 = t1_15;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
         t3_8 <= t2_8;
         t3_9 <= t2_9;
         t3_10 <= t2_10;
         t3_11 <= t2_11;
         t3_12 <= t2_12;
         t3_13 <= t2_13;
         t3_14 <= t2_14;
         t3_15 <= t2_15;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_8;
    assign t4_2 = t3_1;
    assign t4_3 = t3_9;
    assign t4_4 = t3_2;
    assign t4_5 = t3_10;
    assign t4_6 = t3_3;
    assign t4_7 = t3_11;
    assign t4_8 = t3_4;
    assign t4_9 = t3_12;
    assign t4_10 = t3_5;
    assign t4_11 = t3_13;
    assign t4_12 = t3_6;
    assign t4_13 = t3_14;
    assign t4_14 = t3_7;
    assign t4_15 = t3_15;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_2;
     assign t5_3 = t4_3;
     assign t5_4 = t4_4;
     assign t5_5 = t4_5;
     assign t5_6 = t4_6;
     assign t5_7 = t4_7;
     assign t5_8 = t4_8;
     assign t5_9 = t4_9;
     assign t5_10 = t4_10;
     assign t5_11 = t4_11;
     assign t5_12 = t4_12;
     assign t5_13 = t4_13;
     assign t5_14 = t4_14;
     assign t5_15 = t4_15;
    assign t6_0 = t5_0;
    assign t6_1 = t5_8;
    assign t6_2 = t5_1;
    assign t6_3 = t5_9;
    assign t6_4 = t5_2;
    assign t6_5 = t5_10;
    assign t6_6 = t5_3;
    assign t6_7 = t5_11;
    assign t6_8 = t5_4;
    assign t6_9 = t5_12;
    assign t6_10 = t5_5;
    assign t6_11 = t5_13;
    assign t6_12 = t5_6;
    assign t6_13 = t5_14;
    assign t6_14 = t5_7;
    assign t6_15 = t5_15;
   always @(posedge clk) begin
         t7_0 <= (control1[15] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[15] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[14] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[14] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[13] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[13] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[12] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[12] == 0) ? t6_7 : t6_6;
         t7_8 <= (control1[11] == 0) ? t6_8 : t6_9;
         t7_9 <= (control1[11] == 0) ? t6_9 : t6_8;
         t7_10 <= (control1[10] == 0) ? t6_10 : t6_11;
         t7_11 <= (control1[10] == 0) ? t6_11 : t6_10;
         t7_12 <= (control1[9] == 0) ? t6_12 : t6_13;
         t7_13 <= (control1[9] == 0) ? t6_13 : t6_12;
         t7_14 <= (control1[8] == 0) ? t6_14 : t6_15;
         t7_15 <= (control1[8] == 0) ? t6_15 : t6_14;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_8;
    assign t8_5 = t7_10;
    assign t8_6 = t7_12;
    assign t8_7 = t7_14;
    assign t8_8 = t7_1;
    assign t8_9 = t7_3;
    assign t8_10 = t7_5;
    assign t8_11 = t7_7;
    assign t8_12 = t7_9;
    assign t8_13 = t7_11;
    assign t8_14 = t7_13;
    assign t8_15 = t7_15;
     assign t9_0 = (control2[7] == 0) ? t8_0 : t8_1;
     assign t9_1 = (control2[7] == 0) ? t8_1 : t8_0;
     assign t9_2 = (control2[6] == 0) ? t8_2 : t8_3;
     assign t9_3 = (control2[6] == 0) ? t8_3 : t8_2;
     assign t9_4 = (control2[5] == 0) ? t8_4 : t8_5;
     assign t9_5 = (control2[5] == 0) ? t8_5 : t8_4;
     assign t9_6 = (control2[4] == 0) ? t8_6 : t8_7;
     assign t9_7 = (control2[4] == 0) ? t8_7 : t8_6;
     assign t9_8 = (control2[3] == 0) ? t8_8 : t8_9;
     assign t9_9 = (control2[3] == 0) ? t8_9 : t8_8;
     assign t9_10 = (control2[2] == 0) ? t8_10 : t8_11;
     assign t9_11 = (control2[2] == 0) ? t8_11 : t8_10;
     assign t9_12 = (control2[1] == 0) ? t8_12 : t8_13;
     assign t9_13 = (control2[1] == 0) ? t8_13 : t8_12;
     assign t9_14 = (control2[0] == 0) ? t8_14 : t8_15;
     assign t9_15 = (control2[0] == 0) ? t8_15 : t8_14;
    assign t10_0 = t9_0;
    assign t10_1 = t9_2;
    assign t10_2 = t9_4;
    assign t10_3 = t9_6;
    assign t10_4 = t9_8;
    assign t10_5 = t9_10;
    assign t10_6 = t9_12;
    assign t10_7 = t9_14;
    assign t10_8 = t9_1;
    assign t10_9 = t9_3;
    assign t10_10 = t9_5;
    assign t10_11 = t9_7;
    assign t10_12 = t9_9;
    assign t10_13 = t9_11;
    assign t10_14 = t9_13;
    assign t10_15 = t9_15;
   always @(posedge clk) begin
         t11_0 <= t10_0;
         t11_1 <= t10_1;
         t11_2 <= t10_2;
         t11_3 <= t10_3;
         t11_4 <= t10_4;
         t11_5 <= t10_5;
         t11_6 <= t10_6;
         t11_7 <= t10_7;
         t11_8 <= t10_8;
         t11_9 <= t10_9;
         t11_10 <= t10_10;
         t11_11 <= t10_11;
         t11_12 <= t10_12;
         t11_13 <= t10_13;
         t11_14 <= t10_14;
         t11_15 <= t10_15;
   end
    assign t12_0 = t11_0;
    assign t12_1 = t11_2;
    assign t12_2 = t11_4;
    assign t12_3 = t11_6;
    assign t12_4 = t11_8;
    assign t12_5 = t11_10;
    assign t12_6 = t11_12;
    assign t12_7 = t11_14;
    assign t12_8 = t11_1;
    assign t12_9 = t11_3;
    assign t12_10 = t11_5;
    assign t12_11 = t11_7;
    assign t12_12 = t11_9;
    assign t12_13 = t11_11;
    assign t12_14 = t11_13;
    assign t12_15 = t11_15;
   always @(posedge clk) begin
         t13_0 <= t12_0;
         t13_1 <= t12_1;
         t13_2 <= t12_2;
         t13_3 <= t12_3;
         t13_4 <= t12_4;
         t13_5 <= t12_5;
         t13_6 <= t12_6;
         t13_7 <= t12_7;
         t13_8 <= t12_8;
         t13_9 <= t12_9;
         t13_10 <= t12_10;
         t13_11 <= t12_11;
         t13_12 <= t12_12;
         t13_13 <= t12_13;
         t13_14 <= t12_14;
         t13_15 <= t12_15;
   end
    always @(posedge clk) begin
        y0 <= t13_0;
        y1 <= t13_2;
        y2 <= t13_4;
        y3 <= t13_6;
        y4 <= t13_8;
        y5 <= t13_10;
        y6 <= t13_12;
        y7 <= t13_14;
        y8 <= t13_1;
        y9 <= t13_3;
        y10 <= t13_5;
        y11 <= t13_7;
        y12 <= t13_9;
        y13 <= t13_11;
        y14 <= t13_13;
        y15 <= t13_15;
    end
endmodule

// Latency: 39
// Gap: 16
module perm12054(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter width = 32;

   parameter depth = 16;

   parameter addrbits = 4;

   parameter muxbits = 4;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  t8;
   wire [width-1:0]  s8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  t9;
   wire [width-1:0]  s9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  t10;
   wire [width-1:0]  s10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  t11;
   wire [width-1:0]  s11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  t12;
   wire [width-1:0]  s12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  t13;
   wire [width-1:0]  s13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  t14;
   wire [width-1:0]  s14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  t15;
   wire [width-1:0]  s15;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg [addrbits-1:0] s1rd8, s2wr8, s2rd8;
   reg [addrbits-1:0] s1rd9, s2wr9, s2rd9;
   reg [addrbits-1:0] s1rd10, s2wr10, s2rd10;
   reg [addrbits-1:0] s1rd11, s2wr11, s2rd11;
   reg [addrbits-1:0] s1rd12, s2wr12, s2rd12;
   reg [addrbits-1:0] s1rd13, s2wr13, s2rd13;
   reg [addrbits-1:0] s1rd14, s2wr14, s2rd14;
   reg [addrbits-1:0] s1rd15, s2wr15, s2rd15;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm58;
   assign tm58 = 0;

shiftRegFIFO #(6, 1) shiftFIFO_24548(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24549(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem8(x8, t8, {inFlip0, s1wr0}, {outFlip0, s1rd8}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem9(x9, t9, {inFlip0, s1wr0}, {outFlip0, s1rd9}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem10(x10, t10, {inFlip0, s1wr0}, {outFlip0, s1rd10}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem11(x11, t11, {inFlip0, s1wr0}, {outFlip0, s1rd11}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem12(x12, t12, {inFlip0, s1wr0}, {outFlip0, s1rd12}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem13(x13, t13, {inFlip0, s1wr0}, {outFlip0, s1rd13}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem14(x14, t14, {inFlip0, s1wr0}, {outFlip0, s1rd14}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem15(x15, t15, {inFlip0, s1wr0}, {outFlip0, s1rd15}, s1wr_en, clk);

nextReg #(15, 4) nextReg_24560(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_24561(.X(next2), .Y(next3), .clk(clk));
nextReg #(16, 4) nextReg_24564(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24565(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(15, 1) shiftFIFO_24568(.X(tm58), .Y(tm58_d), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_24571(.X(tm58_d), .Y(tm58_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(6, 4) shiftFIFO_24576(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(7, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem8(s8, y8, {inFlip1, s2wr8}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem9(s9, y9, {inFlip1, s2wr9}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem10(s10, y10, {inFlip1, s2wr10}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem11(s11, y11, {inFlip1, s2wr11}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem12(s12, y12, {inFlip1, s2wr12}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem13(s13, y13, {inFlip1, s2wr13}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem14(s14, y14, {inFlip1, s2wr14}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem15(s15, y15, {inFlip1, s2wr15}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd0 <= 12;
	     {1'd0,  4'd1}: s1rd0 <= 13;
	     {1'd0,  4'd2}: s1rd0 <= 14;
	     {1'd0,  4'd3}: s1rd0 <= 15;
	     {1'd0,  4'd4}: s1rd0 <= 8;
	     {1'd0,  4'd5}: s1rd0 <= 9;
	     {1'd0,  4'd6}: s1rd0 <= 10;
	     {1'd0,  4'd7}: s1rd0 <= 11;
	     {1'd0,  4'd8}: s1rd0 <= 4;
	     {1'd0,  4'd9}: s1rd0 <= 5;
	     {1'd0,  4'd10}: s1rd0 <= 6;
	     {1'd0,  4'd11}: s1rd0 <= 7;
	     {1'd0,  4'd12}: s1rd0 <= 0;
	     {1'd0,  4'd13}: s1rd0 <= 1;
	     {1'd0,  4'd14}: s1rd0 <= 2;
	     {1'd0,  4'd15}: s1rd0 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd1 <= 8;
	     {1'd0,  4'd1}: s1rd1 <= 9;
	     {1'd0,  4'd2}: s1rd1 <= 10;
	     {1'd0,  4'd3}: s1rd1 <= 11;
	     {1'd0,  4'd4}: s1rd1 <= 12;
	     {1'd0,  4'd5}: s1rd1 <= 13;
	     {1'd0,  4'd6}: s1rd1 <= 14;
	     {1'd0,  4'd7}: s1rd1 <= 15;
	     {1'd0,  4'd8}: s1rd1 <= 0;
	     {1'd0,  4'd9}: s1rd1 <= 1;
	     {1'd0,  4'd10}: s1rd1 <= 2;
	     {1'd0,  4'd11}: s1rd1 <= 3;
	     {1'd0,  4'd12}: s1rd1 <= 4;
	     {1'd0,  4'd13}: s1rd1 <= 5;
	     {1'd0,  4'd14}: s1rd1 <= 6;
	     {1'd0,  4'd15}: s1rd1 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd2 <= 4;
	     {1'd0,  4'd1}: s1rd2 <= 5;
	     {1'd0,  4'd2}: s1rd2 <= 6;
	     {1'd0,  4'd3}: s1rd2 <= 7;
	     {1'd0,  4'd4}: s1rd2 <= 0;
	     {1'd0,  4'd5}: s1rd2 <= 1;
	     {1'd0,  4'd6}: s1rd2 <= 2;
	     {1'd0,  4'd7}: s1rd2 <= 3;
	     {1'd0,  4'd8}: s1rd2 <= 12;
	     {1'd0,  4'd9}: s1rd2 <= 13;
	     {1'd0,  4'd10}: s1rd2 <= 14;
	     {1'd0,  4'd11}: s1rd2 <= 15;
	     {1'd0,  4'd12}: s1rd2 <= 8;
	     {1'd0,  4'd13}: s1rd2 <= 9;
	     {1'd0,  4'd14}: s1rd2 <= 10;
	     {1'd0,  4'd15}: s1rd2 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd3 <= 0;
	     {1'd0,  4'd1}: s1rd3 <= 1;
	     {1'd0,  4'd2}: s1rd3 <= 2;
	     {1'd0,  4'd3}: s1rd3 <= 3;
	     {1'd0,  4'd4}: s1rd3 <= 4;
	     {1'd0,  4'd5}: s1rd3 <= 5;
	     {1'd0,  4'd6}: s1rd3 <= 6;
	     {1'd0,  4'd7}: s1rd3 <= 7;
	     {1'd0,  4'd8}: s1rd3 <= 8;
	     {1'd0,  4'd9}: s1rd3 <= 9;
	     {1'd0,  4'd10}: s1rd3 <= 10;
	     {1'd0,  4'd11}: s1rd3 <= 11;
	     {1'd0,  4'd12}: s1rd3 <= 12;
	     {1'd0,  4'd13}: s1rd3 <= 13;
	     {1'd0,  4'd14}: s1rd3 <= 14;
	     {1'd0,  4'd15}: s1rd3 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd4 <= 12;
	     {1'd0,  4'd1}: s1rd4 <= 13;
	     {1'd0,  4'd2}: s1rd4 <= 14;
	     {1'd0,  4'd3}: s1rd4 <= 15;
	     {1'd0,  4'd4}: s1rd4 <= 8;
	     {1'd0,  4'd5}: s1rd4 <= 9;
	     {1'd0,  4'd6}: s1rd4 <= 10;
	     {1'd0,  4'd7}: s1rd4 <= 11;
	     {1'd0,  4'd8}: s1rd4 <= 4;
	     {1'd0,  4'd9}: s1rd4 <= 5;
	     {1'd0,  4'd10}: s1rd4 <= 6;
	     {1'd0,  4'd11}: s1rd4 <= 7;
	     {1'd0,  4'd12}: s1rd4 <= 0;
	     {1'd0,  4'd13}: s1rd4 <= 1;
	     {1'd0,  4'd14}: s1rd4 <= 2;
	     {1'd0,  4'd15}: s1rd4 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd5 <= 8;
	     {1'd0,  4'd1}: s1rd5 <= 9;
	     {1'd0,  4'd2}: s1rd5 <= 10;
	     {1'd0,  4'd3}: s1rd5 <= 11;
	     {1'd0,  4'd4}: s1rd5 <= 12;
	     {1'd0,  4'd5}: s1rd5 <= 13;
	     {1'd0,  4'd6}: s1rd5 <= 14;
	     {1'd0,  4'd7}: s1rd5 <= 15;
	     {1'd0,  4'd8}: s1rd5 <= 0;
	     {1'd0,  4'd9}: s1rd5 <= 1;
	     {1'd0,  4'd10}: s1rd5 <= 2;
	     {1'd0,  4'd11}: s1rd5 <= 3;
	     {1'd0,  4'd12}: s1rd5 <= 4;
	     {1'd0,  4'd13}: s1rd5 <= 5;
	     {1'd0,  4'd14}: s1rd5 <= 6;
	     {1'd0,  4'd15}: s1rd5 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd6 <= 4;
	     {1'd0,  4'd1}: s1rd6 <= 5;
	     {1'd0,  4'd2}: s1rd6 <= 6;
	     {1'd0,  4'd3}: s1rd6 <= 7;
	     {1'd0,  4'd4}: s1rd6 <= 0;
	     {1'd0,  4'd5}: s1rd6 <= 1;
	     {1'd0,  4'd6}: s1rd6 <= 2;
	     {1'd0,  4'd7}: s1rd6 <= 3;
	     {1'd0,  4'd8}: s1rd6 <= 12;
	     {1'd0,  4'd9}: s1rd6 <= 13;
	     {1'd0,  4'd10}: s1rd6 <= 14;
	     {1'd0,  4'd11}: s1rd6 <= 15;
	     {1'd0,  4'd12}: s1rd6 <= 8;
	     {1'd0,  4'd13}: s1rd6 <= 9;
	     {1'd0,  4'd14}: s1rd6 <= 10;
	     {1'd0,  4'd15}: s1rd6 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd7 <= 0;
	     {1'd0,  4'd1}: s1rd7 <= 1;
	     {1'd0,  4'd2}: s1rd7 <= 2;
	     {1'd0,  4'd3}: s1rd7 <= 3;
	     {1'd0,  4'd4}: s1rd7 <= 4;
	     {1'd0,  4'd5}: s1rd7 <= 5;
	     {1'd0,  4'd6}: s1rd7 <= 6;
	     {1'd0,  4'd7}: s1rd7 <= 7;
	     {1'd0,  4'd8}: s1rd7 <= 8;
	     {1'd0,  4'd9}: s1rd7 <= 9;
	     {1'd0,  4'd10}: s1rd7 <= 10;
	     {1'd0,  4'd11}: s1rd7 <= 11;
	     {1'd0,  4'd12}: s1rd7 <= 12;
	     {1'd0,  4'd13}: s1rd7 <= 13;
	     {1'd0,  4'd14}: s1rd7 <= 14;
	     {1'd0,  4'd15}: s1rd7 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd8 <= 12;
	     {1'd0,  4'd1}: s1rd8 <= 13;
	     {1'd0,  4'd2}: s1rd8 <= 14;
	     {1'd0,  4'd3}: s1rd8 <= 15;
	     {1'd0,  4'd4}: s1rd8 <= 8;
	     {1'd0,  4'd5}: s1rd8 <= 9;
	     {1'd0,  4'd6}: s1rd8 <= 10;
	     {1'd0,  4'd7}: s1rd8 <= 11;
	     {1'd0,  4'd8}: s1rd8 <= 4;
	     {1'd0,  4'd9}: s1rd8 <= 5;
	     {1'd0,  4'd10}: s1rd8 <= 6;
	     {1'd0,  4'd11}: s1rd8 <= 7;
	     {1'd0,  4'd12}: s1rd8 <= 0;
	     {1'd0,  4'd13}: s1rd8 <= 1;
	     {1'd0,  4'd14}: s1rd8 <= 2;
	     {1'd0,  4'd15}: s1rd8 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd8 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd9 <= 8;
	     {1'd0,  4'd1}: s1rd9 <= 9;
	     {1'd0,  4'd2}: s1rd9 <= 10;
	     {1'd0,  4'd3}: s1rd9 <= 11;
	     {1'd0,  4'd4}: s1rd9 <= 12;
	     {1'd0,  4'd5}: s1rd9 <= 13;
	     {1'd0,  4'd6}: s1rd9 <= 14;
	     {1'd0,  4'd7}: s1rd9 <= 15;
	     {1'd0,  4'd8}: s1rd9 <= 0;
	     {1'd0,  4'd9}: s1rd9 <= 1;
	     {1'd0,  4'd10}: s1rd9 <= 2;
	     {1'd0,  4'd11}: s1rd9 <= 3;
	     {1'd0,  4'd12}: s1rd9 <= 4;
	     {1'd0,  4'd13}: s1rd9 <= 5;
	     {1'd0,  4'd14}: s1rd9 <= 6;
	     {1'd0,  4'd15}: s1rd9 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd9 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd10 <= 4;
	     {1'd0,  4'd1}: s1rd10 <= 5;
	     {1'd0,  4'd2}: s1rd10 <= 6;
	     {1'd0,  4'd3}: s1rd10 <= 7;
	     {1'd0,  4'd4}: s1rd10 <= 0;
	     {1'd0,  4'd5}: s1rd10 <= 1;
	     {1'd0,  4'd6}: s1rd10 <= 2;
	     {1'd0,  4'd7}: s1rd10 <= 3;
	     {1'd0,  4'd8}: s1rd10 <= 12;
	     {1'd0,  4'd9}: s1rd10 <= 13;
	     {1'd0,  4'd10}: s1rd10 <= 14;
	     {1'd0,  4'd11}: s1rd10 <= 15;
	     {1'd0,  4'd12}: s1rd10 <= 8;
	     {1'd0,  4'd13}: s1rd10 <= 9;
	     {1'd0,  4'd14}: s1rd10 <= 10;
	     {1'd0,  4'd15}: s1rd10 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd10 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd11 <= 0;
	     {1'd0,  4'd1}: s1rd11 <= 1;
	     {1'd0,  4'd2}: s1rd11 <= 2;
	     {1'd0,  4'd3}: s1rd11 <= 3;
	     {1'd0,  4'd4}: s1rd11 <= 4;
	     {1'd0,  4'd5}: s1rd11 <= 5;
	     {1'd0,  4'd6}: s1rd11 <= 6;
	     {1'd0,  4'd7}: s1rd11 <= 7;
	     {1'd0,  4'd8}: s1rd11 <= 8;
	     {1'd0,  4'd9}: s1rd11 <= 9;
	     {1'd0,  4'd10}: s1rd11 <= 10;
	     {1'd0,  4'd11}: s1rd11 <= 11;
	     {1'd0,  4'd12}: s1rd11 <= 12;
	     {1'd0,  4'd13}: s1rd11 <= 13;
	     {1'd0,  4'd14}: s1rd11 <= 14;
	     {1'd0,  4'd15}: s1rd11 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd11 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd12 <= 12;
	     {1'd0,  4'd1}: s1rd12 <= 13;
	     {1'd0,  4'd2}: s1rd12 <= 14;
	     {1'd0,  4'd3}: s1rd12 <= 15;
	     {1'd0,  4'd4}: s1rd12 <= 8;
	     {1'd0,  4'd5}: s1rd12 <= 9;
	     {1'd0,  4'd6}: s1rd12 <= 10;
	     {1'd0,  4'd7}: s1rd12 <= 11;
	     {1'd0,  4'd8}: s1rd12 <= 4;
	     {1'd0,  4'd9}: s1rd12 <= 5;
	     {1'd0,  4'd10}: s1rd12 <= 6;
	     {1'd0,  4'd11}: s1rd12 <= 7;
	     {1'd0,  4'd12}: s1rd12 <= 0;
	     {1'd0,  4'd13}: s1rd12 <= 1;
	     {1'd0,  4'd14}: s1rd12 <= 2;
	     {1'd0,  4'd15}: s1rd12 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd12 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd13 <= 8;
	     {1'd0,  4'd1}: s1rd13 <= 9;
	     {1'd0,  4'd2}: s1rd13 <= 10;
	     {1'd0,  4'd3}: s1rd13 <= 11;
	     {1'd0,  4'd4}: s1rd13 <= 12;
	     {1'd0,  4'd5}: s1rd13 <= 13;
	     {1'd0,  4'd6}: s1rd13 <= 14;
	     {1'd0,  4'd7}: s1rd13 <= 15;
	     {1'd0,  4'd8}: s1rd13 <= 0;
	     {1'd0,  4'd9}: s1rd13 <= 1;
	     {1'd0,  4'd10}: s1rd13 <= 2;
	     {1'd0,  4'd11}: s1rd13 <= 3;
	     {1'd0,  4'd12}: s1rd13 <= 4;
	     {1'd0,  4'd13}: s1rd13 <= 5;
	     {1'd0,  4'd14}: s1rd13 <= 6;
	     {1'd0,  4'd15}: s1rd13 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd13 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd14 <= 4;
	     {1'd0,  4'd1}: s1rd14 <= 5;
	     {1'd0,  4'd2}: s1rd14 <= 6;
	     {1'd0,  4'd3}: s1rd14 <= 7;
	     {1'd0,  4'd4}: s1rd14 <= 0;
	     {1'd0,  4'd5}: s1rd14 <= 1;
	     {1'd0,  4'd6}: s1rd14 <= 2;
	     {1'd0,  4'd7}: s1rd14 <= 3;
	     {1'd0,  4'd8}: s1rd14 <= 12;
	     {1'd0,  4'd9}: s1rd14 <= 13;
	     {1'd0,  4'd10}: s1rd14 <= 14;
	     {1'd0,  4'd11}: s1rd14 <= 15;
	     {1'd0,  4'd12}: s1rd14 <= 8;
	     {1'd0,  4'd13}: s1rd14 <= 9;
	     {1'd0,  4'd14}: s1rd14 <= 10;
	     {1'd0,  4'd15}: s1rd14 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd14 is "block"
   always @(posedge clk) begin
      case({tm58_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd15 <= 0;
	     {1'd0,  4'd1}: s1rd15 <= 1;
	     {1'd0,  4'd2}: s1rd15 <= 2;
	     {1'd0,  4'd3}: s1rd15 <= 3;
	     {1'd0,  4'd4}: s1rd15 <= 4;
	     {1'd0,  4'd5}: s1rd15 <= 5;
	     {1'd0,  4'd6}: s1rd15 <= 6;
	     {1'd0,  4'd7}: s1rd15 <= 7;
	     {1'd0,  4'd8}: s1rd15 <= 8;
	     {1'd0,  4'd9}: s1rd15 <= 9;
	     {1'd0,  4'd10}: s1rd15 <= 10;
	     {1'd0,  4'd11}: s1rd15 <= 11;
	     {1'd0,  4'd12}: s1rd15 <= 12;
	     {1'd0,  4'd13}: s1rd15 <= 13;
	     {1'd0,  4'd14}: s1rd15 <= 14;
	     {1'd0,  4'd15}: s1rd15 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd15 is "block"
    swNet12054 sw(tm58_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7, t8, s8, t9, s9, t10, s10, t11, s11, t12, s12, t13, s13, t14, s14, t15, s15);

   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr0 <= 12;
	      {1'd0, 4'd1}: s2wr0 <= 13;
	      {1'd0, 4'd2}: s2wr0 <= 14;
	      {1'd0, 4'd3}: s2wr0 <= 15;
	      {1'd0, 4'd4}: s2wr0 <= 8;
	      {1'd0, 4'd5}: s2wr0 <= 9;
	      {1'd0, 4'd6}: s2wr0 <= 10;
	      {1'd0, 4'd7}: s2wr0 <= 11;
	      {1'd0, 4'd8}: s2wr0 <= 4;
	      {1'd0, 4'd9}: s2wr0 <= 5;
	      {1'd0, 4'd10}: s2wr0 <= 6;
	      {1'd0, 4'd11}: s2wr0 <= 7;
	      {1'd0, 4'd12}: s2wr0 <= 0;
	      {1'd0, 4'd13}: s2wr0 <= 1;
	      {1'd0, 4'd14}: s2wr0 <= 2;
	      {1'd0, 4'd15}: s2wr0 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr1 <= 8;
	      {1'd0, 4'd1}: s2wr1 <= 9;
	      {1'd0, 4'd2}: s2wr1 <= 10;
	      {1'd0, 4'd3}: s2wr1 <= 11;
	      {1'd0, 4'd4}: s2wr1 <= 12;
	      {1'd0, 4'd5}: s2wr1 <= 13;
	      {1'd0, 4'd6}: s2wr1 <= 14;
	      {1'd0, 4'd7}: s2wr1 <= 15;
	      {1'd0, 4'd8}: s2wr1 <= 0;
	      {1'd0, 4'd9}: s2wr1 <= 1;
	      {1'd0, 4'd10}: s2wr1 <= 2;
	      {1'd0, 4'd11}: s2wr1 <= 3;
	      {1'd0, 4'd12}: s2wr1 <= 4;
	      {1'd0, 4'd13}: s2wr1 <= 5;
	      {1'd0, 4'd14}: s2wr1 <= 6;
	      {1'd0, 4'd15}: s2wr1 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr2 <= 4;
	      {1'd0, 4'd1}: s2wr2 <= 5;
	      {1'd0, 4'd2}: s2wr2 <= 6;
	      {1'd0, 4'd3}: s2wr2 <= 7;
	      {1'd0, 4'd4}: s2wr2 <= 0;
	      {1'd0, 4'd5}: s2wr2 <= 1;
	      {1'd0, 4'd6}: s2wr2 <= 2;
	      {1'd0, 4'd7}: s2wr2 <= 3;
	      {1'd0, 4'd8}: s2wr2 <= 12;
	      {1'd0, 4'd9}: s2wr2 <= 13;
	      {1'd0, 4'd10}: s2wr2 <= 14;
	      {1'd0, 4'd11}: s2wr2 <= 15;
	      {1'd0, 4'd12}: s2wr2 <= 8;
	      {1'd0, 4'd13}: s2wr2 <= 9;
	      {1'd0, 4'd14}: s2wr2 <= 10;
	      {1'd0, 4'd15}: s2wr2 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr3 <= 0;
	      {1'd0, 4'd1}: s2wr3 <= 1;
	      {1'd0, 4'd2}: s2wr3 <= 2;
	      {1'd0, 4'd3}: s2wr3 <= 3;
	      {1'd0, 4'd4}: s2wr3 <= 4;
	      {1'd0, 4'd5}: s2wr3 <= 5;
	      {1'd0, 4'd6}: s2wr3 <= 6;
	      {1'd0, 4'd7}: s2wr3 <= 7;
	      {1'd0, 4'd8}: s2wr3 <= 8;
	      {1'd0, 4'd9}: s2wr3 <= 9;
	      {1'd0, 4'd10}: s2wr3 <= 10;
	      {1'd0, 4'd11}: s2wr3 <= 11;
	      {1'd0, 4'd12}: s2wr3 <= 12;
	      {1'd0, 4'd13}: s2wr3 <= 13;
	      {1'd0, 4'd14}: s2wr3 <= 14;
	      {1'd0, 4'd15}: s2wr3 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr4 <= 12;
	      {1'd0, 4'd1}: s2wr4 <= 13;
	      {1'd0, 4'd2}: s2wr4 <= 14;
	      {1'd0, 4'd3}: s2wr4 <= 15;
	      {1'd0, 4'd4}: s2wr4 <= 8;
	      {1'd0, 4'd5}: s2wr4 <= 9;
	      {1'd0, 4'd6}: s2wr4 <= 10;
	      {1'd0, 4'd7}: s2wr4 <= 11;
	      {1'd0, 4'd8}: s2wr4 <= 4;
	      {1'd0, 4'd9}: s2wr4 <= 5;
	      {1'd0, 4'd10}: s2wr4 <= 6;
	      {1'd0, 4'd11}: s2wr4 <= 7;
	      {1'd0, 4'd12}: s2wr4 <= 0;
	      {1'd0, 4'd13}: s2wr4 <= 1;
	      {1'd0, 4'd14}: s2wr4 <= 2;
	      {1'd0, 4'd15}: s2wr4 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr5 <= 8;
	      {1'd0, 4'd1}: s2wr5 <= 9;
	      {1'd0, 4'd2}: s2wr5 <= 10;
	      {1'd0, 4'd3}: s2wr5 <= 11;
	      {1'd0, 4'd4}: s2wr5 <= 12;
	      {1'd0, 4'd5}: s2wr5 <= 13;
	      {1'd0, 4'd6}: s2wr5 <= 14;
	      {1'd0, 4'd7}: s2wr5 <= 15;
	      {1'd0, 4'd8}: s2wr5 <= 0;
	      {1'd0, 4'd9}: s2wr5 <= 1;
	      {1'd0, 4'd10}: s2wr5 <= 2;
	      {1'd0, 4'd11}: s2wr5 <= 3;
	      {1'd0, 4'd12}: s2wr5 <= 4;
	      {1'd0, 4'd13}: s2wr5 <= 5;
	      {1'd0, 4'd14}: s2wr5 <= 6;
	      {1'd0, 4'd15}: s2wr5 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr6 <= 4;
	      {1'd0, 4'd1}: s2wr6 <= 5;
	      {1'd0, 4'd2}: s2wr6 <= 6;
	      {1'd0, 4'd3}: s2wr6 <= 7;
	      {1'd0, 4'd4}: s2wr6 <= 0;
	      {1'd0, 4'd5}: s2wr6 <= 1;
	      {1'd0, 4'd6}: s2wr6 <= 2;
	      {1'd0, 4'd7}: s2wr6 <= 3;
	      {1'd0, 4'd8}: s2wr6 <= 12;
	      {1'd0, 4'd9}: s2wr6 <= 13;
	      {1'd0, 4'd10}: s2wr6 <= 14;
	      {1'd0, 4'd11}: s2wr6 <= 15;
	      {1'd0, 4'd12}: s2wr6 <= 8;
	      {1'd0, 4'd13}: s2wr6 <= 9;
	      {1'd0, 4'd14}: s2wr6 <= 10;
	      {1'd0, 4'd15}: s2wr6 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr7 <= 0;
	      {1'd0, 4'd1}: s2wr7 <= 1;
	      {1'd0, 4'd2}: s2wr7 <= 2;
	      {1'd0, 4'd3}: s2wr7 <= 3;
	      {1'd0, 4'd4}: s2wr7 <= 4;
	      {1'd0, 4'd5}: s2wr7 <= 5;
	      {1'd0, 4'd6}: s2wr7 <= 6;
	      {1'd0, 4'd7}: s2wr7 <= 7;
	      {1'd0, 4'd8}: s2wr7 <= 8;
	      {1'd0, 4'd9}: s2wr7 <= 9;
	      {1'd0, 4'd10}: s2wr7 <= 10;
	      {1'd0, 4'd11}: s2wr7 <= 11;
	      {1'd0, 4'd12}: s2wr7 <= 12;
	      {1'd0, 4'd13}: s2wr7 <= 13;
	      {1'd0, 4'd14}: s2wr7 <= 14;
	      {1'd0, 4'd15}: s2wr7 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr8 <= 12;
	      {1'd0, 4'd1}: s2wr8 <= 13;
	      {1'd0, 4'd2}: s2wr8 <= 14;
	      {1'd0, 4'd3}: s2wr8 <= 15;
	      {1'd0, 4'd4}: s2wr8 <= 8;
	      {1'd0, 4'd5}: s2wr8 <= 9;
	      {1'd0, 4'd6}: s2wr8 <= 10;
	      {1'd0, 4'd7}: s2wr8 <= 11;
	      {1'd0, 4'd8}: s2wr8 <= 4;
	      {1'd0, 4'd9}: s2wr8 <= 5;
	      {1'd0, 4'd10}: s2wr8 <= 6;
	      {1'd0, 4'd11}: s2wr8 <= 7;
	      {1'd0, 4'd12}: s2wr8 <= 0;
	      {1'd0, 4'd13}: s2wr8 <= 1;
	      {1'd0, 4'd14}: s2wr8 <= 2;
	      {1'd0, 4'd15}: s2wr8 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr8 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr9 <= 8;
	      {1'd0, 4'd1}: s2wr9 <= 9;
	      {1'd0, 4'd2}: s2wr9 <= 10;
	      {1'd0, 4'd3}: s2wr9 <= 11;
	      {1'd0, 4'd4}: s2wr9 <= 12;
	      {1'd0, 4'd5}: s2wr9 <= 13;
	      {1'd0, 4'd6}: s2wr9 <= 14;
	      {1'd0, 4'd7}: s2wr9 <= 15;
	      {1'd0, 4'd8}: s2wr9 <= 0;
	      {1'd0, 4'd9}: s2wr9 <= 1;
	      {1'd0, 4'd10}: s2wr9 <= 2;
	      {1'd0, 4'd11}: s2wr9 <= 3;
	      {1'd0, 4'd12}: s2wr9 <= 4;
	      {1'd0, 4'd13}: s2wr9 <= 5;
	      {1'd0, 4'd14}: s2wr9 <= 6;
	      {1'd0, 4'd15}: s2wr9 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr9 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr10 <= 4;
	      {1'd0, 4'd1}: s2wr10 <= 5;
	      {1'd0, 4'd2}: s2wr10 <= 6;
	      {1'd0, 4'd3}: s2wr10 <= 7;
	      {1'd0, 4'd4}: s2wr10 <= 0;
	      {1'd0, 4'd5}: s2wr10 <= 1;
	      {1'd0, 4'd6}: s2wr10 <= 2;
	      {1'd0, 4'd7}: s2wr10 <= 3;
	      {1'd0, 4'd8}: s2wr10 <= 12;
	      {1'd0, 4'd9}: s2wr10 <= 13;
	      {1'd0, 4'd10}: s2wr10 <= 14;
	      {1'd0, 4'd11}: s2wr10 <= 15;
	      {1'd0, 4'd12}: s2wr10 <= 8;
	      {1'd0, 4'd13}: s2wr10 <= 9;
	      {1'd0, 4'd14}: s2wr10 <= 10;
	      {1'd0, 4'd15}: s2wr10 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr10 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr11 <= 0;
	      {1'd0, 4'd1}: s2wr11 <= 1;
	      {1'd0, 4'd2}: s2wr11 <= 2;
	      {1'd0, 4'd3}: s2wr11 <= 3;
	      {1'd0, 4'd4}: s2wr11 <= 4;
	      {1'd0, 4'd5}: s2wr11 <= 5;
	      {1'd0, 4'd6}: s2wr11 <= 6;
	      {1'd0, 4'd7}: s2wr11 <= 7;
	      {1'd0, 4'd8}: s2wr11 <= 8;
	      {1'd0, 4'd9}: s2wr11 <= 9;
	      {1'd0, 4'd10}: s2wr11 <= 10;
	      {1'd0, 4'd11}: s2wr11 <= 11;
	      {1'd0, 4'd12}: s2wr11 <= 12;
	      {1'd0, 4'd13}: s2wr11 <= 13;
	      {1'd0, 4'd14}: s2wr11 <= 14;
	      {1'd0, 4'd15}: s2wr11 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr11 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr12 <= 12;
	      {1'd0, 4'd1}: s2wr12 <= 13;
	      {1'd0, 4'd2}: s2wr12 <= 14;
	      {1'd0, 4'd3}: s2wr12 <= 15;
	      {1'd0, 4'd4}: s2wr12 <= 8;
	      {1'd0, 4'd5}: s2wr12 <= 9;
	      {1'd0, 4'd6}: s2wr12 <= 10;
	      {1'd0, 4'd7}: s2wr12 <= 11;
	      {1'd0, 4'd8}: s2wr12 <= 4;
	      {1'd0, 4'd9}: s2wr12 <= 5;
	      {1'd0, 4'd10}: s2wr12 <= 6;
	      {1'd0, 4'd11}: s2wr12 <= 7;
	      {1'd0, 4'd12}: s2wr12 <= 0;
	      {1'd0, 4'd13}: s2wr12 <= 1;
	      {1'd0, 4'd14}: s2wr12 <= 2;
	      {1'd0, 4'd15}: s2wr12 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr12 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr13 <= 8;
	      {1'd0, 4'd1}: s2wr13 <= 9;
	      {1'd0, 4'd2}: s2wr13 <= 10;
	      {1'd0, 4'd3}: s2wr13 <= 11;
	      {1'd0, 4'd4}: s2wr13 <= 12;
	      {1'd0, 4'd5}: s2wr13 <= 13;
	      {1'd0, 4'd6}: s2wr13 <= 14;
	      {1'd0, 4'd7}: s2wr13 <= 15;
	      {1'd0, 4'd8}: s2wr13 <= 0;
	      {1'd0, 4'd9}: s2wr13 <= 1;
	      {1'd0, 4'd10}: s2wr13 <= 2;
	      {1'd0, 4'd11}: s2wr13 <= 3;
	      {1'd0, 4'd12}: s2wr13 <= 4;
	      {1'd0, 4'd13}: s2wr13 <= 5;
	      {1'd0, 4'd14}: s2wr13 <= 6;
	      {1'd0, 4'd15}: s2wr13 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr13 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr14 <= 4;
	      {1'd0, 4'd1}: s2wr14 <= 5;
	      {1'd0, 4'd2}: s2wr14 <= 6;
	      {1'd0, 4'd3}: s2wr14 <= 7;
	      {1'd0, 4'd4}: s2wr14 <= 0;
	      {1'd0, 4'd5}: s2wr14 <= 1;
	      {1'd0, 4'd6}: s2wr14 <= 2;
	      {1'd0, 4'd7}: s2wr14 <= 3;
	      {1'd0, 4'd8}: s2wr14 <= 12;
	      {1'd0, 4'd9}: s2wr14 <= 13;
	      {1'd0, 4'd10}: s2wr14 <= 14;
	      {1'd0, 4'd11}: s2wr14 <= 15;
	      {1'd0, 4'd12}: s2wr14 <= 8;
	      {1'd0, 4'd13}: s2wr14 <= 9;
	      {1'd0, 4'd14}: s2wr14 <= 10;
	      {1'd0, 4'd15}: s2wr14 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr14 is "block"
   always @(posedge clk) begin
      case({tm58_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr15 <= 0;
	      {1'd0, 4'd1}: s2wr15 <= 1;
	      {1'd0, 4'd2}: s2wr15 <= 2;
	      {1'd0, 4'd3}: s2wr15 <= 3;
	      {1'd0, 4'd4}: s2wr15 <= 4;
	      {1'd0, 4'd5}: s2wr15 <= 5;
	      {1'd0, 4'd6}: s2wr15 <= 6;
	      {1'd0, 4'd7}: s2wr15 <= 7;
	      {1'd0, 4'd8}: s2wr15 <= 8;
	      {1'd0, 4'd9}: s2wr15 <= 9;
	      {1'd0, 4'd10}: s2wr15 <= 10;
	      {1'd0, 4'd11}: s2wr15 <= 11;
	      {1'd0, 4'd12}: s2wr15 <= 12;
	      {1'd0, 4'd13}: s2wr15 <= 13;
	      {1'd0, 4'd14}: s2wr15 <= 14;
	      {1'd0, 4'd15}: s2wr15 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr15 is "block"
endmodule


// Latency: 8
// Gap: 16
module DirSum_13917(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   input clk, reset, next;

   reg [3:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 15)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock12059 codeBlockIsnt24581(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15),
       .X16_in(X16), .Y16(Y16),
       .X17_in(X17), .Y17(Y17),
       .X18_in(X18), .Y18(Y18),
       .X19_in(X19), .Y19(Y19),
       .X20_in(X20), .Y20(Y20),
       .X21_in(X21), .Y21(Y21),
       .X22_in(X22), .Y22(Y22),
       .X23_in(X23), .Y23(Y23),
       .X24_in(X24), .Y24(Y24),
       .X25_in(X25), .Y25(Y25),
       .X26_in(X26), .Y26(Y26),
       .X27_in(X27), .Y27(Y27),
       .X28_in(X28), .Y28(Y28),
       .X29_in(X29), .Y29(Y29),
       .X30_in(X30), .Y30(Y30),
       .X31_in(X31), .Y31(Y31));

endmodule

module D42_13357(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3f85;
      2: out3 <= 16'h3e72;
      3: out3 <= 16'h3cc5;
      4: out3 <= 16'h3a82;
      5: out3 <= 16'h37b0;
      6: out3 <= 16'h3453;
      7: out3 <= 16'h3076;
      8: out3 <= 16'h2c21;
      9: out3 <= 16'h2760;
      10: out3 <= 16'h223d;
      11: out3 <= 16'h1cc6;
      12: out3 <= 16'h1709;
      13: out3 <= 16'h1112;
      14: out3 <= 16'haf1;
      15: out3 <= 16'h4b5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D43_13375(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3e15;
      2: out3 <= 16'h39db;
      3: out3 <= 16'h3368;
      4: out3 <= 16'h2afb;
      5: out3 <= 16'h20e7;
      6: out3 <= 16'h1590;
      7: out3 <= 16'h964;
      8: out3 <= 16'hfcdc;
      9: out3 <= 16'hf073;
      10: out3 <= 16'he4a3;
      11: out3 <= 16'hd9e0;
      12: out3 <= 16'hd094;
      13: out3 <= 16'hc91b;
      14: out3 <= 16'hc3be;
      15: out3 <= 16'hc0b1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D46_13393(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3e15;
      3: out3 <= 16'h3c42;
      4: out3 <= 16'h39db;
      5: out3 <= 16'h36e5;
      6: out3 <= 16'h3368;
      7: out3 <= 16'h2f6c;
      8: out3 <= 16'h2afb;
      9: out3 <= 16'h2620;
      10: out3 <= 16'h20e7;
      11: out3 <= 16'h1b5d;
      12: out3 <= 16'h1590;
      13: out3 <= 16'hf8d;
      14: out3 <= 16'h964;
      15: out3 <= 16'h324;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D38_13411(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D44_13447(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fd4;
      1: out3 <= 16'h3bb6;
      2: out3 <= 16'h3274;
      3: out3 <= 16'h24da;
      4: out3 <= 16'h1413;
      5: out3 <= 16'h192;
      6: out3 <= 16'heeee;
      7: out3 <= 16'hddc3;
      8: out3 <= 16'hcf8a;
      9: out3 <= 16'hc57e;
      10: out3 <= 16'hc07b;
      11: out3 <= 16'hc0f1;
      12: out3 <= 16'hc6d5;
      13: out3 <= 16'hd1a6;
      14: out3 <= 16'he074;
      15: out3 <= 16'hf1fa;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D40_13465(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3537;
      3: out3 <= 16'h289a;
      4: out3 <= 16'h187e;
      5: out3 <= 16'h646;
      6: out3 <= 16'hf384;
      7: out3 <= 16'he1d5;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hc78f;
      10: out3 <= 16'hc13b;
      11: out3 <= 16'hc04f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hce87;
      14: out3 <= 16'hdc72;
      15: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D39_13501(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      8: out3 <= 16'h0;
      9: out3 <= 16'hf384;
      10: out3 <= 16'he782;
      11: out3 <= 16'hdc72;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hcac9;
      14: out3 <= 16'hc4df;
      15: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D68_13519(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf1fa;
      1: out3 <= 16'he074;
      2: out3 <= 16'hd1a6;
      3: out3 <= 16'hc6d5;
      4: out3 <= 16'hc0f1;
      5: out3 <= 16'hc07b;
      6: out3 <= 16'hc57e;
      7: out3 <= 16'hcf8a;
      8: out3 <= 16'hddc3;
      9: out3 <= 16'heeee;
      10: out3 <= 16'h192;
      11: out3 <= 16'h1413;
      12: out3 <= 16'h24da;
      13: out3 <= 16'h3274;
      14: out3 <= 16'h3bb6;
      15: out3 <= 16'h3fd4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D67_13537(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf69c;
      1: out3 <= 16'hea70;
      2: out3 <= 16'hdf19;
      3: out3 <= 16'hd505;
      4: out3 <= 16'hcc98;
      5: out3 <= 16'hc625;
      6: out3 <= 16'hc1eb;
      7: out3 <= 16'hc014;
      8: out3 <= 16'hc0b1;
      9: out3 <= 16'hc3be;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hd094;
      12: out3 <= 16'hd9e0;
      13: out3 <= 16'he4a3;
      14: out3 <= 16'hf073;
      15: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D66_13555(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfb4b;
      1: out3 <= 16'hf50f;
      2: out3 <= 16'heeee;
      3: out3 <= 16'he8f7;
      4: out3 <= 16'he33a;
      5: out3 <= 16'hddc3;
      6: out3 <= 16'hd8a0;
      7: out3 <= 16'hd3df;
      8: out3 <= 16'hcf8a;
      9: out3 <= 16'hcbad;
      10: out3 <= 16'hc850;
      11: out3 <= 16'hc57e;
      12: out3 <= 16'hc33b;
      13: out3 <= 16'hc18e;
      14: out3 <= 16'hc07b;
      15: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D64_13591(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf69c;
      1: out3 <= 16'he4a3;
      2: out3 <= 16'hd505;
      3: out3 <= 16'hc91b;
      4: out3 <= 16'hc1eb;
      5: out3 <= 16'hc014;
      6: out3 <= 16'hc3be;
      7: out3 <= 16'hcc98;
      8: out3 <= 16'hd9e0;
      9: out3 <= 16'hea70;
      10: out3 <= 16'hfcdc;
      11: out3 <= 16'hf8d;
      12: out3 <= 16'h20e7;
      13: out3 <= 16'h2f6c;
      14: out3 <= 16'h39db;
      15: out3 <= 16'h3f4f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D63_13609(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'he1d5;
      3: out3 <= 16'hd766;
      4: out3 <= 16'hce87;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hc2c1;
      7: out3 <= 16'hc04f;
      8: out3 <= 16'hc04f;
      9: out3 <= 16'hc2c1;
      10: out3 <= 16'hc78f;
      11: out3 <= 16'hce87;
      12: out3 <= 16'hd766;
      13: out3 <= 16'he1d5;
      14: out3 <= 16'hed6c;
      15: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D62_13627(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hf073;
      3: out3 <= 16'hea70;
      4: out3 <= 16'he4a3;
      5: out3 <= 16'hdf19;
      6: out3 <= 16'hd9e0;
      7: out3 <= 16'hd505;
      8: out3 <= 16'hd094;
      9: out3 <= 16'hcc98;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hc625;
      12: out3 <= 16'hc3be;
      13: out3 <= 16'hc1eb;
      14: out3 <= 16'hc0b1;
      15: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D60_13663(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfb4b;
      1: out3 <= 16'he8f7;
      2: out3 <= 16'hd8a0;
      3: out3 <= 16'hcbad;
      4: out3 <= 16'hc33b;
      5: out3 <= 16'hc005;
      6: out3 <= 16'hc251;
      7: out3 <= 16'hc9ee;
      8: out3 <= 16'hd632;
      9: out3 <= 16'he611;
      10: out3 <= 16'hf82a;
      11: out3 <= 16'haf1;
      12: out3 <= 16'h1cc6;
      13: out3 <= 16'h2c21;
      14: out3 <= 16'h37b0;
      15: out3 <= 16'h3e72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D59_13681(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf073;
      2: out3 <= 16'he4a3;
      3: out3 <= 16'hd9e0;
      4: out3 <= 16'hd094;
      5: out3 <= 16'hc91b;
      6: out3 <= 16'hc3be;
      7: out3 <= 16'hc0b1;
      8: out3 <= 16'hc014;
      9: out3 <= 16'hc1eb;
      10: out3 <= 16'hc625;
      11: out3 <= 16'hcc98;
      12: out3 <= 16'hd505;
      13: out3 <= 16'hdf19;
      14: out3 <= 16'hea70;
      15: out3 <= 16'hf69c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D58_13699(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hf82a;
      2: out3 <= 16'hf1fa;
      3: out3 <= 16'hebed;
      4: out3 <= 16'he611;
      5: out3 <= 16'he074;
      6: out3 <= 16'hdb26;
      7: out3 <= 16'hd632;
      8: out3 <= 16'hd1a6;
      9: out3 <= 16'hcd8c;
      10: out3 <= 16'hc9ee;
      11: out3 <= 16'hc6d5;
      12: out3 <= 16'hc44a;
      13: out3 <= 16'hc251;
      14: out3 <= 16'hc0f1;
      15: out3 <= 16'hc02c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D56_13735(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'hdc72;
      3: out3 <= 16'hce87;
      4: out3 <= 16'hc4df;
      5: out3 <= 16'hc04f;
      6: out3 <= 16'hc13b;
      7: out3 <= 16'hc78f;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'he1d5;
      10: out3 <= 16'hf384;
      11: out3 <= 16'h646;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h289a;
      14: out3 <= 16'h3537;
      15: out3 <= 16'h3d3f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D55_13753(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      8: out3 <= 16'hc000;
      9: out3 <= 16'hc13b;
      10: out3 <= 16'hc4df;
      11: out3 <= 16'hcac9;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hdc72;
      14: out3 <= 16'he782;
      15: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D54_13771(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D52_13807(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3e72;
      1: out3 <= 16'h37b0;
      2: out3 <= 16'h2c21;
      3: out3 <= 16'h1cc6;
      4: out3 <= 16'haf1;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'he611;
      7: out3 <= 16'hd632;
      8: out3 <= 16'hc9ee;
      9: out3 <= 16'hc251;
      10: out3 <= 16'hc005;
      11: out3 <= 16'hc33b;
      12: out3 <= 16'hcbad;
      13: out3 <= 16'hd8a0;
      14: out3 <= 16'he8f7;
      15: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D51_13825(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3f4f;
      1: out3 <= 16'h3c42;
      2: out3 <= 16'h36e5;
      3: out3 <= 16'h2f6c;
      4: out3 <= 16'h2620;
      5: out3 <= 16'h1b5d;
      6: out3 <= 16'hf8d;
      7: out3 <= 16'h324;
      8: out3 <= 16'hf69c;
      9: out3 <= 16'hea70;
      10: out3 <= 16'hdf19;
      11: out3 <= 16'hd505;
      12: out3 <= 16'hcc98;
      13: out3 <= 16'hc625;
      14: out3 <= 16'hc1eb;
      15: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D50_13843(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fd4;
      1: out3 <= 16'h3f0f;
      2: out3 <= 16'h3daf;
      3: out3 <= 16'h3bb6;
      4: out3 <= 16'h392b;
      5: out3 <= 16'h3612;
      6: out3 <= 16'h3274;
      7: out3 <= 16'h2e5a;
      8: out3 <= 16'h29ce;
      9: out3 <= 16'h24da;
      10: out3 <= 16'h1f8c;
      11: out3 <= 16'h19ef;
      12: out3 <= 16'h1413;
      13: out3 <= 16'he06;
      14: out3 <= 16'h7d6;
      15: out3 <= 16'h192;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D48_13879(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3f4f;
      1: out3 <= 16'h39db;
      2: out3 <= 16'h2f6c;
      3: out3 <= 16'h20e7;
      4: out3 <= 16'hf8d;
      5: out3 <= 16'hfcdc;
      6: out3 <= 16'hea70;
      7: out3 <= 16'hd9e0;
      8: out3 <= 16'hcc98;
      9: out3 <= 16'hc3be;
      10: out3 <= 16'hc014;
      11: out3 <= 16'hc1eb;
      12: out3 <= 16'hc91b;
      13: out3 <= 16'hd505;
      14: out3 <= 16'he4a3;
      15: out3 <= 16'hf69c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D47_13915(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3871;
      3: out3 <= 16'h3179;
      4: out3 <= 16'h289a;
      5: out3 <= 16'h1e2b;
      6: out3 <= 16'h1294;
      7: out3 <= 16'h646;
      8: out3 <= 16'hf9ba;
      9: out3 <= 16'hed6c;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hd766;
      12: out3 <= 16'hce87;
      13: out3 <= 16'hc78f;
      14: out3 <= 16'hc2c1;
      15: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock12059(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i2_in;
   reg [3:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(7, 1) shiftFIFO_24584(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a898;
   wire signed [15:0] a803;
   wire signed [15:0] a901;
   wire signed [15:0] a807;
   wire signed [15:0] a902;
   wire signed [15:0] a903;
   wire signed [15:0] a906;
   wire signed [15:0] a907;
   wire signed [15:0] a910;
   wire signed [15:0] a911;
   wire signed [15:0] a914;
   wire signed [15:0] a827;
   wire signed [15:0] a917;
   wire signed [15:0] a831;
   wire signed [15:0] a918;
   wire signed [15:0] a919;
   wire signed [15:0] a922;
   wire signed [15:0] a923;
   wire signed [15:0] a926;
   wire signed [15:0] a927;
   wire signed [15:0] a930;
   wire signed [15:0] a851;
   wire signed [15:0] a933;
   wire signed [15:0] a855;
   wire signed [15:0] a934;
   wire signed [15:0] a935;
   wire signed [15:0] a938;
   wire signed [15:0] a939;
   wire signed [15:0] a942;
   wire signed [15:0] a943;
   wire signed [15:0] a946;
   wire signed [15:0] a875;
   wire signed [15:0] a949;
   wire signed [15:0] a879;
   wire signed [15:0] a950;
   wire signed [15:0] a951;
   wire signed [15:0] a954;
   wire signed [15:0] a955;
   wire signed [15:0] a958;
   wire signed [15:0] a959;
   reg signed [15:0] tm1125;
   reg signed [15:0] tm1129;
   reg signed [15:0] tm1141;
   reg signed [15:0] tm1145;
   reg signed [15:0] tm1157;
   reg signed [15:0] tm1161;
   reg signed [15:0] tm1173;
   reg signed [15:0] tm1177;
   reg signed [15:0] tm1189;
   reg signed [15:0] tm1193;
   reg signed [15:0] tm1205;
   reg signed [15:0] tm1209;
   reg signed [15:0] tm1221;
   reg signed [15:0] tm1225;
   reg signed [15:0] tm1237;
   reg signed [15:0] tm1241;
   reg signed [15:0] tm1253;
   reg signed [15:0] tm1257;
   reg signed [15:0] tm1269;
   reg signed [15:0] tm1273;
   reg signed [15:0] tm1285;
   reg signed [15:0] tm1289;
   reg signed [15:0] tm1301;
   reg signed [15:0] tm1305;
   reg signed [15:0] tm1317;
   reg signed [15:0] tm1324;
   reg signed [15:0] tm1331;
   reg signed [15:0] tm1338;
   reg signed [15:0] tm1345;
   reg signed [15:0] tm1352;
   reg signed [15:0] tm1359;
   reg signed [15:0] tm1366;
   reg signed [15:0] tm1126;
   reg signed [15:0] tm1130;
   reg signed [15:0] tm1142;
   reg signed [15:0] tm1146;
   reg signed [15:0] tm1158;
   reg signed [15:0] tm1162;
   reg signed [15:0] tm1174;
   reg signed [15:0] tm1178;
   reg signed [15:0] tm1190;
   reg signed [15:0] tm1194;
   reg signed [15:0] tm1206;
   reg signed [15:0] tm1210;
   reg signed [15:0] tm1222;
   reg signed [15:0] tm1226;
   reg signed [15:0] tm1238;
   reg signed [15:0] tm1242;
   reg signed [15:0] tm1254;
   reg signed [15:0] tm1258;
   reg signed [15:0] tm1270;
   reg signed [15:0] tm1274;
   reg signed [15:0] tm1286;
   reg signed [15:0] tm1290;
   reg signed [15:0] tm1302;
   reg signed [15:0] tm1306;
   reg signed [15:0] tm1318;
   reg signed [15:0] tm1325;
   reg signed [15:0] tm1332;
   reg signed [15:0] tm1339;
   reg signed [15:0] tm1346;
   reg signed [15:0] tm1353;
   reg signed [15:0] tm1360;
   reg signed [15:0] tm1367;
   wire signed [15:0] tm61;
   wire signed [15:0] a808;
   wire signed [15:0] tm62;
   wire signed [15:0] a810;
   wire signed [15:0] tm63;
   wire signed [15:0] a814;
   wire signed [15:0] tm64;
   wire signed [15:0] a816;
   wire signed [15:0] tm65;
   wire signed [15:0] a820;
   wire signed [15:0] tm66;
   wire signed [15:0] a822;
   wire signed [15:0] tm69;
   wire signed [15:0] a832;
   wire signed [15:0] tm70;
   wire signed [15:0] a834;
   wire signed [15:0] tm71;
   wire signed [15:0] a838;
   wire signed [15:0] tm72;
   wire signed [15:0] a840;
   wire signed [15:0] tm73;
   wire signed [15:0] a844;
   wire signed [15:0] tm74;
   wire signed [15:0] a846;
   wire signed [15:0] tm77;
   wire signed [15:0] a856;
   wire signed [15:0] tm78;
   wire signed [15:0] a858;
   wire signed [15:0] tm79;
   wire signed [15:0] a862;
   wire signed [15:0] tm80;
   wire signed [15:0] a864;
   wire signed [15:0] tm81;
   wire signed [15:0] a868;
   wire signed [15:0] tm82;
   wire signed [15:0] a870;
   wire signed [15:0] tm85;
   wire signed [15:0] a880;
   wire signed [15:0] tm86;
   wire signed [15:0] a882;
   wire signed [15:0] tm87;
   wire signed [15:0] a886;
   wire signed [15:0] tm88;
   wire signed [15:0] a888;
   wire signed [15:0] tm89;
   wire signed [15:0] a892;
   wire signed [15:0] tm90;
   wire signed [15:0] a894;
   reg signed [15:0] tm1127;
   reg signed [15:0] tm1131;
   reg signed [15:0] tm1143;
   reg signed [15:0] tm1147;
   reg signed [15:0] tm1159;
   reg signed [15:0] tm1163;
   reg signed [15:0] tm1175;
   reg signed [15:0] tm1179;
   reg signed [15:0] tm1191;
   reg signed [15:0] tm1195;
   reg signed [15:0] tm1207;
   reg signed [15:0] tm1211;
   reg signed [15:0] tm1223;
   reg signed [15:0] tm1227;
   reg signed [15:0] tm1239;
   reg signed [15:0] tm1243;
   reg signed [15:0] tm1255;
   reg signed [15:0] tm1259;
   reg signed [15:0] tm1271;
   reg signed [15:0] tm1275;
   reg signed [15:0] tm1287;
   reg signed [15:0] tm1291;
   reg signed [15:0] tm1303;
   reg signed [15:0] tm1307;
   reg signed [15:0] tm1319;
   reg signed [15:0] tm1326;
   reg signed [15:0] tm1333;
   reg signed [15:0] tm1340;
   reg signed [15:0] tm1347;
   reg signed [15:0] tm1354;
   reg signed [15:0] tm1361;
   reg signed [15:0] tm1368;
   reg signed [15:0] tm193;
   reg signed [15:0] tm194;
   reg signed [15:0] tm197;
   reg signed [15:0] tm198;
   reg signed [15:0] tm201;
   reg signed [15:0] tm202;
   reg signed [15:0] tm209;
   reg signed [15:0] tm210;
   reg signed [15:0] tm213;
   reg signed [15:0] tm214;
   reg signed [15:0] tm217;
   reg signed [15:0] tm218;
   reg signed [15:0] tm225;
   reg signed [15:0] tm226;
   reg signed [15:0] tm229;
   reg signed [15:0] tm230;
   reg signed [15:0] tm233;
   reg signed [15:0] tm234;
   reg signed [15:0] tm241;
   reg signed [15:0] tm242;
   reg signed [15:0] tm245;
   reg signed [15:0] tm246;
   reg signed [15:0] tm249;
   reg signed [15:0] tm250;
   reg signed [15:0] tm1128;
   reg signed [15:0] tm1132;
   reg signed [15:0] tm1144;
   reg signed [15:0] tm1148;
   reg signed [15:0] tm1160;
   reg signed [15:0] tm1164;
   reg signed [15:0] tm1176;
   reg signed [15:0] tm1180;
   reg signed [15:0] tm1192;
   reg signed [15:0] tm1196;
   reg signed [15:0] tm1208;
   reg signed [15:0] tm1212;
   reg signed [15:0] tm1224;
   reg signed [15:0] tm1228;
   reg signed [15:0] tm1240;
   reg signed [15:0] tm1244;
   reg signed [15:0] tm1256;
   reg signed [15:0] tm1260;
   reg signed [15:0] tm1272;
   reg signed [15:0] tm1276;
   reg signed [15:0] tm1288;
   reg signed [15:0] tm1292;
   reg signed [15:0] tm1304;
   reg signed [15:0] tm1308;
   reg signed [15:0] tm1320;
   reg signed [15:0] tm1327;
   reg signed [15:0] tm1334;
   reg signed [15:0] tm1341;
   reg signed [15:0] tm1348;
   reg signed [15:0] tm1355;
   reg signed [15:0] tm1362;
   reg signed [15:0] tm1369;
   reg signed [15:0] tm1321;
   reg signed [15:0] tm1328;
   reg signed [15:0] tm1335;
   reg signed [15:0] tm1342;
   reg signed [15:0] tm1349;
   reg signed [15:0] tm1356;
   reg signed [15:0] tm1363;
   reg signed [15:0] tm1370;
   wire signed [15:0] a809;
   wire signed [15:0] a811;
   wire signed [15:0] a812;
   wire signed [15:0] a813;
   wire signed [15:0] a815;
   wire signed [15:0] a817;
   wire signed [15:0] a818;
   wire signed [15:0] a819;
   wire signed [15:0] a821;
   wire signed [15:0] a823;
   wire signed [15:0] a824;
   wire signed [15:0] a825;
   wire signed [15:0] a833;
   wire signed [15:0] a835;
   wire signed [15:0] a836;
   wire signed [15:0] a837;
   wire signed [15:0] a839;
   wire signed [15:0] a841;
   wire signed [15:0] a842;
   wire signed [15:0] a843;
   wire signed [15:0] a845;
   wire signed [15:0] a847;
   wire signed [15:0] a848;
   wire signed [15:0] a849;
   wire signed [15:0] a857;
   wire signed [15:0] a859;
   wire signed [15:0] a860;
   wire signed [15:0] a861;
   wire signed [15:0] a863;
   wire signed [15:0] a865;
   wire signed [15:0] a866;
   wire signed [15:0] a867;
   wire signed [15:0] a869;
   wire signed [15:0] a871;
   wire signed [15:0] a872;
   wire signed [15:0] a873;
   wire signed [15:0] a881;
   wire signed [15:0] a883;
   wire signed [15:0] a884;
   wire signed [15:0] a885;
   wire signed [15:0] a887;
   wire signed [15:0] a889;
   wire signed [15:0] a890;
   wire signed [15:0] a891;
   wire signed [15:0] a893;
   wire signed [15:0] a895;
   wire signed [15:0] a896;
   wire signed [15:0] a897;
   reg signed [15:0] tm1322;
   reg signed [15:0] tm1329;
   reg signed [15:0] tm1336;
   reg signed [15:0] tm1343;
   reg signed [15:0] tm1350;
   reg signed [15:0] tm1357;
   reg signed [15:0] tm1364;
   reg signed [15:0] tm1371;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   reg signed [15:0] tm1323;
   reg signed [15:0] tm1330;
   reg signed [15:0] tm1337;
   reg signed [15:0] tm1344;
   reg signed [15:0] tm1351;
   reg signed [15:0] tm1358;
   reg signed [15:0] tm1365;
   reg signed [15:0] tm1372;


   assign a898 = X0;
   assign a803 = a898;
   assign a901 = X1;
   assign a807 = a901;
   assign a902 = X2;
   assign a903 = X3;
   assign a906 = X4;
   assign a907 = X5;
   assign a910 = X6;
   assign a911 = X7;
   assign a914 = X8;
   assign a827 = a914;
   assign a917 = X9;
   assign a831 = a917;
   assign a918 = X10;
   assign a919 = X11;
   assign a922 = X12;
   assign a923 = X13;
   assign a926 = X14;
   assign a927 = X15;
   assign a930 = X16;
   assign a851 = a930;
   assign a933 = X17;
   assign a855 = a933;
   assign a934 = X18;
   assign a935 = X19;
   assign a938 = X20;
   assign a939 = X21;
   assign a942 = X22;
   assign a943 = X23;
   assign a946 = X24;
   assign a875 = a946;
   assign a949 = X25;
   assign a879 = a949;
   assign a950 = X26;
   assign a951 = X27;
   assign a954 = X28;
   assign a955 = X29;
   assign a958 = X30;
   assign a959 = X31;
   assign a808 = tm61;
   assign a810 = tm62;
   assign a814 = tm63;
   assign a816 = tm64;
   assign a820 = tm65;
   assign a822 = tm66;
   assign a832 = tm69;
   assign a834 = tm70;
   assign a838 = tm71;
   assign a840 = tm72;
   assign a844 = tm73;
   assign a846 = tm74;
   assign a856 = tm77;
   assign a858 = tm78;
   assign a862 = tm79;
   assign a864 = tm80;
   assign a868 = tm81;
   assign a870 = tm82;
   assign a880 = tm85;
   assign a882 = tm86;
   assign a886 = tm87;
   assign a888 = tm88;
   assign a892 = tm89;
   assign a894 = tm90;
   assign Y0 = tm1323;
   assign Y1 = tm1330;
   assign Y8 = tm1337;
   assign Y9 = tm1344;
   assign Y16 = tm1351;
   assign Y17 = tm1358;
   assign Y24 = tm1365;
   assign Y25 = tm1372;

   D42_13357 instD42inst0_13357(.addr(i2[3:0]), .out(tm69), .clk(clk));

   D43_13375 instD43inst0_13375(.addr(i2[3:0]), .out(tm71), .clk(clk));

   D46_13393 instD46inst0_13393(.addr(i2[3:0]), .out(tm77), .clk(clk));

   D38_13411 instD38inst0_13411(.addr(i2[3:0]), .out(tm61), .clk(clk));

   D44_13447 instD44inst0_13447(.addr(i2[3:0]), .out(tm73), .clk(clk));

   D40_13465 instD40inst0_13465(.addr(i2[3:0]), .out(tm65), .clk(clk));

   D39_13501 instD39inst0_13501(.addr(i2[3:0]), .out(tm63), .clk(clk));

   D68_13519 instD68inst0_13519(.addr(i2[3:0]), .out(tm90), .clk(clk));

   D67_13537 instD67inst0_13537(.addr(i2[3:0]), .out(tm88), .clk(clk));

   D66_13555 instD66inst0_13555(.addr(i2[3:0]), .out(tm86), .clk(clk));

   D64_13591 instD64inst0_13591(.addr(i2[3:0]), .out(tm82), .clk(clk));

   D63_13609 instD63inst0_13609(.addr(i2[3:0]), .out(tm80), .clk(clk));

   D62_13627 instD62inst0_13627(.addr(i2[3:0]), .out(tm78), .clk(clk));

   D60_13663 instD60inst0_13663(.addr(i2[3:0]), .out(tm74), .clk(clk));

   D59_13681 instD59inst0_13681(.addr(i2[3:0]), .out(tm72), .clk(clk));

   D58_13699 instD58inst0_13699(.addr(i2[3:0]), .out(tm70), .clk(clk));

   D56_13735 instD56inst0_13735(.addr(i2[3:0]), .out(tm66), .clk(clk));

   D55_13753 instD55inst0_13753(.addr(i2[3:0]), .out(tm64), .clk(clk));

   D54_13771 instD54inst0_13771(.addr(i2[3:0]), .out(tm62), .clk(clk));

   D52_13807 instD52inst0_13807(.addr(i2[3:0]), .out(tm89), .clk(clk));

   D51_13825 instD51inst0_13825(.addr(i2[3:0]), .out(tm87), .clk(clk));

   D50_13843 instD50inst0_13843(.addr(i2[3:0]), .out(tm85), .clk(clk));

   D48_13879 instD48inst0_13879(.addr(i2[3:0]), .out(tm81), .clk(clk));

   D47_13915 instD47inst0_13915(.addr(i2[3:0]), .out(tm79), .clk(clk));

    multfix #(16, 2) m12158(.a(tm193), .b(tm1128), .clk(clk), .q_sc(a809), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12180(.a(tm194), .b(tm1132), .clk(clk), .q_sc(a811), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12198(.a(tm194), .b(tm1128), .clk(clk), .q_sc(a812), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12209(.a(tm193), .b(tm1132), .clk(clk), .q_sc(a813), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12238(.a(tm197), .b(tm1144), .clk(clk), .q_sc(a815), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12260(.a(tm198), .b(tm1148), .clk(clk), .q_sc(a817), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12278(.a(tm198), .b(tm1144), .clk(clk), .q_sc(a818), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12289(.a(tm197), .b(tm1148), .clk(clk), .q_sc(a819), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12318(.a(tm201), .b(tm1160), .clk(clk), .q_sc(a821), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12340(.a(tm202), .b(tm1164), .clk(clk), .q_sc(a823), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12358(.a(tm202), .b(tm1160), .clk(clk), .q_sc(a824), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12369(.a(tm201), .b(tm1164), .clk(clk), .q_sc(a825), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12478(.a(tm209), .b(tm1176), .clk(clk), .q_sc(a833), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12500(.a(tm210), .b(tm1180), .clk(clk), .q_sc(a835), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12518(.a(tm210), .b(tm1176), .clk(clk), .q_sc(a836), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12529(.a(tm209), .b(tm1180), .clk(clk), .q_sc(a837), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12558(.a(tm213), .b(tm1192), .clk(clk), .q_sc(a839), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12580(.a(tm214), .b(tm1196), .clk(clk), .q_sc(a841), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12598(.a(tm214), .b(tm1192), .clk(clk), .q_sc(a842), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12609(.a(tm213), .b(tm1196), .clk(clk), .q_sc(a843), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12638(.a(tm217), .b(tm1208), .clk(clk), .q_sc(a845), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12660(.a(tm218), .b(tm1212), .clk(clk), .q_sc(a847), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12678(.a(tm218), .b(tm1208), .clk(clk), .q_sc(a848), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12689(.a(tm217), .b(tm1212), .clk(clk), .q_sc(a849), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12798(.a(tm225), .b(tm1224), .clk(clk), .q_sc(a857), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12820(.a(tm226), .b(tm1228), .clk(clk), .q_sc(a859), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12838(.a(tm226), .b(tm1224), .clk(clk), .q_sc(a860), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12849(.a(tm225), .b(tm1228), .clk(clk), .q_sc(a861), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12878(.a(tm229), .b(tm1240), .clk(clk), .q_sc(a863), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12900(.a(tm230), .b(tm1244), .clk(clk), .q_sc(a865), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12918(.a(tm230), .b(tm1240), .clk(clk), .q_sc(a866), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12929(.a(tm229), .b(tm1244), .clk(clk), .q_sc(a867), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12958(.a(tm233), .b(tm1256), .clk(clk), .q_sc(a869), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12980(.a(tm234), .b(tm1260), .clk(clk), .q_sc(a871), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12998(.a(tm234), .b(tm1256), .clk(clk), .q_sc(a872), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13009(.a(tm233), .b(tm1260), .clk(clk), .q_sc(a873), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13118(.a(tm241), .b(tm1272), .clk(clk), .q_sc(a881), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13140(.a(tm242), .b(tm1276), .clk(clk), .q_sc(a883), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13158(.a(tm242), .b(tm1272), .clk(clk), .q_sc(a884), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13169(.a(tm241), .b(tm1276), .clk(clk), .q_sc(a885), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13198(.a(tm245), .b(tm1288), .clk(clk), .q_sc(a887), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13220(.a(tm246), .b(tm1292), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13238(.a(tm246), .b(tm1288), .clk(clk), .q_sc(a890), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13249(.a(tm245), .b(tm1292), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13278(.a(tm249), .b(tm1304), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13300(.a(tm250), .b(tm1308), .clk(clk), .q_sc(a895), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13318(.a(tm250), .b(tm1304), .clk(clk), .q_sc(a896), .q_unsc(), .rst(reset));
    multfix #(16, 2) m13329(.a(tm249), .b(tm1308), .clk(clk), .q_sc(a897), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub12187(.a(a809), .b(a811), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add12216(.a(a812), .b(a813), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub12267(.a(a815), .b(a817), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add12296(.a(a818), .b(a819), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub12347(.a(a821), .b(a823), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add12376(.a(a824), .b(a825), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub12507(.a(a833), .b(a835), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add12536(.a(a836), .b(a837), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub12587(.a(a839), .b(a841), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add12616(.a(a842), .b(a843), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub12667(.a(a845), .b(a847), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add12696(.a(a848), .b(a849), .clk(clk), .q(Y15));    // 6
    subfxp #(16, 1) sub12827(.a(a857), .b(a859), .clk(clk), .q(Y18));    // 6
    addfxp #(16, 1) add12856(.a(a860), .b(a861), .clk(clk), .q(Y19));    // 6
    subfxp #(16, 1) sub12907(.a(a863), .b(a865), .clk(clk), .q(Y20));    // 6
    addfxp #(16, 1) add12936(.a(a866), .b(a867), .clk(clk), .q(Y21));    // 6
    subfxp #(16, 1) sub12987(.a(a869), .b(a871), .clk(clk), .q(Y22));    // 6
    addfxp #(16, 1) add13016(.a(a872), .b(a873), .clk(clk), .q(Y23));    // 6
    subfxp #(16, 1) sub13147(.a(a881), .b(a883), .clk(clk), .q(Y26));    // 6
    addfxp #(16, 1) add13176(.a(a884), .b(a885), .clk(clk), .q(Y27));    // 6
    subfxp #(16, 1) sub13227(.a(a887), .b(a889), .clk(clk), .q(Y28));    // 6
    addfxp #(16, 1) add13256(.a(a890), .b(a891), .clk(clk), .q(Y29));    // 6
    subfxp #(16, 1) sub13307(.a(a893), .b(a895), .clk(clk), .q(Y30));    // 6
    addfxp #(16, 1) add13336(.a(a896), .b(a897), .clk(clk), .q(Y31));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm193 <= 0;
         tm1128 <= 0;
         tm194 <= 0;
         tm1132 <= 0;
         tm194 <= 0;
         tm1128 <= 0;
         tm193 <= 0;
         tm1132 <= 0;
         tm197 <= 0;
         tm1144 <= 0;
         tm198 <= 0;
         tm1148 <= 0;
         tm198 <= 0;
         tm1144 <= 0;
         tm197 <= 0;
         tm1148 <= 0;
         tm201 <= 0;
         tm1160 <= 0;
         tm202 <= 0;
         tm1164 <= 0;
         tm202 <= 0;
         tm1160 <= 0;
         tm201 <= 0;
         tm1164 <= 0;
         tm209 <= 0;
         tm1176 <= 0;
         tm210 <= 0;
         tm1180 <= 0;
         tm210 <= 0;
         tm1176 <= 0;
         tm209 <= 0;
         tm1180 <= 0;
         tm213 <= 0;
         tm1192 <= 0;
         tm214 <= 0;
         tm1196 <= 0;
         tm214 <= 0;
         tm1192 <= 0;
         tm213 <= 0;
         tm1196 <= 0;
         tm217 <= 0;
         tm1208 <= 0;
         tm218 <= 0;
         tm1212 <= 0;
         tm218 <= 0;
         tm1208 <= 0;
         tm217 <= 0;
         tm1212 <= 0;
         tm225 <= 0;
         tm1224 <= 0;
         tm226 <= 0;
         tm1228 <= 0;
         tm226 <= 0;
         tm1224 <= 0;
         tm225 <= 0;
         tm1228 <= 0;
         tm229 <= 0;
         tm1240 <= 0;
         tm230 <= 0;
         tm1244 <= 0;
         tm230 <= 0;
         tm1240 <= 0;
         tm229 <= 0;
         tm1244 <= 0;
         tm233 <= 0;
         tm1256 <= 0;
         tm234 <= 0;
         tm1260 <= 0;
         tm234 <= 0;
         tm1256 <= 0;
         tm233 <= 0;
         tm1260 <= 0;
         tm241 <= 0;
         tm1272 <= 0;
         tm242 <= 0;
         tm1276 <= 0;
         tm242 <= 0;
         tm1272 <= 0;
         tm241 <= 0;
         tm1276 <= 0;
         tm245 <= 0;
         tm1288 <= 0;
         tm246 <= 0;
         tm1292 <= 0;
         tm246 <= 0;
         tm1288 <= 0;
         tm245 <= 0;
         tm1292 <= 0;
         tm249 <= 0;
         tm1304 <= 0;
         tm250 <= 0;
         tm1308 <= 0;
         tm250 <= 0;
         tm1304 <= 0;
         tm249 <= 0;
         tm1308 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm1125 <= a902;
         tm1129 <= a903;
         tm1141 <= a906;
         tm1145 <= a907;
         tm1157 <= a910;
         tm1161 <= a911;
         tm1173 <= a918;
         tm1177 <= a919;
         tm1189 <= a922;
         tm1193 <= a923;
         tm1205 <= a926;
         tm1209 <= a927;
         tm1221 <= a934;
         tm1225 <= a935;
         tm1237 <= a938;
         tm1241 <= a939;
         tm1253 <= a942;
         tm1257 <= a943;
         tm1269 <= a950;
         tm1273 <= a951;
         tm1285 <= a954;
         tm1289 <= a955;
         tm1301 <= a958;
         tm1305 <= a959;
         tm1317 <= a803;
         tm1324 <= a807;
         tm1331 <= a827;
         tm1338 <= a831;
         tm1345 <= a851;
         tm1352 <= a855;
         tm1359 <= a875;
         tm1366 <= a879;
         tm1126 <= tm1125;
         tm1130 <= tm1129;
         tm1142 <= tm1141;
         tm1146 <= tm1145;
         tm1158 <= tm1157;
         tm1162 <= tm1161;
         tm1174 <= tm1173;
         tm1178 <= tm1177;
         tm1190 <= tm1189;
         tm1194 <= tm1193;
         tm1206 <= tm1205;
         tm1210 <= tm1209;
         tm1222 <= tm1221;
         tm1226 <= tm1225;
         tm1238 <= tm1237;
         tm1242 <= tm1241;
         tm1254 <= tm1253;
         tm1258 <= tm1257;
         tm1270 <= tm1269;
         tm1274 <= tm1273;
         tm1286 <= tm1285;
         tm1290 <= tm1289;
         tm1302 <= tm1301;
         tm1306 <= tm1305;
         tm1318 <= tm1317;
         tm1325 <= tm1324;
         tm1332 <= tm1331;
         tm1339 <= tm1338;
         tm1346 <= tm1345;
         tm1353 <= tm1352;
         tm1360 <= tm1359;
         tm1367 <= tm1366;
         tm1127 <= tm1126;
         tm1131 <= tm1130;
         tm1143 <= tm1142;
         tm1147 <= tm1146;
         tm1159 <= tm1158;
         tm1163 <= tm1162;
         tm1175 <= tm1174;
         tm1179 <= tm1178;
         tm1191 <= tm1190;
         tm1195 <= tm1194;
         tm1207 <= tm1206;
         tm1211 <= tm1210;
         tm1223 <= tm1222;
         tm1227 <= tm1226;
         tm1239 <= tm1238;
         tm1243 <= tm1242;
         tm1255 <= tm1254;
         tm1259 <= tm1258;
         tm1271 <= tm1270;
         tm1275 <= tm1274;
         tm1287 <= tm1286;
         tm1291 <= tm1290;
         tm1303 <= tm1302;
         tm1307 <= tm1306;
         tm1319 <= tm1318;
         tm1326 <= tm1325;
         tm1333 <= tm1332;
         tm1340 <= tm1339;
         tm1347 <= tm1346;
         tm1354 <= tm1353;
         tm1361 <= tm1360;
         tm1368 <= tm1367;
         tm193 <= a808;
         tm194 <= a810;
         tm197 <= a814;
         tm198 <= a816;
         tm201 <= a820;
         tm202 <= a822;
         tm209 <= a832;
         tm210 <= a834;
         tm213 <= a838;
         tm214 <= a840;
         tm217 <= a844;
         tm218 <= a846;
         tm225 <= a856;
         tm226 <= a858;
         tm229 <= a862;
         tm230 <= a864;
         tm233 <= a868;
         tm234 <= a870;
         tm241 <= a880;
         tm242 <= a882;
         tm245 <= a886;
         tm246 <= a888;
         tm249 <= a892;
         tm250 <= a894;
         tm1128 <= tm1127;
         tm1132 <= tm1131;
         tm1144 <= tm1143;
         tm1148 <= tm1147;
         tm1160 <= tm1159;
         tm1164 <= tm1163;
         tm1176 <= tm1175;
         tm1180 <= tm1179;
         tm1192 <= tm1191;
         tm1196 <= tm1195;
         tm1208 <= tm1207;
         tm1212 <= tm1211;
         tm1224 <= tm1223;
         tm1228 <= tm1227;
         tm1240 <= tm1239;
         tm1244 <= tm1243;
         tm1256 <= tm1255;
         tm1260 <= tm1259;
         tm1272 <= tm1271;
         tm1276 <= tm1275;
         tm1288 <= tm1287;
         tm1292 <= tm1291;
         tm1304 <= tm1303;
         tm1308 <= tm1307;
         tm1320 <= tm1319;
         tm1327 <= tm1326;
         tm1334 <= tm1333;
         tm1341 <= tm1340;
         tm1348 <= tm1347;
         tm1355 <= tm1354;
         tm1362 <= tm1361;
         tm1369 <= tm1368;
         tm1321 <= tm1320;
         tm1328 <= tm1327;
         tm1335 <= tm1334;
         tm1342 <= tm1341;
         tm1349 <= tm1348;
         tm1356 <= tm1355;
         tm1363 <= tm1362;
         tm1370 <= tm1369;
         tm1322 <= tm1321;
         tm1329 <= tm1328;
         tm1336 <= tm1335;
         tm1343 <= tm1342;
         tm1350 <= tm1349;
         tm1357 <= tm1356;
         tm1364 <= tm1363;
         tm1371 <= tm1370;
         tm1323 <= tm1322;
         tm1330 <= tm1329;
         tm1337 <= tm1336;
         tm1344 <= tm1343;
         tm1351 <= tm1350;
         tm1358 <= tm1357;
         tm1365 <= tm1364;
         tm1372 <= tm1371;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock13920(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(2, 1) shiftFIFO_24587(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a546;
   wire signed [15:0] a547;
   wire signed [15:0] a548;
   wire signed [15:0] a549;
   wire signed [15:0] a554;
   wire signed [15:0] a555;
   wire signed [15:0] a556;
   wire signed [15:0] a557;
   wire signed [15:0] a562;
   wire signed [15:0] a563;
   wire signed [15:0] a564;
   wire signed [15:0] a565;
   wire signed [15:0] a570;
   wire signed [15:0] a571;
   wire signed [15:0] a572;
   wire signed [15:0] a573;
   wire signed [15:0] a578;
   wire signed [15:0] a579;
   wire signed [15:0] a580;
   wire signed [15:0] a581;
   wire signed [15:0] a586;
   wire signed [15:0] a587;
   wire signed [15:0] a588;
   wire signed [15:0] a589;
   wire signed [15:0] a594;
   wire signed [15:0] a595;
   wire signed [15:0] a596;
   wire signed [15:0] a597;
   wire signed [15:0] a602;
   wire signed [15:0] a603;
   wire signed [15:0] a604;
   wire signed [15:0] a605;
   wire signed [16:0] tm677;
   wire signed [16:0] tm678;
   wire signed [16:0] tm679;
   wire signed [16:0] tm680;
   wire signed [16:0] tm681;
   wire signed [16:0] tm682;
   wire signed [16:0] tm683;
   wire signed [16:0] tm684;
   wire signed [16:0] tm693;
   wire signed [16:0] tm694;
   wire signed [16:0] tm695;
   wire signed [16:0] tm696;
   wire signed [16:0] tm697;
   wire signed [16:0] tm698;
   wire signed [16:0] tm699;
   wire signed [16:0] tm700;
   wire signed [16:0] tm709;
   wire signed [16:0] tm710;
   wire signed [16:0] tm711;
   wire signed [16:0] tm712;
   wire signed [16:0] tm713;
   wire signed [16:0] tm714;
   wire signed [16:0] tm715;
   wire signed [16:0] tm716;
   wire signed [16:0] tm725;
   wire signed [16:0] tm726;
   wire signed [16:0] tm727;
   wire signed [16:0] tm728;
   wire signed [16:0] tm729;
   wire signed [16:0] tm730;
   wire signed [16:0] tm731;
   wire signed [16:0] tm732;
   wire signed [15:0] t866;
   wire signed [15:0] t867;
   wire signed [15:0] t868;
   wire signed [15:0] t869;
   wire signed [15:0] t870;
   wire signed [15:0] t871;
   wire signed [15:0] t872;
   wire signed [15:0] t873;
   wire signed [15:0] t882;
   wire signed [15:0] t883;
   wire signed [15:0] t884;
   wire signed [15:0] t885;
   wire signed [15:0] t886;
   wire signed [15:0] t887;
   wire signed [15:0] t888;
   wire signed [15:0] t889;
   wire signed [15:0] t898;
   wire signed [15:0] t899;
   wire signed [15:0] t900;
   wire signed [15:0] t901;
   wire signed [15:0] t902;
   wire signed [15:0] t903;
   wire signed [15:0] t904;
   wire signed [15:0] t905;
   wire signed [15:0] t914;
   wire signed [15:0] t915;
   wire signed [15:0] t916;
   wire signed [15:0] t917;
   wire signed [15:0] t918;
   wire signed [15:0] t919;
   wire signed [15:0] t920;
   wire signed [15:0] t921;
   wire signed [16:0] tm685;
   wire signed [16:0] tm686;
   wire signed [16:0] tm687;
   wire signed [16:0] tm688;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm689;
   wire signed [16:0] tm690;
   wire signed [16:0] tm691;
   wire signed [16:0] tm692;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm701;
   wire signed [16:0] tm702;
   wire signed [16:0] tm703;
   wire signed [16:0] tm704;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm705;
   wire signed [16:0] tm706;
   wire signed [16:0] tm707;
   wire signed [16:0] tm708;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm717;
   wire signed [16:0] tm718;
   wire signed [16:0] tm719;
   wire signed [16:0] tm720;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm721;
   wire signed [16:0] tm722;
   wire signed [16:0] tm723;
   wire signed [16:0] tm724;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm733;
   wire signed [16:0] tm734;
   wire signed [16:0] tm735;
   wire signed [16:0] tm736;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm737;
   wire signed [16:0] tm738;
   wire signed [16:0] tm739;
   wire signed [16:0] tm740;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t874;
   wire signed [15:0] t875;
   wire signed [15:0] t876;
   wire signed [15:0] t877;
   wire signed [15:0] t878;
   wire signed [15:0] t879;
   wire signed [15:0] t880;
   wire signed [15:0] t881;
   wire signed [15:0] t890;
   wire signed [15:0] t891;
   wire signed [15:0] t892;
   wire signed [15:0] t893;
   wire signed [15:0] t894;
   wire signed [15:0] t895;
   wire signed [15:0] t896;
   wire signed [15:0] t897;
   wire signed [15:0] t906;
   wire signed [15:0] t907;
   wire signed [15:0] t908;
   wire signed [15:0] t909;
   wire signed [15:0] t910;
   wire signed [15:0] t911;
   wire signed [15:0] t912;
   wire signed [15:0] t913;
   wire signed [15:0] t922;
   wire signed [15:0] t923;
   wire signed [15:0] t924;
   wire signed [15:0] t925;
   wire signed [15:0] t926;
   wire signed [15:0] t927;
   wire signed [15:0] t928;
   wire signed [15:0] t929;


   assign a546 = X0;
   assign a547 = X4;
   assign a548 = X1;
   assign a549 = X5;
   assign a554 = X2;
   assign a555 = X6;
   assign a556 = X3;
   assign a557 = X7;
   assign a562 = X8;
   assign a563 = X12;
   assign a564 = X9;
   assign a565 = X13;
   assign a570 = X10;
   assign a571 = X14;
   assign a572 = X11;
   assign a573 = X15;
   assign a578 = X16;
   assign a579 = X20;
   assign a580 = X17;
   assign a581 = X21;
   assign a586 = X18;
   assign a587 = X22;
   assign a588 = X19;
   assign a589 = X23;
   assign a594 = X24;
   assign a595 = X28;
   assign a596 = X25;
   assign a597 = X29;
   assign a602 = X26;
   assign a603 = X30;
   assign a604 = X27;
   assign a605 = X31;
   assign t866 = tm677[16:1];
   assign t867 = tm678[16:1];
   assign t868 = tm679[16:1];
   assign t869 = tm680[16:1];
   assign t870 = tm681[16:1];
   assign t871 = tm682[16:1];
   assign t872 = tm683[16:1];
   assign t873 = tm684[16:1];
   assign t882 = tm693[16:1];
   assign t883 = tm694[16:1];
   assign t884 = tm695[16:1];
   assign t885 = tm696[16:1];
   assign t886 = tm697[16:1];
   assign t887 = tm698[16:1];
   assign t888 = tm699[16:1];
   assign t889 = tm700[16:1];
   assign t898 = tm709[16:1];
   assign t899 = tm710[16:1];
   assign t900 = tm711[16:1];
   assign t901 = tm712[16:1];
   assign t902 = tm713[16:1];
   assign t903 = tm714[16:1];
   assign t904 = tm715[16:1];
   assign t905 = tm716[16:1];
   assign t914 = tm725[16:1];
   assign t915 = tm726[16:1];
   assign t916 = tm727[16:1];
   assign t917 = tm728[16:1];
   assign t918 = tm729[16:1];
   assign t919 = tm730[16:1];
   assign t920 = tm731[16:1];
   assign t921 = tm732[16:1];
   assign Y0 = t874;
   assign Y1 = t875;
   assign Y4 = t876;
   assign Y5 = t877;
   assign Y2 = t878;
   assign Y3 = t879;
   assign Y6 = t880;
   assign Y7 = t881;
   assign Y8 = t890;
   assign Y9 = t891;
   assign Y12 = t892;
   assign Y13 = t893;
   assign Y10 = t894;
   assign Y11 = t895;
   assign Y14 = t896;
   assign Y15 = t897;
   assign Y16 = t906;
   assign Y17 = t907;
   assign Y20 = t908;
   assign Y21 = t909;
   assign Y18 = t910;
   assign Y19 = t911;
   assign Y22 = t912;
   assign Y23 = t913;
   assign Y24 = t922;
   assign Y25 = t923;
   assign Y28 = t924;
   assign Y29 = t925;
   assign Y26 = t926;
   assign Y27 = t927;
   assign Y30 = t928;
   assign Y31 = t929;
   assign t874 = tm685[16:1];
   assign t875 = tm686[16:1];
   assign t876 = tm687[16:1];
   assign t877 = tm688[16:1];
   assign t878 = tm689[16:1];
   assign t879 = tm690[16:1];
   assign t880 = tm691[16:1];
   assign t881 = tm692[16:1];
   assign t890 = tm701[16:1];
   assign t891 = tm702[16:1];
   assign t892 = tm703[16:1];
   assign t893 = tm704[16:1];
   assign t894 = tm705[16:1];
   assign t895 = tm706[16:1];
   assign t896 = tm707[16:1];
   assign t897 = tm708[16:1];
   assign t906 = tm717[16:1];
   assign t907 = tm718[16:1];
   assign t908 = tm719[16:1];
   assign t909 = tm720[16:1];
   assign t910 = tm721[16:1];
   assign t911 = tm722[16:1];
   assign t912 = tm723[16:1];
   assign t913 = tm724[16:1];
   assign t922 = tm733[16:1];
   assign t923 = tm734[16:1];
   assign t924 = tm735[16:1];
   assign t925 = tm736[16:1];
   assign t926 = tm737[16:1];
   assign t927 = tm738[16:1];
   assign t928 = tm739[16:1];
   assign t929 = tm740[16:1];

    addfxp #(17, 1) add13932(.a({{1{a546[15]}}, a546}), .b({{1{a547[15]}}, a547}), .clk(clk), .q(tm677));    // 0
    addfxp #(17, 1) add13947(.a({{1{a548[15]}}, a548}), .b({{1{a549[15]}}, a549}), .clk(clk), .q(tm678));    // 0
    subfxp #(17, 1) sub13962(.a({{1{a546[15]}}, a546}), .b({{1{a547[15]}}, a547}), .clk(clk), .q(tm679));    // 0
    subfxp #(17, 1) sub13977(.a({{1{a548[15]}}, a548}), .b({{1{a549[15]}}, a549}), .clk(clk), .q(tm680));    // 0
    addfxp #(17, 1) add13992(.a({{1{a554[15]}}, a554}), .b({{1{a555[15]}}, a555}), .clk(clk), .q(tm681));    // 0
    addfxp #(17, 1) add14007(.a({{1{a556[15]}}, a556}), .b({{1{a557[15]}}, a557}), .clk(clk), .q(tm682));    // 0
    subfxp #(17, 1) sub14022(.a({{1{a554[15]}}, a554}), .b({{1{a555[15]}}, a555}), .clk(clk), .q(tm683));    // 0
    subfxp #(17, 1) sub14037(.a({{1{a556[15]}}, a556}), .b({{1{a557[15]}}, a557}), .clk(clk), .q(tm684));    // 0
    addfxp #(17, 1) add14140(.a({{1{a562[15]}}, a562}), .b({{1{a563[15]}}, a563}), .clk(clk), .q(tm693));    // 0
    addfxp #(17, 1) add14155(.a({{1{a564[15]}}, a564}), .b({{1{a565[15]}}, a565}), .clk(clk), .q(tm694));    // 0
    subfxp #(17, 1) sub14170(.a({{1{a562[15]}}, a562}), .b({{1{a563[15]}}, a563}), .clk(clk), .q(tm695));    // 0
    subfxp #(17, 1) sub14185(.a({{1{a564[15]}}, a564}), .b({{1{a565[15]}}, a565}), .clk(clk), .q(tm696));    // 0
    addfxp #(17, 1) add14200(.a({{1{a570[15]}}, a570}), .b({{1{a571[15]}}, a571}), .clk(clk), .q(tm697));    // 0
    addfxp #(17, 1) add14215(.a({{1{a572[15]}}, a572}), .b({{1{a573[15]}}, a573}), .clk(clk), .q(tm698));    // 0
    subfxp #(17, 1) sub14230(.a({{1{a570[15]}}, a570}), .b({{1{a571[15]}}, a571}), .clk(clk), .q(tm699));    // 0
    subfxp #(17, 1) sub14245(.a({{1{a572[15]}}, a572}), .b({{1{a573[15]}}, a573}), .clk(clk), .q(tm700));    // 0
    addfxp #(17, 1) add14348(.a({{1{a578[15]}}, a578}), .b({{1{a579[15]}}, a579}), .clk(clk), .q(tm709));    // 0
    addfxp #(17, 1) add14363(.a({{1{a580[15]}}, a580}), .b({{1{a581[15]}}, a581}), .clk(clk), .q(tm710));    // 0
    subfxp #(17, 1) sub14378(.a({{1{a578[15]}}, a578}), .b({{1{a579[15]}}, a579}), .clk(clk), .q(tm711));    // 0
    subfxp #(17, 1) sub14393(.a({{1{a580[15]}}, a580}), .b({{1{a581[15]}}, a581}), .clk(clk), .q(tm712));    // 0
    addfxp #(17, 1) add14408(.a({{1{a586[15]}}, a586}), .b({{1{a587[15]}}, a587}), .clk(clk), .q(tm713));    // 0
    addfxp #(17, 1) add14423(.a({{1{a588[15]}}, a588}), .b({{1{a589[15]}}, a589}), .clk(clk), .q(tm714));    // 0
    subfxp #(17, 1) sub14438(.a({{1{a586[15]}}, a586}), .b({{1{a587[15]}}, a587}), .clk(clk), .q(tm715));    // 0
    subfxp #(17, 1) sub14453(.a({{1{a588[15]}}, a588}), .b({{1{a589[15]}}, a589}), .clk(clk), .q(tm716));    // 0
    addfxp #(17, 1) add14556(.a({{1{a594[15]}}, a594}), .b({{1{a595[15]}}, a595}), .clk(clk), .q(tm725));    // 0
    addfxp #(17, 1) add14571(.a({{1{a596[15]}}, a596}), .b({{1{a597[15]}}, a597}), .clk(clk), .q(tm726));    // 0
    subfxp #(17, 1) sub14586(.a({{1{a594[15]}}, a594}), .b({{1{a595[15]}}, a595}), .clk(clk), .q(tm727));    // 0
    subfxp #(17, 1) sub14601(.a({{1{a596[15]}}, a596}), .b({{1{a597[15]}}, a597}), .clk(clk), .q(tm728));    // 0
    addfxp #(17, 1) add14616(.a({{1{a602[15]}}, a602}), .b({{1{a603[15]}}, a603}), .clk(clk), .q(tm729));    // 0
    addfxp #(17, 1) add14631(.a({{1{a604[15]}}, a604}), .b({{1{a605[15]}}, a605}), .clk(clk), .q(tm730));    // 0
    subfxp #(17, 1) sub14646(.a({{1{a602[15]}}, a602}), .b({{1{a603[15]}}, a603}), .clk(clk), .q(tm731));    // 0
    subfxp #(17, 1) sub14661(.a({{1{a604[15]}}, a604}), .b({{1{a605[15]}}, a605}), .clk(clk), .q(tm732));    // 0
    addfxp #(17, 1) add14044(.a({{1{t866[15]}}, t866}), .b({{1{t870[15]}}, t870}), .clk(clk), .q(tm685));    // 1
    addfxp #(17, 1) add14051(.a({{1{t867[15]}}, t867}), .b({{1{t871[15]}}, t871}), .clk(clk), .q(tm686));    // 1
    subfxp #(17, 1) sub14058(.a({{1{t866[15]}}, t866}), .b({{1{t870[15]}}, t870}), .clk(clk), .q(tm687));    // 1
    subfxp #(17, 1) sub14065(.a({{1{t867[15]}}, t867}), .b({{1{t871[15]}}, t871}), .clk(clk), .q(tm688));    // 1
    addfxp #(17, 1) add14088(.a({{1{t868[15]}}, t868}), .b({{1{t873[15]}}, t873}), .clk(clk), .q(tm689));    // 1
    subfxp #(17, 1) sub14095(.a({{1{t869[15]}}, t869}), .b({{1{t872[15]}}, t872}), .clk(clk), .q(tm690));    // 1
    subfxp #(17, 1) sub14102(.a({{1{t868[15]}}, t868}), .b({{1{t873[15]}}, t873}), .clk(clk), .q(tm691));    // 1
    addfxp #(17, 1) add14109(.a({{1{t869[15]}}, t869}), .b({{1{t872[15]}}, t872}), .clk(clk), .q(tm692));    // 1
    addfxp #(17, 1) add14252(.a({{1{t882[15]}}, t882}), .b({{1{t886[15]}}, t886}), .clk(clk), .q(tm701));    // 1
    addfxp #(17, 1) add14259(.a({{1{t883[15]}}, t883}), .b({{1{t887[15]}}, t887}), .clk(clk), .q(tm702));    // 1
    subfxp #(17, 1) sub14266(.a({{1{t882[15]}}, t882}), .b({{1{t886[15]}}, t886}), .clk(clk), .q(tm703));    // 1
    subfxp #(17, 1) sub14273(.a({{1{t883[15]}}, t883}), .b({{1{t887[15]}}, t887}), .clk(clk), .q(tm704));    // 1
    addfxp #(17, 1) add14296(.a({{1{t884[15]}}, t884}), .b({{1{t889[15]}}, t889}), .clk(clk), .q(tm705));    // 1
    subfxp #(17, 1) sub14303(.a({{1{t885[15]}}, t885}), .b({{1{t888[15]}}, t888}), .clk(clk), .q(tm706));    // 1
    subfxp #(17, 1) sub14310(.a({{1{t884[15]}}, t884}), .b({{1{t889[15]}}, t889}), .clk(clk), .q(tm707));    // 1
    addfxp #(17, 1) add14317(.a({{1{t885[15]}}, t885}), .b({{1{t888[15]}}, t888}), .clk(clk), .q(tm708));    // 1
    addfxp #(17, 1) add14460(.a({{1{t898[15]}}, t898}), .b({{1{t902[15]}}, t902}), .clk(clk), .q(tm717));    // 1
    addfxp #(17, 1) add14467(.a({{1{t899[15]}}, t899}), .b({{1{t903[15]}}, t903}), .clk(clk), .q(tm718));    // 1
    subfxp #(17, 1) sub14474(.a({{1{t898[15]}}, t898}), .b({{1{t902[15]}}, t902}), .clk(clk), .q(tm719));    // 1
    subfxp #(17, 1) sub14481(.a({{1{t899[15]}}, t899}), .b({{1{t903[15]}}, t903}), .clk(clk), .q(tm720));    // 1
    addfxp #(17, 1) add14504(.a({{1{t900[15]}}, t900}), .b({{1{t905[15]}}, t905}), .clk(clk), .q(tm721));    // 1
    subfxp #(17, 1) sub14511(.a({{1{t901[15]}}, t901}), .b({{1{t904[15]}}, t904}), .clk(clk), .q(tm722));    // 1
    subfxp #(17, 1) sub14518(.a({{1{t900[15]}}, t900}), .b({{1{t905[15]}}, t905}), .clk(clk), .q(tm723));    // 1
    addfxp #(17, 1) add14525(.a({{1{t901[15]}}, t901}), .b({{1{t904[15]}}, t904}), .clk(clk), .q(tm724));    // 1
    addfxp #(17, 1) add14668(.a({{1{t914[15]}}, t914}), .b({{1{t918[15]}}, t918}), .clk(clk), .q(tm733));    // 1
    addfxp #(17, 1) add14675(.a({{1{t915[15]}}, t915}), .b({{1{t919[15]}}, t919}), .clk(clk), .q(tm734));    // 1
    subfxp #(17, 1) sub14682(.a({{1{t914[15]}}, t914}), .b({{1{t918[15]}}, t918}), .clk(clk), .q(tm735));    // 1
    subfxp #(17, 1) sub14689(.a({{1{t915[15]}}, t915}), .b({{1{t919[15]}}, t919}), .clk(clk), .q(tm736));    // 1
    addfxp #(17, 1) add14712(.a({{1{t916[15]}}, t916}), .b({{1{t921[15]}}, t921}), .clk(clk), .q(tm737));    // 1
    subfxp #(17, 1) sub14719(.a({{1{t917[15]}}, t917}), .b({{1{t920[15]}}, t920}), .clk(clk), .q(tm738));    // 1
    subfxp #(17, 1) sub14726(.a({{1{t916[15]}}, t916}), .b({{1{t921[15]}}, t921}), .clk(clk), .q(tm739));    // 1
    addfxp #(17, 1) add14733(.a({{1{t917[15]}}, t917}), .b({{1{t920[15]}}, t920}), .clk(clk), .q(tm740));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 135
// Gap: 64
module rc14758(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   wire [31:0] t8;
   wire [31:0] s8;
   assign t8 = {X16, X17};
   wire [31:0] t9;
   wire [31:0] s9;
   assign t9 = {X18, X19};
   wire [31:0] t10;
   wire [31:0] s10;
   assign t10 = {X20, X21};
   wire [31:0] t11;
   wire [31:0] s11;
   assign t11 = {X22, X23};
   wire [31:0] t12;
   wire [31:0] s12;
   assign t12 = {X24, X25};
   wire [31:0] t13;
   wire [31:0] s13;
   assign t13 = {X26, X27};
   wire [31:0] t14;
   wire [31:0] s14;
   assign t14 = {X28, X29};
   wire [31:0] t15;
   wire [31:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];
   assign Y16 = s8[31:16];
   assign Y17 = s8[15:0];
   assign Y18 = s9[31:16];
   assign Y19 = s9[15:0];
   assign Y20 = s10[31:16];
   assign Y21 = s10[15:0];
   assign Y22 = s11[31:16];
   assign Y23 = s11[15:0];
   assign Y24 = s12[31:16];
   assign Y25 = s12[15:0];
   assign Y26 = s13[31:16];
   assign Y27 = s13[15:0];
   assign Y28 = s14[31:16];
   assign Y29 = s14[15:0];
   assign Y30 = s15[31:16];
   assign Y31 = s15[15:0];

   perm14756 instPerm24588(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet14756(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
,       x8, y8
,       x9, y9
,       x10, y10
,       x11, y11
,       x12, y12
,       x13, y13
,       x14, y14
,       x15, y15
);

    parameter width = 32;

    input [5:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    input [width-1:0] x8;
    output reg [width-1:0] y8;
    input [width-1:0] x9;
    output reg [width-1:0] y9;
    input [width-1:0] x10;
    output reg [width-1:0] y10;
    input [width-1:0] x11;
    output reg [width-1:0] y11;
    input [width-1:0] x12;
    output reg [width-1:0] y12;
    input [width-1:0] x13;
    output reg [width-1:0] y13;
    input [width-1:0] x14;
    output reg [width-1:0] y14;
    input [width-1:0] x15;
    output reg [width-1:0] y15;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7, t0_8, t0_9, t0_10, t0_11, t0_12, t0_13, t0_14, t0_15;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7, t1_8, t1_9, t1_10, t1_11, t1_12, t1_13, t1_14, t1_15;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10, t6_11, t6_12, t6_13, t6_14, t6_15;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15;
    wire [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14, t9_15;
    wire [width-1:0] t10_0, t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14, t10_15;
    reg [width-1:0] t11_0, t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14, t11_15;
    wire [width-1:0] t12_0, t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9, t12_10, t12_11, t12_12, t12_13, t12_14, t12_15;
    reg [width-1:0] t13_0, t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13, t13_14, t13_15;

    reg [15:0] control;

    always @(posedge clk) begin
      case(ct)
        6'd0: control <= 16'b1111111111111111;
        6'd1: control <= 16'b1111111111111111;
        6'd2: control <= 16'b1111111111111111;
        6'd3: control <= 16'b1111111111111111;
        6'd4: control <= 16'b1111111111111111;
        6'd5: control <= 16'b1111111111111111;
        6'd6: control <= 16'b1111111111111111;
        6'd7: control <= 16'b1111111111111111;
        6'd8: control <= 16'b1111111111111111;
        6'd9: control <= 16'b1111111111111111;
        6'd10: control <= 16'b1111111111111111;
        6'd11: control <= 16'b1111111111111111;
        6'd12: control <= 16'b1111111111111111;
        6'd13: control <= 16'b1111111111111111;
        6'd14: control <= 16'b1111111111111111;
        6'd15: control <= 16'b1111111111111111;
        6'd16: control <= 16'b0000000011111111;
        6'd17: control <= 16'b0000000011111111;
        6'd18: control <= 16'b0000000011111111;
        6'd19: control <= 16'b0000000011111111;
        6'd20: control <= 16'b0000000011111111;
        6'd21: control <= 16'b0000000011111111;
        6'd22: control <= 16'b0000000011111111;
        6'd23: control <= 16'b0000000011111111;
        6'd24: control <= 16'b0000000011111111;
        6'd25: control <= 16'b0000000011111111;
        6'd26: control <= 16'b0000000011111111;
        6'd27: control <= 16'b0000000011111111;
        6'd28: control <= 16'b0000000011111111;
        6'd29: control <= 16'b0000000011111111;
        6'd30: control <= 16'b0000000011111111;
        6'd31: control <= 16'b0000000011111111;
        6'd32: control <= 16'b1111111100000000;
        6'd33: control <= 16'b1111111100000000;
        6'd34: control <= 16'b1111111100000000;
        6'd35: control <= 16'b1111111100000000;
        6'd36: control <= 16'b1111111100000000;
        6'd37: control <= 16'b1111111100000000;
        6'd38: control <= 16'b1111111100000000;
        6'd39: control <= 16'b1111111100000000;
        6'd40: control <= 16'b1111111100000000;
        6'd41: control <= 16'b1111111100000000;
        6'd42: control <= 16'b1111111100000000;
        6'd43: control <= 16'b1111111100000000;
        6'd44: control <= 16'b1111111100000000;
        6'd45: control <= 16'b1111111100000000;
        6'd46: control <= 16'b1111111100000000;
        6'd47: control <= 16'b1111111100000000;
        6'd48: control <= 16'b0000000000000000;
        6'd49: control <= 16'b0000000000000000;
        6'd50: control <= 16'b0000000000000000;
        6'd51: control <= 16'b0000000000000000;
        6'd52: control <= 16'b0000000000000000;
        6'd53: control <= 16'b0000000000000000;
        6'd54: control <= 16'b0000000000000000;
        6'd55: control <= 16'b0000000000000000;
        6'd56: control <= 16'b0000000000000000;
        6'd57: control <= 16'b0000000000000000;
        6'd58: control <= 16'b0000000000000000;
        6'd59: control <= 16'b0000000000000000;
        6'd60: control <= 16'b0000000000000000;
        6'd61: control <= 16'b0000000000000000;
        6'd62: control <= 16'b0000000000000000;
        6'd63: control <= 16'b0000000000000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [15:0] control0;
   reg [15:0] control1;
   reg [15:0] control2;
   reg [15:0] control3;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
        control3 <= control2;
    end
    assign t0_0 = x0;
    assign t0_1 = x8;
    assign t0_2 = x1;
    assign t0_3 = x9;
    assign t0_4 = x2;
    assign t0_5 = x10;
    assign t0_6 = x3;
    assign t0_7 = x11;
    assign t0_8 = x4;
    assign t0_9 = x12;
    assign t0_10 = x5;
    assign t0_11 = x13;
    assign t0_12 = x6;
    assign t0_13 = x14;
    assign t0_14 = x7;
    assign t0_15 = x15;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
     assign t1_8 = t0_8;
     assign t1_9 = t0_9;
     assign t1_10 = t0_10;
     assign t1_11 = t0_11;
     assign t1_12 = t0_12;
     assign t1_13 = t0_13;
     assign t1_14 = t0_14;
     assign t1_15 = t0_15;
    assign t2_0 = t1_0;
    assign t2_1 = t1_8;
    assign t2_2 = t1_1;
    assign t2_3 = t1_9;
    assign t2_4 = t1_2;
    assign t2_5 = t1_10;
    assign t2_6 = t1_3;
    assign t2_7 = t1_11;
    assign t2_8 = t1_4;
    assign t2_9 = t1_12;
    assign t2_10 = t1_5;
    assign t2_11 = t1_13;
    assign t2_12 = t1_6;
    assign t2_13 = t1_14;
    assign t2_14 = t1_7;
    assign t2_15 = t1_15;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
         t3_8 <= t2_8;
         t3_9 <= t2_9;
         t3_10 <= t2_10;
         t3_11 <= t2_11;
         t3_12 <= t2_12;
         t3_13 <= t2_13;
         t3_14 <= t2_14;
         t3_15 <= t2_15;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_8;
    assign t4_2 = t3_1;
    assign t4_3 = t3_9;
    assign t4_4 = t3_2;
    assign t4_5 = t3_10;
    assign t4_6 = t3_3;
    assign t4_7 = t3_11;
    assign t4_8 = t3_4;
    assign t4_9 = t3_12;
    assign t4_10 = t3_5;
    assign t4_11 = t3_13;
    assign t4_12 = t3_6;
    assign t4_13 = t3_14;
    assign t4_14 = t3_7;
    assign t4_15 = t3_15;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_2;
     assign t5_3 = t4_3;
     assign t5_4 = t4_4;
     assign t5_5 = t4_5;
     assign t5_6 = t4_6;
     assign t5_7 = t4_7;
     assign t5_8 = t4_8;
     assign t5_9 = t4_9;
     assign t5_10 = t4_10;
     assign t5_11 = t4_11;
     assign t5_12 = t4_12;
     assign t5_13 = t4_13;
     assign t5_14 = t4_14;
     assign t5_15 = t4_15;
    assign t6_0 = t5_0;
    assign t6_1 = t5_8;
    assign t6_2 = t5_1;
    assign t6_3 = t5_9;
    assign t6_4 = t5_2;
    assign t6_5 = t5_10;
    assign t6_6 = t5_3;
    assign t6_7 = t5_11;
    assign t6_8 = t5_4;
    assign t6_9 = t5_12;
    assign t6_10 = t5_5;
    assign t6_11 = t5_13;
    assign t6_12 = t5_6;
    assign t6_13 = t5_14;
    assign t6_14 = t5_7;
    assign t6_15 = t5_15;
   always @(posedge clk) begin
         t7_0 <= (control1[15] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[15] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[14] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[14] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[13] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[13] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[12] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[12] == 0) ? t6_7 : t6_6;
         t7_8 <= (control1[11] == 0) ? t6_8 : t6_9;
         t7_9 <= (control1[11] == 0) ? t6_9 : t6_8;
         t7_10 <= (control1[10] == 0) ? t6_10 : t6_11;
         t7_11 <= (control1[10] == 0) ? t6_11 : t6_10;
         t7_12 <= (control1[9] == 0) ? t6_12 : t6_13;
         t7_13 <= (control1[9] == 0) ? t6_13 : t6_12;
         t7_14 <= (control1[8] == 0) ? t6_14 : t6_15;
         t7_15 <= (control1[8] == 0) ? t6_15 : t6_14;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_8;
    assign t8_5 = t7_10;
    assign t8_6 = t7_12;
    assign t8_7 = t7_14;
    assign t8_8 = t7_1;
    assign t8_9 = t7_3;
    assign t8_10 = t7_5;
    assign t8_11 = t7_7;
    assign t8_12 = t7_9;
    assign t8_13 = t7_11;
    assign t8_14 = t7_13;
    assign t8_15 = t7_15;
     assign t9_0 = (control2[7] == 0) ? t8_0 : t8_1;
     assign t9_1 = (control2[7] == 0) ? t8_1 : t8_0;
     assign t9_2 = (control2[6] == 0) ? t8_2 : t8_3;
     assign t9_3 = (control2[6] == 0) ? t8_3 : t8_2;
     assign t9_4 = (control2[5] == 0) ? t8_4 : t8_5;
     assign t9_5 = (control2[5] == 0) ? t8_5 : t8_4;
     assign t9_6 = (control2[4] == 0) ? t8_6 : t8_7;
     assign t9_7 = (control2[4] == 0) ? t8_7 : t8_6;
     assign t9_8 = (control2[3] == 0) ? t8_8 : t8_9;
     assign t9_9 = (control2[3] == 0) ? t8_9 : t8_8;
     assign t9_10 = (control2[2] == 0) ? t8_10 : t8_11;
     assign t9_11 = (control2[2] == 0) ? t8_11 : t8_10;
     assign t9_12 = (control2[1] == 0) ? t8_12 : t8_13;
     assign t9_13 = (control2[1] == 0) ? t8_13 : t8_12;
     assign t9_14 = (control2[0] == 0) ? t8_14 : t8_15;
     assign t9_15 = (control2[0] == 0) ? t8_15 : t8_14;
    assign t10_0 = t9_0;
    assign t10_1 = t9_2;
    assign t10_2 = t9_4;
    assign t10_3 = t9_6;
    assign t10_4 = t9_8;
    assign t10_5 = t9_10;
    assign t10_6 = t9_12;
    assign t10_7 = t9_14;
    assign t10_8 = t9_1;
    assign t10_9 = t9_3;
    assign t10_10 = t9_5;
    assign t10_11 = t9_7;
    assign t10_12 = t9_9;
    assign t10_13 = t9_11;
    assign t10_14 = t9_13;
    assign t10_15 = t9_15;
   always @(posedge clk) begin
         t11_0 <= t10_0;
         t11_1 <= t10_1;
         t11_2 <= t10_2;
         t11_3 <= t10_3;
         t11_4 <= t10_4;
         t11_5 <= t10_5;
         t11_6 <= t10_6;
         t11_7 <= t10_7;
         t11_8 <= t10_8;
         t11_9 <= t10_9;
         t11_10 <= t10_10;
         t11_11 <= t10_11;
         t11_12 <= t10_12;
         t11_13 <= t10_13;
         t11_14 <= t10_14;
         t11_15 <= t10_15;
   end
    assign t12_0 = t11_0;
    assign t12_1 = t11_2;
    assign t12_2 = t11_4;
    assign t12_3 = t11_6;
    assign t12_4 = t11_8;
    assign t12_5 = t11_10;
    assign t12_6 = t11_12;
    assign t12_7 = t11_14;
    assign t12_8 = t11_1;
    assign t12_9 = t11_3;
    assign t12_10 = t11_5;
    assign t12_11 = t11_7;
    assign t12_12 = t11_9;
    assign t12_13 = t11_11;
    assign t12_14 = t11_13;
    assign t12_15 = t11_15;
   always @(posedge clk) begin
         t13_0 <= t12_0;
         t13_1 <= t12_1;
         t13_2 <= t12_2;
         t13_3 <= t12_3;
         t13_4 <= t12_4;
         t13_5 <= t12_5;
         t13_6 <= t12_6;
         t13_7 <= t12_7;
         t13_8 <= t12_8;
         t13_9 <= t12_9;
         t13_10 <= t12_10;
         t13_11 <= t12_11;
         t13_12 <= t12_12;
         t13_13 <= t12_13;
         t13_14 <= t12_14;
         t13_15 <= t12_15;
   end
    always @(posedge clk) begin
        y0 <= t13_0;
        y1 <= t13_2;
        y2 <= t13_4;
        y3 <= t13_6;
        y4 <= t13_8;
        y5 <= t13_10;
        y6 <= t13_12;
        y7 <= t13_14;
        y8 <= t13_1;
        y9 <= t13_3;
        y10 <= t13_5;
        y11 <= t13_7;
        y12 <= t13_9;
        y13 <= t13_11;
        y14 <= t13_13;
        y15 <= t13_15;
    end
endmodule

// Latency: 135
// Gap: 64
module perm14756(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter width = 32;

   parameter depth = 64;

   parameter addrbits = 6;

   parameter muxbits = 4;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  t8;
   wire [width-1:0]  s8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  t9;
   wire [width-1:0]  s9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  t10;
   wire [width-1:0]  s10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  t11;
   wire [width-1:0]  s11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  t12;
   wire [width-1:0]  s12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  t13;
   wire [width-1:0]  s13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  t14;
   wire [width-1:0]  s14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  t15;
   wire [width-1:0]  s15;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg [addrbits-1:0] s1rd8, s2wr8, s2rd8;
   reg [addrbits-1:0] s1rd9, s2wr9, s2rd9;
   reg [addrbits-1:0] s1rd10, s2wr10, s2rd10;
   reg [addrbits-1:0] s1rd11, s2wr11, s2rd11;
   reg [addrbits-1:0] s1rd12, s2wr12, s2rd12;
   reg [addrbits-1:0] s1rd13, s2wr13, s2rd13;
   reg [addrbits-1:0] s1rd14, s2wr14, s2rd14;
   reg [addrbits-1:0] s1rd15, s2wr15, s2rd15;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm91;
   assign tm91 = 0;

shiftRegFIFO #(6, 1) shiftFIFO_24593(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24594(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem8(x8, t8, {inFlip0, s1wr0}, {outFlip0, s1rd8}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem9(x9, t9, {inFlip0, s1wr0}, {outFlip0, s1rd9}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem10(x10, t10, {inFlip0, s1wr0}, {outFlip0, s1rd10}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem11(x11, t11, {inFlip0, s1wr0}, {outFlip0, s1rd11}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem12(x12, t12, {inFlip0, s1wr0}, {outFlip0, s1rd12}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem13(x13, t13, {inFlip0, s1wr0}, {outFlip0, s1rd13}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem14(x14, t14, {inFlip0, s1wr0}, {outFlip0, s1rd14}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem15(x15, t15, {inFlip0, s1wr0}, {outFlip0, s1rd15}, s1wr_en, clk);

nextReg #(63, 6) nextReg_24605(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_24606(.X(next2), .Y(next3), .clk(clk));
nextReg #(64, 6) nextReg_24609(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24610(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(63, 1) shiftFIFO_24613(.X(tm91), .Y(tm91_d), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_24616(.X(tm91_d), .Y(tm91_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(6, 6) shiftFIFO_24621(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(7, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem8(s8, y8, {inFlip1, s2wr8}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem9(s9, y9, {inFlip1, s2wr9}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem10(s10, y10, {inFlip1, s2wr10}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem11(s11, y11, {inFlip1, s2wr11}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem12(s12, y12, {inFlip1, s2wr12}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem13(s13, y13, {inFlip1, s2wr13}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem14(s14, y14, {inFlip1, s2wr14}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem15(s15, y15, {inFlip1, s2wr15}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd0 <= 48;
	     {1'd0,  6'd1}: s1rd0 <= 49;
	     {1'd0,  6'd2}: s1rd0 <= 50;
	     {1'd0,  6'd3}: s1rd0 <= 51;
	     {1'd0,  6'd4}: s1rd0 <= 52;
	     {1'd0,  6'd5}: s1rd0 <= 53;
	     {1'd0,  6'd6}: s1rd0 <= 54;
	     {1'd0,  6'd7}: s1rd0 <= 55;
	     {1'd0,  6'd8}: s1rd0 <= 56;
	     {1'd0,  6'd9}: s1rd0 <= 57;
	     {1'd0,  6'd10}: s1rd0 <= 58;
	     {1'd0,  6'd11}: s1rd0 <= 59;
	     {1'd0,  6'd12}: s1rd0 <= 60;
	     {1'd0,  6'd13}: s1rd0 <= 61;
	     {1'd0,  6'd14}: s1rd0 <= 62;
	     {1'd0,  6'd15}: s1rd0 <= 63;
	     {1'd0,  6'd16}: s1rd0 <= 32;
	     {1'd0,  6'd17}: s1rd0 <= 33;
	     {1'd0,  6'd18}: s1rd0 <= 34;
	     {1'd0,  6'd19}: s1rd0 <= 35;
	     {1'd0,  6'd20}: s1rd0 <= 36;
	     {1'd0,  6'd21}: s1rd0 <= 37;
	     {1'd0,  6'd22}: s1rd0 <= 38;
	     {1'd0,  6'd23}: s1rd0 <= 39;
	     {1'd0,  6'd24}: s1rd0 <= 40;
	     {1'd0,  6'd25}: s1rd0 <= 41;
	     {1'd0,  6'd26}: s1rd0 <= 42;
	     {1'd0,  6'd27}: s1rd0 <= 43;
	     {1'd0,  6'd28}: s1rd0 <= 44;
	     {1'd0,  6'd29}: s1rd0 <= 45;
	     {1'd0,  6'd30}: s1rd0 <= 46;
	     {1'd0,  6'd31}: s1rd0 <= 47;
	     {1'd0,  6'd32}: s1rd0 <= 16;
	     {1'd0,  6'd33}: s1rd0 <= 17;
	     {1'd0,  6'd34}: s1rd0 <= 18;
	     {1'd0,  6'd35}: s1rd0 <= 19;
	     {1'd0,  6'd36}: s1rd0 <= 20;
	     {1'd0,  6'd37}: s1rd0 <= 21;
	     {1'd0,  6'd38}: s1rd0 <= 22;
	     {1'd0,  6'd39}: s1rd0 <= 23;
	     {1'd0,  6'd40}: s1rd0 <= 24;
	     {1'd0,  6'd41}: s1rd0 <= 25;
	     {1'd0,  6'd42}: s1rd0 <= 26;
	     {1'd0,  6'd43}: s1rd0 <= 27;
	     {1'd0,  6'd44}: s1rd0 <= 28;
	     {1'd0,  6'd45}: s1rd0 <= 29;
	     {1'd0,  6'd46}: s1rd0 <= 30;
	     {1'd0,  6'd47}: s1rd0 <= 31;
	     {1'd0,  6'd48}: s1rd0 <= 0;
	     {1'd0,  6'd49}: s1rd0 <= 1;
	     {1'd0,  6'd50}: s1rd0 <= 2;
	     {1'd0,  6'd51}: s1rd0 <= 3;
	     {1'd0,  6'd52}: s1rd0 <= 4;
	     {1'd0,  6'd53}: s1rd0 <= 5;
	     {1'd0,  6'd54}: s1rd0 <= 6;
	     {1'd0,  6'd55}: s1rd0 <= 7;
	     {1'd0,  6'd56}: s1rd0 <= 8;
	     {1'd0,  6'd57}: s1rd0 <= 9;
	     {1'd0,  6'd58}: s1rd0 <= 10;
	     {1'd0,  6'd59}: s1rd0 <= 11;
	     {1'd0,  6'd60}: s1rd0 <= 12;
	     {1'd0,  6'd61}: s1rd0 <= 13;
	     {1'd0,  6'd62}: s1rd0 <= 14;
	     {1'd0,  6'd63}: s1rd0 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd1 <= 32;
	     {1'd0,  6'd1}: s1rd1 <= 33;
	     {1'd0,  6'd2}: s1rd1 <= 34;
	     {1'd0,  6'd3}: s1rd1 <= 35;
	     {1'd0,  6'd4}: s1rd1 <= 36;
	     {1'd0,  6'd5}: s1rd1 <= 37;
	     {1'd0,  6'd6}: s1rd1 <= 38;
	     {1'd0,  6'd7}: s1rd1 <= 39;
	     {1'd0,  6'd8}: s1rd1 <= 40;
	     {1'd0,  6'd9}: s1rd1 <= 41;
	     {1'd0,  6'd10}: s1rd1 <= 42;
	     {1'd0,  6'd11}: s1rd1 <= 43;
	     {1'd0,  6'd12}: s1rd1 <= 44;
	     {1'd0,  6'd13}: s1rd1 <= 45;
	     {1'd0,  6'd14}: s1rd1 <= 46;
	     {1'd0,  6'd15}: s1rd1 <= 47;
	     {1'd0,  6'd16}: s1rd1 <= 48;
	     {1'd0,  6'd17}: s1rd1 <= 49;
	     {1'd0,  6'd18}: s1rd1 <= 50;
	     {1'd0,  6'd19}: s1rd1 <= 51;
	     {1'd0,  6'd20}: s1rd1 <= 52;
	     {1'd0,  6'd21}: s1rd1 <= 53;
	     {1'd0,  6'd22}: s1rd1 <= 54;
	     {1'd0,  6'd23}: s1rd1 <= 55;
	     {1'd0,  6'd24}: s1rd1 <= 56;
	     {1'd0,  6'd25}: s1rd1 <= 57;
	     {1'd0,  6'd26}: s1rd1 <= 58;
	     {1'd0,  6'd27}: s1rd1 <= 59;
	     {1'd0,  6'd28}: s1rd1 <= 60;
	     {1'd0,  6'd29}: s1rd1 <= 61;
	     {1'd0,  6'd30}: s1rd1 <= 62;
	     {1'd0,  6'd31}: s1rd1 <= 63;
	     {1'd0,  6'd32}: s1rd1 <= 0;
	     {1'd0,  6'd33}: s1rd1 <= 1;
	     {1'd0,  6'd34}: s1rd1 <= 2;
	     {1'd0,  6'd35}: s1rd1 <= 3;
	     {1'd0,  6'd36}: s1rd1 <= 4;
	     {1'd0,  6'd37}: s1rd1 <= 5;
	     {1'd0,  6'd38}: s1rd1 <= 6;
	     {1'd0,  6'd39}: s1rd1 <= 7;
	     {1'd0,  6'd40}: s1rd1 <= 8;
	     {1'd0,  6'd41}: s1rd1 <= 9;
	     {1'd0,  6'd42}: s1rd1 <= 10;
	     {1'd0,  6'd43}: s1rd1 <= 11;
	     {1'd0,  6'd44}: s1rd1 <= 12;
	     {1'd0,  6'd45}: s1rd1 <= 13;
	     {1'd0,  6'd46}: s1rd1 <= 14;
	     {1'd0,  6'd47}: s1rd1 <= 15;
	     {1'd0,  6'd48}: s1rd1 <= 16;
	     {1'd0,  6'd49}: s1rd1 <= 17;
	     {1'd0,  6'd50}: s1rd1 <= 18;
	     {1'd0,  6'd51}: s1rd1 <= 19;
	     {1'd0,  6'd52}: s1rd1 <= 20;
	     {1'd0,  6'd53}: s1rd1 <= 21;
	     {1'd0,  6'd54}: s1rd1 <= 22;
	     {1'd0,  6'd55}: s1rd1 <= 23;
	     {1'd0,  6'd56}: s1rd1 <= 24;
	     {1'd0,  6'd57}: s1rd1 <= 25;
	     {1'd0,  6'd58}: s1rd1 <= 26;
	     {1'd0,  6'd59}: s1rd1 <= 27;
	     {1'd0,  6'd60}: s1rd1 <= 28;
	     {1'd0,  6'd61}: s1rd1 <= 29;
	     {1'd0,  6'd62}: s1rd1 <= 30;
	     {1'd0,  6'd63}: s1rd1 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd2 <= 16;
	     {1'd0,  6'd1}: s1rd2 <= 17;
	     {1'd0,  6'd2}: s1rd2 <= 18;
	     {1'd0,  6'd3}: s1rd2 <= 19;
	     {1'd0,  6'd4}: s1rd2 <= 20;
	     {1'd0,  6'd5}: s1rd2 <= 21;
	     {1'd0,  6'd6}: s1rd2 <= 22;
	     {1'd0,  6'd7}: s1rd2 <= 23;
	     {1'd0,  6'd8}: s1rd2 <= 24;
	     {1'd0,  6'd9}: s1rd2 <= 25;
	     {1'd0,  6'd10}: s1rd2 <= 26;
	     {1'd0,  6'd11}: s1rd2 <= 27;
	     {1'd0,  6'd12}: s1rd2 <= 28;
	     {1'd0,  6'd13}: s1rd2 <= 29;
	     {1'd0,  6'd14}: s1rd2 <= 30;
	     {1'd0,  6'd15}: s1rd2 <= 31;
	     {1'd0,  6'd16}: s1rd2 <= 0;
	     {1'd0,  6'd17}: s1rd2 <= 1;
	     {1'd0,  6'd18}: s1rd2 <= 2;
	     {1'd0,  6'd19}: s1rd2 <= 3;
	     {1'd0,  6'd20}: s1rd2 <= 4;
	     {1'd0,  6'd21}: s1rd2 <= 5;
	     {1'd0,  6'd22}: s1rd2 <= 6;
	     {1'd0,  6'd23}: s1rd2 <= 7;
	     {1'd0,  6'd24}: s1rd2 <= 8;
	     {1'd0,  6'd25}: s1rd2 <= 9;
	     {1'd0,  6'd26}: s1rd2 <= 10;
	     {1'd0,  6'd27}: s1rd2 <= 11;
	     {1'd0,  6'd28}: s1rd2 <= 12;
	     {1'd0,  6'd29}: s1rd2 <= 13;
	     {1'd0,  6'd30}: s1rd2 <= 14;
	     {1'd0,  6'd31}: s1rd2 <= 15;
	     {1'd0,  6'd32}: s1rd2 <= 48;
	     {1'd0,  6'd33}: s1rd2 <= 49;
	     {1'd0,  6'd34}: s1rd2 <= 50;
	     {1'd0,  6'd35}: s1rd2 <= 51;
	     {1'd0,  6'd36}: s1rd2 <= 52;
	     {1'd0,  6'd37}: s1rd2 <= 53;
	     {1'd0,  6'd38}: s1rd2 <= 54;
	     {1'd0,  6'd39}: s1rd2 <= 55;
	     {1'd0,  6'd40}: s1rd2 <= 56;
	     {1'd0,  6'd41}: s1rd2 <= 57;
	     {1'd0,  6'd42}: s1rd2 <= 58;
	     {1'd0,  6'd43}: s1rd2 <= 59;
	     {1'd0,  6'd44}: s1rd2 <= 60;
	     {1'd0,  6'd45}: s1rd2 <= 61;
	     {1'd0,  6'd46}: s1rd2 <= 62;
	     {1'd0,  6'd47}: s1rd2 <= 63;
	     {1'd0,  6'd48}: s1rd2 <= 32;
	     {1'd0,  6'd49}: s1rd2 <= 33;
	     {1'd0,  6'd50}: s1rd2 <= 34;
	     {1'd0,  6'd51}: s1rd2 <= 35;
	     {1'd0,  6'd52}: s1rd2 <= 36;
	     {1'd0,  6'd53}: s1rd2 <= 37;
	     {1'd0,  6'd54}: s1rd2 <= 38;
	     {1'd0,  6'd55}: s1rd2 <= 39;
	     {1'd0,  6'd56}: s1rd2 <= 40;
	     {1'd0,  6'd57}: s1rd2 <= 41;
	     {1'd0,  6'd58}: s1rd2 <= 42;
	     {1'd0,  6'd59}: s1rd2 <= 43;
	     {1'd0,  6'd60}: s1rd2 <= 44;
	     {1'd0,  6'd61}: s1rd2 <= 45;
	     {1'd0,  6'd62}: s1rd2 <= 46;
	     {1'd0,  6'd63}: s1rd2 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd3 <= 0;
	     {1'd0,  6'd1}: s1rd3 <= 1;
	     {1'd0,  6'd2}: s1rd3 <= 2;
	     {1'd0,  6'd3}: s1rd3 <= 3;
	     {1'd0,  6'd4}: s1rd3 <= 4;
	     {1'd0,  6'd5}: s1rd3 <= 5;
	     {1'd0,  6'd6}: s1rd3 <= 6;
	     {1'd0,  6'd7}: s1rd3 <= 7;
	     {1'd0,  6'd8}: s1rd3 <= 8;
	     {1'd0,  6'd9}: s1rd3 <= 9;
	     {1'd0,  6'd10}: s1rd3 <= 10;
	     {1'd0,  6'd11}: s1rd3 <= 11;
	     {1'd0,  6'd12}: s1rd3 <= 12;
	     {1'd0,  6'd13}: s1rd3 <= 13;
	     {1'd0,  6'd14}: s1rd3 <= 14;
	     {1'd0,  6'd15}: s1rd3 <= 15;
	     {1'd0,  6'd16}: s1rd3 <= 16;
	     {1'd0,  6'd17}: s1rd3 <= 17;
	     {1'd0,  6'd18}: s1rd3 <= 18;
	     {1'd0,  6'd19}: s1rd3 <= 19;
	     {1'd0,  6'd20}: s1rd3 <= 20;
	     {1'd0,  6'd21}: s1rd3 <= 21;
	     {1'd0,  6'd22}: s1rd3 <= 22;
	     {1'd0,  6'd23}: s1rd3 <= 23;
	     {1'd0,  6'd24}: s1rd3 <= 24;
	     {1'd0,  6'd25}: s1rd3 <= 25;
	     {1'd0,  6'd26}: s1rd3 <= 26;
	     {1'd0,  6'd27}: s1rd3 <= 27;
	     {1'd0,  6'd28}: s1rd3 <= 28;
	     {1'd0,  6'd29}: s1rd3 <= 29;
	     {1'd0,  6'd30}: s1rd3 <= 30;
	     {1'd0,  6'd31}: s1rd3 <= 31;
	     {1'd0,  6'd32}: s1rd3 <= 32;
	     {1'd0,  6'd33}: s1rd3 <= 33;
	     {1'd0,  6'd34}: s1rd3 <= 34;
	     {1'd0,  6'd35}: s1rd3 <= 35;
	     {1'd0,  6'd36}: s1rd3 <= 36;
	     {1'd0,  6'd37}: s1rd3 <= 37;
	     {1'd0,  6'd38}: s1rd3 <= 38;
	     {1'd0,  6'd39}: s1rd3 <= 39;
	     {1'd0,  6'd40}: s1rd3 <= 40;
	     {1'd0,  6'd41}: s1rd3 <= 41;
	     {1'd0,  6'd42}: s1rd3 <= 42;
	     {1'd0,  6'd43}: s1rd3 <= 43;
	     {1'd0,  6'd44}: s1rd3 <= 44;
	     {1'd0,  6'd45}: s1rd3 <= 45;
	     {1'd0,  6'd46}: s1rd3 <= 46;
	     {1'd0,  6'd47}: s1rd3 <= 47;
	     {1'd0,  6'd48}: s1rd3 <= 48;
	     {1'd0,  6'd49}: s1rd3 <= 49;
	     {1'd0,  6'd50}: s1rd3 <= 50;
	     {1'd0,  6'd51}: s1rd3 <= 51;
	     {1'd0,  6'd52}: s1rd3 <= 52;
	     {1'd0,  6'd53}: s1rd3 <= 53;
	     {1'd0,  6'd54}: s1rd3 <= 54;
	     {1'd0,  6'd55}: s1rd3 <= 55;
	     {1'd0,  6'd56}: s1rd3 <= 56;
	     {1'd0,  6'd57}: s1rd3 <= 57;
	     {1'd0,  6'd58}: s1rd3 <= 58;
	     {1'd0,  6'd59}: s1rd3 <= 59;
	     {1'd0,  6'd60}: s1rd3 <= 60;
	     {1'd0,  6'd61}: s1rd3 <= 61;
	     {1'd0,  6'd62}: s1rd3 <= 62;
	     {1'd0,  6'd63}: s1rd3 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd4 <= 48;
	     {1'd0,  6'd1}: s1rd4 <= 49;
	     {1'd0,  6'd2}: s1rd4 <= 50;
	     {1'd0,  6'd3}: s1rd4 <= 51;
	     {1'd0,  6'd4}: s1rd4 <= 52;
	     {1'd0,  6'd5}: s1rd4 <= 53;
	     {1'd0,  6'd6}: s1rd4 <= 54;
	     {1'd0,  6'd7}: s1rd4 <= 55;
	     {1'd0,  6'd8}: s1rd4 <= 56;
	     {1'd0,  6'd9}: s1rd4 <= 57;
	     {1'd0,  6'd10}: s1rd4 <= 58;
	     {1'd0,  6'd11}: s1rd4 <= 59;
	     {1'd0,  6'd12}: s1rd4 <= 60;
	     {1'd0,  6'd13}: s1rd4 <= 61;
	     {1'd0,  6'd14}: s1rd4 <= 62;
	     {1'd0,  6'd15}: s1rd4 <= 63;
	     {1'd0,  6'd16}: s1rd4 <= 32;
	     {1'd0,  6'd17}: s1rd4 <= 33;
	     {1'd0,  6'd18}: s1rd4 <= 34;
	     {1'd0,  6'd19}: s1rd4 <= 35;
	     {1'd0,  6'd20}: s1rd4 <= 36;
	     {1'd0,  6'd21}: s1rd4 <= 37;
	     {1'd0,  6'd22}: s1rd4 <= 38;
	     {1'd0,  6'd23}: s1rd4 <= 39;
	     {1'd0,  6'd24}: s1rd4 <= 40;
	     {1'd0,  6'd25}: s1rd4 <= 41;
	     {1'd0,  6'd26}: s1rd4 <= 42;
	     {1'd0,  6'd27}: s1rd4 <= 43;
	     {1'd0,  6'd28}: s1rd4 <= 44;
	     {1'd0,  6'd29}: s1rd4 <= 45;
	     {1'd0,  6'd30}: s1rd4 <= 46;
	     {1'd0,  6'd31}: s1rd4 <= 47;
	     {1'd0,  6'd32}: s1rd4 <= 16;
	     {1'd0,  6'd33}: s1rd4 <= 17;
	     {1'd0,  6'd34}: s1rd4 <= 18;
	     {1'd0,  6'd35}: s1rd4 <= 19;
	     {1'd0,  6'd36}: s1rd4 <= 20;
	     {1'd0,  6'd37}: s1rd4 <= 21;
	     {1'd0,  6'd38}: s1rd4 <= 22;
	     {1'd0,  6'd39}: s1rd4 <= 23;
	     {1'd0,  6'd40}: s1rd4 <= 24;
	     {1'd0,  6'd41}: s1rd4 <= 25;
	     {1'd0,  6'd42}: s1rd4 <= 26;
	     {1'd0,  6'd43}: s1rd4 <= 27;
	     {1'd0,  6'd44}: s1rd4 <= 28;
	     {1'd0,  6'd45}: s1rd4 <= 29;
	     {1'd0,  6'd46}: s1rd4 <= 30;
	     {1'd0,  6'd47}: s1rd4 <= 31;
	     {1'd0,  6'd48}: s1rd4 <= 0;
	     {1'd0,  6'd49}: s1rd4 <= 1;
	     {1'd0,  6'd50}: s1rd4 <= 2;
	     {1'd0,  6'd51}: s1rd4 <= 3;
	     {1'd0,  6'd52}: s1rd4 <= 4;
	     {1'd0,  6'd53}: s1rd4 <= 5;
	     {1'd0,  6'd54}: s1rd4 <= 6;
	     {1'd0,  6'd55}: s1rd4 <= 7;
	     {1'd0,  6'd56}: s1rd4 <= 8;
	     {1'd0,  6'd57}: s1rd4 <= 9;
	     {1'd0,  6'd58}: s1rd4 <= 10;
	     {1'd0,  6'd59}: s1rd4 <= 11;
	     {1'd0,  6'd60}: s1rd4 <= 12;
	     {1'd0,  6'd61}: s1rd4 <= 13;
	     {1'd0,  6'd62}: s1rd4 <= 14;
	     {1'd0,  6'd63}: s1rd4 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd5 <= 32;
	     {1'd0,  6'd1}: s1rd5 <= 33;
	     {1'd0,  6'd2}: s1rd5 <= 34;
	     {1'd0,  6'd3}: s1rd5 <= 35;
	     {1'd0,  6'd4}: s1rd5 <= 36;
	     {1'd0,  6'd5}: s1rd5 <= 37;
	     {1'd0,  6'd6}: s1rd5 <= 38;
	     {1'd0,  6'd7}: s1rd5 <= 39;
	     {1'd0,  6'd8}: s1rd5 <= 40;
	     {1'd0,  6'd9}: s1rd5 <= 41;
	     {1'd0,  6'd10}: s1rd5 <= 42;
	     {1'd0,  6'd11}: s1rd5 <= 43;
	     {1'd0,  6'd12}: s1rd5 <= 44;
	     {1'd0,  6'd13}: s1rd5 <= 45;
	     {1'd0,  6'd14}: s1rd5 <= 46;
	     {1'd0,  6'd15}: s1rd5 <= 47;
	     {1'd0,  6'd16}: s1rd5 <= 48;
	     {1'd0,  6'd17}: s1rd5 <= 49;
	     {1'd0,  6'd18}: s1rd5 <= 50;
	     {1'd0,  6'd19}: s1rd5 <= 51;
	     {1'd0,  6'd20}: s1rd5 <= 52;
	     {1'd0,  6'd21}: s1rd5 <= 53;
	     {1'd0,  6'd22}: s1rd5 <= 54;
	     {1'd0,  6'd23}: s1rd5 <= 55;
	     {1'd0,  6'd24}: s1rd5 <= 56;
	     {1'd0,  6'd25}: s1rd5 <= 57;
	     {1'd0,  6'd26}: s1rd5 <= 58;
	     {1'd0,  6'd27}: s1rd5 <= 59;
	     {1'd0,  6'd28}: s1rd5 <= 60;
	     {1'd0,  6'd29}: s1rd5 <= 61;
	     {1'd0,  6'd30}: s1rd5 <= 62;
	     {1'd0,  6'd31}: s1rd5 <= 63;
	     {1'd0,  6'd32}: s1rd5 <= 0;
	     {1'd0,  6'd33}: s1rd5 <= 1;
	     {1'd0,  6'd34}: s1rd5 <= 2;
	     {1'd0,  6'd35}: s1rd5 <= 3;
	     {1'd0,  6'd36}: s1rd5 <= 4;
	     {1'd0,  6'd37}: s1rd5 <= 5;
	     {1'd0,  6'd38}: s1rd5 <= 6;
	     {1'd0,  6'd39}: s1rd5 <= 7;
	     {1'd0,  6'd40}: s1rd5 <= 8;
	     {1'd0,  6'd41}: s1rd5 <= 9;
	     {1'd0,  6'd42}: s1rd5 <= 10;
	     {1'd0,  6'd43}: s1rd5 <= 11;
	     {1'd0,  6'd44}: s1rd5 <= 12;
	     {1'd0,  6'd45}: s1rd5 <= 13;
	     {1'd0,  6'd46}: s1rd5 <= 14;
	     {1'd0,  6'd47}: s1rd5 <= 15;
	     {1'd0,  6'd48}: s1rd5 <= 16;
	     {1'd0,  6'd49}: s1rd5 <= 17;
	     {1'd0,  6'd50}: s1rd5 <= 18;
	     {1'd0,  6'd51}: s1rd5 <= 19;
	     {1'd0,  6'd52}: s1rd5 <= 20;
	     {1'd0,  6'd53}: s1rd5 <= 21;
	     {1'd0,  6'd54}: s1rd5 <= 22;
	     {1'd0,  6'd55}: s1rd5 <= 23;
	     {1'd0,  6'd56}: s1rd5 <= 24;
	     {1'd0,  6'd57}: s1rd5 <= 25;
	     {1'd0,  6'd58}: s1rd5 <= 26;
	     {1'd0,  6'd59}: s1rd5 <= 27;
	     {1'd0,  6'd60}: s1rd5 <= 28;
	     {1'd0,  6'd61}: s1rd5 <= 29;
	     {1'd0,  6'd62}: s1rd5 <= 30;
	     {1'd0,  6'd63}: s1rd5 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd6 <= 16;
	     {1'd0,  6'd1}: s1rd6 <= 17;
	     {1'd0,  6'd2}: s1rd6 <= 18;
	     {1'd0,  6'd3}: s1rd6 <= 19;
	     {1'd0,  6'd4}: s1rd6 <= 20;
	     {1'd0,  6'd5}: s1rd6 <= 21;
	     {1'd0,  6'd6}: s1rd6 <= 22;
	     {1'd0,  6'd7}: s1rd6 <= 23;
	     {1'd0,  6'd8}: s1rd6 <= 24;
	     {1'd0,  6'd9}: s1rd6 <= 25;
	     {1'd0,  6'd10}: s1rd6 <= 26;
	     {1'd0,  6'd11}: s1rd6 <= 27;
	     {1'd0,  6'd12}: s1rd6 <= 28;
	     {1'd0,  6'd13}: s1rd6 <= 29;
	     {1'd0,  6'd14}: s1rd6 <= 30;
	     {1'd0,  6'd15}: s1rd6 <= 31;
	     {1'd0,  6'd16}: s1rd6 <= 0;
	     {1'd0,  6'd17}: s1rd6 <= 1;
	     {1'd0,  6'd18}: s1rd6 <= 2;
	     {1'd0,  6'd19}: s1rd6 <= 3;
	     {1'd0,  6'd20}: s1rd6 <= 4;
	     {1'd0,  6'd21}: s1rd6 <= 5;
	     {1'd0,  6'd22}: s1rd6 <= 6;
	     {1'd0,  6'd23}: s1rd6 <= 7;
	     {1'd0,  6'd24}: s1rd6 <= 8;
	     {1'd0,  6'd25}: s1rd6 <= 9;
	     {1'd0,  6'd26}: s1rd6 <= 10;
	     {1'd0,  6'd27}: s1rd6 <= 11;
	     {1'd0,  6'd28}: s1rd6 <= 12;
	     {1'd0,  6'd29}: s1rd6 <= 13;
	     {1'd0,  6'd30}: s1rd6 <= 14;
	     {1'd0,  6'd31}: s1rd6 <= 15;
	     {1'd0,  6'd32}: s1rd6 <= 48;
	     {1'd0,  6'd33}: s1rd6 <= 49;
	     {1'd0,  6'd34}: s1rd6 <= 50;
	     {1'd0,  6'd35}: s1rd6 <= 51;
	     {1'd0,  6'd36}: s1rd6 <= 52;
	     {1'd0,  6'd37}: s1rd6 <= 53;
	     {1'd0,  6'd38}: s1rd6 <= 54;
	     {1'd0,  6'd39}: s1rd6 <= 55;
	     {1'd0,  6'd40}: s1rd6 <= 56;
	     {1'd0,  6'd41}: s1rd6 <= 57;
	     {1'd0,  6'd42}: s1rd6 <= 58;
	     {1'd0,  6'd43}: s1rd6 <= 59;
	     {1'd0,  6'd44}: s1rd6 <= 60;
	     {1'd0,  6'd45}: s1rd6 <= 61;
	     {1'd0,  6'd46}: s1rd6 <= 62;
	     {1'd0,  6'd47}: s1rd6 <= 63;
	     {1'd0,  6'd48}: s1rd6 <= 32;
	     {1'd0,  6'd49}: s1rd6 <= 33;
	     {1'd0,  6'd50}: s1rd6 <= 34;
	     {1'd0,  6'd51}: s1rd6 <= 35;
	     {1'd0,  6'd52}: s1rd6 <= 36;
	     {1'd0,  6'd53}: s1rd6 <= 37;
	     {1'd0,  6'd54}: s1rd6 <= 38;
	     {1'd0,  6'd55}: s1rd6 <= 39;
	     {1'd0,  6'd56}: s1rd6 <= 40;
	     {1'd0,  6'd57}: s1rd6 <= 41;
	     {1'd0,  6'd58}: s1rd6 <= 42;
	     {1'd0,  6'd59}: s1rd6 <= 43;
	     {1'd0,  6'd60}: s1rd6 <= 44;
	     {1'd0,  6'd61}: s1rd6 <= 45;
	     {1'd0,  6'd62}: s1rd6 <= 46;
	     {1'd0,  6'd63}: s1rd6 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd7 <= 0;
	     {1'd0,  6'd1}: s1rd7 <= 1;
	     {1'd0,  6'd2}: s1rd7 <= 2;
	     {1'd0,  6'd3}: s1rd7 <= 3;
	     {1'd0,  6'd4}: s1rd7 <= 4;
	     {1'd0,  6'd5}: s1rd7 <= 5;
	     {1'd0,  6'd6}: s1rd7 <= 6;
	     {1'd0,  6'd7}: s1rd7 <= 7;
	     {1'd0,  6'd8}: s1rd7 <= 8;
	     {1'd0,  6'd9}: s1rd7 <= 9;
	     {1'd0,  6'd10}: s1rd7 <= 10;
	     {1'd0,  6'd11}: s1rd7 <= 11;
	     {1'd0,  6'd12}: s1rd7 <= 12;
	     {1'd0,  6'd13}: s1rd7 <= 13;
	     {1'd0,  6'd14}: s1rd7 <= 14;
	     {1'd0,  6'd15}: s1rd7 <= 15;
	     {1'd0,  6'd16}: s1rd7 <= 16;
	     {1'd0,  6'd17}: s1rd7 <= 17;
	     {1'd0,  6'd18}: s1rd7 <= 18;
	     {1'd0,  6'd19}: s1rd7 <= 19;
	     {1'd0,  6'd20}: s1rd7 <= 20;
	     {1'd0,  6'd21}: s1rd7 <= 21;
	     {1'd0,  6'd22}: s1rd7 <= 22;
	     {1'd0,  6'd23}: s1rd7 <= 23;
	     {1'd0,  6'd24}: s1rd7 <= 24;
	     {1'd0,  6'd25}: s1rd7 <= 25;
	     {1'd0,  6'd26}: s1rd7 <= 26;
	     {1'd0,  6'd27}: s1rd7 <= 27;
	     {1'd0,  6'd28}: s1rd7 <= 28;
	     {1'd0,  6'd29}: s1rd7 <= 29;
	     {1'd0,  6'd30}: s1rd7 <= 30;
	     {1'd0,  6'd31}: s1rd7 <= 31;
	     {1'd0,  6'd32}: s1rd7 <= 32;
	     {1'd0,  6'd33}: s1rd7 <= 33;
	     {1'd0,  6'd34}: s1rd7 <= 34;
	     {1'd0,  6'd35}: s1rd7 <= 35;
	     {1'd0,  6'd36}: s1rd7 <= 36;
	     {1'd0,  6'd37}: s1rd7 <= 37;
	     {1'd0,  6'd38}: s1rd7 <= 38;
	     {1'd0,  6'd39}: s1rd7 <= 39;
	     {1'd0,  6'd40}: s1rd7 <= 40;
	     {1'd0,  6'd41}: s1rd7 <= 41;
	     {1'd0,  6'd42}: s1rd7 <= 42;
	     {1'd0,  6'd43}: s1rd7 <= 43;
	     {1'd0,  6'd44}: s1rd7 <= 44;
	     {1'd0,  6'd45}: s1rd7 <= 45;
	     {1'd0,  6'd46}: s1rd7 <= 46;
	     {1'd0,  6'd47}: s1rd7 <= 47;
	     {1'd0,  6'd48}: s1rd7 <= 48;
	     {1'd0,  6'd49}: s1rd7 <= 49;
	     {1'd0,  6'd50}: s1rd7 <= 50;
	     {1'd0,  6'd51}: s1rd7 <= 51;
	     {1'd0,  6'd52}: s1rd7 <= 52;
	     {1'd0,  6'd53}: s1rd7 <= 53;
	     {1'd0,  6'd54}: s1rd7 <= 54;
	     {1'd0,  6'd55}: s1rd7 <= 55;
	     {1'd0,  6'd56}: s1rd7 <= 56;
	     {1'd0,  6'd57}: s1rd7 <= 57;
	     {1'd0,  6'd58}: s1rd7 <= 58;
	     {1'd0,  6'd59}: s1rd7 <= 59;
	     {1'd0,  6'd60}: s1rd7 <= 60;
	     {1'd0,  6'd61}: s1rd7 <= 61;
	     {1'd0,  6'd62}: s1rd7 <= 62;
	     {1'd0,  6'd63}: s1rd7 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd8 <= 48;
	     {1'd0,  6'd1}: s1rd8 <= 49;
	     {1'd0,  6'd2}: s1rd8 <= 50;
	     {1'd0,  6'd3}: s1rd8 <= 51;
	     {1'd0,  6'd4}: s1rd8 <= 52;
	     {1'd0,  6'd5}: s1rd8 <= 53;
	     {1'd0,  6'd6}: s1rd8 <= 54;
	     {1'd0,  6'd7}: s1rd8 <= 55;
	     {1'd0,  6'd8}: s1rd8 <= 56;
	     {1'd0,  6'd9}: s1rd8 <= 57;
	     {1'd0,  6'd10}: s1rd8 <= 58;
	     {1'd0,  6'd11}: s1rd8 <= 59;
	     {1'd0,  6'd12}: s1rd8 <= 60;
	     {1'd0,  6'd13}: s1rd8 <= 61;
	     {1'd0,  6'd14}: s1rd8 <= 62;
	     {1'd0,  6'd15}: s1rd8 <= 63;
	     {1'd0,  6'd16}: s1rd8 <= 32;
	     {1'd0,  6'd17}: s1rd8 <= 33;
	     {1'd0,  6'd18}: s1rd8 <= 34;
	     {1'd0,  6'd19}: s1rd8 <= 35;
	     {1'd0,  6'd20}: s1rd8 <= 36;
	     {1'd0,  6'd21}: s1rd8 <= 37;
	     {1'd0,  6'd22}: s1rd8 <= 38;
	     {1'd0,  6'd23}: s1rd8 <= 39;
	     {1'd0,  6'd24}: s1rd8 <= 40;
	     {1'd0,  6'd25}: s1rd8 <= 41;
	     {1'd0,  6'd26}: s1rd8 <= 42;
	     {1'd0,  6'd27}: s1rd8 <= 43;
	     {1'd0,  6'd28}: s1rd8 <= 44;
	     {1'd0,  6'd29}: s1rd8 <= 45;
	     {1'd0,  6'd30}: s1rd8 <= 46;
	     {1'd0,  6'd31}: s1rd8 <= 47;
	     {1'd0,  6'd32}: s1rd8 <= 16;
	     {1'd0,  6'd33}: s1rd8 <= 17;
	     {1'd0,  6'd34}: s1rd8 <= 18;
	     {1'd0,  6'd35}: s1rd8 <= 19;
	     {1'd0,  6'd36}: s1rd8 <= 20;
	     {1'd0,  6'd37}: s1rd8 <= 21;
	     {1'd0,  6'd38}: s1rd8 <= 22;
	     {1'd0,  6'd39}: s1rd8 <= 23;
	     {1'd0,  6'd40}: s1rd8 <= 24;
	     {1'd0,  6'd41}: s1rd8 <= 25;
	     {1'd0,  6'd42}: s1rd8 <= 26;
	     {1'd0,  6'd43}: s1rd8 <= 27;
	     {1'd0,  6'd44}: s1rd8 <= 28;
	     {1'd0,  6'd45}: s1rd8 <= 29;
	     {1'd0,  6'd46}: s1rd8 <= 30;
	     {1'd0,  6'd47}: s1rd8 <= 31;
	     {1'd0,  6'd48}: s1rd8 <= 0;
	     {1'd0,  6'd49}: s1rd8 <= 1;
	     {1'd0,  6'd50}: s1rd8 <= 2;
	     {1'd0,  6'd51}: s1rd8 <= 3;
	     {1'd0,  6'd52}: s1rd8 <= 4;
	     {1'd0,  6'd53}: s1rd8 <= 5;
	     {1'd0,  6'd54}: s1rd8 <= 6;
	     {1'd0,  6'd55}: s1rd8 <= 7;
	     {1'd0,  6'd56}: s1rd8 <= 8;
	     {1'd0,  6'd57}: s1rd8 <= 9;
	     {1'd0,  6'd58}: s1rd8 <= 10;
	     {1'd0,  6'd59}: s1rd8 <= 11;
	     {1'd0,  6'd60}: s1rd8 <= 12;
	     {1'd0,  6'd61}: s1rd8 <= 13;
	     {1'd0,  6'd62}: s1rd8 <= 14;
	     {1'd0,  6'd63}: s1rd8 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd8 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd9 <= 32;
	     {1'd0,  6'd1}: s1rd9 <= 33;
	     {1'd0,  6'd2}: s1rd9 <= 34;
	     {1'd0,  6'd3}: s1rd9 <= 35;
	     {1'd0,  6'd4}: s1rd9 <= 36;
	     {1'd0,  6'd5}: s1rd9 <= 37;
	     {1'd0,  6'd6}: s1rd9 <= 38;
	     {1'd0,  6'd7}: s1rd9 <= 39;
	     {1'd0,  6'd8}: s1rd9 <= 40;
	     {1'd0,  6'd9}: s1rd9 <= 41;
	     {1'd0,  6'd10}: s1rd9 <= 42;
	     {1'd0,  6'd11}: s1rd9 <= 43;
	     {1'd0,  6'd12}: s1rd9 <= 44;
	     {1'd0,  6'd13}: s1rd9 <= 45;
	     {1'd0,  6'd14}: s1rd9 <= 46;
	     {1'd0,  6'd15}: s1rd9 <= 47;
	     {1'd0,  6'd16}: s1rd9 <= 48;
	     {1'd0,  6'd17}: s1rd9 <= 49;
	     {1'd0,  6'd18}: s1rd9 <= 50;
	     {1'd0,  6'd19}: s1rd9 <= 51;
	     {1'd0,  6'd20}: s1rd9 <= 52;
	     {1'd0,  6'd21}: s1rd9 <= 53;
	     {1'd0,  6'd22}: s1rd9 <= 54;
	     {1'd0,  6'd23}: s1rd9 <= 55;
	     {1'd0,  6'd24}: s1rd9 <= 56;
	     {1'd0,  6'd25}: s1rd9 <= 57;
	     {1'd0,  6'd26}: s1rd9 <= 58;
	     {1'd0,  6'd27}: s1rd9 <= 59;
	     {1'd0,  6'd28}: s1rd9 <= 60;
	     {1'd0,  6'd29}: s1rd9 <= 61;
	     {1'd0,  6'd30}: s1rd9 <= 62;
	     {1'd0,  6'd31}: s1rd9 <= 63;
	     {1'd0,  6'd32}: s1rd9 <= 0;
	     {1'd0,  6'd33}: s1rd9 <= 1;
	     {1'd0,  6'd34}: s1rd9 <= 2;
	     {1'd0,  6'd35}: s1rd9 <= 3;
	     {1'd0,  6'd36}: s1rd9 <= 4;
	     {1'd0,  6'd37}: s1rd9 <= 5;
	     {1'd0,  6'd38}: s1rd9 <= 6;
	     {1'd0,  6'd39}: s1rd9 <= 7;
	     {1'd0,  6'd40}: s1rd9 <= 8;
	     {1'd0,  6'd41}: s1rd9 <= 9;
	     {1'd0,  6'd42}: s1rd9 <= 10;
	     {1'd0,  6'd43}: s1rd9 <= 11;
	     {1'd0,  6'd44}: s1rd9 <= 12;
	     {1'd0,  6'd45}: s1rd9 <= 13;
	     {1'd0,  6'd46}: s1rd9 <= 14;
	     {1'd0,  6'd47}: s1rd9 <= 15;
	     {1'd0,  6'd48}: s1rd9 <= 16;
	     {1'd0,  6'd49}: s1rd9 <= 17;
	     {1'd0,  6'd50}: s1rd9 <= 18;
	     {1'd0,  6'd51}: s1rd9 <= 19;
	     {1'd0,  6'd52}: s1rd9 <= 20;
	     {1'd0,  6'd53}: s1rd9 <= 21;
	     {1'd0,  6'd54}: s1rd9 <= 22;
	     {1'd0,  6'd55}: s1rd9 <= 23;
	     {1'd0,  6'd56}: s1rd9 <= 24;
	     {1'd0,  6'd57}: s1rd9 <= 25;
	     {1'd0,  6'd58}: s1rd9 <= 26;
	     {1'd0,  6'd59}: s1rd9 <= 27;
	     {1'd0,  6'd60}: s1rd9 <= 28;
	     {1'd0,  6'd61}: s1rd9 <= 29;
	     {1'd0,  6'd62}: s1rd9 <= 30;
	     {1'd0,  6'd63}: s1rd9 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd9 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd10 <= 16;
	     {1'd0,  6'd1}: s1rd10 <= 17;
	     {1'd0,  6'd2}: s1rd10 <= 18;
	     {1'd0,  6'd3}: s1rd10 <= 19;
	     {1'd0,  6'd4}: s1rd10 <= 20;
	     {1'd0,  6'd5}: s1rd10 <= 21;
	     {1'd0,  6'd6}: s1rd10 <= 22;
	     {1'd0,  6'd7}: s1rd10 <= 23;
	     {1'd0,  6'd8}: s1rd10 <= 24;
	     {1'd0,  6'd9}: s1rd10 <= 25;
	     {1'd0,  6'd10}: s1rd10 <= 26;
	     {1'd0,  6'd11}: s1rd10 <= 27;
	     {1'd0,  6'd12}: s1rd10 <= 28;
	     {1'd0,  6'd13}: s1rd10 <= 29;
	     {1'd0,  6'd14}: s1rd10 <= 30;
	     {1'd0,  6'd15}: s1rd10 <= 31;
	     {1'd0,  6'd16}: s1rd10 <= 0;
	     {1'd0,  6'd17}: s1rd10 <= 1;
	     {1'd0,  6'd18}: s1rd10 <= 2;
	     {1'd0,  6'd19}: s1rd10 <= 3;
	     {1'd0,  6'd20}: s1rd10 <= 4;
	     {1'd0,  6'd21}: s1rd10 <= 5;
	     {1'd0,  6'd22}: s1rd10 <= 6;
	     {1'd0,  6'd23}: s1rd10 <= 7;
	     {1'd0,  6'd24}: s1rd10 <= 8;
	     {1'd0,  6'd25}: s1rd10 <= 9;
	     {1'd0,  6'd26}: s1rd10 <= 10;
	     {1'd0,  6'd27}: s1rd10 <= 11;
	     {1'd0,  6'd28}: s1rd10 <= 12;
	     {1'd0,  6'd29}: s1rd10 <= 13;
	     {1'd0,  6'd30}: s1rd10 <= 14;
	     {1'd0,  6'd31}: s1rd10 <= 15;
	     {1'd0,  6'd32}: s1rd10 <= 48;
	     {1'd0,  6'd33}: s1rd10 <= 49;
	     {1'd0,  6'd34}: s1rd10 <= 50;
	     {1'd0,  6'd35}: s1rd10 <= 51;
	     {1'd0,  6'd36}: s1rd10 <= 52;
	     {1'd0,  6'd37}: s1rd10 <= 53;
	     {1'd0,  6'd38}: s1rd10 <= 54;
	     {1'd0,  6'd39}: s1rd10 <= 55;
	     {1'd0,  6'd40}: s1rd10 <= 56;
	     {1'd0,  6'd41}: s1rd10 <= 57;
	     {1'd0,  6'd42}: s1rd10 <= 58;
	     {1'd0,  6'd43}: s1rd10 <= 59;
	     {1'd0,  6'd44}: s1rd10 <= 60;
	     {1'd0,  6'd45}: s1rd10 <= 61;
	     {1'd0,  6'd46}: s1rd10 <= 62;
	     {1'd0,  6'd47}: s1rd10 <= 63;
	     {1'd0,  6'd48}: s1rd10 <= 32;
	     {1'd0,  6'd49}: s1rd10 <= 33;
	     {1'd0,  6'd50}: s1rd10 <= 34;
	     {1'd0,  6'd51}: s1rd10 <= 35;
	     {1'd0,  6'd52}: s1rd10 <= 36;
	     {1'd0,  6'd53}: s1rd10 <= 37;
	     {1'd0,  6'd54}: s1rd10 <= 38;
	     {1'd0,  6'd55}: s1rd10 <= 39;
	     {1'd0,  6'd56}: s1rd10 <= 40;
	     {1'd0,  6'd57}: s1rd10 <= 41;
	     {1'd0,  6'd58}: s1rd10 <= 42;
	     {1'd0,  6'd59}: s1rd10 <= 43;
	     {1'd0,  6'd60}: s1rd10 <= 44;
	     {1'd0,  6'd61}: s1rd10 <= 45;
	     {1'd0,  6'd62}: s1rd10 <= 46;
	     {1'd0,  6'd63}: s1rd10 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd10 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd11 <= 0;
	     {1'd0,  6'd1}: s1rd11 <= 1;
	     {1'd0,  6'd2}: s1rd11 <= 2;
	     {1'd0,  6'd3}: s1rd11 <= 3;
	     {1'd0,  6'd4}: s1rd11 <= 4;
	     {1'd0,  6'd5}: s1rd11 <= 5;
	     {1'd0,  6'd6}: s1rd11 <= 6;
	     {1'd0,  6'd7}: s1rd11 <= 7;
	     {1'd0,  6'd8}: s1rd11 <= 8;
	     {1'd0,  6'd9}: s1rd11 <= 9;
	     {1'd0,  6'd10}: s1rd11 <= 10;
	     {1'd0,  6'd11}: s1rd11 <= 11;
	     {1'd0,  6'd12}: s1rd11 <= 12;
	     {1'd0,  6'd13}: s1rd11 <= 13;
	     {1'd0,  6'd14}: s1rd11 <= 14;
	     {1'd0,  6'd15}: s1rd11 <= 15;
	     {1'd0,  6'd16}: s1rd11 <= 16;
	     {1'd0,  6'd17}: s1rd11 <= 17;
	     {1'd0,  6'd18}: s1rd11 <= 18;
	     {1'd0,  6'd19}: s1rd11 <= 19;
	     {1'd0,  6'd20}: s1rd11 <= 20;
	     {1'd0,  6'd21}: s1rd11 <= 21;
	     {1'd0,  6'd22}: s1rd11 <= 22;
	     {1'd0,  6'd23}: s1rd11 <= 23;
	     {1'd0,  6'd24}: s1rd11 <= 24;
	     {1'd0,  6'd25}: s1rd11 <= 25;
	     {1'd0,  6'd26}: s1rd11 <= 26;
	     {1'd0,  6'd27}: s1rd11 <= 27;
	     {1'd0,  6'd28}: s1rd11 <= 28;
	     {1'd0,  6'd29}: s1rd11 <= 29;
	     {1'd0,  6'd30}: s1rd11 <= 30;
	     {1'd0,  6'd31}: s1rd11 <= 31;
	     {1'd0,  6'd32}: s1rd11 <= 32;
	     {1'd0,  6'd33}: s1rd11 <= 33;
	     {1'd0,  6'd34}: s1rd11 <= 34;
	     {1'd0,  6'd35}: s1rd11 <= 35;
	     {1'd0,  6'd36}: s1rd11 <= 36;
	     {1'd0,  6'd37}: s1rd11 <= 37;
	     {1'd0,  6'd38}: s1rd11 <= 38;
	     {1'd0,  6'd39}: s1rd11 <= 39;
	     {1'd0,  6'd40}: s1rd11 <= 40;
	     {1'd0,  6'd41}: s1rd11 <= 41;
	     {1'd0,  6'd42}: s1rd11 <= 42;
	     {1'd0,  6'd43}: s1rd11 <= 43;
	     {1'd0,  6'd44}: s1rd11 <= 44;
	     {1'd0,  6'd45}: s1rd11 <= 45;
	     {1'd0,  6'd46}: s1rd11 <= 46;
	     {1'd0,  6'd47}: s1rd11 <= 47;
	     {1'd0,  6'd48}: s1rd11 <= 48;
	     {1'd0,  6'd49}: s1rd11 <= 49;
	     {1'd0,  6'd50}: s1rd11 <= 50;
	     {1'd0,  6'd51}: s1rd11 <= 51;
	     {1'd0,  6'd52}: s1rd11 <= 52;
	     {1'd0,  6'd53}: s1rd11 <= 53;
	     {1'd0,  6'd54}: s1rd11 <= 54;
	     {1'd0,  6'd55}: s1rd11 <= 55;
	     {1'd0,  6'd56}: s1rd11 <= 56;
	     {1'd0,  6'd57}: s1rd11 <= 57;
	     {1'd0,  6'd58}: s1rd11 <= 58;
	     {1'd0,  6'd59}: s1rd11 <= 59;
	     {1'd0,  6'd60}: s1rd11 <= 60;
	     {1'd0,  6'd61}: s1rd11 <= 61;
	     {1'd0,  6'd62}: s1rd11 <= 62;
	     {1'd0,  6'd63}: s1rd11 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd11 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd12 <= 48;
	     {1'd0,  6'd1}: s1rd12 <= 49;
	     {1'd0,  6'd2}: s1rd12 <= 50;
	     {1'd0,  6'd3}: s1rd12 <= 51;
	     {1'd0,  6'd4}: s1rd12 <= 52;
	     {1'd0,  6'd5}: s1rd12 <= 53;
	     {1'd0,  6'd6}: s1rd12 <= 54;
	     {1'd0,  6'd7}: s1rd12 <= 55;
	     {1'd0,  6'd8}: s1rd12 <= 56;
	     {1'd0,  6'd9}: s1rd12 <= 57;
	     {1'd0,  6'd10}: s1rd12 <= 58;
	     {1'd0,  6'd11}: s1rd12 <= 59;
	     {1'd0,  6'd12}: s1rd12 <= 60;
	     {1'd0,  6'd13}: s1rd12 <= 61;
	     {1'd0,  6'd14}: s1rd12 <= 62;
	     {1'd0,  6'd15}: s1rd12 <= 63;
	     {1'd0,  6'd16}: s1rd12 <= 32;
	     {1'd0,  6'd17}: s1rd12 <= 33;
	     {1'd0,  6'd18}: s1rd12 <= 34;
	     {1'd0,  6'd19}: s1rd12 <= 35;
	     {1'd0,  6'd20}: s1rd12 <= 36;
	     {1'd0,  6'd21}: s1rd12 <= 37;
	     {1'd0,  6'd22}: s1rd12 <= 38;
	     {1'd0,  6'd23}: s1rd12 <= 39;
	     {1'd0,  6'd24}: s1rd12 <= 40;
	     {1'd0,  6'd25}: s1rd12 <= 41;
	     {1'd0,  6'd26}: s1rd12 <= 42;
	     {1'd0,  6'd27}: s1rd12 <= 43;
	     {1'd0,  6'd28}: s1rd12 <= 44;
	     {1'd0,  6'd29}: s1rd12 <= 45;
	     {1'd0,  6'd30}: s1rd12 <= 46;
	     {1'd0,  6'd31}: s1rd12 <= 47;
	     {1'd0,  6'd32}: s1rd12 <= 16;
	     {1'd0,  6'd33}: s1rd12 <= 17;
	     {1'd0,  6'd34}: s1rd12 <= 18;
	     {1'd0,  6'd35}: s1rd12 <= 19;
	     {1'd0,  6'd36}: s1rd12 <= 20;
	     {1'd0,  6'd37}: s1rd12 <= 21;
	     {1'd0,  6'd38}: s1rd12 <= 22;
	     {1'd0,  6'd39}: s1rd12 <= 23;
	     {1'd0,  6'd40}: s1rd12 <= 24;
	     {1'd0,  6'd41}: s1rd12 <= 25;
	     {1'd0,  6'd42}: s1rd12 <= 26;
	     {1'd0,  6'd43}: s1rd12 <= 27;
	     {1'd0,  6'd44}: s1rd12 <= 28;
	     {1'd0,  6'd45}: s1rd12 <= 29;
	     {1'd0,  6'd46}: s1rd12 <= 30;
	     {1'd0,  6'd47}: s1rd12 <= 31;
	     {1'd0,  6'd48}: s1rd12 <= 0;
	     {1'd0,  6'd49}: s1rd12 <= 1;
	     {1'd0,  6'd50}: s1rd12 <= 2;
	     {1'd0,  6'd51}: s1rd12 <= 3;
	     {1'd0,  6'd52}: s1rd12 <= 4;
	     {1'd0,  6'd53}: s1rd12 <= 5;
	     {1'd0,  6'd54}: s1rd12 <= 6;
	     {1'd0,  6'd55}: s1rd12 <= 7;
	     {1'd0,  6'd56}: s1rd12 <= 8;
	     {1'd0,  6'd57}: s1rd12 <= 9;
	     {1'd0,  6'd58}: s1rd12 <= 10;
	     {1'd0,  6'd59}: s1rd12 <= 11;
	     {1'd0,  6'd60}: s1rd12 <= 12;
	     {1'd0,  6'd61}: s1rd12 <= 13;
	     {1'd0,  6'd62}: s1rd12 <= 14;
	     {1'd0,  6'd63}: s1rd12 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd12 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd13 <= 32;
	     {1'd0,  6'd1}: s1rd13 <= 33;
	     {1'd0,  6'd2}: s1rd13 <= 34;
	     {1'd0,  6'd3}: s1rd13 <= 35;
	     {1'd0,  6'd4}: s1rd13 <= 36;
	     {1'd0,  6'd5}: s1rd13 <= 37;
	     {1'd0,  6'd6}: s1rd13 <= 38;
	     {1'd0,  6'd7}: s1rd13 <= 39;
	     {1'd0,  6'd8}: s1rd13 <= 40;
	     {1'd0,  6'd9}: s1rd13 <= 41;
	     {1'd0,  6'd10}: s1rd13 <= 42;
	     {1'd0,  6'd11}: s1rd13 <= 43;
	     {1'd0,  6'd12}: s1rd13 <= 44;
	     {1'd0,  6'd13}: s1rd13 <= 45;
	     {1'd0,  6'd14}: s1rd13 <= 46;
	     {1'd0,  6'd15}: s1rd13 <= 47;
	     {1'd0,  6'd16}: s1rd13 <= 48;
	     {1'd0,  6'd17}: s1rd13 <= 49;
	     {1'd0,  6'd18}: s1rd13 <= 50;
	     {1'd0,  6'd19}: s1rd13 <= 51;
	     {1'd0,  6'd20}: s1rd13 <= 52;
	     {1'd0,  6'd21}: s1rd13 <= 53;
	     {1'd0,  6'd22}: s1rd13 <= 54;
	     {1'd0,  6'd23}: s1rd13 <= 55;
	     {1'd0,  6'd24}: s1rd13 <= 56;
	     {1'd0,  6'd25}: s1rd13 <= 57;
	     {1'd0,  6'd26}: s1rd13 <= 58;
	     {1'd0,  6'd27}: s1rd13 <= 59;
	     {1'd0,  6'd28}: s1rd13 <= 60;
	     {1'd0,  6'd29}: s1rd13 <= 61;
	     {1'd0,  6'd30}: s1rd13 <= 62;
	     {1'd0,  6'd31}: s1rd13 <= 63;
	     {1'd0,  6'd32}: s1rd13 <= 0;
	     {1'd0,  6'd33}: s1rd13 <= 1;
	     {1'd0,  6'd34}: s1rd13 <= 2;
	     {1'd0,  6'd35}: s1rd13 <= 3;
	     {1'd0,  6'd36}: s1rd13 <= 4;
	     {1'd0,  6'd37}: s1rd13 <= 5;
	     {1'd0,  6'd38}: s1rd13 <= 6;
	     {1'd0,  6'd39}: s1rd13 <= 7;
	     {1'd0,  6'd40}: s1rd13 <= 8;
	     {1'd0,  6'd41}: s1rd13 <= 9;
	     {1'd0,  6'd42}: s1rd13 <= 10;
	     {1'd0,  6'd43}: s1rd13 <= 11;
	     {1'd0,  6'd44}: s1rd13 <= 12;
	     {1'd0,  6'd45}: s1rd13 <= 13;
	     {1'd0,  6'd46}: s1rd13 <= 14;
	     {1'd0,  6'd47}: s1rd13 <= 15;
	     {1'd0,  6'd48}: s1rd13 <= 16;
	     {1'd0,  6'd49}: s1rd13 <= 17;
	     {1'd0,  6'd50}: s1rd13 <= 18;
	     {1'd0,  6'd51}: s1rd13 <= 19;
	     {1'd0,  6'd52}: s1rd13 <= 20;
	     {1'd0,  6'd53}: s1rd13 <= 21;
	     {1'd0,  6'd54}: s1rd13 <= 22;
	     {1'd0,  6'd55}: s1rd13 <= 23;
	     {1'd0,  6'd56}: s1rd13 <= 24;
	     {1'd0,  6'd57}: s1rd13 <= 25;
	     {1'd0,  6'd58}: s1rd13 <= 26;
	     {1'd0,  6'd59}: s1rd13 <= 27;
	     {1'd0,  6'd60}: s1rd13 <= 28;
	     {1'd0,  6'd61}: s1rd13 <= 29;
	     {1'd0,  6'd62}: s1rd13 <= 30;
	     {1'd0,  6'd63}: s1rd13 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd13 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd14 <= 16;
	     {1'd0,  6'd1}: s1rd14 <= 17;
	     {1'd0,  6'd2}: s1rd14 <= 18;
	     {1'd0,  6'd3}: s1rd14 <= 19;
	     {1'd0,  6'd4}: s1rd14 <= 20;
	     {1'd0,  6'd5}: s1rd14 <= 21;
	     {1'd0,  6'd6}: s1rd14 <= 22;
	     {1'd0,  6'd7}: s1rd14 <= 23;
	     {1'd0,  6'd8}: s1rd14 <= 24;
	     {1'd0,  6'd9}: s1rd14 <= 25;
	     {1'd0,  6'd10}: s1rd14 <= 26;
	     {1'd0,  6'd11}: s1rd14 <= 27;
	     {1'd0,  6'd12}: s1rd14 <= 28;
	     {1'd0,  6'd13}: s1rd14 <= 29;
	     {1'd0,  6'd14}: s1rd14 <= 30;
	     {1'd0,  6'd15}: s1rd14 <= 31;
	     {1'd0,  6'd16}: s1rd14 <= 0;
	     {1'd0,  6'd17}: s1rd14 <= 1;
	     {1'd0,  6'd18}: s1rd14 <= 2;
	     {1'd0,  6'd19}: s1rd14 <= 3;
	     {1'd0,  6'd20}: s1rd14 <= 4;
	     {1'd0,  6'd21}: s1rd14 <= 5;
	     {1'd0,  6'd22}: s1rd14 <= 6;
	     {1'd0,  6'd23}: s1rd14 <= 7;
	     {1'd0,  6'd24}: s1rd14 <= 8;
	     {1'd0,  6'd25}: s1rd14 <= 9;
	     {1'd0,  6'd26}: s1rd14 <= 10;
	     {1'd0,  6'd27}: s1rd14 <= 11;
	     {1'd0,  6'd28}: s1rd14 <= 12;
	     {1'd0,  6'd29}: s1rd14 <= 13;
	     {1'd0,  6'd30}: s1rd14 <= 14;
	     {1'd0,  6'd31}: s1rd14 <= 15;
	     {1'd0,  6'd32}: s1rd14 <= 48;
	     {1'd0,  6'd33}: s1rd14 <= 49;
	     {1'd0,  6'd34}: s1rd14 <= 50;
	     {1'd0,  6'd35}: s1rd14 <= 51;
	     {1'd0,  6'd36}: s1rd14 <= 52;
	     {1'd0,  6'd37}: s1rd14 <= 53;
	     {1'd0,  6'd38}: s1rd14 <= 54;
	     {1'd0,  6'd39}: s1rd14 <= 55;
	     {1'd0,  6'd40}: s1rd14 <= 56;
	     {1'd0,  6'd41}: s1rd14 <= 57;
	     {1'd0,  6'd42}: s1rd14 <= 58;
	     {1'd0,  6'd43}: s1rd14 <= 59;
	     {1'd0,  6'd44}: s1rd14 <= 60;
	     {1'd0,  6'd45}: s1rd14 <= 61;
	     {1'd0,  6'd46}: s1rd14 <= 62;
	     {1'd0,  6'd47}: s1rd14 <= 63;
	     {1'd0,  6'd48}: s1rd14 <= 32;
	     {1'd0,  6'd49}: s1rd14 <= 33;
	     {1'd0,  6'd50}: s1rd14 <= 34;
	     {1'd0,  6'd51}: s1rd14 <= 35;
	     {1'd0,  6'd52}: s1rd14 <= 36;
	     {1'd0,  6'd53}: s1rd14 <= 37;
	     {1'd0,  6'd54}: s1rd14 <= 38;
	     {1'd0,  6'd55}: s1rd14 <= 39;
	     {1'd0,  6'd56}: s1rd14 <= 40;
	     {1'd0,  6'd57}: s1rd14 <= 41;
	     {1'd0,  6'd58}: s1rd14 <= 42;
	     {1'd0,  6'd59}: s1rd14 <= 43;
	     {1'd0,  6'd60}: s1rd14 <= 44;
	     {1'd0,  6'd61}: s1rd14 <= 45;
	     {1'd0,  6'd62}: s1rd14 <= 46;
	     {1'd0,  6'd63}: s1rd14 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd14 is "block"
   always @(posedge clk) begin
      case({tm91_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd15 <= 0;
	     {1'd0,  6'd1}: s1rd15 <= 1;
	     {1'd0,  6'd2}: s1rd15 <= 2;
	     {1'd0,  6'd3}: s1rd15 <= 3;
	     {1'd0,  6'd4}: s1rd15 <= 4;
	     {1'd0,  6'd5}: s1rd15 <= 5;
	     {1'd0,  6'd6}: s1rd15 <= 6;
	     {1'd0,  6'd7}: s1rd15 <= 7;
	     {1'd0,  6'd8}: s1rd15 <= 8;
	     {1'd0,  6'd9}: s1rd15 <= 9;
	     {1'd0,  6'd10}: s1rd15 <= 10;
	     {1'd0,  6'd11}: s1rd15 <= 11;
	     {1'd0,  6'd12}: s1rd15 <= 12;
	     {1'd0,  6'd13}: s1rd15 <= 13;
	     {1'd0,  6'd14}: s1rd15 <= 14;
	     {1'd0,  6'd15}: s1rd15 <= 15;
	     {1'd0,  6'd16}: s1rd15 <= 16;
	     {1'd0,  6'd17}: s1rd15 <= 17;
	     {1'd0,  6'd18}: s1rd15 <= 18;
	     {1'd0,  6'd19}: s1rd15 <= 19;
	     {1'd0,  6'd20}: s1rd15 <= 20;
	     {1'd0,  6'd21}: s1rd15 <= 21;
	     {1'd0,  6'd22}: s1rd15 <= 22;
	     {1'd0,  6'd23}: s1rd15 <= 23;
	     {1'd0,  6'd24}: s1rd15 <= 24;
	     {1'd0,  6'd25}: s1rd15 <= 25;
	     {1'd0,  6'd26}: s1rd15 <= 26;
	     {1'd0,  6'd27}: s1rd15 <= 27;
	     {1'd0,  6'd28}: s1rd15 <= 28;
	     {1'd0,  6'd29}: s1rd15 <= 29;
	     {1'd0,  6'd30}: s1rd15 <= 30;
	     {1'd0,  6'd31}: s1rd15 <= 31;
	     {1'd0,  6'd32}: s1rd15 <= 32;
	     {1'd0,  6'd33}: s1rd15 <= 33;
	     {1'd0,  6'd34}: s1rd15 <= 34;
	     {1'd0,  6'd35}: s1rd15 <= 35;
	     {1'd0,  6'd36}: s1rd15 <= 36;
	     {1'd0,  6'd37}: s1rd15 <= 37;
	     {1'd0,  6'd38}: s1rd15 <= 38;
	     {1'd0,  6'd39}: s1rd15 <= 39;
	     {1'd0,  6'd40}: s1rd15 <= 40;
	     {1'd0,  6'd41}: s1rd15 <= 41;
	     {1'd0,  6'd42}: s1rd15 <= 42;
	     {1'd0,  6'd43}: s1rd15 <= 43;
	     {1'd0,  6'd44}: s1rd15 <= 44;
	     {1'd0,  6'd45}: s1rd15 <= 45;
	     {1'd0,  6'd46}: s1rd15 <= 46;
	     {1'd0,  6'd47}: s1rd15 <= 47;
	     {1'd0,  6'd48}: s1rd15 <= 48;
	     {1'd0,  6'd49}: s1rd15 <= 49;
	     {1'd0,  6'd50}: s1rd15 <= 50;
	     {1'd0,  6'd51}: s1rd15 <= 51;
	     {1'd0,  6'd52}: s1rd15 <= 52;
	     {1'd0,  6'd53}: s1rd15 <= 53;
	     {1'd0,  6'd54}: s1rd15 <= 54;
	     {1'd0,  6'd55}: s1rd15 <= 55;
	     {1'd0,  6'd56}: s1rd15 <= 56;
	     {1'd0,  6'd57}: s1rd15 <= 57;
	     {1'd0,  6'd58}: s1rd15 <= 58;
	     {1'd0,  6'd59}: s1rd15 <= 59;
	     {1'd0,  6'd60}: s1rd15 <= 60;
	     {1'd0,  6'd61}: s1rd15 <= 61;
	     {1'd0,  6'd62}: s1rd15 <= 62;
	     {1'd0,  6'd63}: s1rd15 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd15 is "block"
    swNet14756 sw(tm91_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7, t8, s8, t9, s9, t10, s10, t11, s11, t12, s12, t13, s13, t14, s14, t15, s15);

   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr0 <= 48;
	      {1'd0, 6'd1}: s2wr0 <= 49;
	      {1'd0, 6'd2}: s2wr0 <= 50;
	      {1'd0, 6'd3}: s2wr0 <= 51;
	      {1'd0, 6'd4}: s2wr0 <= 52;
	      {1'd0, 6'd5}: s2wr0 <= 53;
	      {1'd0, 6'd6}: s2wr0 <= 54;
	      {1'd0, 6'd7}: s2wr0 <= 55;
	      {1'd0, 6'd8}: s2wr0 <= 56;
	      {1'd0, 6'd9}: s2wr0 <= 57;
	      {1'd0, 6'd10}: s2wr0 <= 58;
	      {1'd0, 6'd11}: s2wr0 <= 59;
	      {1'd0, 6'd12}: s2wr0 <= 60;
	      {1'd0, 6'd13}: s2wr0 <= 61;
	      {1'd0, 6'd14}: s2wr0 <= 62;
	      {1'd0, 6'd15}: s2wr0 <= 63;
	      {1'd0, 6'd16}: s2wr0 <= 32;
	      {1'd0, 6'd17}: s2wr0 <= 33;
	      {1'd0, 6'd18}: s2wr0 <= 34;
	      {1'd0, 6'd19}: s2wr0 <= 35;
	      {1'd0, 6'd20}: s2wr0 <= 36;
	      {1'd0, 6'd21}: s2wr0 <= 37;
	      {1'd0, 6'd22}: s2wr0 <= 38;
	      {1'd0, 6'd23}: s2wr0 <= 39;
	      {1'd0, 6'd24}: s2wr0 <= 40;
	      {1'd0, 6'd25}: s2wr0 <= 41;
	      {1'd0, 6'd26}: s2wr0 <= 42;
	      {1'd0, 6'd27}: s2wr0 <= 43;
	      {1'd0, 6'd28}: s2wr0 <= 44;
	      {1'd0, 6'd29}: s2wr0 <= 45;
	      {1'd0, 6'd30}: s2wr0 <= 46;
	      {1'd0, 6'd31}: s2wr0 <= 47;
	      {1'd0, 6'd32}: s2wr0 <= 16;
	      {1'd0, 6'd33}: s2wr0 <= 17;
	      {1'd0, 6'd34}: s2wr0 <= 18;
	      {1'd0, 6'd35}: s2wr0 <= 19;
	      {1'd0, 6'd36}: s2wr0 <= 20;
	      {1'd0, 6'd37}: s2wr0 <= 21;
	      {1'd0, 6'd38}: s2wr0 <= 22;
	      {1'd0, 6'd39}: s2wr0 <= 23;
	      {1'd0, 6'd40}: s2wr0 <= 24;
	      {1'd0, 6'd41}: s2wr0 <= 25;
	      {1'd0, 6'd42}: s2wr0 <= 26;
	      {1'd0, 6'd43}: s2wr0 <= 27;
	      {1'd0, 6'd44}: s2wr0 <= 28;
	      {1'd0, 6'd45}: s2wr0 <= 29;
	      {1'd0, 6'd46}: s2wr0 <= 30;
	      {1'd0, 6'd47}: s2wr0 <= 31;
	      {1'd0, 6'd48}: s2wr0 <= 0;
	      {1'd0, 6'd49}: s2wr0 <= 1;
	      {1'd0, 6'd50}: s2wr0 <= 2;
	      {1'd0, 6'd51}: s2wr0 <= 3;
	      {1'd0, 6'd52}: s2wr0 <= 4;
	      {1'd0, 6'd53}: s2wr0 <= 5;
	      {1'd0, 6'd54}: s2wr0 <= 6;
	      {1'd0, 6'd55}: s2wr0 <= 7;
	      {1'd0, 6'd56}: s2wr0 <= 8;
	      {1'd0, 6'd57}: s2wr0 <= 9;
	      {1'd0, 6'd58}: s2wr0 <= 10;
	      {1'd0, 6'd59}: s2wr0 <= 11;
	      {1'd0, 6'd60}: s2wr0 <= 12;
	      {1'd0, 6'd61}: s2wr0 <= 13;
	      {1'd0, 6'd62}: s2wr0 <= 14;
	      {1'd0, 6'd63}: s2wr0 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr1 <= 32;
	      {1'd0, 6'd1}: s2wr1 <= 33;
	      {1'd0, 6'd2}: s2wr1 <= 34;
	      {1'd0, 6'd3}: s2wr1 <= 35;
	      {1'd0, 6'd4}: s2wr1 <= 36;
	      {1'd0, 6'd5}: s2wr1 <= 37;
	      {1'd0, 6'd6}: s2wr1 <= 38;
	      {1'd0, 6'd7}: s2wr1 <= 39;
	      {1'd0, 6'd8}: s2wr1 <= 40;
	      {1'd0, 6'd9}: s2wr1 <= 41;
	      {1'd0, 6'd10}: s2wr1 <= 42;
	      {1'd0, 6'd11}: s2wr1 <= 43;
	      {1'd0, 6'd12}: s2wr1 <= 44;
	      {1'd0, 6'd13}: s2wr1 <= 45;
	      {1'd0, 6'd14}: s2wr1 <= 46;
	      {1'd0, 6'd15}: s2wr1 <= 47;
	      {1'd0, 6'd16}: s2wr1 <= 48;
	      {1'd0, 6'd17}: s2wr1 <= 49;
	      {1'd0, 6'd18}: s2wr1 <= 50;
	      {1'd0, 6'd19}: s2wr1 <= 51;
	      {1'd0, 6'd20}: s2wr1 <= 52;
	      {1'd0, 6'd21}: s2wr1 <= 53;
	      {1'd0, 6'd22}: s2wr1 <= 54;
	      {1'd0, 6'd23}: s2wr1 <= 55;
	      {1'd0, 6'd24}: s2wr1 <= 56;
	      {1'd0, 6'd25}: s2wr1 <= 57;
	      {1'd0, 6'd26}: s2wr1 <= 58;
	      {1'd0, 6'd27}: s2wr1 <= 59;
	      {1'd0, 6'd28}: s2wr1 <= 60;
	      {1'd0, 6'd29}: s2wr1 <= 61;
	      {1'd0, 6'd30}: s2wr1 <= 62;
	      {1'd0, 6'd31}: s2wr1 <= 63;
	      {1'd0, 6'd32}: s2wr1 <= 0;
	      {1'd0, 6'd33}: s2wr1 <= 1;
	      {1'd0, 6'd34}: s2wr1 <= 2;
	      {1'd0, 6'd35}: s2wr1 <= 3;
	      {1'd0, 6'd36}: s2wr1 <= 4;
	      {1'd0, 6'd37}: s2wr1 <= 5;
	      {1'd0, 6'd38}: s2wr1 <= 6;
	      {1'd0, 6'd39}: s2wr1 <= 7;
	      {1'd0, 6'd40}: s2wr1 <= 8;
	      {1'd0, 6'd41}: s2wr1 <= 9;
	      {1'd0, 6'd42}: s2wr1 <= 10;
	      {1'd0, 6'd43}: s2wr1 <= 11;
	      {1'd0, 6'd44}: s2wr1 <= 12;
	      {1'd0, 6'd45}: s2wr1 <= 13;
	      {1'd0, 6'd46}: s2wr1 <= 14;
	      {1'd0, 6'd47}: s2wr1 <= 15;
	      {1'd0, 6'd48}: s2wr1 <= 16;
	      {1'd0, 6'd49}: s2wr1 <= 17;
	      {1'd0, 6'd50}: s2wr1 <= 18;
	      {1'd0, 6'd51}: s2wr1 <= 19;
	      {1'd0, 6'd52}: s2wr1 <= 20;
	      {1'd0, 6'd53}: s2wr1 <= 21;
	      {1'd0, 6'd54}: s2wr1 <= 22;
	      {1'd0, 6'd55}: s2wr1 <= 23;
	      {1'd0, 6'd56}: s2wr1 <= 24;
	      {1'd0, 6'd57}: s2wr1 <= 25;
	      {1'd0, 6'd58}: s2wr1 <= 26;
	      {1'd0, 6'd59}: s2wr1 <= 27;
	      {1'd0, 6'd60}: s2wr1 <= 28;
	      {1'd0, 6'd61}: s2wr1 <= 29;
	      {1'd0, 6'd62}: s2wr1 <= 30;
	      {1'd0, 6'd63}: s2wr1 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr2 <= 16;
	      {1'd0, 6'd1}: s2wr2 <= 17;
	      {1'd0, 6'd2}: s2wr2 <= 18;
	      {1'd0, 6'd3}: s2wr2 <= 19;
	      {1'd0, 6'd4}: s2wr2 <= 20;
	      {1'd0, 6'd5}: s2wr2 <= 21;
	      {1'd0, 6'd6}: s2wr2 <= 22;
	      {1'd0, 6'd7}: s2wr2 <= 23;
	      {1'd0, 6'd8}: s2wr2 <= 24;
	      {1'd0, 6'd9}: s2wr2 <= 25;
	      {1'd0, 6'd10}: s2wr2 <= 26;
	      {1'd0, 6'd11}: s2wr2 <= 27;
	      {1'd0, 6'd12}: s2wr2 <= 28;
	      {1'd0, 6'd13}: s2wr2 <= 29;
	      {1'd0, 6'd14}: s2wr2 <= 30;
	      {1'd0, 6'd15}: s2wr2 <= 31;
	      {1'd0, 6'd16}: s2wr2 <= 0;
	      {1'd0, 6'd17}: s2wr2 <= 1;
	      {1'd0, 6'd18}: s2wr2 <= 2;
	      {1'd0, 6'd19}: s2wr2 <= 3;
	      {1'd0, 6'd20}: s2wr2 <= 4;
	      {1'd0, 6'd21}: s2wr2 <= 5;
	      {1'd0, 6'd22}: s2wr2 <= 6;
	      {1'd0, 6'd23}: s2wr2 <= 7;
	      {1'd0, 6'd24}: s2wr2 <= 8;
	      {1'd0, 6'd25}: s2wr2 <= 9;
	      {1'd0, 6'd26}: s2wr2 <= 10;
	      {1'd0, 6'd27}: s2wr2 <= 11;
	      {1'd0, 6'd28}: s2wr2 <= 12;
	      {1'd0, 6'd29}: s2wr2 <= 13;
	      {1'd0, 6'd30}: s2wr2 <= 14;
	      {1'd0, 6'd31}: s2wr2 <= 15;
	      {1'd0, 6'd32}: s2wr2 <= 48;
	      {1'd0, 6'd33}: s2wr2 <= 49;
	      {1'd0, 6'd34}: s2wr2 <= 50;
	      {1'd0, 6'd35}: s2wr2 <= 51;
	      {1'd0, 6'd36}: s2wr2 <= 52;
	      {1'd0, 6'd37}: s2wr2 <= 53;
	      {1'd0, 6'd38}: s2wr2 <= 54;
	      {1'd0, 6'd39}: s2wr2 <= 55;
	      {1'd0, 6'd40}: s2wr2 <= 56;
	      {1'd0, 6'd41}: s2wr2 <= 57;
	      {1'd0, 6'd42}: s2wr2 <= 58;
	      {1'd0, 6'd43}: s2wr2 <= 59;
	      {1'd0, 6'd44}: s2wr2 <= 60;
	      {1'd0, 6'd45}: s2wr2 <= 61;
	      {1'd0, 6'd46}: s2wr2 <= 62;
	      {1'd0, 6'd47}: s2wr2 <= 63;
	      {1'd0, 6'd48}: s2wr2 <= 32;
	      {1'd0, 6'd49}: s2wr2 <= 33;
	      {1'd0, 6'd50}: s2wr2 <= 34;
	      {1'd0, 6'd51}: s2wr2 <= 35;
	      {1'd0, 6'd52}: s2wr2 <= 36;
	      {1'd0, 6'd53}: s2wr2 <= 37;
	      {1'd0, 6'd54}: s2wr2 <= 38;
	      {1'd0, 6'd55}: s2wr2 <= 39;
	      {1'd0, 6'd56}: s2wr2 <= 40;
	      {1'd0, 6'd57}: s2wr2 <= 41;
	      {1'd0, 6'd58}: s2wr2 <= 42;
	      {1'd0, 6'd59}: s2wr2 <= 43;
	      {1'd0, 6'd60}: s2wr2 <= 44;
	      {1'd0, 6'd61}: s2wr2 <= 45;
	      {1'd0, 6'd62}: s2wr2 <= 46;
	      {1'd0, 6'd63}: s2wr2 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr3 <= 0;
	      {1'd0, 6'd1}: s2wr3 <= 1;
	      {1'd0, 6'd2}: s2wr3 <= 2;
	      {1'd0, 6'd3}: s2wr3 <= 3;
	      {1'd0, 6'd4}: s2wr3 <= 4;
	      {1'd0, 6'd5}: s2wr3 <= 5;
	      {1'd0, 6'd6}: s2wr3 <= 6;
	      {1'd0, 6'd7}: s2wr3 <= 7;
	      {1'd0, 6'd8}: s2wr3 <= 8;
	      {1'd0, 6'd9}: s2wr3 <= 9;
	      {1'd0, 6'd10}: s2wr3 <= 10;
	      {1'd0, 6'd11}: s2wr3 <= 11;
	      {1'd0, 6'd12}: s2wr3 <= 12;
	      {1'd0, 6'd13}: s2wr3 <= 13;
	      {1'd0, 6'd14}: s2wr3 <= 14;
	      {1'd0, 6'd15}: s2wr3 <= 15;
	      {1'd0, 6'd16}: s2wr3 <= 16;
	      {1'd0, 6'd17}: s2wr3 <= 17;
	      {1'd0, 6'd18}: s2wr3 <= 18;
	      {1'd0, 6'd19}: s2wr3 <= 19;
	      {1'd0, 6'd20}: s2wr3 <= 20;
	      {1'd0, 6'd21}: s2wr3 <= 21;
	      {1'd0, 6'd22}: s2wr3 <= 22;
	      {1'd0, 6'd23}: s2wr3 <= 23;
	      {1'd0, 6'd24}: s2wr3 <= 24;
	      {1'd0, 6'd25}: s2wr3 <= 25;
	      {1'd0, 6'd26}: s2wr3 <= 26;
	      {1'd0, 6'd27}: s2wr3 <= 27;
	      {1'd0, 6'd28}: s2wr3 <= 28;
	      {1'd0, 6'd29}: s2wr3 <= 29;
	      {1'd0, 6'd30}: s2wr3 <= 30;
	      {1'd0, 6'd31}: s2wr3 <= 31;
	      {1'd0, 6'd32}: s2wr3 <= 32;
	      {1'd0, 6'd33}: s2wr3 <= 33;
	      {1'd0, 6'd34}: s2wr3 <= 34;
	      {1'd0, 6'd35}: s2wr3 <= 35;
	      {1'd0, 6'd36}: s2wr3 <= 36;
	      {1'd0, 6'd37}: s2wr3 <= 37;
	      {1'd0, 6'd38}: s2wr3 <= 38;
	      {1'd0, 6'd39}: s2wr3 <= 39;
	      {1'd0, 6'd40}: s2wr3 <= 40;
	      {1'd0, 6'd41}: s2wr3 <= 41;
	      {1'd0, 6'd42}: s2wr3 <= 42;
	      {1'd0, 6'd43}: s2wr3 <= 43;
	      {1'd0, 6'd44}: s2wr3 <= 44;
	      {1'd0, 6'd45}: s2wr3 <= 45;
	      {1'd0, 6'd46}: s2wr3 <= 46;
	      {1'd0, 6'd47}: s2wr3 <= 47;
	      {1'd0, 6'd48}: s2wr3 <= 48;
	      {1'd0, 6'd49}: s2wr3 <= 49;
	      {1'd0, 6'd50}: s2wr3 <= 50;
	      {1'd0, 6'd51}: s2wr3 <= 51;
	      {1'd0, 6'd52}: s2wr3 <= 52;
	      {1'd0, 6'd53}: s2wr3 <= 53;
	      {1'd0, 6'd54}: s2wr3 <= 54;
	      {1'd0, 6'd55}: s2wr3 <= 55;
	      {1'd0, 6'd56}: s2wr3 <= 56;
	      {1'd0, 6'd57}: s2wr3 <= 57;
	      {1'd0, 6'd58}: s2wr3 <= 58;
	      {1'd0, 6'd59}: s2wr3 <= 59;
	      {1'd0, 6'd60}: s2wr3 <= 60;
	      {1'd0, 6'd61}: s2wr3 <= 61;
	      {1'd0, 6'd62}: s2wr3 <= 62;
	      {1'd0, 6'd63}: s2wr3 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr4 <= 48;
	      {1'd0, 6'd1}: s2wr4 <= 49;
	      {1'd0, 6'd2}: s2wr4 <= 50;
	      {1'd0, 6'd3}: s2wr4 <= 51;
	      {1'd0, 6'd4}: s2wr4 <= 52;
	      {1'd0, 6'd5}: s2wr4 <= 53;
	      {1'd0, 6'd6}: s2wr4 <= 54;
	      {1'd0, 6'd7}: s2wr4 <= 55;
	      {1'd0, 6'd8}: s2wr4 <= 56;
	      {1'd0, 6'd9}: s2wr4 <= 57;
	      {1'd0, 6'd10}: s2wr4 <= 58;
	      {1'd0, 6'd11}: s2wr4 <= 59;
	      {1'd0, 6'd12}: s2wr4 <= 60;
	      {1'd0, 6'd13}: s2wr4 <= 61;
	      {1'd0, 6'd14}: s2wr4 <= 62;
	      {1'd0, 6'd15}: s2wr4 <= 63;
	      {1'd0, 6'd16}: s2wr4 <= 32;
	      {1'd0, 6'd17}: s2wr4 <= 33;
	      {1'd0, 6'd18}: s2wr4 <= 34;
	      {1'd0, 6'd19}: s2wr4 <= 35;
	      {1'd0, 6'd20}: s2wr4 <= 36;
	      {1'd0, 6'd21}: s2wr4 <= 37;
	      {1'd0, 6'd22}: s2wr4 <= 38;
	      {1'd0, 6'd23}: s2wr4 <= 39;
	      {1'd0, 6'd24}: s2wr4 <= 40;
	      {1'd0, 6'd25}: s2wr4 <= 41;
	      {1'd0, 6'd26}: s2wr4 <= 42;
	      {1'd0, 6'd27}: s2wr4 <= 43;
	      {1'd0, 6'd28}: s2wr4 <= 44;
	      {1'd0, 6'd29}: s2wr4 <= 45;
	      {1'd0, 6'd30}: s2wr4 <= 46;
	      {1'd0, 6'd31}: s2wr4 <= 47;
	      {1'd0, 6'd32}: s2wr4 <= 16;
	      {1'd0, 6'd33}: s2wr4 <= 17;
	      {1'd0, 6'd34}: s2wr4 <= 18;
	      {1'd0, 6'd35}: s2wr4 <= 19;
	      {1'd0, 6'd36}: s2wr4 <= 20;
	      {1'd0, 6'd37}: s2wr4 <= 21;
	      {1'd0, 6'd38}: s2wr4 <= 22;
	      {1'd0, 6'd39}: s2wr4 <= 23;
	      {1'd0, 6'd40}: s2wr4 <= 24;
	      {1'd0, 6'd41}: s2wr4 <= 25;
	      {1'd0, 6'd42}: s2wr4 <= 26;
	      {1'd0, 6'd43}: s2wr4 <= 27;
	      {1'd0, 6'd44}: s2wr4 <= 28;
	      {1'd0, 6'd45}: s2wr4 <= 29;
	      {1'd0, 6'd46}: s2wr4 <= 30;
	      {1'd0, 6'd47}: s2wr4 <= 31;
	      {1'd0, 6'd48}: s2wr4 <= 0;
	      {1'd0, 6'd49}: s2wr4 <= 1;
	      {1'd0, 6'd50}: s2wr4 <= 2;
	      {1'd0, 6'd51}: s2wr4 <= 3;
	      {1'd0, 6'd52}: s2wr4 <= 4;
	      {1'd0, 6'd53}: s2wr4 <= 5;
	      {1'd0, 6'd54}: s2wr4 <= 6;
	      {1'd0, 6'd55}: s2wr4 <= 7;
	      {1'd0, 6'd56}: s2wr4 <= 8;
	      {1'd0, 6'd57}: s2wr4 <= 9;
	      {1'd0, 6'd58}: s2wr4 <= 10;
	      {1'd0, 6'd59}: s2wr4 <= 11;
	      {1'd0, 6'd60}: s2wr4 <= 12;
	      {1'd0, 6'd61}: s2wr4 <= 13;
	      {1'd0, 6'd62}: s2wr4 <= 14;
	      {1'd0, 6'd63}: s2wr4 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr5 <= 32;
	      {1'd0, 6'd1}: s2wr5 <= 33;
	      {1'd0, 6'd2}: s2wr5 <= 34;
	      {1'd0, 6'd3}: s2wr5 <= 35;
	      {1'd0, 6'd4}: s2wr5 <= 36;
	      {1'd0, 6'd5}: s2wr5 <= 37;
	      {1'd0, 6'd6}: s2wr5 <= 38;
	      {1'd0, 6'd7}: s2wr5 <= 39;
	      {1'd0, 6'd8}: s2wr5 <= 40;
	      {1'd0, 6'd9}: s2wr5 <= 41;
	      {1'd0, 6'd10}: s2wr5 <= 42;
	      {1'd0, 6'd11}: s2wr5 <= 43;
	      {1'd0, 6'd12}: s2wr5 <= 44;
	      {1'd0, 6'd13}: s2wr5 <= 45;
	      {1'd0, 6'd14}: s2wr5 <= 46;
	      {1'd0, 6'd15}: s2wr5 <= 47;
	      {1'd0, 6'd16}: s2wr5 <= 48;
	      {1'd0, 6'd17}: s2wr5 <= 49;
	      {1'd0, 6'd18}: s2wr5 <= 50;
	      {1'd0, 6'd19}: s2wr5 <= 51;
	      {1'd0, 6'd20}: s2wr5 <= 52;
	      {1'd0, 6'd21}: s2wr5 <= 53;
	      {1'd0, 6'd22}: s2wr5 <= 54;
	      {1'd0, 6'd23}: s2wr5 <= 55;
	      {1'd0, 6'd24}: s2wr5 <= 56;
	      {1'd0, 6'd25}: s2wr5 <= 57;
	      {1'd0, 6'd26}: s2wr5 <= 58;
	      {1'd0, 6'd27}: s2wr5 <= 59;
	      {1'd0, 6'd28}: s2wr5 <= 60;
	      {1'd0, 6'd29}: s2wr5 <= 61;
	      {1'd0, 6'd30}: s2wr5 <= 62;
	      {1'd0, 6'd31}: s2wr5 <= 63;
	      {1'd0, 6'd32}: s2wr5 <= 0;
	      {1'd0, 6'd33}: s2wr5 <= 1;
	      {1'd0, 6'd34}: s2wr5 <= 2;
	      {1'd0, 6'd35}: s2wr5 <= 3;
	      {1'd0, 6'd36}: s2wr5 <= 4;
	      {1'd0, 6'd37}: s2wr5 <= 5;
	      {1'd0, 6'd38}: s2wr5 <= 6;
	      {1'd0, 6'd39}: s2wr5 <= 7;
	      {1'd0, 6'd40}: s2wr5 <= 8;
	      {1'd0, 6'd41}: s2wr5 <= 9;
	      {1'd0, 6'd42}: s2wr5 <= 10;
	      {1'd0, 6'd43}: s2wr5 <= 11;
	      {1'd0, 6'd44}: s2wr5 <= 12;
	      {1'd0, 6'd45}: s2wr5 <= 13;
	      {1'd0, 6'd46}: s2wr5 <= 14;
	      {1'd0, 6'd47}: s2wr5 <= 15;
	      {1'd0, 6'd48}: s2wr5 <= 16;
	      {1'd0, 6'd49}: s2wr5 <= 17;
	      {1'd0, 6'd50}: s2wr5 <= 18;
	      {1'd0, 6'd51}: s2wr5 <= 19;
	      {1'd0, 6'd52}: s2wr5 <= 20;
	      {1'd0, 6'd53}: s2wr5 <= 21;
	      {1'd0, 6'd54}: s2wr5 <= 22;
	      {1'd0, 6'd55}: s2wr5 <= 23;
	      {1'd0, 6'd56}: s2wr5 <= 24;
	      {1'd0, 6'd57}: s2wr5 <= 25;
	      {1'd0, 6'd58}: s2wr5 <= 26;
	      {1'd0, 6'd59}: s2wr5 <= 27;
	      {1'd0, 6'd60}: s2wr5 <= 28;
	      {1'd0, 6'd61}: s2wr5 <= 29;
	      {1'd0, 6'd62}: s2wr5 <= 30;
	      {1'd0, 6'd63}: s2wr5 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr6 <= 16;
	      {1'd0, 6'd1}: s2wr6 <= 17;
	      {1'd0, 6'd2}: s2wr6 <= 18;
	      {1'd0, 6'd3}: s2wr6 <= 19;
	      {1'd0, 6'd4}: s2wr6 <= 20;
	      {1'd0, 6'd5}: s2wr6 <= 21;
	      {1'd0, 6'd6}: s2wr6 <= 22;
	      {1'd0, 6'd7}: s2wr6 <= 23;
	      {1'd0, 6'd8}: s2wr6 <= 24;
	      {1'd0, 6'd9}: s2wr6 <= 25;
	      {1'd0, 6'd10}: s2wr6 <= 26;
	      {1'd0, 6'd11}: s2wr6 <= 27;
	      {1'd0, 6'd12}: s2wr6 <= 28;
	      {1'd0, 6'd13}: s2wr6 <= 29;
	      {1'd0, 6'd14}: s2wr6 <= 30;
	      {1'd0, 6'd15}: s2wr6 <= 31;
	      {1'd0, 6'd16}: s2wr6 <= 0;
	      {1'd0, 6'd17}: s2wr6 <= 1;
	      {1'd0, 6'd18}: s2wr6 <= 2;
	      {1'd0, 6'd19}: s2wr6 <= 3;
	      {1'd0, 6'd20}: s2wr6 <= 4;
	      {1'd0, 6'd21}: s2wr6 <= 5;
	      {1'd0, 6'd22}: s2wr6 <= 6;
	      {1'd0, 6'd23}: s2wr6 <= 7;
	      {1'd0, 6'd24}: s2wr6 <= 8;
	      {1'd0, 6'd25}: s2wr6 <= 9;
	      {1'd0, 6'd26}: s2wr6 <= 10;
	      {1'd0, 6'd27}: s2wr6 <= 11;
	      {1'd0, 6'd28}: s2wr6 <= 12;
	      {1'd0, 6'd29}: s2wr6 <= 13;
	      {1'd0, 6'd30}: s2wr6 <= 14;
	      {1'd0, 6'd31}: s2wr6 <= 15;
	      {1'd0, 6'd32}: s2wr6 <= 48;
	      {1'd0, 6'd33}: s2wr6 <= 49;
	      {1'd0, 6'd34}: s2wr6 <= 50;
	      {1'd0, 6'd35}: s2wr6 <= 51;
	      {1'd0, 6'd36}: s2wr6 <= 52;
	      {1'd0, 6'd37}: s2wr6 <= 53;
	      {1'd0, 6'd38}: s2wr6 <= 54;
	      {1'd0, 6'd39}: s2wr6 <= 55;
	      {1'd0, 6'd40}: s2wr6 <= 56;
	      {1'd0, 6'd41}: s2wr6 <= 57;
	      {1'd0, 6'd42}: s2wr6 <= 58;
	      {1'd0, 6'd43}: s2wr6 <= 59;
	      {1'd0, 6'd44}: s2wr6 <= 60;
	      {1'd0, 6'd45}: s2wr6 <= 61;
	      {1'd0, 6'd46}: s2wr6 <= 62;
	      {1'd0, 6'd47}: s2wr6 <= 63;
	      {1'd0, 6'd48}: s2wr6 <= 32;
	      {1'd0, 6'd49}: s2wr6 <= 33;
	      {1'd0, 6'd50}: s2wr6 <= 34;
	      {1'd0, 6'd51}: s2wr6 <= 35;
	      {1'd0, 6'd52}: s2wr6 <= 36;
	      {1'd0, 6'd53}: s2wr6 <= 37;
	      {1'd0, 6'd54}: s2wr6 <= 38;
	      {1'd0, 6'd55}: s2wr6 <= 39;
	      {1'd0, 6'd56}: s2wr6 <= 40;
	      {1'd0, 6'd57}: s2wr6 <= 41;
	      {1'd0, 6'd58}: s2wr6 <= 42;
	      {1'd0, 6'd59}: s2wr6 <= 43;
	      {1'd0, 6'd60}: s2wr6 <= 44;
	      {1'd0, 6'd61}: s2wr6 <= 45;
	      {1'd0, 6'd62}: s2wr6 <= 46;
	      {1'd0, 6'd63}: s2wr6 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr7 <= 0;
	      {1'd0, 6'd1}: s2wr7 <= 1;
	      {1'd0, 6'd2}: s2wr7 <= 2;
	      {1'd0, 6'd3}: s2wr7 <= 3;
	      {1'd0, 6'd4}: s2wr7 <= 4;
	      {1'd0, 6'd5}: s2wr7 <= 5;
	      {1'd0, 6'd6}: s2wr7 <= 6;
	      {1'd0, 6'd7}: s2wr7 <= 7;
	      {1'd0, 6'd8}: s2wr7 <= 8;
	      {1'd0, 6'd9}: s2wr7 <= 9;
	      {1'd0, 6'd10}: s2wr7 <= 10;
	      {1'd0, 6'd11}: s2wr7 <= 11;
	      {1'd0, 6'd12}: s2wr7 <= 12;
	      {1'd0, 6'd13}: s2wr7 <= 13;
	      {1'd0, 6'd14}: s2wr7 <= 14;
	      {1'd0, 6'd15}: s2wr7 <= 15;
	      {1'd0, 6'd16}: s2wr7 <= 16;
	      {1'd0, 6'd17}: s2wr7 <= 17;
	      {1'd0, 6'd18}: s2wr7 <= 18;
	      {1'd0, 6'd19}: s2wr7 <= 19;
	      {1'd0, 6'd20}: s2wr7 <= 20;
	      {1'd0, 6'd21}: s2wr7 <= 21;
	      {1'd0, 6'd22}: s2wr7 <= 22;
	      {1'd0, 6'd23}: s2wr7 <= 23;
	      {1'd0, 6'd24}: s2wr7 <= 24;
	      {1'd0, 6'd25}: s2wr7 <= 25;
	      {1'd0, 6'd26}: s2wr7 <= 26;
	      {1'd0, 6'd27}: s2wr7 <= 27;
	      {1'd0, 6'd28}: s2wr7 <= 28;
	      {1'd0, 6'd29}: s2wr7 <= 29;
	      {1'd0, 6'd30}: s2wr7 <= 30;
	      {1'd0, 6'd31}: s2wr7 <= 31;
	      {1'd0, 6'd32}: s2wr7 <= 32;
	      {1'd0, 6'd33}: s2wr7 <= 33;
	      {1'd0, 6'd34}: s2wr7 <= 34;
	      {1'd0, 6'd35}: s2wr7 <= 35;
	      {1'd0, 6'd36}: s2wr7 <= 36;
	      {1'd0, 6'd37}: s2wr7 <= 37;
	      {1'd0, 6'd38}: s2wr7 <= 38;
	      {1'd0, 6'd39}: s2wr7 <= 39;
	      {1'd0, 6'd40}: s2wr7 <= 40;
	      {1'd0, 6'd41}: s2wr7 <= 41;
	      {1'd0, 6'd42}: s2wr7 <= 42;
	      {1'd0, 6'd43}: s2wr7 <= 43;
	      {1'd0, 6'd44}: s2wr7 <= 44;
	      {1'd0, 6'd45}: s2wr7 <= 45;
	      {1'd0, 6'd46}: s2wr7 <= 46;
	      {1'd0, 6'd47}: s2wr7 <= 47;
	      {1'd0, 6'd48}: s2wr7 <= 48;
	      {1'd0, 6'd49}: s2wr7 <= 49;
	      {1'd0, 6'd50}: s2wr7 <= 50;
	      {1'd0, 6'd51}: s2wr7 <= 51;
	      {1'd0, 6'd52}: s2wr7 <= 52;
	      {1'd0, 6'd53}: s2wr7 <= 53;
	      {1'd0, 6'd54}: s2wr7 <= 54;
	      {1'd0, 6'd55}: s2wr7 <= 55;
	      {1'd0, 6'd56}: s2wr7 <= 56;
	      {1'd0, 6'd57}: s2wr7 <= 57;
	      {1'd0, 6'd58}: s2wr7 <= 58;
	      {1'd0, 6'd59}: s2wr7 <= 59;
	      {1'd0, 6'd60}: s2wr7 <= 60;
	      {1'd0, 6'd61}: s2wr7 <= 61;
	      {1'd0, 6'd62}: s2wr7 <= 62;
	      {1'd0, 6'd63}: s2wr7 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr8 <= 48;
	      {1'd0, 6'd1}: s2wr8 <= 49;
	      {1'd0, 6'd2}: s2wr8 <= 50;
	      {1'd0, 6'd3}: s2wr8 <= 51;
	      {1'd0, 6'd4}: s2wr8 <= 52;
	      {1'd0, 6'd5}: s2wr8 <= 53;
	      {1'd0, 6'd6}: s2wr8 <= 54;
	      {1'd0, 6'd7}: s2wr8 <= 55;
	      {1'd0, 6'd8}: s2wr8 <= 56;
	      {1'd0, 6'd9}: s2wr8 <= 57;
	      {1'd0, 6'd10}: s2wr8 <= 58;
	      {1'd0, 6'd11}: s2wr8 <= 59;
	      {1'd0, 6'd12}: s2wr8 <= 60;
	      {1'd0, 6'd13}: s2wr8 <= 61;
	      {1'd0, 6'd14}: s2wr8 <= 62;
	      {1'd0, 6'd15}: s2wr8 <= 63;
	      {1'd0, 6'd16}: s2wr8 <= 32;
	      {1'd0, 6'd17}: s2wr8 <= 33;
	      {1'd0, 6'd18}: s2wr8 <= 34;
	      {1'd0, 6'd19}: s2wr8 <= 35;
	      {1'd0, 6'd20}: s2wr8 <= 36;
	      {1'd0, 6'd21}: s2wr8 <= 37;
	      {1'd0, 6'd22}: s2wr8 <= 38;
	      {1'd0, 6'd23}: s2wr8 <= 39;
	      {1'd0, 6'd24}: s2wr8 <= 40;
	      {1'd0, 6'd25}: s2wr8 <= 41;
	      {1'd0, 6'd26}: s2wr8 <= 42;
	      {1'd0, 6'd27}: s2wr8 <= 43;
	      {1'd0, 6'd28}: s2wr8 <= 44;
	      {1'd0, 6'd29}: s2wr8 <= 45;
	      {1'd0, 6'd30}: s2wr8 <= 46;
	      {1'd0, 6'd31}: s2wr8 <= 47;
	      {1'd0, 6'd32}: s2wr8 <= 16;
	      {1'd0, 6'd33}: s2wr8 <= 17;
	      {1'd0, 6'd34}: s2wr8 <= 18;
	      {1'd0, 6'd35}: s2wr8 <= 19;
	      {1'd0, 6'd36}: s2wr8 <= 20;
	      {1'd0, 6'd37}: s2wr8 <= 21;
	      {1'd0, 6'd38}: s2wr8 <= 22;
	      {1'd0, 6'd39}: s2wr8 <= 23;
	      {1'd0, 6'd40}: s2wr8 <= 24;
	      {1'd0, 6'd41}: s2wr8 <= 25;
	      {1'd0, 6'd42}: s2wr8 <= 26;
	      {1'd0, 6'd43}: s2wr8 <= 27;
	      {1'd0, 6'd44}: s2wr8 <= 28;
	      {1'd0, 6'd45}: s2wr8 <= 29;
	      {1'd0, 6'd46}: s2wr8 <= 30;
	      {1'd0, 6'd47}: s2wr8 <= 31;
	      {1'd0, 6'd48}: s2wr8 <= 0;
	      {1'd0, 6'd49}: s2wr8 <= 1;
	      {1'd0, 6'd50}: s2wr8 <= 2;
	      {1'd0, 6'd51}: s2wr8 <= 3;
	      {1'd0, 6'd52}: s2wr8 <= 4;
	      {1'd0, 6'd53}: s2wr8 <= 5;
	      {1'd0, 6'd54}: s2wr8 <= 6;
	      {1'd0, 6'd55}: s2wr8 <= 7;
	      {1'd0, 6'd56}: s2wr8 <= 8;
	      {1'd0, 6'd57}: s2wr8 <= 9;
	      {1'd0, 6'd58}: s2wr8 <= 10;
	      {1'd0, 6'd59}: s2wr8 <= 11;
	      {1'd0, 6'd60}: s2wr8 <= 12;
	      {1'd0, 6'd61}: s2wr8 <= 13;
	      {1'd0, 6'd62}: s2wr8 <= 14;
	      {1'd0, 6'd63}: s2wr8 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr8 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr9 <= 32;
	      {1'd0, 6'd1}: s2wr9 <= 33;
	      {1'd0, 6'd2}: s2wr9 <= 34;
	      {1'd0, 6'd3}: s2wr9 <= 35;
	      {1'd0, 6'd4}: s2wr9 <= 36;
	      {1'd0, 6'd5}: s2wr9 <= 37;
	      {1'd0, 6'd6}: s2wr9 <= 38;
	      {1'd0, 6'd7}: s2wr9 <= 39;
	      {1'd0, 6'd8}: s2wr9 <= 40;
	      {1'd0, 6'd9}: s2wr9 <= 41;
	      {1'd0, 6'd10}: s2wr9 <= 42;
	      {1'd0, 6'd11}: s2wr9 <= 43;
	      {1'd0, 6'd12}: s2wr9 <= 44;
	      {1'd0, 6'd13}: s2wr9 <= 45;
	      {1'd0, 6'd14}: s2wr9 <= 46;
	      {1'd0, 6'd15}: s2wr9 <= 47;
	      {1'd0, 6'd16}: s2wr9 <= 48;
	      {1'd0, 6'd17}: s2wr9 <= 49;
	      {1'd0, 6'd18}: s2wr9 <= 50;
	      {1'd0, 6'd19}: s2wr9 <= 51;
	      {1'd0, 6'd20}: s2wr9 <= 52;
	      {1'd0, 6'd21}: s2wr9 <= 53;
	      {1'd0, 6'd22}: s2wr9 <= 54;
	      {1'd0, 6'd23}: s2wr9 <= 55;
	      {1'd0, 6'd24}: s2wr9 <= 56;
	      {1'd0, 6'd25}: s2wr9 <= 57;
	      {1'd0, 6'd26}: s2wr9 <= 58;
	      {1'd0, 6'd27}: s2wr9 <= 59;
	      {1'd0, 6'd28}: s2wr9 <= 60;
	      {1'd0, 6'd29}: s2wr9 <= 61;
	      {1'd0, 6'd30}: s2wr9 <= 62;
	      {1'd0, 6'd31}: s2wr9 <= 63;
	      {1'd0, 6'd32}: s2wr9 <= 0;
	      {1'd0, 6'd33}: s2wr9 <= 1;
	      {1'd0, 6'd34}: s2wr9 <= 2;
	      {1'd0, 6'd35}: s2wr9 <= 3;
	      {1'd0, 6'd36}: s2wr9 <= 4;
	      {1'd0, 6'd37}: s2wr9 <= 5;
	      {1'd0, 6'd38}: s2wr9 <= 6;
	      {1'd0, 6'd39}: s2wr9 <= 7;
	      {1'd0, 6'd40}: s2wr9 <= 8;
	      {1'd0, 6'd41}: s2wr9 <= 9;
	      {1'd0, 6'd42}: s2wr9 <= 10;
	      {1'd0, 6'd43}: s2wr9 <= 11;
	      {1'd0, 6'd44}: s2wr9 <= 12;
	      {1'd0, 6'd45}: s2wr9 <= 13;
	      {1'd0, 6'd46}: s2wr9 <= 14;
	      {1'd0, 6'd47}: s2wr9 <= 15;
	      {1'd0, 6'd48}: s2wr9 <= 16;
	      {1'd0, 6'd49}: s2wr9 <= 17;
	      {1'd0, 6'd50}: s2wr9 <= 18;
	      {1'd0, 6'd51}: s2wr9 <= 19;
	      {1'd0, 6'd52}: s2wr9 <= 20;
	      {1'd0, 6'd53}: s2wr9 <= 21;
	      {1'd0, 6'd54}: s2wr9 <= 22;
	      {1'd0, 6'd55}: s2wr9 <= 23;
	      {1'd0, 6'd56}: s2wr9 <= 24;
	      {1'd0, 6'd57}: s2wr9 <= 25;
	      {1'd0, 6'd58}: s2wr9 <= 26;
	      {1'd0, 6'd59}: s2wr9 <= 27;
	      {1'd0, 6'd60}: s2wr9 <= 28;
	      {1'd0, 6'd61}: s2wr9 <= 29;
	      {1'd0, 6'd62}: s2wr9 <= 30;
	      {1'd0, 6'd63}: s2wr9 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr9 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr10 <= 16;
	      {1'd0, 6'd1}: s2wr10 <= 17;
	      {1'd0, 6'd2}: s2wr10 <= 18;
	      {1'd0, 6'd3}: s2wr10 <= 19;
	      {1'd0, 6'd4}: s2wr10 <= 20;
	      {1'd0, 6'd5}: s2wr10 <= 21;
	      {1'd0, 6'd6}: s2wr10 <= 22;
	      {1'd0, 6'd7}: s2wr10 <= 23;
	      {1'd0, 6'd8}: s2wr10 <= 24;
	      {1'd0, 6'd9}: s2wr10 <= 25;
	      {1'd0, 6'd10}: s2wr10 <= 26;
	      {1'd0, 6'd11}: s2wr10 <= 27;
	      {1'd0, 6'd12}: s2wr10 <= 28;
	      {1'd0, 6'd13}: s2wr10 <= 29;
	      {1'd0, 6'd14}: s2wr10 <= 30;
	      {1'd0, 6'd15}: s2wr10 <= 31;
	      {1'd0, 6'd16}: s2wr10 <= 0;
	      {1'd0, 6'd17}: s2wr10 <= 1;
	      {1'd0, 6'd18}: s2wr10 <= 2;
	      {1'd0, 6'd19}: s2wr10 <= 3;
	      {1'd0, 6'd20}: s2wr10 <= 4;
	      {1'd0, 6'd21}: s2wr10 <= 5;
	      {1'd0, 6'd22}: s2wr10 <= 6;
	      {1'd0, 6'd23}: s2wr10 <= 7;
	      {1'd0, 6'd24}: s2wr10 <= 8;
	      {1'd0, 6'd25}: s2wr10 <= 9;
	      {1'd0, 6'd26}: s2wr10 <= 10;
	      {1'd0, 6'd27}: s2wr10 <= 11;
	      {1'd0, 6'd28}: s2wr10 <= 12;
	      {1'd0, 6'd29}: s2wr10 <= 13;
	      {1'd0, 6'd30}: s2wr10 <= 14;
	      {1'd0, 6'd31}: s2wr10 <= 15;
	      {1'd0, 6'd32}: s2wr10 <= 48;
	      {1'd0, 6'd33}: s2wr10 <= 49;
	      {1'd0, 6'd34}: s2wr10 <= 50;
	      {1'd0, 6'd35}: s2wr10 <= 51;
	      {1'd0, 6'd36}: s2wr10 <= 52;
	      {1'd0, 6'd37}: s2wr10 <= 53;
	      {1'd0, 6'd38}: s2wr10 <= 54;
	      {1'd0, 6'd39}: s2wr10 <= 55;
	      {1'd0, 6'd40}: s2wr10 <= 56;
	      {1'd0, 6'd41}: s2wr10 <= 57;
	      {1'd0, 6'd42}: s2wr10 <= 58;
	      {1'd0, 6'd43}: s2wr10 <= 59;
	      {1'd0, 6'd44}: s2wr10 <= 60;
	      {1'd0, 6'd45}: s2wr10 <= 61;
	      {1'd0, 6'd46}: s2wr10 <= 62;
	      {1'd0, 6'd47}: s2wr10 <= 63;
	      {1'd0, 6'd48}: s2wr10 <= 32;
	      {1'd0, 6'd49}: s2wr10 <= 33;
	      {1'd0, 6'd50}: s2wr10 <= 34;
	      {1'd0, 6'd51}: s2wr10 <= 35;
	      {1'd0, 6'd52}: s2wr10 <= 36;
	      {1'd0, 6'd53}: s2wr10 <= 37;
	      {1'd0, 6'd54}: s2wr10 <= 38;
	      {1'd0, 6'd55}: s2wr10 <= 39;
	      {1'd0, 6'd56}: s2wr10 <= 40;
	      {1'd0, 6'd57}: s2wr10 <= 41;
	      {1'd0, 6'd58}: s2wr10 <= 42;
	      {1'd0, 6'd59}: s2wr10 <= 43;
	      {1'd0, 6'd60}: s2wr10 <= 44;
	      {1'd0, 6'd61}: s2wr10 <= 45;
	      {1'd0, 6'd62}: s2wr10 <= 46;
	      {1'd0, 6'd63}: s2wr10 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr10 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr11 <= 0;
	      {1'd0, 6'd1}: s2wr11 <= 1;
	      {1'd0, 6'd2}: s2wr11 <= 2;
	      {1'd0, 6'd3}: s2wr11 <= 3;
	      {1'd0, 6'd4}: s2wr11 <= 4;
	      {1'd0, 6'd5}: s2wr11 <= 5;
	      {1'd0, 6'd6}: s2wr11 <= 6;
	      {1'd0, 6'd7}: s2wr11 <= 7;
	      {1'd0, 6'd8}: s2wr11 <= 8;
	      {1'd0, 6'd9}: s2wr11 <= 9;
	      {1'd0, 6'd10}: s2wr11 <= 10;
	      {1'd0, 6'd11}: s2wr11 <= 11;
	      {1'd0, 6'd12}: s2wr11 <= 12;
	      {1'd0, 6'd13}: s2wr11 <= 13;
	      {1'd0, 6'd14}: s2wr11 <= 14;
	      {1'd0, 6'd15}: s2wr11 <= 15;
	      {1'd0, 6'd16}: s2wr11 <= 16;
	      {1'd0, 6'd17}: s2wr11 <= 17;
	      {1'd0, 6'd18}: s2wr11 <= 18;
	      {1'd0, 6'd19}: s2wr11 <= 19;
	      {1'd0, 6'd20}: s2wr11 <= 20;
	      {1'd0, 6'd21}: s2wr11 <= 21;
	      {1'd0, 6'd22}: s2wr11 <= 22;
	      {1'd0, 6'd23}: s2wr11 <= 23;
	      {1'd0, 6'd24}: s2wr11 <= 24;
	      {1'd0, 6'd25}: s2wr11 <= 25;
	      {1'd0, 6'd26}: s2wr11 <= 26;
	      {1'd0, 6'd27}: s2wr11 <= 27;
	      {1'd0, 6'd28}: s2wr11 <= 28;
	      {1'd0, 6'd29}: s2wr11 <= 29;
	      {1'd0, 6'd30}: s2wr11 <= 30;
	      {1'd0, 6'd31}: s2wr11 <= 31;
	      {1'd0, 6'd32}: s2wr11 <= 32;
	      {1'd0, 6'd33}: s2wr11 <= 33;
	      {1'd0, 6'd34}: s2wr11 <= 34;
	      {1'd0, 6'd35}: s2wr11 <= 35;
	      {1'd0, 6'd36}: s2wr11 <= 36;
	      {1'd0, 6'd37}: s2wr11 <= 37;
	      {1'd0, 6'd38}: s2wr11 <= 38;
	      {1'd0, 6'd39}: s2wr11 <= 39;
	      {1'd0, 6'd40}: s2wr11 <= 40;
	      {1'd0, 6'd41}: s2wr11 <= 41;
	      {1'd0, 6'd42}: s2wr11 <= 42;
	      {1'd0, 6'd43}: s2wr11 <= 43;
	      {1'd0, 6'd44}: s2wr11 <= 44;
	      {1'd0, 6'd45}: s2wr11 <= 45;
	      {1'd0, 6'd46}: s2wr11 <= 46;
	      {1'd0, 6'd47}: s2wr11 <= 47;
	      {1'd0, 6'd48}: s2wr11 <= 48;
	      {1'd0, 6'd49}: s2wr11 <= 49;
	      {1'd0, 6'd50}: s2wr11 <= 50;
	      {1'd0, 6'd51}: s2wr11 <= 51;
	      {1'd0, 6'd52}: s2wr11 <= 52;
	      {1'd0, 6'd53}: s2wr11 <= 53;
	      {1'd0, 6'd54}: s2wr11 <= 54;
	      {1'd0, 6'd55}: s2wr11 <= 55;
	      {1'd0, 6'd56}: s2wr11 <= 56;
	      {1'd0, 6'd57}: s2wr11 <= 57;
	      {1'd0, 6'd58}: s2wr11 <= 58;
	      {1'd0, 6'd59}: s2wr11 <= 59;
	      {1'd0, 6'd60}: s2wr11 <= 60;
	      {1'd0, 6'd61}: s2wr11 <= 61;
	      {1'd0, 6'd62}: s2wr11 <= 62;
	      {1'd0, 6'd63}: s2wr11 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr11 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr12 <= 48;
	      {1'd0, 6'd1}: s2wr12 <= 49;
	      {1'd0, 6'd2}: s2wr12 <= 50;
	      {1'd0, 6'd3}: s2wr12 <= 51;
	      {1'd0, 6'd4}: s2wr12 <= 52;
	      {1'd0, 6'd5}: s2wr12 <= 53;
	      {1'd0, 6'd6}: s2wr12 <= 54;
	      {1'd0, 6'd7}: s2wr12 <= 55;
	      {1'd0, 6'd8}: s2wr12 <= 56;
	      {1'd0, 6'd9}: s2wr12 <= 57;
	      {1'd0, 6'd10}: s2wr12 <= 58;
	      {1'd0, 6'd11}: s2wr12 <= 59;
	      {1'd0, 6'd12}: s2wr12 <= 60;
	      {1'd0, 6'd13}: s2wr12 <= 61;
	      {1'd0, 6'd14}: s2wr12 <= 62;
	      {1'd0, 6'd15}: s2wr12 <= 63;
	      {1'd0, 6'd16}: s2wr12 <= 32;
	      {1'd0, 6'd17}: s2wr12 <= 33;
	      {1'd0, 6'd18}: s2wr12 <= 34;
	      {1'd0, 6'd19}: s2wr12 <= 35;
	      {1'd0, 6'd20}: s2wr12 <= 36;
	      {1'd0, 6'd21}: s2wr12 <= 37;
	      {1'd0, 6'd22}: s2wr12 <= 38;
	      {1'd0, 6'd23}: s2wr12 <= 39;
	      {1'd0, 6'd24}: s2wr12 <= 40;
	      {1'd0, 6'd25}: s2wr12 <= 41;
	      {1'd0, 6'd26}: s2wr12 <= 42;
	      {1'd0, 6'd27}: s2wr12 <= 43;
	      {1'd0, 6'd28}: s2wr12 <= 44;
	      {1'd0, 6'd29}: s2wr12 <= 45;
	      {1'd0, 6'd30}: s2wr12 <= 46;
	      {1'd0, 6'd31}: s2wr12 <= 47;
	      {1'd0, 6'd32}: s2wr12 <= 16;
	      {1'd0, 6'd33}: s2wr12 <= 17;
	      {1'd0, 6'd34}: s2wr12 <= 18;
	      {1'd0, 6'd35}: s2wr12 <= 19;
	      {1'd0, 6'd36}: s2wr12 <= 20;
	      {1'd0, 6'd37}: s2wr12 <= 21;
	      {1'd0, 6'd38}: s2wr12 <= 22;
	      {1'd0, 6'd39}: s2wr12 <= 23;
	      {1'd0, 6'd40}: s2wr12 <= 24;
	      {1'd0, 6'd41}: s2wr12 <= 25;
	      {1'd0, 6'd42}: s2wr12 <= 26;
	      {1'd0, 6'd43}: s2wr12 <= 27;
	      {1'd0, 6'd44}: s2wr12 <= 28;
	      {1'd0, 6'd45}: s2wr12 <= 29;
	      {1'd0, 6'd46}: s2wr12 <= 30;
	      {1'd0, 6'd47}: s2wr12 <= 31;
	      {1'd0, 6'd48}: s2wr12 <= 0;
	      {1'd0, 6'd49}: s2wr12 <= 1;
	      {1'd0, 6'd50}: s2wr12 <= 2;
	      {1'd0, 6'd51}: s2wr12 <= 3;
	      {1'd0, 6'd52}: s2wr12 <= 4;
	      {1'd0, 6'd53}: s2wr12 <= 5;
	      {1'd0, 6'd54}: s2wr12 <= 6;
	      {1'd0, 6'd55}: s2wr12 <= 7;
	      {1'd0, 6'd56}: s2wr12 <= 8;
	      {1'd0, 6'd57}: s2wr12 <= 9;
	      {1'd0, 6'd58}: s2wr12 <= 10;
	      {1'd0, 6'd59}: s2wr12 <= 11;
	      {1'd0, 6'd60}: s2wr12 <= 12;
	      {1'd0, 6'd61}: s2wr12 <= 13;
	      {1'd0, 6'd62}: s2wr12 <= 14;
	      {1'd0, 6'd63}: s2wr12 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr12 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr13 <= 32;
	      {1'd0, 6'd1}: s2wr13 <= 33;
	      {1'd0, 6'd2}: s2wr13 <= 34;
	      {1'd0, 6'd3}: s2wr13 <= 35;
	      {1'd0, 6'd4}: s2wr13 <= 36;
	      {1'd0, 6'd5}: s2wr13 <= 37;
	      {1'd0, 6'd6}: s2wr13 <= 38;
	      {1'd0, 6'd7}: s2wr13 <= 39;
	      {1'd0, 6'd8}: s2wr13 <= 40;
	      {1'd0, 6'd9}: s2wr13 <= 41;
	      {1'd0, 6'd10}: s2wr13 <= 42;
	      {1'd0, 6'd11}: s2wr13 <= 43;
	      {1'd0, 6'd12}: s2wr13 <= 44;
	      {1'd0, 6'd13}: s2wr13 <= 45;
	      {1'd0, 6'd14}: s2wr13 <= 46;
	      {1'd0, 6'd15}: s2wr13 <= 47;
	      {1'd0, 6'd16}: s2wr13 <= 48;
	      {1'd0, 6'd17}: s2wr13 <= 49;
	      {1'd0, 6'd18}: s2wr13 <= 50;
	      {1'd0, 6'd19}: s2wr13 <= 51;
	      {1'd0, 6'd20}: s2wr13 <= 52;
	      {1'd0, 6'd21}: s2wr13 <= 53;
	      {1'd0, 6'd22}: s2wr13 <= 54;
	      {1'd0, 6'd23}: s2wr13 <= 55;
	      {1'd0, 6'd24}: s2wr13 <= 56;
	      {1'd0, 6'd25}: s2wr13 <= 57;
	      {1'd0, 6'd26}: s2wr13 <= 58;
	      {1'd0, 6'd27}: s2wr13 <= 59;
	      {1'd0, 6'd28}: s2wr13 <= 60;
	      {1'd0, 6'd29}: s2wr13 <= 61;
	      {1'd0, 6'd30}: s2wr13 <= 62;
	      {1'd0, 6'd31}: s2wr13 <= 63;
	      {1'd0, 6'd32}: s2wr13 <= 0;
	      {1'd0, 6'd33}: s2wr13 <= 1;
	      {1'd0, 6'd34}: s2wr13 <= 2;
	      {1'd0, 6'd35}: s2wr13 <= 3;
	      {1'd0, 6'd36}: s2wr13 <= 4;
	      {1'd0, 6'd37}: s2wr13 <= 5;
	      {1'd0, 6'd38}: s2wr13 <= 6;
	      {1'd0, 6'd39}: s2wr13 <= 7;
	      {1'd0, 6'd40}: s2wr13 <= 8;
	      {1'd0, 6'd41}: s2wr13 <= 9;
	      {1'd0, 6'd42}: s2wr13 <= 10;
	      {1'd0, 6'd43}: s2wr13 <= 11;
	      {1'd0, 6'd44}: s2wr13 <= 12;
	      {1'd0, 6'd45}: s2wr13 <= 13;
	      {1'd0, 6'd46}: s2wr13 <= 14;
	      {1'd0, 6'd47}: s2wr13 <= 15;
	      {1'd0, 6'd48}: s2wr13 <= 16;
	      {1'd0, 6'd49}: s2wr13 <= 17;
	      {1'd0, 6'd50}: s2wr13 <= 18;
	      {1'd0, 6'd51}: s2wr13 <= 19;
	      {1'd0, 6'd52}: s2wr13 <= 20;
	      {1'd0, 6'd53}: s2wr13 <= 21;
	      {1'd0, 6'd54}: s2wr13 <= 22;
	      {1'd0, 6'd55}: s2wr13 <= 23;
	      {1'd0, 6'd56}: s2wr13 <= 24;
	      {1'd0, 6'd57}: s2wr13 <= 25;
	      {1'd0, 6'd58}: s2wr13 <= 26;
	      {1'd0, 6'd59}: s2wr13 <= 27;
	      {1'd0, 6'd60}: s2wr13 <= 28;
	      {1'd0, 6'd61}: s2wr13 <= 29;
	      {1'd0, 6'd62}: s2wr13 <= 30;
	      {1'd0, 6'd63}: s2wr13 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr13 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr14 <= 16;
	      {1'd0, 6'd1}: s2wr14 <= 17;
	      {1'd0, 6'd2}: s2wr14 <= 18;
	      {1'd0, 6'd3}: s2wr14 <= 19;
	      {1'd0, 6'd4}: s2wr14 <= 20;
	      {1'd0, 6'd5}: s2wr14 <= 21;
	      {1'd0, 6'd6}: s2wr14 <= 22;
	      {1'd0, 6'd7}: s2wr14 <= 23;
	      {1'd0, 6'd8}: s2wr14 <= 24;
	      {1'd0, 6'd9}: s2wr14 <= 25;
	      {1'd0, 6'd10}: s2wr14 <= 26;
	      {1'd0, 6'd11}: s2wr14 <= 27;
	      {1'd0, 6'd12}: s2wr14 <= 28;
	      {1'd0, 6'd13}: s2wr14 <= 29;
	      {1'd0, 6'd14}: s2wr14 <= 30;
	      {1'd0, 6'd15}: s2wr14 <= 31;
	      {1'd0, 6'd16}: s2wr14 <= 0;
	      {1'd0, 6'd17}: s2wr14 <= 1;
	      {1'd0, 6'd18}: s2wr14 <= 2;
	      {1'd0, 6'd19}: s2wr14 <= 3;
	      {1'd0, 6'd20}: s2wr14 <= 4;
	      {1'd0, 6'd21}: s2wr14 <= 5;
	      {1'd0, 6'd22}: s2wr14 <= 6;
	      {1'd0, 6'd23}: s2wr14 <= 7;
	      {1'd0, 6'd24}: s2wr14 <= 8;
	      {1'd0, 6'd25}: s2wr14 <= 9;
	      {1'd0, 6'd26}: s2wr14 <= 10;
	      {1'd0, 6'd27}: s2wr14 <= 11;
	      {1'd0, 6'd28}: s2wr14 <= 12;
	      {1'd0, 6'd29}: s2wr14 <= 13;
	      {1'd0, 6'd30}: s2wr14 <= 14;
	      {1'd0, 6'd31}: s2wr14 <= 15;
	      {1'd0, 6'd32}: s2wr14 <= 48;
	      {1'd0, 6'd33}: s2wr14 <= 49;
	      {1'd0, 6'd34}: s2wr14 <= 50;
	      {1'd0, 6'd35}: s2wr14 <= 51;
	      {1'd0, 6'd36}: s2wr14 <= 52;
	      {1'd0, 6'd37}: s2wr14 <= 53;
	      {1'd0, 6'd38}: s2wr14 <= 54;
	      {1'd0, 6'd39}: s2wr14 <= 55;
	      {1'd0, 6'd40}: s2wr14 <= 56;
	      {1'd0, 6'd41}: s2wr14 <= 57;
	      {1'd0, 6'd42}: s2wr14 <= 58;
	      {1'd0, 6'd43}: s2wr14 <= 59;
	      {1'd0, 6'd44}: s2wr14 <= 60;
	      {1'd0, 6'd45}: s2wr14 <= 61;
	      {1'd0, 6'd46}: s2wr14 <= 62;
	      {1'd0, 6'd47}: s2wr14 <= 63;
	      {1'd0, 6'd48}: s2wr14 <= 32;
	      {1'd0, 6'd49}: s2wr14 <= 33;
	      {1'd0, 6'd50}: s2wr14 <= 34;
	      {1'd0, 6'd51}: s2wr14 <= 35;
	      {1'd0, 6'd52}: s2wr14 <= 36;
	      {1'd0, 6'd53}: s2wr14 <= 37;
	      {1'd0, 6'd54}: s2wr14 <= 38;
	      {1'd0, 6'd55}: s2wr14 <= 39;
	      {1'd0, 6'd56}: s2wr14 <= 40;
	      {1'd0, 6'd57}: s2wr14 <= 41;
	      {1'd0, 6'd58}: s2wr14 <= 42;
	      {1'd0, 6'd59}: s2wr14 <= 43;
	      {1'd0, 6'd60}: s2wr14 <= 44;
	      {1'd0, 6'd61}: s2wr14 <= 45;
	      {1'd0, 6'd62}: s2wr14 <= 46;
	      {1'd0, 6'd63}: s2wr14 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr14 is "block"
   always @(posedge clk) begin
      case({tm91_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr15 <= 0;
	      {1'd0, 6'd1}: s2wr15 <= 1;
	      {1'd0, 6'd2}: s2wr15 <= 2;
	      {1'd0, 6'd3}: s2wr15 <= 3;
	      {1'd0, 6'd4}: s2wr15 <= 4;
	      {1'd0, 6'd5}: s2wr15 <= 5;
	      {1'd0, 6'd6}: s2wr15 <= 6;
	      {1'd0, 6'd7}: s2wr15 <= 7;
	      {1'd0, 6'd8}: s2wr15 <= 8;
	      {1'd0, 6'd9}: s2wr15 <= 9;
	      {1'd0, 6'd10}: s2wr15 <= 10;
	      {1'd0, 6'd11}: s2wr15 <= 11;
	      {1'd0, 6'd12}: s2wr15 <= 12;
	      {1'd0, 6'd13}: s2wr15 <= 13;
	      {1'd0, 6'd14}: s2wr15 <= 14;
	      {1'd0, 6'd15}: s2wr15 <= 15;
	      {1'd0, 6'd16}: s2wr15 <= 16;
	      {1'd0, 6'd17}: s2wr15 <= 17;
	      {1'd0, 6'd18}: s2wr15 <= 18;
	      {1'd0, 6'd19}: s2wr15 <= 19;
	      {1'd0, 6'd20}: s2wr15 <= 20;
	      {1'd0, 6'd21}: s2wr15 <= 21;
	      {1'd0, 6'd22}: s2wr15 <= 22;
	      {1'd0, 6'd23}: s2wr15 <= 23;
	      {1'd0, 6'd24}: s2wr15 <= 24;
	      {1'd0, 6'd25}: s2wr15 <= 25;
	      {1'd0, 6'd26}: s2wr15 <= 26;
	      {1'd0, 6'd27}: s2wr15 <= 27;
	      {1'd0, 6'd28}: s2wr15 <= 28;
	      {1'd0, 6'd29}: s2wr15 <= 29;
	      {1'd0, 6'd30}: s2wr15 <= 30;
	      {1'd0, 6'd31}: s2wr15 <= 31;
	      {1'd0, 6'd32}: s2wr15 <= 32;
	      {1'd0, 6'd33}: s2wr15 <= 33;
	      {1'd0, 6'd34}: s2wr15 <= 34;
	      {1'd0, 6'd35}: s2wr15 <= 35;
	      {1'd0, 6'd36}: s2wr15 <= 36;
	      {1'd0, 6'd37}: s2wr15 <= 37;
	      {1'd0, 6'd38}: s2wr15 <= 38;
	      {1'd0, 6'd39}: s2wr15 <= 39;
	      {1'd0, 6'd40}: s2wr15 <= 40;
	      {1'd0, 6'd41}: s2wr15 <= 41;
	      {1'd0, 6'd42}: s2wr15 <= 42;
	      {1'd0, 6'd43}: s2wr15 <= 43;
	      {1'd0, 6'd44}: s2wr15 <= 44;
	      {1'd0, 6'd45}: s2wr15 <= 45;
	      {1'd0, 6'd46}: s2wr15 <= 46;
	      {1'd0, 6'd47}: s2wr15 <= 47;
	      {1'd0, 6'd48}: s2wr15 <= 48;
	      {1'd0, 6'd49}: s2wr15 <= 49;
	      {1'd0, 6'd50}: s2wr15 <= 50;
	      {1'd0, 6'd51}: s2wr15 <= 51;
	      {1'd0, 6'd52}: s2wr15 <= 52;
	      {1'd0, 6'd53}: s2wr15 <= 53;
	      {1'd0, 6'd54}: s2wr15 <= 54;
	      {1'd0, 6'd55}: s2wr15 <= 55;
	      {1'd0, 6'd56}: s2wr15 <= 56;
	      {1'd0, 6'd57}: s2wr15 <= 57;
	      {1'd0, 6'd58}: s2wr15 <= 58;
	      {1'd0, 6'd59}: s2wr15 <= 59;
	      {1'd0, 6'd60}: s2wr15 <= 60;
	      {1'd0, 6'd61}: s2wr15 <= 61;
	      {1'd0, 6'd62}: s2wr15 <= 62;
	      {1'd0, 6'd63}: s2wr15 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr15 is "block"
endmodule


// Latency: 8
// Gap: 64
module DirSum_18154(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   input clk, reset, next;

   reg [5:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 63)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock14760 codeBlockIsnt24626(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15),
       .X16_in(X16), .Y16(Y16),
       .X17_in(X17), .Y17(Y17),
       .X18_in(X18), .Y18(Y18),
       .X19_in(X19), .Y19(Y19),
       .X20_in(X20), .Y20(Y20),
       .X21_in(X21), .Y21(Y21),
       .X22_in(X22), .Y22(Y22),
       .X23_in(X23), .Y23(Y23),
       .X24_in(X24), .Y24(Y24),
       .X25_in(X25), .Y25(Y25),
       .X26_in(X26), .Y26(Y26),
       .X27_in(X27), .Y27(Y27),
       .X28_in(X28), .Y28(Y28),
       .X29_in(X29), .Y29(Y29),
       .X30_in(X30), .Y30(Y30),
       .X31_in(X31), .Y31(Y31));

endmodule

module D20_16106(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfe6e;
      2: out3 <= 16'hfcdc;
      3: out3 <= 16'hfb4b;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'hf69c;
      7: out3 <= 16'hf50f;
      8: out3 <= 16'hf384;
      9: out3 <= 16'hf1fa;
      10: out3 <= 16'hf073;
      11: out3 <= 16'heeee;
      12: out3 <= 16'hed6c;
      13: out3 <= 16'hebed;
      14: out3 <= 16'hea70;
      15: out3 <= 16'he8f7;
      16: out3 <= 16'he782;
      17: out3 <= 16'he611;
      18: out3 <= 16'he4a3;
      19: out3 <= 16'he33a;
      20: out3 <= 16'he1d5;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdf19;
      23: out3 <= 16'hddc3;
      24: out3 <= 16'hdc72;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'hd9e0;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'hd766;
      29: out3 <= 16'hd632;
      30: out3 <= 16'hd505;
      31: out3 <= 16'hd3df;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd1a6;
      34: out3 <= 16'hd094;
      35: out3 <= 16'hcf8a;
      36: out3 <= 16'hce87;
      37: out3 <= 16'hcd8c;
      38: out3 <= 16'hcc98;
      39: out3 <= 16'hcbad;
      40: out3 <= 16'hcac9;
      41: out3 <= 16'hc9ee;
      42: out3 <= 16'hc91b;
      43: out3 <= 16'hc850;
      44: out3 <= 16'hc78f;
      45: out3 <= 16'hc6d5;
      46: out3 <= 16'hc625;
      47: out3 <= 16'hc57e;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc44a;
      50: out3 <= 16'hc3be;
      51: out3 <= 16'hc33b;
      52: out3 <= 16'hc2c1;
      53: out3 <= 16'hc251;
      54: out3 <= 16'hc1eb;
      55: out3 <= 16'hc18e;
      56: out3 <= 16'hc13b;
      57: out3 <= 16'hc0f1;
      58: out3 <= 16'hc0b1;
      59: out3 <= 16'hc07b;
      60: out3 <= 16'hc04f;
      61: out3 <= 16'hc02c;
      62: out3 <= 16'hc014;
      63: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D21_16304(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfcdc;
      2: out3 <= 16'hf9ba;
      3: out3 <= 16'hf69c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hf073;
      6: out3 <= 16'hed6c;
      7: out3 <= 16'hea70;
      8: out3 <= 16'he782;
      9: out3 <= 16'he4a3;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hdf19;
      12: out3 <= 16'hdc72;
      13: out3 <= 16'hd9e0;
      14: out3 <= 16'hd766;
      15: out3 <= 16'hd505;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd094;
      18: out3 <= 16'hce87;
      19: out3 <= 16'hcc98;
      20: out3 <= 16'hcac9;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hc78f;
      23: out3 <= 16'hc625;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc3be;
      26: out3 <= 16'hc2c1;
      27: out3 <= 16'hc1eb;
      28: out3 <= 16'hc13b;
      29: out3 <= 16'hc0b1;
      30: out3 <= 16'hc04f;
      31: out3 <= 16'hc014;
      32: out3 <= 16'hc000;
      33: out3 <= 16'hc014;
      34: out3 <= 16'hc04f;
      35: out3 <= 16'hc0b1;
      36: out3 <= 16'hc13b;
      37: out3 <= 16'hc1eb;
      38: out3 <= 16'hc2c1;
      39: out3 <= 16'hc3be;
      40: out3 <= 16'hc4df;
      41: out3 <= 16'hc625;
      42: out3 <= 16'hc78f;
      43: out3 <= 16'hc91b;
      44: out3 <= 16'hcac9;
      45: out3 <= 16'hcc98;
      46: out3 <= 16'hce87;
      47: out3 <= 16'hd094;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd505;
      50: out3 <= 16'hd766;
      51: out3 <= 16'hd9e0;
      52: out3 <= 16'hdc72;
      53: out3 <= 16'hdf19;
      54: out3 <= 16'he1d5;
      55: out3 <= 16'he4a3;
      56: out3 <= 16'he782;
      57: out3 <= 16'hea70;
      58: out3 <= 16'hed6c;
      59: out3 <= 16'hf073;
      60: out3 <= 16'hf384;
      61: out3 <= 16'hf69c;
      62: out3 <= 16'hf9ba;
      63: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D28_16370(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfc13;
      3: out3 <= 16'hfa82;
      4: out3 <= 16'hf8f2;
      5: out3 <= 16'hf763;
      6: out3 <= 16'hf5d5;
      7: out3 <= 16'hf449;
      8: out3 <= 16'hf2bf;
      9: out3 <= 16'hf136;
      10: out3 <= 16'hefb0;
      11: out3 <= 16'hee2d;
      12: out3 <= 16'hecac;
      13: out3 <= 16'heb2e;
      14: out3 <= 16'he9b4;
      15: out3 <= 16'he83c;
      16: out3 <= 16'he6c9;
      17: out3 <= 16'he559;
      18: out3 <= 16'he3ee;
      19: out3 <= 16'he287;
      20: out3 <= 16'he124;
      21: out3 <= 16'hdfc6;
      22: out3 <= 16'hde6d;
      23: out3 <= 16'hdd19;
      24: out3 <= 16'hdbcb;
      25: out3 <= 16'hda82;
      26: out3 <= 16'hd93f;
      27: out3 <= 16'hd802;
      28: out3 <= 16'hd6cb;
      29: out3 <= 16'hd59b;
      30: out3 <= 16'hd471;
      31: out3 <= 16'hd34e;
      32: out3 <= 16'hd231;
      33: out3 <= 16'hd11c;
      34: out3 <= 16'hd00e;
      35: out3 <= 16'hcf07;
      36: out3 <= 16'hce08;
      37: out3 <= 16'hcd11;
      38: out3 <= 16'hcc21;
      39: out3 <= 16'hcb3a;
      40: out3 <= 16'hca5b;
      41: out3 <= 16'hc983;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hc7ee;
      44: out3 <= 16'hc731;
      45: out3 <= 16'hc67c;
      46: out3 <= 16'hc5d0;
      47: out3 <= 16'hc52d;
      48: out3 <= 16'hc493;
      49: out3 <= 16'hc403;
      50: out3 <= 16'hc37b;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc288;
      53: out3 <= 16'hc21d;
      54: out3 <= 16'hc1bb;
      55: out3 <= 16'hc163;
      56: out3 <= 16'hc115;
      57: out3 <= 16'hc0d0;
      58: out3 <= 16'hc095;
      59: out3 <= 16'hc064;
      60: out3 <= 16'hc03c;
      61: out3 <= 16'hc01f;
      62: out3 <= 16'hc00b;
      63: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D12_16502(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fe1;
      3: out3 <= 16'h3fc4;
      4: out3 <= 16'h3f9c;
      5: out3 <= 16'h3f6b;
      6: out3 <= 16'h3f30;
      7: out3 <= 16'h3eeb;
      8: out3 <= 16'h3e9d;
      9: out3 <= 16'h3e45;
      10: out3 <= 16'h3de3;
      11: out3 <= 16'h3d78;
      12: out3 <= 16'h3d03;
      13: out3 <= 16'h3c85;
      14: out3 <= 16'h3bfd;
      15: out3 <= 16'h3b6d;
      16: out3 <= 16'h3ad3;
      17: out3 <= 16'h3a30;
      18: out3 <= 16'h3984;
      19: out3 <= 16'h38cf;
      20: out3 <= 16'h3812;
      21: out3 <= 16'h374b;
      22: out3 <= 16'h367d;
      23: out3 <= 16'h35a5;
      24: out3 <= 16'h34c6;
      25: out3 <= 16'h33df;
      26: out3 <= 16'h32ef;
      27: out3 <= 16'h31f8;
      28: out3 <= 16'h30f9;
      29: out3 <= 16'h2ff2;
      30: out3 <= 16'h2ee4;
      31: out3 <= 16'h2dcf;
      32: out3 <= 16'h2cb2;
      33: out3 <= 16'h2b8f;
      34: out3 <= 16'h2a65;
      35: out3 <= 16'h2935;
      36: out3 <= 16'h27fe;
      37: out3 <= 16'h26c1;
      38: out3 <= 16'h257e;
      39: out3 <= 16'h2435;
      40: out3 <= 16'h22e7;
      41: out3 <= 16'h2193;
      42: out3 <= 16'h203a;
      43: out3 <= 16'h1edc;
      44: out3 <= 16'h1d79;
      45: out3 <= 16'h1c12;
      46: out3 <= 16'h1aa7;
      47: out3 <= 16'h1937;
      48: out3 <= 16'h17c4;
      49: out3 <= 16'h164c;
      50: out3 <= 16'h14d2;
      51: out3 <= 16'h1354;
      52: out3 <= 16'h11d3;
      53: out3 <= 16'h1050;
      54: out3 <= 16'heca;
      55: out3 <= 16'hd41;
      56: out3 <= 16'hbb7;
      57: out3 <= 16'ha2b;
      58: out3 <= 16'h89d;
      59: out3 <= 16'h70e;
      60: out3 <= 16'h57e;
      61: out3 <= 16'h3ed;
      62: out3 <= 16'h25b;
      63: out3 <= 16'hc9;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D29_16568(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf82a;
      3: out3 <= 16'hf50f;
      4: out3 <= 16'hf1fa;
      5: out3 <= 16'heeee;
      6: out3 <= 16'hebed;
      7: out3 <= 16'he8f7;
      8: out3 <= 16'he611;
      9: out3 <= 16'he33a;
      10: out3 <= 16'he074;
      11: out3 <= 16'hddc3;
      12: out3 <= 16'hdb26;
      13: out3 <= 16'hd8a0;
      14: out3 <= 16'hd632;
      15: out3 <= 16'hd3df;
      16: out3 <= 16'hd1a6;
      17: out3 <= 16'hcf8a;
      18: out3 <= 16'hcd8c;
      19: out3 <= 16'hcbad;
      20: out3 <= 16'hc9ee;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hc6d5;
      23: out3 <= 16'hc57e;
      24: out3 <= 16'hc44a;
      25: out3 <= 16'hc33b;
      26: out3 <= 16'hc251;
      27: out3 <= 16'hc18e;
      28: out3 <= 16'hc0f1;
      29: out3 <= 16'hc07b;
      30: out3 <= 16'hc02c;
      31: out3 <= 16'hc005;
      32: out3 <= 16'hc005;
      33: out3 <= 16'hc02c;
      34: out3 <= 16'hc07b;
      35: out3 <= 16'hc0f1;
      36: out3 <= 16'hc18e;
      37: out3 <= 16'hc251;
      38: out3 <= 16'hc33b;
      39: out3 <= 16'hc44a;
      40: out3 <= 16'hc57e;
      41: out3 <= 16'hc6d5;
      42: out3 <= 16'hc850;
      43: out3 <= 16'hc9ee;
      44: out3 <= 16'hcbad;
      45: out3 <= 16'hcd8c;
      46: out3 <= 16'hcf8a;
      47: out3 <= 16'hd1a6;
      48: out3 <= 16'hd3df;
      49: out3 <= 16'hd632;
      50: out3 <= 16'hd8a0;
      51: out3 <= 16'hdb26;
      52: out3 <= 16'hddc3;
      53: out3 <= 16'he074;
      54: out3 <= 16'he33a;
      55: out3 <= 16'he611;
      56: out3 <= 16'he8f7;
      57: out3 <= 16'hebed;
      58: out3 <= 16'heeee;
      59: out3 <= 16'hf1fa;
      60: out3 <= 16'hf50f;
      61: out3 <= 16'hf82a;
      62: out3 <= 16'hfb4b;
      63: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D10_16700(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffd;
      1: out3 <= 16'h3fbb;
      2: out3 <= 16'h3f20;
      3: out3 <= 16'h3e2d;
      4: out3 <= 16'h3ce4;
      5: out3 <= 16'h3b47;
      6: out3 <= 16'h3958;
      7: out3 <= 16'h3718;
      8: out3 <= 16'h348d;
      9: out3 <= 16'h31b9;
      10: out3 <= 16'h2e9f;
      11: out3 <= 16'h2b45;
      12: out3 <= 16'h27af;
      13: out3 <= 16'h23e2;
      14: out3 <= 16'h1fe3;
      15: out3 <= 16'h1bb8;
      16: out3 <= 16'h1766;
      17: out3 <= 16'h12f4;
      18: out3 <= 16'he68;
      19: out3 <= 16'h9c7;
      20: out3 <= 16'h51a;
      21: out3 <= 16'h65;
      22: out3 <= 16'hfbaf;
      23: out3 <= 16'hf6ff;
      24: out3 <= 16'hf25c;
      25: out3 <= 16'hedcc;
      26: out3 <= 16'he955;
      27: out3 <= 16'he4fe;
      28: out3 <= 16'he0cc;
      29: out3 <= 16'hdcc5;
      30: out3 <= 16'hd8ef;
      31: out3 <= 16'hd550;
      32: out3 <= 16'hd1eb;
      33: out3 <= 16'hcec7;
      34: out3 <= 16'hcbe7;
      35: out3 <= 16'hc94f;
      36: out3 <= 16'hc703;
      37: out3 <= 16'hc506;
      38: out3 <= 16'hc35b;
      39: out3 <= 16'hc204;
      40: out3 <= 16'hc103;
      41: out3 <= 16'hc059;
      42: out3 <= 16'hc008;
      43: out3 <= 16'hc00f;
      44: out3 <= 16'hc06f;
      45: out3 <= 16'hc128;
      46: out3 <= 16'hc237;
      47: out3 <= 16'hc39c;
      48: out3 <= 16'hc555;
      49: out3 <= 16'hc75f;
      50: out3 <= 16'hc9b8;
      51: out3 <= 16'hcc5d;
      52: out3 <= 16'hcf48;
      53: out3 <= 16'hd278;
      54: out3 <= 16'hd5e6;
      55: out3 <= 16'hd98f;
      56: out3 <= 16'hdd6e;
      57: out3 <= 16'he17c;
      58: out3 <= 16'he5b5;
      59: out3 <= 16'hea12;
      60: out3 <= 16'hee8d;
      61: out3 <= 16'hf321;
      62: out3 <= 16'hf7c7;
      63: out3 <= 16'hfc78;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D13_16766(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f85;
      3: out3 <= 16'h3f0f;
      4: out3 <= 16'h3e72;
      5: out3 <= 16'h3daf;
      6: out3 <= 16'h3cc5;
      7: out3 <= 16'h3bb6;
      8: out3 <= 16'h3a82;
      9: out3 <= 16'h392b;
      10: out3 <= 16'h37b0;
      11: out3 <= 16'h3612;
      12: out3 <= 16'h3453;
      13: out3 <= 16'h3274;
      14: out3 <= 16'h3076;
      15: out3 <= 16'h2e5a;
      16: out3 <= 16'h2c21;
      17: out3 <= 16'h29ce;
      18: out3 <= 16'h2760;
      19: out3 <= 16'h24da;
      20: out3 <= 16'h223d;
      21: out3 <= 16'h1f8c;
      22: out3 <= 16'h1cc6;
      23: out3 <= 16'h19ef;
      24: out3 <= 16'h1709;
      25: out3 <= 16'h1413;
      26: out3 <= 16'h1112;
      27: out3 <= 16'he06;
      28: out3 <= 16'haf1;
      29: out3 <= 16'h7d6;
      30: out3 <= 16'h4b5;
      31: out3 <= 16'h192;
      32: out3 <= 16'hfe6e;
      33: out3 <= 16'hfb4b;
      34: out3 <= 16'hf82a;
      35: out3 <= 16'hf50f;
      36: out3 <= 16'hf1fa;
      37: out3 <= 16'heeee;
      38: out3 <= 16'hebed;
      39: out3 <= 16'he8f7;
      40: out3 <= 16'he611;
      41: out3 <= 16'he33a;
      42: out3 <= 16'he074;
      43: out3 <= 16'hddc3;
      44: out3 <= 16'hdb26;
      45: out3 <= 16'hd8a0;
      46: out3 <= 16'hd632;
      47: out3 <= 16'hd3df;
      48: out3 <= 16'hd1a6;
      49: out3 <= 16'hcf8a;
      50: out3 <= 16'hcd8c;
      51: out3 <= 16'hcbad;
      52: out3 <= 16'hc9ee;
      53: out3 <= 16'hc850;
      54: out3 <= 16'hc6d5;
      55: out3 <= 16'hc57e;
      56: out3 <= 16'hc44a;
      57: out3 <= 16'hc33b;
      58: out3 <= 16'hc251;
      59: out3 <= 16'hc18e;
      60: out3 <= 16'hc0f1;
      61: out3 <= 16'hc07b;
      62: out3 <= 16'hc02c;
      63: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D30_16832(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfda5;
      1: out3 <= 16'hf8f2;
      2: out3 <= 16'hf449;
      3: out3 <= 16'hefb0;
      4: out3 <= 16'heb2e;
      5: out3 <= 16'he6c9;
      6: out3 <= 16'he287;
      7: out3 <= 16'hde6d;
      8: out3 <= 16'hda82;
      9: out3 <= 16'hd6cb;
      10: out3 <= 16'hd34e;
      11: out3 <= 16'hd00e;
      12: out3 <= 16'hcd11;
      13: out3 <= 16'hca5b;
      14: out3 <= 16'hc7ee;
      15: out3 <= 16'hc5d0;
      16: out3 <= 16'hc403;
      17: out3 <= 16'hc288;
      18: out3 <= 16'hc163;
      19: out3 <= 16'hc095;
      20: out3 <= 16'hc01f;
      21: out3 <= 16'hc001;
      22: out3 <= 16'hc03c;
      23: out3 <= 16'hc0d0;
      24: out3 <= 16'hc1bb;
      25: out3 <= 16'hc2fd;
      26: out3 <= 16'hc493;
      27: out3 <= 16'hc67c;
      28: out3 <= 16'hc8b5;
      29: out3 <= 16'hcb3a;
      30: out3 <= 16'hce08;
      31: out3 <= 16'hd11c;
      32: out3 <= 16'hd471;
      33: out3 <= 16'hd802;
      34: out3 <= 16'hdbcb;
      35: out3 <= 16'hdfc6;
      36: out3 <= 16'he3ee;
      37: out3 <= 16'he83c;
      38: out3 <= 16'hecac;
      39: out3 <= 16'hf136;
      40: out3 <= 16'hf5d5;
      41: out3 <= 16'hfa82;
      42: out3 <= 16'hff37;
      43: out3 <= 16'h3ed;
      44: out3 <= 16'h89d;
      45: out3 <= 16'hd41;
      46: out3 <= 16'h11d3;
      47: out3 <= 16'h164c;
      48: out3 <= 16'h1aa7;
      49: out3 <= 16'h1edc;
      50: out3 <= 16'h22e7;
      51: out3 <= 16'h26c1;
      52: out3 <= 16'h2a65;
      53: out3 <= 16'h2dcf;
      54: out3 <= 16'h30f9;
      55: out3 <= 16'h33df;
      56: out3 <= 16'h367d;
      57: out3 <= 16'h38cf;
      58: out3 <= 16'h3ad3;
      59: out3 <= 16'h3c85;
      60: out3 <= 16'h3de3;
      61: out3 <= 16'h3eeb;
      62: out3 <= 16'h3f9c;
      63: out3 <= 16'h3ff5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D9_16898(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3fe1;
      2: out3 <= 16'h3f9c;
      3: out3 <= 16'h3f30;
      4: out3 <= 16'h3e9d;
      5: out3 <= 16'h3de3;
      6: out3 <= 16'h3d03;
      7: out3 <= 16'h3bfd;
      8: out3 <= 16'h3ad3;
      9: out3 <= 16'h3984;
      10: out3 <= 16'h3812;
      11: out3 <= 16'h367d;
      12: out3 <= 16'h34c6;
      13: out3 <= 16'h32ef;
      14: out3 <= 16'h30f9;
      15: out3 <= 16'h2ee4;
      16: out3 <= 16'h2cb2;
      17: out3 <= 16'h2a65;
      18: out3 <= 16'h27fe;
      19: out3 <= 16'h257e;
      20: out3 <= 16'h22e7;
      21: out3 <= 16'h203a;
      22: out3 <= 16'h1d79;
      23: out3 <= 16'h1aa7;
      24: out3 <= 16'h17c4;
      25: out3 <= 16'h14d2;
      26: out3 <= 16'h11d3;
      27: out3 <= 16'heca;
      28: out3 <= 16'hbb7;
      29: out3 <= 16'h89d;
      30: out3 <= 16'h57e;
      31: out3 <= 16'h25b;
      32: out3 <= 16'hff37;
      33: out3 <= 16'hfc13;
      34: out3 <= 16'hf8f2;
      35: out3 <= 16'hf5d5;
      36: out3 <= 16'hf2bf;
      37: out3 <= 16'hefb0;
      38: out3 <= 16'hecac;
      39: out3 <= 16'he9b4;
      40: out3 <= 16'he6c9;
      41: out3 <= 16'he3ee;
      42: out3 <= 16'he124;
      43: out3 <= 16'hde6d;
      44: out3 <= 16'hdbcb;
      45: out3 <= 16'hd93f;
      46: out3 <= 16'hd6cb;
      47: out3 <= 16'hd471;
      48: out3 <= 16'hd231;
      49: out3 <= 16'hd00e;
      50: out3 <= 16'hce08;
      51: out3 <= 16'hcc21;
      52: out3 <= 16'hca5b;
      53: out3 <= 16'hc8b5;
      54: out3 <= 16'hc731;
      55: out3 <= 16'hc5d0;
      56: out3 <= 16'hc493;
      57: out3 <= 16'hc37b;
      58: out3 <= 16'hc288;
      59: out3 <= 16'hc1bb;
      60: out3 <= 16'hc115;
      61: out3 <= 16'hc095;
      62: out3 <= 16'hc03c;
      63: out3 <= 16'hc00b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D26_16964(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfed2;
      1: out3 <= 16'hfa1e;
      2: out3 <= 16'hf572;
      3: out3 <= 16'hf0d5;
      4: out3 <= 16'hec4c;
      5: out3 <= 16'he7df;
      6: out3 <= 16'he394;
      7: out3 <= 16'hdf6f;
      8: out3 <= 16'hdb78;
      9: out3 <= 16'hd7b4;
      10: out3 <= 16'hd428;
      11: out3 <= 16'hd0d8;
      12: out3 <= 16'hcdca;
      13: out3 <= 16'hcb01;
      14: out3 <= 16'hc882;
      15: out3 <= 16'hc650;
      16: out3 <= 16'hc46e;
      17: out3 <= 16'hc2df;
      18: out3 <= 16'hc1a4;
      19: out3 <= 16'hc0c0;
      20: out3 <= 16'hc034;
      21: out3 <= 16'hc000;
      22: out3 <= 16'hc025;
      23: out3 <= 16'hc0a3;
      24: out3 <= 16'hc178;
      25: out3 <= 16'hc2a5;
      26: out3 <= 16'hc426;
      27: out3 <= 16'hc5fa;
      28: out3 <= 16'hc81f;
      29: out3 <= 16'hca92;
      30: out3 <= 16'hcd4e;
      31: out3 <= 16'hd051;
      32: out3 <= 16'hd396;
      33: out3 <= 16'hd719;
      34: out3 <= 16'hdad4;
      35: out3 <= 16'hdec3;
      36: out3 <= 16'he2e0;
      37: out3 <= 16'he725;
      38: out3 <= 16'heb8d;
      39: out3 <= 16'hf012;
      40: out3 <= 16'hf4ac;
      41: out3 <= 16'hf956;
      42: out3 <= 16'hfe09;
      43: out3 <= 16'h2c0;
      44: out3 <= 16'h772;
      45: out3 <= 16'hc1a;
      46: out3 <= 16'h10b1;
      47: out3 <= 16'h1531;
      48: out3 <= 16'h1993;
      49: out3 <= 16'h1dd3;
      50: out3 <= 16'h21e8;
      51: out3 <= 16'h25cf;
      52: out3 <= 16'h2981;
      53: out3 <= 16'h2cfa;
      54: out3 <= 16'h3034;
      55: out3 <= 16'h332c;
      56: out3 <= 16'h35dc;
      57: out3 <= 16'h3842;
      58: out3 <= 16'h3a59;
      59: out3 <= 16'h3c20;
      60: out3 <= 16'h3d93;
      61: out3 <= 16'h3eb1;
      62: out3 <= 16'h3f78;
      63: out3 <= 16'h3fe7;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D14_17030(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ff5;
      1: out3 <= 16'h3f9c;
      2: out3 <= 16'h3eeb;
      3: out3 <= 16'h3de3;
      4: out3 <= 16'h3c85;
      5: out3 <= 16'h3ad3;
      6: out3 <= 16'h38cf;
      7: out3 <= 16'h367d;
      8: out3 <= 16'h33df;
      9: out3 <= 16'h30f9;
      10: out3 <= 16'h2dcf;
      11: out3 <= 16'h2a65;
      12: out3 <= 16'h26c1;
      13: out3 <= 16'h22e7;
      14: out3 <= 16'h1edc;
      15: out3 <= 16'h1aa7;
      16: out3 <= 16'h164c;
      17: out3 <= 16'h11d3;
      18: out3 <= 16'hd41;
      19: out3 <= 16'h89d;
      20: out3 <= 16'h3ed;
      21: out3 <= 16'hff37;
      22: out3 <= 16'hfa82;
      23: out3 <= 16'hf5d5;
      24: out3 <= 16'hf136;
      25: out3 <= 16'hecac;
      26: out3 <= 16'he83c;
      27: out3 <= 16'he3ee;
      28: out3 <= 16'hdfc6;
      29: out3 <= 16'hdbcb;
      30: out3 <= 16'hd802;
      31: out3 <= 16'hd471;
      32: out3 <= 16'hd11c;
      33: out3 <= 16'hce08;
      34: out3 <= 16'hcb3a;
      35: out3 <= 16'hc8b5;
      36: out3 <= 16'hc67c;
      37: out3 <= 16'hc493;
      38: out3 <= 16'hc2fd;
      39: out3 <= 16'hc1bb;
      40: out3 <= 16'hc0d0;
      41: out3 <= 16'hc03c;
      42: out3 <= 16'hc001;
      43: out3 <= 16'hc01f;
      44: out3 <= 16'hc095;
      45: out3 <= 16'hc163;
      46: out3 <= 16'hc288;
      47: out3 <= 16'hc403;
      48: out3 <= 16'hc5d0;
      49: out3 <= 16'hc7ee;
      50: out3 <= 16'hca5b;
      51: out3 <= 16'hcd11;
      52: out3 <= 16'hd00e;
      53: out3 <= 16'hd34e;
      54: out3 <= 16'hd6cb;
      55: out3 <= 16'hda82;
      56: out3 <= 16'hde6d;
      57: out3 <= 16'he287;
      58: out3 <= 16'he6c9;
      59: out3 <= 16'heb2e;
      60: out3 <= 16'hefb0;
      61: out3 <= 16'hf449;
      62: out3 <= 16'hf8f2;
      63: out3 <= 16'hfda5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8_17162(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ff8;
      2: out3 <= 16'h3fe7;
      3: out3 <= 16'h3fcc;
      4: out3 <= 16'h3fa7;
      5: out3 <= 16'h3f78;
      6: out3 <= 16'h3f40;
      7: out3 <= 16'h3efd;
      8: out3 <= 16'h3eb1;
      9: out3 <= 16'h3e5c;
      10: out3 <= 16'h3dfc;
      11: out3 <= 16'h3d93;
      12: out3 <= 16'h3d21;
      13: out3 <= 16'h3ca5;
      14: out3 <= 16'h3c20;
      15: out3 <= 16'h3b92;
      16: out3 <= 16'h3afa;
      17: out3 <= 16'h3a59;
      18: out3 <= 16'h39b0;
      19: out3 <= 16'h38fd;
      20: out3 <= 16'h3842;
      21: out3 <= 16'h377e;
      22: out3 <= 16'h36b1;
      23: out3 <= 16'h35dc;
      24: out3 <= 16'h34ff;
      25: out3 <= 16'h3419;
      26: out3 <= 16'h332c;
      27: out3 <= 16'h3236;
      28: out3 <= 16'h3139;
      29: out3 <= 16'h3034;
      30: out3 <= 16'h2f28;
      31: out3 <= 16'h2e15;
      32: out3 <= 16'h2cfa;
      33: out3 <= 16'h2bd8;
      34: out3 <= 16'h2ab0;
      35: out3 <= 16'h2981;
      36: out3 <= 16'h284c;
      37: out3 <= 16'h2711;
      38: out3 <= 16'h25cf;
      39: out3 <= 16'h2488;
      40: out3 <= 16'h233b;
      41: out3 <= 16'h21e8;
      42: out3 <= 16'h2091;
      43: out3 <= 16'h1f34;
      44: out3 <= 16'h1dd3;
      45: out3 <= 16'h1c6c;
      46: out3 <= 16'h1b02;
      47: out3 <= 16'h1993;
      48: out3 <= 16'h1821;
      49: out3 <= 16'h16ab;
      50: out3 <= 16'h1531;
      51: out3 <= 16'h13b4;
      52: out3 <= 16'h1234;
      53: out3 <= 16'h10b1;
      54: out3 <= 16'hf2b;
      55: out3 <= 16'hda4;
      56: out3 <= 16'hc1a;
      57: out3 <= 16'ha8e;
      58: out3 <= 16'h901;
      59: out3 <= 16'h772;
      60: out3 <= 16'h5e2;
      61: out3 <= 16'h451;
      62: out3 <= 16'h2c0;
      63: out3 <= 16'h12e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D25_17228(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfc13;
      2: out3 <= 16'hf8f2;
      3: out3 <= 16'hf5d5;
      4: out3 <= 16'hf2bf;
      5: out3 <= 16'hefb0;
      6: out3 <= 16'hecac;
      7: out3 <= 16'he9b4;
      8: out3 <= 16'he6c9;
      9: out3 <= 16'he3ee;
      10: out3 <= 16'he124;
      11: out3 <= 16'hde6d;
      12: out3 <= 16'hdbcb;
      13: out3 <= 16'hd93f;
      14: out3 <= 16'hd6cb;
      15: out3 <= 16'hd471;
      16: out3 <= 16'hd231;
      17: out3 <= 16'hd00e;
      18: out3 <= 16'hce08;
      19: out3 <= 16'hcc21;
      20: out3 <= 16'hca5b;
      21: out3 <= 16'hc8b5;
      22: out3 <= 16'hc731;
      23: out3 <= 16'hc5d0;
      24: out3 <= 16'hc493;
      25: out3 <= 16'hc37b;
      26: out3 <= 16'hc288;
      27: out3 <= 16'hc1bb;
      28: out3 <= 16'hc115;
      29: out3 <= 16'hc095;
      30: out3 <= 16'hc03c;
      31: out3 <= 16'hc00b;
      32: out3 <= 16'hc001;
      33: out3 <= 16'hc01f;
      34: out3 <= 16'hc064;
      35: out3 <= 16'hc0d0;
      36: out3 <= 16'hc163;
      37: out3 <= 16'hc21d;
      38: out3 <= 16'hc2fd;
      39: out3 <= 16'hc403;
      40: out3 <= 16'hc52d;
      41: out3 <= 16'hc67c;
      42: out3 <= 16'hc7ee;
      43: out3 <= 16'hc983;
      44: out3 <= 16'hcb3a;
      45: out3 <= 16'hcd11;
      46: out3 <= 16'hcf07;
      47: out3 <= 16'hd11c;
      48: out3 <= 16'hd34e;
      49: out3 <= 16'hd59b;
      50: out3 <= 16'hd802;
      51: out3 <= 16'hda82;
      52: out3 <= 16'hdd19;
      53: out3 <= 16'hdfc6;
      54: out3 <= 16'he287;
      55: out3 <= 16'he559;
      56: out3 <= 16'he83c;
      57: out3 <= 16'heb2e;
      58: out3 <= 16'hee2d;
      59: out3 <= 16'hf136;
      60: out3 <= 16'hf449;
      61: out3 <= 16'hf763;
      62: out3 <= 16'hfa82;
      63: out3 <= 16'hfda5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D32_17426(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfed2;
      1: out3 <= 16'hfd40;
      2: out3 <= 16'hfbaf;
      3: out3 <= 16'hfa1e;
      4: out3 <= 16'hf88e;
      5: out3 <= 16'hf6ff;
      6: out3 <= 16'hf572;
      7: out3 <= 16'hf3e6;
      8: out3 <= 16'hf25c;
      9: out3 <= 16'hf0d5;
      10: out3 <= 16'hef4f;
      11: out3 <= 16'hedcc;
      12: out3 <= 16'hec4c;
      13: out3 <= 16'heacf;
      14: out3 <= 16'he955;
      15: out3 <= 16'he7df;
      16: out3 <= 16'he66d;
      17: out3 <= 16'he4fe;
      18: out3 <= 16'he394;
      19: out3 <= 16'he22d;
      20: out3 <= 16'he0cc;
      21: out3 <= 16'hdf6f;
      22: out3 <= 16'hde18;
      23: out3 <= 16'hdcc5;
      24: out3 <= 16'hdb78;
      25: out3 <= 16'hda31;
      26: out3 <= 16'hd8ef;
      27: out3 <= 16'hd7b4;
      28: out3 <= 16'hd67f;
      29: out3 <= 16'hd550;
      30: out3 <= 16'hd428;
      31: out3 <= 16'hd306;
      32: out3 <= 16'hd1eb;
      33: out3 <= 16'hd0d8;
      34: out3 <= 16'hcfcc;
      35: out3 <= 16'hcec7;
      36: out3 <= 16'hcdca;
      37: out3 <= 16'hccd4;
      38: out3 <= 16'hcbe7;
      39: out3 <= 16'hcb01;
      40: out3 <= 16'hca24;
      41: out3 <= 16'hc94f;
      42: out3 <= 16'hc882;
      43: out3 <= 16'hc7be;
      44: out3 <= 16'hc703;
      45: out3 <= 16'hc650;
      46: out3 <= 16'hc5a7;
      47: out3 <= 16'hc506;
      48: out3 <= 16'hc46e;
      49: out3 <= 16'hc3e0;
      50: out3 <= 16'hc35b;
      51: out3 <= 16'hc2df;
      52: out3 <= 16'hc26d;
      53: out3 <= 16'hc204;
      54: out3 <= 16'hc1a4;
      55: out3 <= 16'hc14f;
      56: out3 <= 16'hc103;
      57: out3 <= 16'hc0c0;
      58: out3 <= 16'hc088;
      59: out3 <= 16'hc059;
      60: out3 <= 16'hc034;
      61: out3 <= 16'hc019;
      62: out3 <= 16'hc008;
      63: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D24_17492(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff9b;
      1: out3 <= 16'hfe09;
      2: out3 <= 16'hfc78;
      3: out3 <= 16'hfae6;
      4: out3 <= 16'hf956;
      5: out3 <= 16'hf7c7;
      6: out3 <= 16'hf639;
      7: out3 <= 16'hf4ac;
      8: out3 <= 16'hf321;
      9: out3 <= 16'hf198;
      10: out3 <= 16'hf012;
      11: out3 <= 16'hee8d;
      12: out3 <= 16'hed0c;
      13: out3 <= 16'heb8d;
      14: out3 <= 16'hea12;
      15: out3 <= 16'he89a;
      16: out3 <= 16'he725;
      17: out3 <= 16'he5b5;
      18: out3 <= 16'he448;
      19: out3 <= 16'he2e0;
      20: out3 <= 16'he17c;
      21: out3 <= 16'he01d;
      22: out3 <= 16'hdec3;
      23: out3 <= 16'hdd6e;
      24: out3 <= 16'hdc1e;
      25: out3 <= 16'hdad4;
      26: out3 <= 16'hd98f;
      27: out3 <= 16'hd851;
      28: out3 <= 16'hd719;
      29: out3 <= 16'hd5e6;
      30: out3 <= 16'hd4bb;
      31: out3 <= 16'hd396;
      32: out3 <= 16'hd278;
      33: out3 <= 16'hd161;
      34: out3 <= 16'hd051;
      35: out3 <= 16'hcf48;
      36: out3 <= 16'hce47;
      37: out3 <= 16'hcd4e;
      38: out3 <= 16'hcc5d;
      39: out3 <= 16'hcb73;
      40: out3 <= 16'hca92;
      41: out3 <= 16'hc9b8;
      42: out3 <= 16'hc8e8;
      43: out3 <= 16'hc81f;
      44: out3 <= 16'hc75f;
      45: out3 <= 16'hc6a8;
      46: out3 <= 16'hc5fa;
      47: out3 <= 16'hc555;
      48: out3 <= 16'hc4b9;
      49: out3 <= 16'hc426;
      50: out3 <= 16'hc39c;
      51: out3 <= 16'hc31c;
      52: out3 <= 16'hc2a5;
      53: out3 <= 16'hc237;
      54: out3 <= 16'hc1d3;
      55: out3 <= 16'hc178;
      56: out3 <= 16'hc128;
      57: out3 <= 16'hc0e0;
      58: out3 <= 16'hc0a3;
      59: out3 <= 16'hc06f;
      60: out3 <= 16'hc045;
      61: out3 <= 16'hc025;
      62: out3 <= 16'hc00f;
      63: out3 <= 16'hc003;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16_17558(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffd;
      1: out3 <= 16'h3ff1;
      2: out3 <= 16'h3fdb;
      3: out3 <= 16'h3fbb;
      4: out3 <= 16'h3f91;
      5: out3 <= 16'h3f5d;
      6: out3 <= 16'h3f20;
      7: out3 <= 16'h3ed8;
      8: out3 <= 16'h3e88;
      9: out3 <= 16'h3e2d;
      10: out3 <= 16'h3dc9;
      11: out3 <= 16'h3d5b;
      12: out3 <= 16'h3ce4;
      13: out3 <= 16'h3c64;
      14: out3 <= 16'h3bda;
      15: out3 <= 16'h3b47;
      16: out3 <= 16'h3aab;
      17: out3 <= 16'h3a06;
      18: out3 <= 16'h3958;
      19: out3 <= 16'h38a1;
      20: out3 <= 16'h37e1;
      21: out3 <= 16'h3718;
      22: out3 <= 16'h3648;
      23: out3 <= 16'h356e;
      24: out3 <= 16'h348d;
      25: out3 <= 16'h33a3;
      26: out3 <= 16'h32b2;
      27: out3 <= 16'h31b9;
      28: out3 <= 16'h30b8;
      29: out3 <= 16'h2faf;
      30: out3 <= 16'h2e9f;
      31: out3 <= 16'h2d88;
      32: out3 <= 16'h2c6a;
      33: out3 <= 16'h2b45;
      34: out3 <= 16'h2a1a;
      35: out3 <= 16'h28e7;
      36: out3 <= 16'h27af;
      37: out3 <= 16'h2671;
      38: out3 <= 16'h252c;
      39: out3 <= 16'h23e2;
      40: out3 <= 16'h2292;
      41: out3 <= 16'h213d;
      42: out3 <= 16'h1fe3;
      43: out3 <= 16'h1e84;
      44: out3 <= 16'h1d20;
      45: out3 <= 16'h1bb8;
      46: out3 <= 16'h1a4b;
      47: out3 <= 16'h18db;
      48: out3 <= 16'h1766;
      49: out3 <= 16'h15ee;
      50: out3 <= 16'h1473;
      51: out3 <= 16'h12f4;
      52: out3 <= 16'h1173;
      53: out3 <= 16'hfee;
      54: out3 <= 16'he68;
      55: out3 <= 16'hcdf;
      56: out3 <= 16'hb54;
      57: out3 <= 16'h9c7;
      58: out3 <= 16'h839;
      59: out3 <= 16'h6aa;
      60: out3 <= 16'h51a;
      61: out3 <= 16'h388;
      62: out3 <= 16'h1f7;
      63: out3 <= 16'h65;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_17624(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f4f;
      3: out3 <= 16'h3e72;
      4: out3 <= 16'h3d3f;
      5: out3 <= 16'h3bb6;
      6: out3 <= 16'h39db;
      7: out3 <= 16'h37b0;
      8: out3 <= 16'h3537;
      9: out3 <= 16'h3274;
      10: out3 <= 16'h2f6c;
      11: out3 <= 16'h2c21;
      12: out3 <= 16'h289a;
      13: out3 <= 16'h24da;
      14: out3 <= 16'h20e7;
      15: out3 <= 16'h1cc6;
      16: out3 <= 16'h187e;
      17: out3 <= 16'h1413;
      18: out3 <= 16'hf8d;
      19: out3 <= 16'haf1;
      20: out3 <= 16'h646;
      21: out3 <= 16'h192;
      22: out3 <= 16'hfcdc;
      23: out3 <= 16'hf82a;
      24: out3 <= 16'hf384;
      25: out3 <= 16'heeee;
      26: out3 <= 16'hea70;
      27: out3 <= 16'he611;
      28: out3 <= 16'he1d5;
      29: out3 <= 16'hddc3;
      30: out3 <= 16'hd9e0;
      31: out3 <= 16'hd632;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hcf8a;
      34: out3 <= 16'hcc98;
      35: out3 <= 16'hc9ee;
      36: out3 <= 16'hc78f;
      37: out3 <= 16'hc57e;
      38: out3 <= 16'hc3be;
      39: out3 <= 16'hc251;
      40: out3 <= 16'hc13b;
      41: out3 <= 16'hc07b;
      42: out3 <= 16'hc014;
      43: out3 <= 16'hc005;
      44: out3 <= 16'hc04f;
      45: out3 <= 16'hc0f1;
      46: out3 <= 16'hc1eb;
      47: out3 <= 16'hc33b;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc6d5;
      50: out3 <= 16'hc91b;
      51: out3 <= 16'hcbad;
      52: out3 <= 16'hce87;
      53: out3 <= 16'hd1a6;
      54: out3 <= 16'hd505;
      55: out3 <= 16'hd8a0;
      56: out3 <= 16'hdc72;
      57: out3 <= 16'he074;
      58: out3 <= 16'he4a3;
      59: out3 <= 16'he8f7;
      60: out3 <= 16'hed6c;
      61: out3 <= 16'hf1fa;
      62: out3 <= 16'hf69c;
      63: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D33_17690(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfda5;
      1: out3 <= 16'hfa82;
      2: out3 <= 16'hf763;
      3: out3 <= 16'hf449;
      4: out3 <= 16'hf136;
      5: out3 <= 16'hee2d;
      6: out3 <= 16'heb2e;
      7: out3 <= 16'he83c;
      8: out3 <= 16'he559;
      9: out3 <= 16'he287;
      10: out3 <= 16'hdfc6;
      11: out3 <= 16'hdd19;
      12: out3 <= 16'hda82;
      13: out3 <= 16'hd802;
      14: out3 <= 16'hd59b;
      15: out3 <= 16'hd34e;
      16: out3 <= 16'hd11c;
      17: out3 <= 16'hcf07;
      18: out3 <= 16'hcd11;
      19: out3 <= 16'hcb3a;
      20: out3 <= 16'hc983;
      21: out3 <= 16'hc7ee;
      22: out3 <= 16'hc67c;
      23: out3 <= 16'hc52d;
      24: out3 <= 16'hc403;
      25: out3 <= 16'hc2fd;
      26: out3 <= 16'hc21d;
      27: out3 <= 16'hc163;
      28: out3 <= 16'hc0d0;
      29: out3 <= 16'hc064;
      30: out3 <= 16'hc01f;
      31: out3 <= 16'hc001;
      32: out3 <= 16'hc00b;
      33: out3 <= 16'hc03c;
      34: out3 <= 16'hc095;
      35: out3 <= 16'hc115;
      36: out3 <= 16'hc1bb;
      37: out3 <= 16'hc288;
      38: out3 <= 16'hc37b;
      39: out3 <= 16'hc493;
      40: out3 <= 16'hc5d0;
      41: out3 <= 16'hc731;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hca5b;
      44: out3 <= 16'hcc21;
      45: out3 <= 16'hce08;
      46: out3 <= 16'hd00e;
      47: out3 <= 16'hd231;
      48: out3 <= 16'hd471;
      49: out3 <= 16'hd6cb;
      50: out3 <= 16'hd93f;
      51: out3 <= 16'hdbcb;
      52: out3 <= 16'hde6d;
      53: out3 <= 16'he124;
      54: out3 <= 16'he3ee;
      55: out3 <= 16'he6c9;
      56: out3 <= 16'he9b4;
      57: out3 <= 16'hecac;
      58: out3 <= 16'hefb0;
      59: out3 <= 16'hf2bf;
      60: out3 <= 16'hf5d5;
      61: out3 <= 16'hf8f2;
      62: out3 <= 16'hfc13;
      63: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D17_17756(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ff5;
      1: out3 <= 16'h3fc4;
      2: out3 <= 16'h3f6b;
      3: out3 <= 16'h3eeb;
      4: out3 <= 16'h3e45;
      5: out3 <= 16'h3d78;
      6: out3 <= 16'h3c85;
      7: out3 <= 16'h3b6d;
      8: out3 <= 16'h3a30;
      9: out3 <= 16'h38cf;
      10: out3 <= 16'h374b;
      11: out3 <= 16'h35a5;
      12: out3 <= 16'h33df;
      13: out3 <= 16'h31f8;
      14: out3 <= 16'h2ff2;
      15: out3 <= 16'h2dcf;
      16: out3 <= 16'h2b8f;
      17: out3 <= 16'h2935;
      18: out3 <= 16'h26c1;
      19: out3 <= 16'h2435;
      20: out3 <= 16'h2193;
      21: out3 <= 16'h1edc;
      22: out3 <= 16'h1c12;
      23: out3 <= 16'h1937;
      24: out3 <= 16'h164c;
      25: out3 <= 16'h1354;
      26: out3 <= 16'h1050;
      27: out3 <= 16'hd41;
      28: out3 <= 16'ha2b;
      29: out3 <= 16'h70e;
      30: out3 <= 16'h3ed;
      31: out3 <= 16'hc9;
      32: out3 <= 16'hfda5;
      33: out3 <= 16'hfa82;
      34: out3 <= 16'hf763;
      35: out3 <= 16'hf449;
      36: out3 <= 16'hf136;
      37: out3 <= 16'hee2d;
      38: out3 <= 16'heb2e;
      39: out3 <= 16'he83c;
      40: out3 <= 16'he559;
      41: out3 <= 16'he287;
      42: out3 <= 16'hdfc6;
      43: out3 <= 16'hdd19;
      44: out3 <= 16'hda82;
      45: out3 <= 16'hd802;
      46: out3 <= 16'hd59b;
      47: out3 <= 16'hd34e;
      48: out3 <= 16'hd11c;
      49: out3 <= 16'hcf07;
      50: out3 <= 16'hcd11;
      51: out3 <= 16'hcb3a;
      52: out3 <= 16'hc983;
      53: out3 <= 16'hc7ee;
      54: out3 <= 16'hc67c;
      55: out3 <= 16'hc52d;
      56: out3 <= 16'hc403;
      57: out3 <= 16'hc2fd;
      58: out3 <= 16'hc21d;
      59: out3 <= 16'hc163;
      60: out3 <= 16'hc0d0;
      61: out3 <= 16'hc064;
      62: out3 <= 16'hc01f;
      63: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D5_17888(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fec;
      2: out3 <= 16'h3fb1;
      3: out3 <= 16'h3f4f;
      4: out3 <= 16'h3ec5;
      5: out3 <= 16'h3e15;
      6: out3 <= 16'h3d3f;
      7: out3 <= 16'h3c42;
      8: out3 <= 16'h3b21;
      9: out3 <= 16'h39db;
      10: out3 <= 16'h3871;
      11: out3 <= 16'h36e5;
      12: out3 <= 16'h3537;
      13: out3 <= 16'h3368;
      14: out3 <= 16'h3179;
      15: out3 <= 16'h2f6c;
      16: out3 <= 16'h2d41;
      17: out3 <= 16'h2afb;
      18: out3 <= 16'h289a;
      19: out3 <= 16'h2620;
      20: out3 <= 16'h238e;
      21: out3 <= 16'h20e7;
      22: out3 <= 16'h1e2b;
      23: out3 <= 16'h1b5d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h1590;
      26: out3 <= 16'h1294;
      27: out3 <= 16'hf8d;
      28: out3 <= 16'hc7c;
      29: out3 <= 16'h964;
      30: out3 <= 16'h646;
      31: out3 <= 16'h324;
      32: out3 <= 16'h0;
      33: out3 <= 16'hfcdc;
      34: out3 <= 16'hf9ba;
      35: out3 <= 16'hf69c;
      36: out3 <= 16'hf384;
      37: out3 <= 16'hf073;
      38: out3 <= 16'hed6c;
      39: out3 <= 16'hea70;
      40: out3 <= 16'he782;
      41: out3 <= 16'he4a3;
      42: out3 <= 16'he1d5;
      43: out3 <= 16'hdf19;
      44: out3 <= 16'hdc72;
      45: out3 <= 16'hd9e0;
      46: out3 <= 16'hd766;
      47: out3 <= 16'hd505;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd094;
      50: out3 <= 16'hce87;
      51: out3 <= 16'hcc98;
      52: out3 <= 16'hcac9;
      53: out3 <= 16'hc91b;
      54: out3 <= 16'hc78f;
      55: out3 <= 16'hc625;
      56: out3 <= 16'hc4df;
      57: out3 <= 16'hc3be;
      58: out3 <= 16'hc2c1;
      59: out3 <= 16'hc1eb;
      60: out3 <= 16'hc13b;
      61: out3 <= 16'hc0b1;
      62: out3 <= 16'hc04f;
      63: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D34_17954(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfc78;
      1: out3 <= 16'hf7c7;
      2: out3 <= 16'hf321;
      3: out3 <= 16'hee8d;
      4: out3 <= 16'hea12;
      5: out3 <= 16'he5b5;
      6: out3 <= 16'he17c;
      7: out3 <= 16'hdd6e;
      8: out3 <= 16'hd98f;
      9: out3 <= 16'hd5e6;
      10: out3 <= 16'hd278;
      11: out3 <= 16'hcf48;
      12: out3 <= 16'hcc5d;
      13: out3 <= 16'hc9b8;
      14: out3 <= 16'hc75f;
      15: out3 <= 16'hc555;
      16: out3 <= 16'hc39c;
      17: out3 <= 16'hc237;
      18: out3 <= 16'hc128;
      19: out3 <= 16'hc06f;
      20: out3 <= 16'hc00f;
      21: out3 <= 16'hc008;
      22: out3 <= 16'hc059;
      23: out3 <= 16'hc103;
      24: out3 <= 16'hc204;
      25: out3 <= 16'hc35b;
      26: out3 <= 16'hc506;
      27: out3 <= 16'hc703;
      28: out3 <= 16'hc94f;
      29: out3 <= 16'hcbe7;
      30: out3 <= 16'hcec7;
      31: out3 <= 16'hd1eb;
      32: out3 <= 16'hd550;
      33: out3 <= 16'hd8ef;
      34: out3 <= 16'hdcc5;
      35: out3 <= 16'he0cc;
      36: out3 <= 16'he4fe;
      37: out3 <= 16'he955;
      38: out3 <= 16'hedcc;
      39: out3 <= 16'hf25c;
      40: out3 <= 16'hf6ff;
      41: out3 <= 16'hfbaf;
      42: out3 <= 16'h65;
      43: out3 <= 16'h51a;
      44: out3 <= 16'h9c7;
      45: out3 <= 16'he68;
      46: out3 <= 16'h12f4;
      47: out3 <= 16'h1766;
      48: out3 <= 16'h1bb8;
      49: out3 <= 16'h1fe3;
      50: out3 <= 16'h23e2;
      51: out3 <= 16'h27af;
      52: out3 <= 16'h2b45;
      53: out3 <= 16'h2e9f;
      54: out3 <= 16'h31b9;
      55: out3 <= 16'h348d;
      56: out3 <= 16'h3718;
      57: out3 <= 16'h3958;
      58: out3 <= 16'h3b47;
      59: out3 <= 16'h3ce4;
      60: out3 <= 16'h3e2d;
      61: out3 <= 16'h3f20;
      62: out3 <= 16'h3fbb;
      63: out3 <= 16'h3ffd;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D18_18020(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fe7;
      1: out3 <= 16'h3f78;
      2: out3 <= 16'h3eb1;
      3: out3 <= 16'h3d93;
      4: out3 <= 16'h3c20;
      5: out3 <= 16'h3a59;
      6: out3 <= 16'h3842;
      7: out3 <= 16'h35dc;
      8: out3 <= 16'h332c;
      9: out3 <= 16'h3034;
      10: out3 <= 16'h2cfa;
      11: out3 <= 16'h2981;
      12: out3 <= 16'h25cf;
      13: out3 <= 16'h21e8;
      14: out3 <= 16'h1dd3;
      15: out3 <= 16'h1993;
      16: out3 <= 16'h1531;
      17: out3 <= 16'h10b1;
      18: out3 <= 16'hc1a;
      19: out3 <= 16'h772;
      20: out3 <= 16'h2c0;
      21: out3 <= 16'hfe09;
      22: out3 <= 16'hf956;
      23: out3 <= 16'hf4ac;
      24: out3 <= 16'hf012;
      25: out3 <= 16'heb8d;
      26: out3 <= 16'he725;
      27: out3 <= 16'he2e0;
      28: out3 <= 16'hdec3;
      29: out3 <= 16'hdad4;
      30: out3 <= 16'hd719;
      31: out3 <= 16'hd396;
      32: out3 <= 16'hd051;
      33: out3 <= 16'hcd4e;
      34: out3 <= 16'hca92;
      35: out3 <= 16'hc81f;
      36: out3 <= 16'hc5fa;
      37: out3 <= 16'hc426;
      38: out3 <= 16'hc2a5;
      39: out3 <= 16'hc178;
      40: out3 <= 16'hc0a3;
      41: out3 <= 16'hc025;
      42: out3 <= 16'hc000;
      43: out3 <= 16'hc034;
      44: out3 <= 16'hc0c0;
      45: out3 <= 16'hc1a4;
      46: out3 <= 16'hc2df;
      47: out3 <= 16'hc46e;
      48: out3 <= 16'hc650;
      49: out3 <= 16'hc882;
      50: out3 <= 16'hcb01;
      51: out3 <= 16'hcdca;
      52: out3 <= 16'hd0d8;
      53: out3 <= 16'hd428;
      54: out3 <= 16'hd7b4;
      55: out3 <= 16'hdb78;
      56: out3 <= 16'hdf6f;
      57: out3 <= 16'he394;
      58: out3 <= 16'he7df;
      59: out3 <= 16'hec4c;
      60: out3 <= 16'hf0d5;
      61: out3 <= 16'hf572;
      62: out3 <= 16'hfa1e;
      63: out3 <= 16'hfed2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D22_18086(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf69c;
      3: out3 <= 16'hf1fa;
      4: out3 <= 16'hed6c;
      5: out3 <= 16'he8f7;
      6: out3 <= 16'he4a3;
      7: out3 <= 16'he074;
      8: out3 <= 16'hdc72;
      9: out3 <= 16'hd8a0;
      10: out3 <= 16'hd505;
      11: out3 <= 16'hd1a6;
      12: out3 <= 16'hce87;
      13: out3 <= 16'hcbad;
      14: out3 <= 16'hc91b;
      15: out3 <= 16'hc6d5;
      16: out3 <= 16'hc4df;
      17: out3 <= 16'hc33b;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc0f1;
      20: out3 <= 16'hc04f;
      21: out3 <= 16'hc005;
      22: out3 <= 16'hc014;
      23: out3 <= 16'hc07b;
      24: out3 <= 16'hc13b;
      25: out3 <= 16'hc251;
      26: out3 <= 16'hc3be;
      27: out3 <= 16'hc57e;
      28: out3 <= 16'hc78f;
      29: out3 <= 16'hc9ee;
      30: out3 <= 16'hcc98;
      31: out3 <= 16'hcf8a;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd632;
      34: out3 <= 16'hd9e0;
      35: out3 <= 16'hddc3;
      36: out3 <= 16'he1d5;
      37: out3 <= 16'he611;
      38: out3 <= 16'hea70;
      39: out3 <= 16'heeee;
      40: out3 <= 16'hf384;
      41: out3 <= 16'hf82a;
      42: out3 <= 16'hfcdc;
      43: out3 <= 16'h192;
      44: out3 <= 16'h646;
      45: out3 <= 16'haf1;
      46: out3 <= 16'hf8d;
      47: out3 <= 16'h1413;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1cc6;
      50: out3 <= 16'h20e7;
      51: out3 <= 16'h24da;
      52: out3 <= 16'h289a;
      53: out3 <= 16'h2c21;
      54: out3 <= 16'h2f6c;
      55: out3 <= 16'h3274;
      56: out3 <= 16'h3537;
      57: out3 <= 16'h37b0;
      58: out3 <= 16'h39db;
      59: out3 <= 16'h3bb6;
      60: out3 <= 16'h3d3f;
      61: out3 <= 16'h3e72;
      62: out3 <= 16'h3f4f;
      63: out3 <= 16'h3fd4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_18152(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffb;
      2: out3 <= 16'h3fec;
      3: out3 <= 16'h3fd4;
      4: out3 <= 16'h3fb1;
      5: out3 <= 16'h3f85;
      6: out3 <= 16'h3f4f;
      7: out3 <= 16'h3f0f;
      8: out3 <= 16'h3ec5;
      9: out3 <= 16'h3e72;
      10: out3 <= 16'h3e15;
      11: out3 <= 16'h3daf;
      12: out3 <= 16'h3d3f;
      13: out3 <= 16'h3cc5;
      14: out3 <= 16'h3c42;
      15: out3 <= 16'h3bb6;
      16: out3 <= 16'h3b21;
      17: out3 <= 16'h3a82;
      18: out3 <= 16'h39db;
      19: out3 <= 16'h392b;
      20: out3 <= 16'h3871;
      21: out3 <= 16'h37b0;
      22: out3 <= 16'h36e5;
      23: out3 <= 16'h3612;
      24: out3 <= 16'h3537;
      25: out3 <= 16'h3453;
      26: out3 <= 16'h3368;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h3179;
      29: out3 <= 16'h3076;
      30: out3 <= 16'h2f6c;
      31: out3 <= 16'h2e5a;
      32: out3 <= 16'h2d41;
      33: out3 <= 16'h2c21;
      34: out3 <= 16'h2afb;
      35: out3 <= 16'h29ce;
      36: out3 <= 16'h289a;
      37: out3 <= 16'h2760;
      38: out3 <= 16'h2620;
      39: out3 <= 16'h24da;
      40: out3 <= 16'h238e;
      41: out3 <= 16'h223d;
      42: out3 <= 16'h20e7;
      43: out3 <= 16'h1f8c;
      44: out3 <= 16'h1e2b;
      45: out3 <= 16'h1cc6;
      46: out3 <= 16'h1b5d;
      47: out3 <= 16'h19ef;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1709;
      50: out3 <= 16'h1590;
      51: out3 <= 16'h1413;
      52: out3 <= 16'h1294;
      53: out3 <= 16'h1112;
      54: out3 <= 16'hf8d;
      55: out3 <= 16'he06;
      56: out3 <= 16'hc7c;
      57: out3 <= 16'haf1;
      58: out3 <= 16'h964;
      59: out3 <= 16'h7d6;
      60: out3 <= 16'h646;
      61: out3 <= 16'h4b5;
      62: out3 <= 16'h324;
      63: out3 <= 16'h192;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock14760(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i1_in;
   reg [5:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(7, 1) shiftFIFO_24629(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a418;
   wire signed [15:0] a322;
   wire signed [15:0] a421;
   wire signed [15:0] a326;
   wire signed [15:0] a422;
   wire signed [15:0] a423;
   wire signed [15:0] a426;
   wire signed [15:0] a427;
   wire signed [15:0] a430;
   wire signed [15:0] a431;
   wire signed [15:0] a434;
   wire signed [15:0] a346;
   wire signed [15:0] a437;
   wire signed [15:0] a350;
   wire signed [15:0] a438;
   wire signed [15:0] a439;
   wire signed [15:0] a442;
   wire signed [15:0] a443;
   wire signed [15:0] a446;
   wire signed [15:0] a447;
   wire signed [15:0] a450;
   wire signed [15:0] a370;
   wire signed [15:0] a453;
   wire signed [15:0] a374;
   wire signed [15:0] a454;
   wire signed [15:0] a455;
   wire signed [15:0] a458;
   wire signed [15:0] a459;
   wire signed [15:0] a462;
   wire signed [15:0] a463;
   wire signed [15:0] a466;
   wire signed [15:0] a395;
   wire signed [15:0] a469;
   wire signed [15:0] a399;
   wire signed [15:0] a470;
   wire signed [15:0] a471;
   wire signed [15:0] a474;
   wire signed [15:0] a475;
   wire signed [15:0] a478;
   wire signed [15:0] a479;
   reg signed [15:0] tm1373;
   reg signed [15:0] tm1377;
   reg signed [15:0] tm1389;
   reg signed [15:0] tm1393;
   reg signed [15:0] tm1405;
   reg signed [15:0] tm1409;
   reg signed [15:0] tm1421;
   reg signed [15:0] tm1425;
   reg signed [15:0] tm1437;
   reg signed [15:0] tm1441;
   reg signed [15:0] tm1453;
   reg signed [15:0] tm1457;
   reg signed [15:0] tm1469;
   reg signed [15:0] tm1473;
   reg signed [15:0] tm1485;
   reg signed [15:0] tm1489;
   reg signed [15:0] tm1501;
   reg signed [15:0] tm1505;
   reg signed [15:0] tm1517;
   reg signed [15:0] tm1521;
   reg signed [15:0] tm1533;
   reg signed [15:0] tm1537;
   reg signed [15:0] tm1549;
   reg signed [15:0] tm1553;
   reg signed [15:0] tm1565;
   reg signed [15:0] tm1572;
   reg signed [15:0] tm1579;
   reg signed [15:0] tm1586;
   reg signed [15:0] tm1593;
   reg signed [15:0] tm1600;
   reg signed [15:0] tm1607;
   reg signed [15:0] tm1614;
   reg signed [15:0] tm1374;
   reg signed [15:0] tm1378;
   reg signed [15:0] tm1390;
   reg signed [15:0] tm1394;
   reg signed [15:0] tm1406;
   reg signed [15:0] tm1410;
   reg signed [15:0] tm1422;
   reg signed [15:0] tm1426;
   reg signed [15:0] tm1438;
   reg signed [15:0] tm1442;
   reg signed [15:0] tm1454;
   reg signed [15:0] tm1458;
   reg signed [15:0] tm1470;
   reg signed [15:0] tm1474;
   reg signed [15:0] tm1486;
   reg signed [15:0] tm1490;
   reg signed [15:0] tm1502;
   reg signed [15:0] tm1506;
   reg signed [15:0] tm1518;
   reg signed [15:0] tm1522;
   reg signed [15:0] tm1534;
   reg signed [15:0] tm1538;
   reg signed [15:0] tm1550;
   reg signed [15:0] tm1554;
   reg signed [15:0] tm1566;
   reg signed [15:0] tm1573;
   reg signed [15:0] tm1580;
   reg signed [15:0] tm1587;
   reg signed [15:0] tm1594;
   reg signed [15:0] tm1601;
   reg signed [15:0] tm1608;
   reg signed [15:0] tm1615;
   wire signed [15:0] tm94;
   wire signed [15:0] a327;
   wire signed [15:0] tm95;
   wire signed [15:0] a329;
   wire signed [15:0] tm96;
   wire signed [15:0] a333;
   wire signed [15:0] tm97;
   wire signed [15:0] a335;
   wire signed [15:0] tm98;
   wire signed [15:0] a339;
   wire signed [15:0] tm99;
   wire signed [15:0] a341;
   wire signed [15:0] tm102;
   wire signed [15:0] a351;
   wire signed [15:0] tm103;
   wire signed [15:0] a353;
   wire signed [15:0] tm104;
   wire signed [15:0] a357;
   wire signed [15:0] tm105;
   wire signed [15:0] a359;
   wire signed [15:0] tm106;
   wire signed [15:0] a363;
   wire signed [15:0] tm107;
   wire signed [15:0] a365;
   wire signed [15:0] tm110;
   wire signed [15:0] a375;
   wire signed [15:0] tm111;
   wire signed [15:0] a377;
   wire signed [15:0] tm112;
   wire signed [15:0] a381;
   wire signed [15:0] tm113;
   wire signed [15:0] a383;
   wire signed [15:0] tm114;
   wire signed [15:0] a388;
   wire signed [15:0] tm115;
   wire signed [15:0] a390;
   wire signed [15:0] tm118;
   wire signed [15:0] a400;
   wire signed [15:0] tm119;
   wire signed [15:0] a402;
   wire signed [15:0] tm120;
   wire signed [15:0] a406;
   wire signed [15:0] tm121;
   wire signed [15:0] a408;
   wire signed [15:0] tm122;
   wire signed [15:0] a412;
   wire signed [15:0] tm123;
   wire signed [15:0] a414;
   reg signed [15:0] tm1375;
   reg signed [15:0] tm1379;
   reg signed [15:0] tm1391;
   reg signed [15:0] tm1395;
   reg signed [15:0] tm1407;
   reg signed [15:0] tm1411;
   reg signed [15:0] tm1423;
   reg signed [15:0] tm1427;
   reg signed [15:0] tm1439;
   reg signed [15:0] tm1443;
   reg signed [15:0] tm1455;
   reg signed [15:0] tm1459;
   reg signed [15:0] tm1471;
   reg signed [15:0] tm1475;
   reg signed [15:0] tm1487;
   reg signed [15:0] tm1491;
   reg signed [15:0] tm1503;
   reg signed [15:0] tm1507;
   reg signed [15:0] tm1519;
   reg signed [15:0] tm1523;
   reg signed [15:0] tm1535;
   reg signed [15:0] tm1539;
   reg signed [15:0] tm1551;
   reg signed [15:0] tm1555;
   reg signed [15:0] tm1567;
   reg signed [15:0] tm1574;
   reg signed [15:0] tm1581;
   reg signed [15:0] tm1588;
   reg signed [15:0] tm1595;
   reg signed [15:0] tm1602;
   reg signed [15:0] tm1609;
   reg signed [15:0] tm1616;
   reg signed [15:0] tm257;
   reg signed [15:0] tm258;
   reg signed [15:0] tm261;
   reg signed [15:0] tm262;
   reg signed [15:0] tm265;
   reg signed [15:0] tm266;
   reg signed [15:0] tm273;
   reg signed [15:0] tm274;
   reg signed [15:0] tm277;
   reg signed [15:0] tm278;
   reg signed [15:0] tm281;
   reg signed [15:0] tm282;
   reg signed [15:0] tm289;
   reg signed [15:0] tm290;
   reg signed [15:0] tm293;
   reg signed [15:0] tm294;
   reg signed [15:0] tm297;
   reg signed [15:0] tm298;
   reg signed [15:0] tm305;
   reg signed [15:0] tm306;
   reg signed [15:0] tm309;
   reg signed [15:0] tm310;
   reg signed [15:0] tm313;
   reg signed [15:0] tm314;
   reg signed [15:0] tm1376;
   reg signed [15:0] tm1380;
   reg signed [15:0] tm1392;
   reg signed [15:0] tm1396;
   reg signed [15:0] tm1408;
   reg signed [15:0] tm1412;
   reg signed [15:0] tm1424;
   reg signed [15:0] tm1428;
   reg signed [15:0] tm1440;
   reg signed [15:0] tm1444;
   reg signed [15:0] tm1456;
   reg signed [15:0] tm1460;
   reg signed [15:0] tm1472;
   reg signed [15:0] tm1476;
   reg signed [15:0] tm1488;
   reg signed [15:0] tm1492;
   reg signed [15:0] tm1504;
   reg signed [15:0] tm1508;
   reg signed [15:0] tm1520;
   reg signed [15:0] tm1524;
   reg signed [15:0] tm1536;
   reg signed [15:0] tm1540;
   reg signed [15:0] tm1552;
   reg signed [15:0] tm1556;
   reg signed [15:0] tm1568;
   reg signed [15:0] tm1575;
   reg signed [15:0] tm1582;
   reg signed [15:0] tm1589;
   reg signed [15:0] tm1596;
   reg signed [15:0] tm1603;
   reg signed [15:0] tm1610;
   reg signed [15:0] tm1617;
   reg signed [15:0] tm1569;
   reg signed [15:0] tm1576;
   reg signed [15:0] tm1583;
   reg signed [15:0] tm1590;
   reg signed [15:0] tm1597;
   reg signed [15:0] tm1604;
   reg signed [15:0] tm1611;
   reg signed [15:0] tm1618;
   wire signed [15:0] a328;
   wire signed [15:0] a330;
   wire signed [15:0] a331;
   wire signed [15:0] a332;
   wire signed [15:0] a334;
   wire signed [15:0] a336;
   wire signed [15:0] a337;
   wire signed [15:0] a338;
   wire signed [15:0] a340;
   wire signed [15:0] a342;
   wire signed [15:0] a343;
   wire signed [15:0] a344;
   wire signed [15:0] a352;
   wire signed [15:0] a354;
   wire signed [15:0] a355;
   wire signed [15:0] a356;
   wire signed [15:0] a358;
   wire signed [15:0] a360;
   wire signed [15:0] a361;
   wire signed [15:0] a362;
   wire signed [15:0] a364;
   wire signed [15:0] a366;
   wire signed [15:0] a367;
   wire signed [15:0] a368;
   wire signed [15:0] a376;
   wire signed [15:0] a378;
   wire signed [15:0] a379;
   wire signed [15:0] a380;
   wire signed [15:0] a382;
   wire signed [15:0] a384;
   wire signed [15:0] a385;
   wire signed [15:0] a387;
   wire signed [15:0] a389;
   wire signed [15:0] a391;
   wire signed [15:0] a392;
   wire signed [15:0] a393;
   wire signed [15:0] a401;
   wire signed [15:0] a403;
   wire signed [15:0] a404;
   wire signed [15:0] a405;
   wire signed [15:0] a407;
   wire signed [15:0] a409;
   wire signed [15:0] a410;
   wire signed [15:0] a411;
   wire signed [15:0] a413;
   wire signed [15:0] a415;
   wire signed [15:0] a416;
   wire signed [15:0] a417;
   reg signed [15:0] tm1570;
   reg signed [15:0] tm1577;
   reg signed [15:0] tm1584;
   reg signed [15:0] tm1591;
   reg signed [15:0] tm1598;
   reg signed [15:0] tm1605;
   reg signed [15:0] tm1612;
   reg signed [15:0] tm1619;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   reg signed [15:0] tm1571;
   reg signed [15:0] tm1578;
   reg signed [15:0] tm1585;
   reg signed [15:0] tm1592;
   reg signed [15:0] tm1599;
   reg signed [15:0] tm1606;
   reg signed [15:0] tm1613;
   reg signed [15:0] tm1620;


   assign a418 = X0;
   assign a322 = a418;
   assign a421 = X1;
   assign a326 = a421;
   assign a422 = X2;
   assign a423 = X3;
   assign a426 = X4;
   assign a427 = X5;
   assign a430 = X6;
   assign a431 = X7;
   assign a434 = X8;
   assign a346 = a434;
   assign a437 = X9;
   assign a350 = a437;
   assign a438 = X10;
   assign a439 = X11;
   assign a442 = X12;
   assign a443 = X13;
   assign a446 = X14;
   assign a447 = X15;
   assign a450 = X16;
   assign a370 = a450;
   assign a453 = X17;
   assign a374 = a453;
   assign a454 = X18;
   assign a455 = X19;
   assign a458 = X20;
   assign a459 = X21;
   assign a462 = X22;
   assign a463 = X23;
   assign a466 = X24;
   assign a395 = a466;
   assign a469 = X25;
   assign a399 = a469;
   assign a470 = X26;
   assign a471 = X27;
   assign a474 = X28;
   assign a475 = X29;
   assign a478 = X30;
   assign a479 = X31;
   assign a327 = tm94;
   assign a329 = tm95;
   assign a333 = tm96;
   assign a335 = tm97;
   assign a339 = tm98;
   assign a341 = tm99;
   assign a351 = tm102;
   assign a353 = tm103;
   assign a357 = tm104;
   assign a359 = tm105;
   assign a363 = tm106;
   assign a365 = tm107;
   assign a375 = tm110;
   assign a377 = tm111;
   assign a381 = tm112;
   assign a383 = tm113;
   assign a388 = tm114;
   assign a390 = tm115;
   assign a400 = tm118;
   assign a402 = tm119;
   assign a406 = tm120;
   assign a408 = tm121;
   assign a412 = tm122;
   assign a414 = tm123;
   assign Y0 = tm1571;
   assign Y1 = tm1578;
   assign Y8 = tm1585;
   assign Y9 = tm1592;
   assign Y16 = tm1599;
   assign Y17 = tm1606;
   assign Y24 = tm1613;
   assign Y25 = tm1620;

   D20_16106 instD20inst0_16106(.addr(i1[5:0]), .out(tm95), .clk(clk));

   D21_16304 instD21inst0_16304(.addr(i1[5:0]), .out(tm97), .clk(clk));

   D28_16370 instD28inst0_16370(.addr(i1[5:0]), .out(tm111), .clk(clk));

   D12_16502 instD12inst0_16502(.addr(i1[5:0]), .out(tm110), .clk(clk));

   D29_16568 instD29inst0_16568(.addr(i1[5:0]), .out(tm113), .clk(clk));

   D10_16700 instD10inst0_16700(.addr(i1[5:0]), .out(tm106), .clk(clk));

   D13_16766 instD13inst0_16766(.addr(i1[5:0]), .out(tm112), .clk(clk));

   D30_16832 instD30inst0_16832(.addr(i1[5:0]), .out(tm115), .clk(clk));

   D9_16898 instD9inst0_16898(.addr(i1[5:0]), .out(tm104), .clk(clk));

   D26_16964 instD26inst0_16964(.addr(i1[5:0]), .out(tm107), .clk(clk));

   D14_17030 instD14inst0_17030(.addr(i1[5:0]), .out(tm114), .clk(clk));

   D8_17162 instD8inst0_17162(.addr(i1[5:0]), .out(tm102), .clk(clk));

   D25_17228 instD25inst0_17228(.addr(i1[5:0]), .out(tm105), .clk(clk));

   D32_17426 instD32inst0_17426(.addr(i1[5:0]), .out(tm119), .clk(clk));

   D24_17492 instD24inst0_17492(.addr(i1[5:0]), .out(tm103), .clk(clk));

   D16_17558 instD16inst0_17558(.addr(i1[5:0]), .out(tm118), .clk(clk));

   D6_17624 instD6inst0_17624(.addr(i1[5:0]), .out(tm98), .clk(clk));

   D33_17690 instD33inst0_17690(.addr(i1[5:0]), .out(tm121), .clk(clk));

   D17_17756 instD17inst0_17756(.addr(i1[5:0]), .out(tm120), .clk(clk));

   D5_17888 instD5inst0_17888(.addr(i1[5:0]), .out(tm96), .clk(clk));

   D34_17954 instD34inst0_17954(.addr(i1[5:0]), .out(tm123), .clk(clk));

   D18_18020 instD18inst0_18020(.addr(i1[5:0]), .out(tm122), .clk(clk));

   D22_18086 instD22inst0_18086(.addr(i1[5:0]), .out(tm99), .clk(clk));

   D4_18152 instD4inst0_18152(.addr(i1[5:0]), .out(tm94), .clk(clk));

    multfix #(16, 2) m14859(.a(tm257), .b(tm1376), .clk(clk), .q_sc(a328), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14881(.a(tm258), .b(tm1380), .clk(clk), .q_sc(a330), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14899(.a(tm258), .b(tm1376), .clk(clk), .q_sc(a331), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14910(.a(tm257), .b(tm1380), .clk(clk), .q_sc(a332), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14939(.a(tm261), .b(tm1392), .clk(clk), .q_sc(a334), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14961(.a(tm262), .b(tm1396), .clk(clk), .q_sc(a336), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14979(.a(tm262), .b(tm1392), .clk(clk), .q_sc(a337), .q_unsc(), .rst(reset));
    multfix #(16, 2) m14990(.a(tm261), .b(tm1396), .clk(clk), .q_sc(a338), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15019(.a(tm265), .b(tm1408), .clk(clk), .q_sc(a340), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15041(.a(tm266), .b(tm1412), .clk(clk), .q_sc(a342), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15059(.a(tm266), .b(tm1408), .clk(clk), .q_sc(a343), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15070(.a(tm265), .b(tm1412), .clk(clk), .q_sc(a344), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15179(.a(tm273), .b(tm1424), .clk(clk), .q_sc(a352), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15201(.a(tm274), .b(tm1428), .clk(clk), .q_sc(a354), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15219(.a(tm274), .b(tm1424), .clk(clk), .q_sc(a355), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15230(.a(tm273), .b(tm1428), .clk(clk), .q_sc(a356), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15259(.a(tm277), .b(tm1440), .clk(clk), .q_sc(a358), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15281(.a(tm278), .b(tm1444), .clk(clk), .q_sc(a360), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15299(.a(tm278), .b(tm1440), .clk(clk), .q_sc(a361), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15310(.a(tm277), .b(tm1444), .clk(clk), .q_sc(a362), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15339(.a(tm281), .b(tm1456), .clk(clk), .q_sc(a364), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15361(.a(tm282), .b(tm1460), .clk(clk), .q_sc(a366), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15379(.a(tm282), .b(tm1456), .clk(clk), .q_sc(a367), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15390(.a(tm281), .b(tm1460), .clk(clk), .q_sc(a368), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15499(.a(tm289), .b(tm1472), .clk(clk), .q_sc(a376), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15521(.a(tm290), .b(tm1476), .clk(clk), .q_sc(a378), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15539(.a(tm290), .b(tm1472), .clk(clk), .q_sc(a379), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15550(.a(tm289), .b(tm1476), .clk(clk), .q_sc(a380), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15579(.a(tm293), .b(tm1488), .clk(clk), .q_sc(a382), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15601(.a(tm294), .b(tm1492), .clk(clk), .q_sc(a384), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15619(.a(tm294), .b(tm1488), .clk(clk), .q_sc(a385), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15630(.a(tm293), .b(tm1492), .clk(clk), .q_sc(a387), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15659(.a(tm297), .b(tm1504), .clk(clk), .q_sc(a389), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15681(.a(tm298), .b(tm1508), .clk(clk), .q_sc(a391), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15699(.a(tm298), .b(tm1504), .clk(clk), .q_sc(a392), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15710(.a(tm297), .b(tm1508), .clk(clk), .q_sc(a393), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15819(.a(tm305), .b(tm1520), .clk(clk), .q_sc(a401), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15841(.a(tm306), .b(tm1524), .clk(clk), .q_sc(a403), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15859(.a(tm306), .b(tm1520), .clk(clk), .q_sc(a404), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15870(.a(tm305), .b(tm1524), .clk(clk), .q_sc(a405), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15899(.a(tm309), .b(tm1536), .clk(clk), .q_sc(a407), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15921(.a(tm310), .b(tm1540), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15939(.a(tm310), .b(tm1536), .clk(clk), .q_sc(a410), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15950(.a(tm309), .b(tm1540), .clk(clk), .q_sc(a411), .q_unsc(), .rst(reset));
    multfix #(16, 2) m15979(.a(tm313), .b(tm1552), .clk(clk), .q_sc(a413), .q_unsc(), .rst(reset));
    multfix #(16, 2) m16001(.a(tm314), .b(tm1556), .clk(clk), .q_sc(a415), .q_unsc(), .rst(reset));
    multfix #(16, 2) m16019(.a(tm314), .b(tm1552), .clk(clk), .q_sc(a416), .q_unsc(), .rst(reset));
    multfix #(16, 2) m16030(.a(tm313), .b(tm1556), .clk(clk), .q_sc(a417), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub14888(.a(a328), .b(a330), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add14917(.a(a331), .b(a332), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub14968(.a(a334), .b(a336), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add14997(.a(a337), .b(a338), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub15048(.a(a340), .b(a342), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add15077(.a(a343), .b(a344), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub15208(.a(a352), .b(a354), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add15237(.a(a355), .b(a356), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub15288(.a(a358), .b(a360), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add15317(.a(a361), .b(a362), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub15368(.a(a364), .b(a366), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add15397(.a(a367), .b(a368), .clk(clk), .q(Y15));    // 6
    subfxp #(16, 1) sub15528(.a(a376), .b(a378), .clk(clk), .q(Y18));    // 6
    addfxp #(16, 1) add15557(.a(a379), .b(a380), .clk(clk), .q(Y19));    // 6
    subfxp #(16, 1) sub15608(.a(a382), .b(a384), .clk(clk), .q(Y20));    // 6
    addfxp #(16, 1) add15637(.a(a385), .b(a387), .clk(clk), .q(Y21));    // 6
    subfxp #(16, 1) sub15688(.a(a389), .b(a391), .clk(clk), .q(Y22));    // 6
    addfxp #(16, 1) add15717(.a(a392), .b(a393), .clk(clk), .q(Y23));    // 6
    subfxp #(16, 1) sub15848(.a(a401), .b(a403), .clk(clk), .q(Y26));    // 6
    addfxp #(16, 1) add15877(.a(a404), .b(a405), .clk(clk), .q(Y27));    // 6
    subfxp #(16, 1) sub15928(.a(a407), .b(a409), .clk(clk), .q(Y28));    // 6
    addfxp #(16, 1) add15957(.a(a410), .b(a411), .clk(clk), .q(Y29));    // 6
    subfxp #(16, 1) sub16008(.a(a413), .b(a415), .clk(clk), .q(Y30));    // 6
    addfxp #(16, 1) add16037(.a(a416), .b(a417), .clk(clk), .q(Y31));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm257 <= 0;
         tm1376 <= 0;
         tm258 <= 0;
         tm1380 <= 0;
         tm258 <= 0;
         tm1376 <= 0;
         tm257 <= 0;
         tm1380 <= 0;
         tm261 <= 0;
         tm1392 <= 0;
         tm262 <= 0;
         tm1396 <= 0;
         tm262 <= 0;
         tm1392 <= 0;
         tm261 <= 0;
         tm1396 <= 0;
         tm265 <= 0;
         tm1408 <= 0;
         tm266 <= 0;
         tm1412 <= 0;
         tm266 <= 0;
         tm1408 <= 0;
         tm265 <= 0;
         tm1412 <= 0;
         tm273 <= 0;
         tm1424 <= 0;
         tm274 <= 0;
         tm1428 <= 0;
         tm274 <= 0;
         tm1424 <= 0;
         tm273 <= 0;
         tm1428 <= 0;
         tm277 <= 0;
         tm1440 <= 0;
         tm278 <= 0;
         tm1444 <= 0;
         tm278 <= 0;
         tm1440 <= 0;
         tm277 <= 0;
         tm1444 <= 0;
         tm281 <= 0;
         tm1456 <= 0;
         tm282 <= 0;
         tm1460 <= 0;
         tm282 <= 0;
         tm1456 <= 0;
         tm281 <= 0;
         tm1460 <= 0;
         tm289 <= 0;
         tm1472 <= 0;
         tm290 <= 0;
         tm1476 <= 0;
         tm290 <= 0;
         tm1472 <= 0;
         tm289 <= 0;
         tm1476 <= 0;
         tm293 <= 0;
         tm1488 <= 0;
         tm294 <= 0;
         tm1492 <= 0;
         tm294 <= 0;
         tm1488 <= 0;
         tm293 <= 0;
         tm1492 <= 0;
         tm297 <= 0;
         tm1504 <= 0;
         tm298 <= 0;
         tm1508 <= 0;
         tm298 <= 0;
         tm1504 <= 0;
         tm297 <= 0;
         tm1508 <= 0;
         tm305 <= 0;
         tm1520 <= 0;
         tm306 <= 0;
         tm1524 <= 0;
         tm306 <= 0;
         tm1520 <= 0;
         tm305 <= 0;
         tm1524 <= 0;
         tm309 <= 0;
         tm1536 <= 0;
         tm310 <= 0;
         tm1540 <= 0;
         tm310 <= 0;
         tm1536 <= 0;
         tm309 <= 0;
         tm1540 <= 0;
         tm313 <= 0;
         tm1552 <= 0;
         tm314 <= 0;
         tm1556 <= 0;
         tm314 <= 0;
         tm1552 <= 0;
         tm313 <= 0;
         tm1556 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm1373 <= a422;
         tm1377 <= a423;
         tm1389 <= a426;
         tm1393 <= a427;
         tm1405 <= a430;
         tm1409 <= a431;
         tm1421 <= a438;
         tm1425 <= a439;
         tm1437 <= a442;
         tm1441 <= a443;
         tm1453 <= a446;
         tm1457 <= a447;
         tm1469 <= a454;
         tm1473 <= a455;
         tm1485 <= a458;
         tm1489 <= a459;
         tm1501 <= a462;
         tm1505 <= a463;
         tm1517 <= a470;
         tm1521 <= a471;
         tm1533 <= a474;
         tm1537 <= a475;
         tm1549 <= a478;
         tm1553 <= a479;
         tm1565 <= a322;
         tm1572 <= a326;
         tm1579 <= a346;
         tm1586 <= a350;
         tm1593 <= a370;
         tm1600 <= a374;
         tm1607 <= a395;
         tm1614 <= a399;
         tm1374 <= tm1373;
         tm1378 <= tm1377;
         tm1390 <= tm1389;
         tm1394 <= tm1393;
         tm1406 <= tm1405;
         tm1410 <= tm1409;
         tm1422 <= tm1421;
         tm1426 <= tm1425;
         tm1438 <= tm1437;
         tm1442 <= tm1441;
         tm1454 <= tm1453;
         tm1458 <= tm1457;
         tm1470 <= tm1469;
         tm1474 <= tm1473;
         tm1486 <= tm1485;
         tm1490 <= tm1489;
         tm1502 <= tm1501;
         tm1506 <= tm1505;
         tm1518 <= tm1517;
         tm1522 <= tm1521;
         tm1534 <= tm1533;
         tm1538 <= tm1537;
         tm1550 <= tm1549;
         tm1554 <= tm1553;
         tm1566 <= tm1565;
         tm1573 <= tm1572;
         tm1580 <= tm1579;
         tm1587 <= tm1586;
         tm1594 <= tm1593;
         tm1601 <= tm1600;
         tm1608 <= tm1607;
         tm1615 <= tm1614;
         tm1375 <= tm1374;
         tm1379 <= tm1378;
         tm1391 <= tm1390;
         tm1395 <= tm1394;
         tm1407 <= tm1406;
         tm1411 <= tm1410;
         tm1423 <= tm1422;
         tm1427 <= tm1426;
         tm1439 <= tm1438;
         tm1443 <= tm1442;
         tm1455 <= tm1454;
         tm1459 <= tm1458;
         tm1471 <= tm1470;
         tm1475 <= tm1474;
         tm1487 <= tm1486;
         tm1491 <= tm1490;
         tm1503 <= tm1502;
         tm1507 <= tm1506;
         tm1519 <= tm1518;
         tm1523 <= tm1522;
         tm1535 <= tm1534;
         tm1539 <= tm1538;
         tm1551 <= tm1550;
         tm1555 <= tm1554;
         tm1567 <= tm1566;
         tm1574 <= tm1573;
         tm1581 <= tm1580;
         tm1588 <= tm1587;
         tm1595 <= tm1594;
         tm1602 <= tm1601;
         tm1609 <= tm1608;
         tm1616 <= tm1615;
         tm257 <= a327;
         tm258 <= a329;
         tm261 <= a333;
         tm262 <= a335;
         tm265 <= a339;
         tm266 <= a341;
         tm273 <= a351;
         tm274 <= a353;
         tm277 <= a357;
         tm278 <= a359;
         tm281 <= a363;
         tm282 <= a365;
         tm289 <= a375;
         tm290 <= a377;
         tm293 <= a381;
         tm294 <= a383;
         tm297 <= a388;
         tm298 <= a390;
         tm305 <= a400;
         tm306 <= a402;
         tm309 <= a406;
         tm310 <= a408;
         tm313 <= a412;
         tm314 <= a414;
         tm1376 <= tm1375;
         tm1380 <= tm1379;
         tm1392 <= tm1391;
         tm1396 <= tm1395;
         tm1408 <= tm1407;
         tm1412 <= tm1411;
         tm1424 <= tm1423;
         tm1428 <= tm1427;
         tm1440 <= tm1439;
         tm1444 <= tm1443;
         tm1456 <= tm1455;
         tm1460 <= tm1459;
         tm1472 <= tm1471;
         tm1476 <= tm1475;
         tm1488 <= tm1487;
         tm1492 <= tm1491;
         tm1504 <= tm1503;
         tm1508 <= tm1507;
         tm1520 <= tm1519;
         tm1524 <= tm1523;
         tm1536 <= tm1535;
         tm1540 <= tm1539;
         tm1552 <= tm1551;
         tm1556 <= tm1555;
         tm1568 <= tm1567;
         tm1575 <= tm1574;
         tm1582 <= tm1581;
         tm1589 <= tm1588;
         tm1596 <= tm1595;
         tm1603 <= tm1602;
         tm1610 <= tm1609;
         tm1617 <= tm1616;
         tm1569 <= tm1568;
         tm1576 <= tm1575;
         tm1583 <= tm1582;
         tm1590 <= tm1589;
         tm1597 <= tm1596;
         tm1604 <= tm1603;
         tm1611 <= tm1610;
         tm1618 <= tm1617;
         tm1570 <= tm1569;
         tm1577 <= tm1576;
         tm1584 <= tm1583;
         tm1591 <= tm1590;
         tm1598 <= tm1597;
         tm1605 <= tm1604;
         tm1612 <= tm1611;
         tm1619 <= tm1618;
         tm1571 <= tm1570;
         tm1578 <= tm1577;
         tm1585 <= tm1584;
         tm1592 <= tm1591;
         tm1599 <= tm1598;
         tm1606 <= tm1605;
         tm1613 <= tm1612;
         tm1620 <= tm1619;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock18157(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(2, 1) shiftFIFO_24632(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a65;
   wire signed [15:0] a66;
   wire signed [15:0] a67;
   wire signed [15:0] a68;
   wire signed [15:0] a73;
   wire signed [15:0] a74;
   wire signed [15:0] a75;
   wire signed [15:0] a76;
   wire signed [15:0] a81;
   wire signed [15:0] a82;
   wire signed [15:0] a83;
   wire signed [15:0] a84;
   wire signed [15:0] a89;
   wire signed [15:0] a90;
   wire signed [15:0] a91;
   wire signed [15:0] a92;
   wire signed [15:0] a97;
   wire signed [15:0] a98;
   wire signed [15:0] a99;
   wire signed [15:0] a100;
   wire signed [15:0] a105;
   wire signed [15:0] a106;
   wire signed [15:0] a107;
   wire signed [15:0] a108;
   wire signed [15:0] a113;
   wire signed [15:0] a114;
   wire signed [15:0] a115;
   wire signed [15:0] a116;
   wire signed [15:0] a121;
   wire signed [15:0] a122;
   wire signed [15:0] a123;
   wire signed [15:0] a124;
   wire signed [16:0] tm741;
   wire signed [16:0] tm742;
   wire signed [16:0] tm743;
   wire signed [16:0] tm744;
   wire signed [16:0] tm745;
   wire signed [16:0] tm746;
   wire signed [16:0] tm747;
   wire signed [16:0] tm748;
   wire signed [16:0] tm757;
   wire signed [16:0] tm758;
   wire signed [16:0] tm759;
   wire signed [16:0] tm760;
   wire signed [16:0] tm761;
   wire signed [16:0] tm762;
   wire signed [16:0] tm763;
   wire signed [16:0] tm764;
   wire signed [16:0] tm773;
   wire signed [16:0] tm774;
   wire signed [16:0] tm775;
   wire signed [16:0] tm776;
   wire signed [16:0] tm777;
   wire signed [16:0] tm778;
   wire signed [16:0] tm779;
   wire signed [16:0] tm780;
   wire signed [16:0] tm789;
   wire signed [16:0] tm790;
   wire signed [16:0] tm791;
   wire signed [16:0] tm792;
   wire signed [16:0] tm793;
   wire signed [16:0] tm794;
   wire signed [16:0] tm795;
   wire signed [16:0] tm796;
   wire signed [15:0] t402;
   wire signed [15:0] t403;
   wire signed [15:0] t404;
   wire signed [15:0] t405;
   wire signed [15:0] t406;
   wire signed [15:0] t407;
   wire signed [15:0] t408;
   wire signed [15:0] t409;
   wire signed [15:0] t418;
   wire signed [15:0] t419;
   wire signed [15:0] t420;
   wire signed [15:0] t421;
   wire signed [15:0] t422;
   wire signed [15:0] t423;
   wire signed [15:0] t424;
   wire signed [15:0] t425;
   wire signed [15:0] t434;
   wire signed [15:0] t435;
   wire signed [15:0] t436;
   wire signed [15:0] t437;
   wire signed [15:0] t438;
   wire signed [15:0] t439;
   wire signed [15:0] t440;
   wire signed [15:0] t441;
   wire signed [15:0] t450;
   wire signed [15:0] t451;
   wire signed [15:0] t452;
   wire signed [15:0] t453;
   wire signed [15:0] t454;
   wire signed [15:0] t455;
   wire signed [15:0] t456;
   wire signed [15:0] t457;
   wire signed [16:0] tm749;
   wire signed [16:0] tm750;
   wire signed [16:0] tm751;
   wire signed [16:0] tm752;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm753;
   wire signed [16:0] tm754;
   wire signed [16:0] tm755;
   wire signed [16:0] tm756;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm765;
   wire signed [16:0] tm766;
   wire signed [16:0] tm767;
   wire signed [16:0] tm768;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm769;
   wire signed [16:0] tm770;
   wire signed [16:0] tm771;
   wire signed [16:0] tm772;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm781;
   wire signed [16:0] tm782;
   wire signed [16:0] tm783;
   wire signed [16:0] tm784;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm785;
   wire signed [16:0] tm786;
   wire signed [16:0] tm787;
   wire signed [16:0] tm788;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm797;
   wire signed [16:0] tm798;
   wire signed [16:0] tm799;
   wire signed [16:0] tm800;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm801;
   wire signed [16:0] tm802;
   wire signed [16:0] tm803;
   wire signed [16:0] tm804;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t410;
   wire signed [15:0] t411;
   wire signed [15:0] t412;
   wire signed [15:0] t413;
   wire signed [15:0] t414;
   wire signed [15:0] t415;
   wire signed [15:0] t416;
   wire signed [15:0] t417;
   wire signed [15:0] t426;
   wire signed [15:0] t427;
   wire signed [15:0] t428;
   wire signed [15:0] t429;
   wire signed [15:0] t430;
   wire signed [15:0] t431;
   wire signed [15:0] t432;
   wire signed [15:0] t433;
   wire signed [15:0] t442;
   wire signed [15:0] t443;
   wire signed [15:0] t444;
   wire signed [15:0] t445;
   wire signed [15:0] t446;
   wire signed [15:0] t447;
   wire signed [15:0] t448;
   wire signed [15:0] t449;
   wire signed [15:0] t458;
   wire signed [15:0] t459;
   wire signed [15:0] t460;
   wire signed [15:0] t461;
   wire signed [15:0] t462;
   wire signed [15:0] t463;
   wire signed [15:0] t464;
   wire signed [15:0] t465;


   assign a65 = X0;
   assign a66 = X4;
   assign a67 = X1;
   assign a68 = X5;
   assign a73 = X2;
   assign a74 = X6;
   assign a75 = X3;
   assign a76 = X7;
   assign a81 = X8;
   assign a82 = X12;
   assign a83 = X9;
   assign a84 = X13;
   assign a89 = X10;
   assign a90 = X14;
   assign a91 = X11;
   assign a92 = X15;
   assign a97 = X16;
   assign a98 = X20;
   assign a99 = X17;
   assign a100 = X21;
   assign a105 = X18;
   assign a106 = X22;
   assign a107 = X19;
   assign a108 = X23;
   assign a113 = X24;
   assign a114 = X28;
   assign a115 = X25;
   assign a116 = X29;
   assign a121 = X26;
   assign a122 = X30;
   assign a123 = X27;
   assign a124 = X31;
   assign t402 = tm741[16:1];
   assign t403 = tm742[16:1];
   assign t404 = tm743[16:1];
   assign t405 = tm744[16:1];
   assign t406 = tm745[16:1];
   assign t407 = tm746[16:1];
   assign t408 = tm747[16:1];
   assign t409 = tm748[16:1];
   assign t418 = tm757[16:1];
   assign t419 = tm758[16:1];
   assign t420 = tm759[16:1];
   assign t421 = tm760[16:1];
   assign t422 = tm761[16:1];
   assign t423 = tm762[16:1];
   assign t424 = tm763[16:1];
   assign t425 = tm764[16:1];
   assign t434 = tm773[16:1];
   assign t435 = tm774[16:1];
   assign t436 = tm775[16:1];
   assign t437 = tm776[16:1];
   assign t438 = tm777[16:1];
   assign t439 = tm778[16:1];
   assign t440 = tm779[16:1];
   assign t441 = tm780[16:1];
   assign t450 = tm789[16:1];
   assign t451 = tm790[16:1];
   assign t452 = tm791[16:1];
   assign t453 = tm792[16:1];
   assign t454 = tm793[16:1];
   assign t455 = tm794[16:1];
   assign t456 = tm795[16:1];
   assign t457 = tm796[16:1];
   assign Y0 = t410;
   assign Y1 = t411;
   assign Y4 = t412;
   assign Y5 = t413;
   assign Y2 = t414;
   assign Y3 = t415;
   assign Y6 = t416;
   assign Y7 = t417;
   assign Y8 = t426;
   assign Y9 = t427;
   assign Y12 = t428;
   assign Y13 = t429;
   assign Y10 = t430;
   assign Y11 = t431;
   assign Y14 = t432;
   assign Y15 = t433;
   assign Y16 = t442;
   assign Y17 = t443;
   assign Y20 = t444;
   assign Y21 = t445;
   assign Y18 = t446;
   assign Y19 = t447;
   assign Y22 = t448;
   assign Y23 = t449;
   assign Y24 = t458;
   assign Y25 = t459;
   assign Y28 = t460;
   assign Y29 = t461;
   assign Y26 = t462;
   assign Y27 = t463;
   assign Y30 = t464;
   assign Y31 = t465;
   assign t410 = tm749[16:1];
   assign t411 = tm750[16:1];
   assign t412 = tm751[16:1];
   assign t413 = tm752[16:1];
   assign t414 = tm753[16:1];
   assign t415 = tm754[16:1];
   assign t416 = tm755[16:1];
   assign t417 = tm756[16:1];
   assign t426 = tm765[16:1];
   assign t427 = tm766[16:1];
   assign t428 = tm767[16:1];
   assign t429 = tm768[16:1];
   assign t430 = tm769[16:1];
   assign t431 = tm770[16:1];
   assign t432 = tm771[16:1];
   assign t433 = tm772[16:1];
   assign t442 = tm781[16:1];
   assign t443 = tm782[16:1];
   assign t444 = tm783[16:1];
   assign t445 = tm784[16:1];
   assign t446 = tm785[16:1];
   assign t447 = tm786[16:1];
   assign t448 = tm787[16:1];
   assign t449 = tm788[16:1];
   assign t458 = tm797[16:1];
   assign t459 = tm798[16:1];
   assign t460 = tm799[16:1];
   assign t461 = tm800[16:1];
   assign t462 = tm801[16:1];
   assign t463 = tm802[16:1];
   assign t464 = tm803[16:1];
   assign t465 = tm804[16:1];

    addfxp #(17, 1) add18169(.a({{1{a65[15]}}, a65}), .b({{1{a66[15]}}, a66}), .clk(clk), .q(tm741));    // 0
    addfxp #(17, 1) add18184(.a({{1{a67[15]}}, a67}), .b({{1{a68[15]}}, a68}), .clk(clk), .q(tm742));    // 0
    subfxp #(17, 1) sub18199(.a({{1{a65[15]}}, a65}), .b({{1{a66[15]}}, a66}), .clk(clk), .q(tm743));    // 0
    subfxp #(17, 1) sub18214(.a({{1{a67[15]}}, a67}), .b({{1{a68[15]}}, a68}), .clk(clk), .q(tm744));    // 0
    addfxp #(17, 1) add18229(.a({{1{a73[15]}}, a73}), .b({{1{a74[15]}}, a74}), .clk(clk), .q(tm745));    // 0
    addfxp #(17, 1) add18244(.a({{1{a75[15]}}, a75}), .b({{1{a76[15]}}, a76}), .clk(clk), .q(tm746));    // 0
    subfxp #(17, 1) sub18259(.a({{1{a73[15]}}, a73}), .b({{1{a74[15]}}, a74}), .clk(clk), .q(tm747));    // 0
    subfxp #(17, 1) sub18274(.a({{1{a75[15]}}, a75}), .b({{1{a76[15]}}, a76}), .clk(clk), .q(tm748));    // 0
    addfxp #(17, 1) add18377(.a({{1{a81[15]}}, a81}), .b({{1{a82[15]}}, a82}), .clk(clk), .q(tm757));    // 0
    addfxp #(17, 1) add18392(.a({{1{a83[15]}}, a83}), .b({{1{a84[15]}}, a84}), .clk(clk), .q(tm758));    // 0
    subfxp #(17, 1) sub18407(.a({{1{a81[15]}}, a81}), .b({{1{a82[15]}}, a82}), .clk(clk), .q(tm759));    // 0
    subfxp #(17, 1) sub18422(.a({{1{a83[15]}}, a83}), .b({{1{a84[15]}}, a84}), .clk(clk), .q(tm760));    // 0
    addfxp #(17, 1) add18437(.a({{1{a89[15]}}, a89}), .b({{1{a90[15]}}, a90}), .clk(clk), .q(tm761));    // 0
    addfxp #(17, 1) add18452(.a({{1{a91[15]}}, a91}), .b({{1{a92[15]}}, a92}), .clk(clk), .q(tm762));    // 0
    subfxp #(17, 1) sub18467(.a({{1{a89[15]}}, a89}), .b({{1{a90[15]}}, a90}), .clk(clk), .q(tm763));    // 0
    subfxp #(17, 1) sub18482(.a({{1{a91[15]}}, a91}), .b({{1{a92[15]}}, a92}), .clk(clk), .q(tm764));    // 0
    addfxp #(17, 1) add18585(.a({{1{a97[15]}}, a97}), .b({{1{a98[15]}}, a98}), .clk(clk), .q(tm773));    // 0
    addfxp #(17, 1) add18600(.a({{1{a99[15]}}, a99}), .b({{1{a100[15]}}, a100}), .clk(clk), .q(tm774));    // 0
    subfxp #(17, 1) sub18615(.a({{1{a97[15]}}, a97}), .b({{1{a98[15]}}, a98}), .clk(clk), .q(tm775));    // 0
    subfxp #(17, 1) sub18630(.a({{1{a99[15]}}, a99}), .b({{1{a100[15]}}, a100}), .clk(clk), .q(tm776));    // 0
    addfxp #(17, 1) add18645(.a({{1{a105[15]}}, a105}), .b({{1{a106[15]}}, a106}), .clk(clk), .q(tm777));    // 0
    addfxp #(17, 1) add18660(.a({{1{a107[15]}}, a107}), .b({{1{a108[15]}}, a108}), .clk(clk), .q(tm778));    // 0
    subfxp #(17, 1) sub18675(.a({{1{a105[15]}}, a105}), .b({{1{a106[15]}}, a106}), .clk(clk), .q(tm779));    // 0
    subfxp #(17, 1) sub18690(.a({{1{a107[15]}}, a107}), .b({{1{a108[15]}}, a108}), .clk(clk), .q(tm780));    // 0
    addfxp #(17, 1) add18793(.a({{1{a113[15]}}, a113}), .b({{1{a114[15]}}, a114}), .clk(clk), .q(tm789));    // 0
    addfxp #(17, 1) add18808(.a({{1{a115[15]}}, a115}), .b({{1{a116[15]}}, a116}), .clk(clk), .q(tm790));    // 0
    subfxp #(17, 1) sub18823(.a({{1{a113[15]}}, a113}), .b({{1{a114[15]}}, a114}), .clk(clk), .q(tm791));    // 0
    subfxp #(17, 1) sub18838(.a({{1{a115[15]}}, a115}), .b({{1{a116[15]}}, a116}), .clk(clk), .q(tm792));    // 0
    addfxp #(17, 1) add18853(.a({{1{a121[15]}}, a121}), .b({{1{a122[15]}}, a122}), .clk(clk), .q(tm793));    // 0
    addfxp #(17, 1) add18868(.a({{1{a123[15]}}, a123}), .b({{1{a124[15]}}, a124}), .clk(clk), .q(tm794));    // 0
    subfxp #(17, 1) sub18883(.a({{1{a121[15]}}, a121}), .b({{1{a122[15]}}, a122}), .clk(clk), .q(tm795));    // 0
    subfxp #(17, 1) sub18898(.a({{1{a123[15]}}, a123}), .b({{1{a124[15]}}, a124}), .clk(clk), .q(tm796));    // 0
    addfxp #(17, 1) add18281(.a({{1{t402[15]}}, t402}), .b({{1{t406[15]}}, t406}), .clk(clk), .q(tm749));    // 1
    addfxp #(17, 1) add18288(.a({{1{t403[15]}}, t403}), .b({{1{t407[15]}}, t407}), .clk(clk), .q(tm750));    // 1
    subfxp #(17, 1) sub18295(.a({{1{t402[15]}}, t402}), .b({{1{t406[15]}}, t406}), .clk(clk), .q(tm751));    // 1
    subfxp #(17, 1) sub18302(.a({{1{t403[15]}}, t403}), .b({{1{t407[15]}}, t407}), .clk(clk), .q(tm752));    // 1
    addfxp #(17, 1) add18325(.a({{1{t404[15]}}, t404}), .b({{1{t409[15]}}, t409}), .clk(clk), .q(tm753));    // 1
    subfxp #(17, 1) sub18332(.a({{1{t405[15]}}, t405}), .b({{1{t408[15]}}, t408}), .clk(clk), .q(tm754));    // 1
    subfxp #(17, 1) sub18339(.a({{1{t404[15]}}, t404}), .b({{1{t409[15]}}, t409}), .clk(clk), .q(tm755));    // 1
    addfxp #(17, 1) add18346(.a({{1{t405[15]}}, t405}), .b({{1{t408[15]}}, t408}), .clk(clk), .q(tm756));    // 1
    addfxp #(17, 1) add18489(.a({{1{t418[15]}}, t418}), .b({{1{t422[15]}}, t422}), .clk(clk), .q(tm765));    // 1
    addfxp #(17, 1) add18496(.a({{1{t419[15]}}, t419}), .b({{1{t423[15]}}, t423}), .clk(clk), .q(tm766));    // 1
    subfxp #(17, 1) sub18503(.a({{1{t418[15]}}, t418}), .b({{1{t422[15]}}, t422}), .clk(clk), .q(tm767));    // 1
    subfxp #(17, 1) sub18510(.a({{1{t419[15]}}, t419}), .b({{1{t423[15]}}, t423}), .clk(clk), .q(tm768));    // 1
    addfxp #(17, 1) add18533(.a({{1{t420[15]}}, t420}), .b({{1{t425[15]}}, t425}), .clk(clk), .q(tm769));    // 1
    subfxp #(17, 1) sub18540(.a({{1{t421[15]}}, t421}), .b({{1{t424[15]}}, t424}), .clk(clk), .q(tm770));    // 1
    subfxp #(17, 1) sub18547(.a({{1{t420[15]}}, t420}), .b({{1{t425[15]}}, t425}), .clk(clk), .q(tm771));    // 1
    addfxp #(17, 1) add18554(.a({{1{t421[15]}}, t421}), .b({{1{t424[15]}}, t424}), .clk(clk), .q(tm772));    // 1
    addfxp #(17, 1) add18697(.a({{1{t434[15]}}, t434}), .b({{1{t438[15]}}, t438}), .clk(clk), .q(tm781));    // 1
    addfxp #(17, 1) add18704(.a({{1{t435[15]}}, t435}), .b({{1{t439[15]}}, t439}), .clk(clk), .q(tm782));    // 1
    subfxp #(17, 1) sub18711(.a({{1{t434[15]}}, t434}), .b({{1{t438[15]}}, t438}), .clk(clk), .q(tm783));    // 1
    subfxp #(17, 1) sub18718(.a({{1{t435[15]}}, t435}), .b({{1{t439[15]}}, t439}), .clk(clk), .q(tm784));    // 1
    addfxp #(17, 1) add18741(.a({{1{t436[15]}}, t436}), .b({{1{t441[15]}}, t441}), .clk(clk), .q(tm785));    // 1
    subfxp #(17, 1) sub18748(.a({{1{t437[15]}}, t437}), .b({{1{t440[15]}}, t440}), .clk(clk), .q(tm786));    // 1
    subfxp #(17, 1) sub18755(.a({{1{t436[15]}}, t436}), .b({{1{t441[15]}}, t441}), .clk(clk), .q(tm787));    // 1
    addfxp #(17, 1) add18762(.a({{1{t437[15]}}, t437}), .b({{1{t440[15]}}, t440}), .clk(clk), .q(tm788));    // 1
    addfxp #(17, 1) add18905(.a({{1{t450[15]}}, t450}), .b({{1{t454[15]}}, t454}), .clk(clk), .q(tm797));    // 1
    addfxp #(17, 1) add18912(.a({{1{t451[15]}}, t451}), .b({{1{t455[15]}}, t455}), .clk(clk), .q(tm798));    // 1
    subfxp #(17, 1) sub18919(.a({{1{t450[15]}}, t450}), .b({{1{t454[15]}}, t454}), .clk(clk), .q(tm799));    // 1
    subfxp #(17, 1) sub18926(.a({{1{t451[15]}}, t451}), .b({{1{t455[15]}}, t455}), .clk(clk), .q(tm800));    // 1
    addfxp #(17, 1) add18949(.a({{1{t452[15]}}, t452}), .b({{1{t457[15]}}, t457}), .clk(clk), .q(tm801));    // 1
    subfxp #(17, 1) sub18956(.a({{1{t453[15]}}, t453}), .b({{1{t456[15]}}, t456}), .clk(clk), .q(tm802));    // 1
    subfxp #(17, 1) sub18963(.a({{1{t452[15]}}, t452}), .b({{1{t457[15]}}, t457}), .clk(clk), .q(tm803));    // 1
    addfxp #(17, 1) add18970(.a({{1{t453[15]}}, t453}), .b({{1{t456[15]}}, t456}), .clk(clk), .q(tm804));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 135
// Gap: 64
module rc18995(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   wire [31:0] t8;
   wire [31:0] s8;
   assign t8 = {X16, X17};
   wire [31:0] t9;
   wire [31:0] s9;
   assign t9 = {X18, X19};
   wire [31:0] t10;
   wire [31:0] s10;
   assign t10 = {X20, X21};
   wire [31:0] t11;
   wire [31:0] s11;
   assign t11 = {X22, X23};
   wire [31:0] t12;
   wire [31:0] s12;
   assign t12 = {X24, X25};
   wire [31:0] t13;
   wire [31:0] s13;
   assign t13 = {X26, X27};
   wire [31:0] t14;
   wire [31:0] s14;
   assign t14 = {X28, X29};
   wire [31:0] t15;
   wire [31:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];
   assign Y16 = s8[31:16];
   assign Y17 = s8[15:0];
   assign Y18 = s9[31:16];
   assign Y19 = s9[15:0];
   assign Y20 = s10[31:16];
   assign Y21 = s10[15:0];
   assign Y22 = s11[31:16];
   assign Y23 = s11[15:0];
   assign Y24 = s12[31:16];
   assign Y25 = s12[15:0];
   assign Y26 = s13[31:16];
   assign Y27 = s13[15:0];
   assign Y28 = s14[31:16];
   assign Y29 = s14[15:0];
   assign Y30 = s15[31:16];
   assign Y31 = s15[15:0];

   perm18993 instPerm24633(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet18993(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
,       x8, y8
,       x9, y9
,       x10, y10
,       x11, y11
,       x12, y12
,       x13, y13
,       x14, y14
,       x15, y15
);

    parameter width = 32;

    input [5:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    input [width-1:0] x8;
    output reg [width-1:0] y8;
    input [width-1:0] x9;
    output reg [width-1:0] y9;
    input [width-1:0] x10;
    output reg [width-1:0] y10;
    input [width-1:0] x11;
    output reg [width-1:0] y11;
    input [width-1:0] x12;
    output reg [width-1:0] y12;
    input [width-1:0] x13;
    output reg [width-1:0] y13;
    input [width-1:0] x14;
    output reg [width-1:0] y14;
    input [width-1:0] x15;
    output reg [width-1:0] y15;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7, t0_8, t0_9, t0_10, t0_11, t0_12, t0_13, t0_14, t0_15;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7, t1_8, t1_9, t1_10, t1_11, t1_12, t1_13, t1_14, t1_15;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10, t6_11, t6_12, t6_13, t6_14, t6_15;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15;
    wire [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14, t9_15;
    wire [width-1:0] t10_0, t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14, t10_15;
    reg [width-1:0] t11_0, t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14, t11_15;
    wire [width-1:0] t12_0, t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9, t12_10, t12_11, t12_12, t12_13, t12_14, t12_15;
    reg [width-1:0] t13_0, t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13, t13_14, t13_15;

    reg [15:0] control;

    always @(posedge clk) begin
      case(ct)
        6'd0: control <= 16'b1100110011001100;
        6'd1: control <= 16'b1100110011001100;
        6'd2: control <= 16'b1100110011001100;
        6'd3: control <= 16'b1100110011001100;
        6'd4: control <= 16'b1100110011001100;
        6'd5: control <= 16'b1100110011001100;
        6'd6: control <= 16'b1100110011001100;
        6'd7: control <= 16'b1100110011001100;
        6'd8: control <= 16'b1100110011001100;
        6'd9: control <= 16'b1100110011001100;
        6'd10: control <= 16'b1100110011001100;
        6'd11: control <= 16'b1100110011001100;
        6'd12: control <= 16'b1100110011001100;
        6'd13: control <= 16'b1100110011001100;
        6'd14: control <= 16'b1100110011001100;
        6'd15: control <= 16'b1100110011001100;
        6'd16: control <= 16'b0011001111001100;
        6'd17: control <= 16'b0011001111001100;
        6'd18: control <= 16'b0011001111001100;
        6'd19: control <= 16'b0011001111001100;
        6'd20: control <= 16'b0011001111001100;
        6'd21: control <= 16'b0011001111001100;
        6'd22: control <= 16'b0011001111001100;
        6'd23: control <= 16'b0011001111001100;
        6'd24: control <= 16'b0011001111001100;
        6'd25: control <= 16'b0011001111001100;
        6'd26: control <= 16'b0011001111001100;
        6'd27: control <= 16'b0011001111001100;
        6'd28: control <= 16'b0011001111001100;
        6'd29: control <= 16'b0011001111001100;
        6'd30: control <= 16'b0011001111001100;
        6'd31: control <= 16'b0011001111001100;
        6'd32: control <= 16'b1100110000110011;
        6'd33: control <= 16'b1100110000110011;
        6'd34: control <= 16'b1100110000110011;
        6'd35: control <= 16'b1100110000110011;
        6'd36: control <= 16'b1100110000110011;
        6'd37: control <= 16'b1100110000110011;
        6'd38: control <= 16'b1100110000110011;
        6'd39: control <= 16'b1100110000110011;
        6'd40: control <= 16'b1100110000110011;
        6'd41: control <= 16'b1100110000110011;
        6'd42: control <= 16'b1100110000110011;
        6'd43: control <= 16'b1100110000110011;
        6'd44: control <= 16'b1100110000110011;
        6'd45: control <= 16'b1100110000110011;
        6'd46: control <= 16'b1100110000110011;
        6'd47: control <= 16'b1100110000110011;
        6'd48: control <= 16'b0011001100110011;
        6'd49: control <= 16'b0011001100110011;
        6'd50: control <= 16'b0011001100110011;
        6'd51: control <= 16'b0011001100110011;
        6'd52: control <= 16'b0011001100110011;
        6'd53: control <= 16'b0011001100110011;
        6'd54: control <= 16'b0011001100110011;
        6'd55: control <= 16'b0011001100110011;
        6'd56: control <= 16'b0011001100110011;
        6'd57: control <= 16'b0011001100110011;
        6'd58: control <= 16'b0011001100110011;
        6'd59: control <= 16'b0011001100110011;
        6'd60: control <= 16'b0011001100110011;
        6'd61: control <= 16'b0011001100110011;
        6'd62: control <= 16'b0011001100110011;
        6'd63: control <= 16'b0011001100110011;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [15:0] control0;
   reg [15:0] control1;
   reg [15:0] control2;
   reg [15:0] control3;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
        control3 <= control2;
    end
    assign t0_0 = x0;
    assign t0_1 = x8;
    assign t0_2 = x1;
    assign t0_3 = x9;
    assign t0_4 = x2;
    assign t0_5 = x10;
    assign t0_6 = x3;
    assign t0_7 = x11;
    assign t0_8 = x4;
    assign t0_9 = x12;
    assign t0_10 = x5;
    assign t0_11 = x13;
    assign t0_12 = x6;
    assign t0_13 = x14;
    assign t0_14 = x7;
    assign t0_15 = x15;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_5;
     assign t1_5 = t0_4;
     assign t1_6 = t0_7;
     assign t1_7 = t0_6;
     assign t1_8 = t0_8;
     assign t1_9 = t0_9;
     assign t1_10 = t0_10;
     assign t1_11 = t0_11;
     assign t1_12 = t0_13;
     assign t1_13 = t0_12;
     assign t1_14 = t0_15;
     assign t1_15 = t0_14;
    assign t2_0 = t1_0;
    assign t2_1 = t1_8;
    assign t2_2 = t1_1;
    assign t2_3 = t1_9;
    assign t2_4 = t1_2;
    assign t2_5 = t1_10;
    assign t2_6 = t1_3;
    assign t2_7 = t1_11;
    assign t2_8 = t1_4;
    assign t2_9 = t1_12;
    assign t2_10 = t1_5;
    assign t2_11 = t1_13;
    assign t2_12 = t1_6;
    assign t2_13 = t1_14;
    assign t2_14 = t1_7;
    assign t2_15 = t1_15;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_5;
         t3_5 <= t2_4;
         t3_6 <= t2_7;
         t3_7 <= t2_6;
         t3_8 <= t2_8;
         t3_9 <= t2_9;
         t3_10 <= t2_10;
         t3_11 <= t2_11;
         t3_12 <= t2_13;
         t3_13 <= t2_12;
         t3_14 <= t2_15;
         t3_15 <= t2_14;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_8;
    assign t4_2 = t3_1;
    assign t4_3 = t3_9;
    assign t4_4 = t3_2;
    assign t4_5 = t3_10;
    assign t4_6 = t3_3;
    assign t4_7 = t3_11;
    assign t4_8 = t3_4;
    assign t4_9 = t3_12;
    assign t4_10 = t3_5;
    assign t4_11 = t3_13;
    assign t4_12 = t3_6;
    assign t4_13 = t3_14;
    assign t4_14 = t3_7;
    assign t4_15 = t3_15;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_2;
     assign t5_3 = t4_3;
     assign t5_4 = t4_4;
     assign t5_5 = t4_5;
     assign t5_6 = t4_6;
     assign t5_7 = t4_7;
     assign t5_8 = t4_8;
     assign t5_9 = t4_9;
     assign t5_10 = t4_10;
     assign t5_11 = t4_11;
     assign t5_12 = t4_12;
     assign t5_13 = t4_13;
     assign t5_14 = t4_14;
     assign t5_15 = t4_15;
    assign t6_0 = t5_0;
    assign t6_1 = t5_8;
    assign t6_2 = t5_1;
    assign t6_3 = t5_9;
    assign t6_4 = t5_2;
    assign t6_5 = t5_10;
    assign t6_6 = t5_3;
    assign t6_7 = t5_11;
    assign t6_8 = t5_4;
    assign t6_9 = t5_12;
    assign t6_10 = t5_5;
    assign t6_11 = t5_13;
    assign t6_12 = t5_6;
    assign t6_13 = t5_14;
    assign t6_14 = t5_7;
    assign t6_15 = t5_15;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_5;
         t7_5 <= t6_4;
         t7_6 <= t6_7;
         t7_7 <= t6_6;
         t7_8 <= t6_8;
         t7_9 <= t6_9;
         t7_10 <= t6_10;
         t7_11 <= t6_11;
         t7_12 <= t6_13;
         t7_13 <= t6_12;
         t7_14 <= t6_15;
         t7_15 <= t6_14;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_8;
    assign t8_5 = t7_10;
    assign t8_6 = t7_12;
    assign t8_7 = t7_14;
    assign t8_8 = t7_1;
    assign t8_9 = t7_3;
    assign t8_10 = t7_5;
    assign t8_11 = t7_7;
    assign t8_12 = t7_9;
    assign t8_13 = t7_11;
    assign t8_14 = t7_13;
    assign t8_15 = t7_15;
     assign t9_0 = t8_0;
     assign t9_1 = t8_1;
     assign t9_2 = t8_2;
     assign t9_3 = t8_3;
     assign t9_4 = t8_5;
     assign t9_5 = t8_4;
     assign t9_6 = t8_7;
     assign t9_7 = t8_6;
     assign t9_8 = t8_8;
     assign t9_9 = t8_9;
     assign t9_10 = t8_10;
     assign t9_11 = t8_11;
     assign t9_12 = t8_13;
     assign t9_13 = t8_12;
     assign t9_14 = t8_15;
     assign t9_15 = t8_14;
    assign t10_0 = t9_0;
    assign t10_1 = t9_2;
    assign t10_2 = t9_4;
    assign t10_3 = t9_6;
    assign t10_4 = t9_8;
    assign t10_5 = t9_10;
    assign t10_6 = t9_12;
    assign t10_7 = t9_14;
    assign t10_8 = t9_1;
    assign t10_9 = t9_3;
    assign t10_10 = t9_5;
    assign t10_11 = t9_7;
    assign t10_12 = t9_9;
    assign t10_13 = t9_11;
    assign t10_14 = t9_13;
    assign t10_15 = t9_15;
   always @(posedge clk) begin
         t11_0 <= (control2[15] == 0) ? t10_0 : t10_1;
         t11_1 <= (control2[15] == 0) ? t10_1 : t10_0;
         t11_2 <= (control2[14] == 0) ? t10_2 : t10_3;
         t11_3 <= (control2[14] == 0) ? t10_3 : t10_2;
         t11_4 <= (control2[13] == 0) ? t10_4 : t10_5;
         t11_5 <= (control2[13] == 0) ? t10_5 : t10_4;
         t11_6 <= (control2[12] == 0) ? t10_6 : t10_7;
         t11_7 <= (control2[12] == 0) ? t10_7 : t10_6;
         t11_8 <= (control2[11] == 0) ? t10_8 : t10_9;
         t11_9 <= (control2[11] == 0) ? t10_9 : t10_8;
         t11_10 <= (control2[10] == 0) ? t10_10 : t10_11;
         t11_11 <= (control2[10] == 0) ? t10_11 : t10_10;
         t11_12 <= (control2[9] == 0) ? t10_12 : t10_13;
         t11_13 <= (control2[9] == 0) ? t10_13 : t10_12;
         t11_14 <= (control2[8] == 0) ? t10_14 : t10_15;
         t11_15 <= (control2[8] == 0) ? t10_15 : t10_14;
   end
    assign t12_0 = t11_0;
    assign t12_1 = t11_2;
    assign t12_2 = t11_4;
    assign t12_3 = t11_6;
    assign t12_4 = t11_8;
    assign t12_5 = t11_10;
    assign t12_6 = t11_12;
    assign t12_7 = t11_14;
    assign t12_8 = t11_1;
    assign t12_9 = t11_3;
    assign t12_10 = t11_5;
    assign t12_11 = t11_7;
    assign t12_12 = t11_9;
    assign t12_13 = t11_11;
    assign t12_14 = t11_13;
    assign t12_15 = t11_15;
   always @(posedge clk) begin
         t13_0 <= (control3[7] == 0) ? t12_0 : t12_1;
         t13_1 <= (control3[7] == 0) ? t12_1 : t12_0;
         t13_2 <= (control3[6] == 0) ? t12_2 : t12_3;
         t13_3 <= (control3[6] == 0) ? t12_3 : t12_2;
         t13_4 <= (control3[5] == 0) ? t12_4 : t12_5;
         t13_5 <= (control3[5] == 0) ? t12_5 : t12_4;
         t13_6 <= (control3[4] == 0) ? t12_6 : t12_7;
         t13_7 <= (control3[4] == 0) ? t12_7 : t12_6;
         t13_8 <= (control3[3] == 0) ? t12_8 : t12_9;
         t13_9 <= (control3[3] == 0) ? t12_9 : t12_8;
         t13_10 <= (control3[2] == 0) ? t12_10 : t12_11;
         t13_11 <= (control3[2] == 0) ? t12_11 : t12_10;
         t13_12 <= (control3[1] == 0) ? t12_12 : t12_13;
         t13_13 <= (control3[1] == 0) ? t12_13 : t12_12;
         t13_14 <= (control3[0] == 0) ? t12_14 : t12_15;
         t13_15 <= (control3[0] == 0) ? t12_15 : t12_14;
   end
    always @(posedge clk) begin
        y0 <= t13_0;
        y1 <= t13_2;
        y2 <= t13_4;
        y3 <= t13_6;
        y4 <= t13_8;
        y5 <= t13_10;
        y6 <= t13_12;
        y7 <= t13_14;
        y8 <= t13_1;
        y9 <= t13_3;
        y10 <= t13_5;
        y11 <= t13_7;
        y12 <= t13_9;
        y13 <= t13_11;
        y14 <= t13_13;
        y15 <= t13_15;
    end
endmodule

// Latency: 135
// Gap: 64
module perm18993(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter width = 32;

   parameter depth = 64;

   parameter addrbits = 6;

   parameter muxbits = 4;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  t8;
   wire [width-1:0]  s8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  t9;
   wire [width-1:0]  s9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  t10;
   wire [width-1:0]  s10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  t11;
   wire [width-1:0]  s11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  t12;
   wire [width-1:0]  s12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  t13;
   wire [width-1:0]  s13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  t14;
   wire [width-1:0]  s14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  t15;
   wire [width-1:0]  s15;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg [addrbits-1:0] s1rd8, s2wr8, s2rd8;
   reg [addrbits-1:0] s1rd9, s2wr9, s2rd9;
   reg [addrbits-1:0] s1rd10, s2wr10, s2rd10;
   reg [addrbits-1:0] s1rd11, s2wr11, s2rd11;
   reg [addrbits-1:0] s1rd12, s2wr12, s2rd12;
   reg [addrbits-1:0] s1rd13, s2wr13, s2rd13;
   reg [addrbits-1:0] s1rd14, s2wr14, s2rd14;
   reg [addrbits-1:0] s1rd15, s2wr15, s2rd15;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm124;
   assign tm124 = 0;

shiftRegFIFO #(6, 1) shiftFIFO_24638(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24639(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem8(x8, t8, {inFlip0, s1wr0}, {outFlip0, s1rd8}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem9(x9, t9, {inFlip0, s1wr0}, {outFlip0, s1rd9}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem10(x10, t10, {inFlip0, s1wr0}, {outFlip0, s1rd10}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem11(x11, t11, {inFlip0, s1wr0}, {outFlip0, s1rd11}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem12(x12, t12, {inFlip0, s1wr0}, {outFlip0, s1rd12}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem13(x13, t13, {inFlip0, s1wr0}, {outFlip0, s1rd13}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem14(x14, t14, {inFlip0, s1wr0}, {outFlip0, s1rd14}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem15(x15, t15, {inFlip0, s1wr0}, {outFlip0, s1rd15}, s1wr_en, clk);

nextReg #(63, 6) nextReg_24650(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_24651(.X(next2), .Y(next3), .clk(clk));
nextReg #(64, 6) nextReg_24654(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24655(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(63, 1) shiftFIFO_24658(.X(tm124), .Y(tm124_d), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_24661(.X(tm124_d), .Y(tm124_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(6, 6) shiftFIFO_24666(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(7, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem8(s8, y8, {inFlip1, s2wr8}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem9(s9, y9, {inFlip1, s2wr9}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem10(s10, y10, {inFlip1, s2wr10}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem11(s11, y11, {inFlip1, s2wr11}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem12(s12, y12, {inFlip1, s2wr12}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem13(s13, y13, {inFlip1, s2wr13}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem14(s14, y14, {inFlip1, s2wr14}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem15(s15, y15, {inFlip1, s2wr15}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd0 <= 3;
	     {1'd0,  6'd1}: s1rd0 <= 7;
	     {1'd0,  6'd2}: s1rd0 <= 11;
	     {1'd0,  6'd3}: s1rd0 <= 15;
	     {1'd0,  6'd4}: s1rd0 <= 19;
	     {1'd0,  6'd5}: s1rd0 <= 23;
	     {1'd0,  6'd6}: s1rd0 <= 27;
	     {1'd0,  6'd7}: s1rd0 <= 31;
	     {1'd0,  6'd8}: s1rd0 <= 35;
	     {1'd0,  6'd9}: s1rd0 <= 39;
	     {1'd0,  6'd10}: s1rd0 <= 43;
	     {1'd0,  6'd11}: s1rd0 <= 47;
	     {1'd0,  6'd12}: s1rd0 <= 51;
	     {1'd0,  6'd13}: s1rd0 <= 55;
	     {1'd0,  6'd14}: s1rd0 <= 59;
	     {1'd0,  6'd15}: s1rd0 <= 63;
	     {1'd0,  6'd16}: s1rd0 <= 2;
	     {1'd0,  6'd17}: s1rd0 <= 6;
	     {1'd0,  6'd18}: s1rd0 <= 10;
	     {1'd0,  6'd19}: s1rd0 <= 14;
	     {1'd0,  6'd20}: s1rd0 <= 18;
	     {1'd0,  6'd21}: s1rd0 <= 22;
	     {1'd0,  6'd22}: s1rd0 <= 26;
	     {1'd0,  6'd23}: s1rd0 <= 30;
	     {1'd0,  6'd24}: s1rd0 <= 34;
	     {1'd0,  6'd25}: s1rd0 <= 38;
	     {1'd0,  6'd26}: s1rd0 <= 42;
	     {1'd0,  6'd27}: s1rd0 <= 46;
	     {1'd0,  6'd28}: s1rd0 <= 50;
	     {1'd0,  6'd29}: s1rd0 <= 54;
	     {1'd0,  6'd30}: s1rd0 <= 58;
	     {1'd0,  6'd31}: s1rd0 <= 62;
	     {1'd0,  6'd32}: s1rd0 <= 1;
	     {1'd0,  6'd33}: s1rd0 <= 5;
	     {1'd0,  6'd34}: s1rd0 <= 9;
	     {1'd0,  6'd35}: s1rd0 <= 13;
	     {1'd0,  6'd36}: s1rd0 <= 17;
	     {1'd0,  6'd37}: s1rd0 <= 21;
	     {1'd0,  6'd38}: s1rd0 <= 25;
	     {1'd0,  6'd39}: s1rd0 <= 29;
	     {1'd0,  6'd40}: s1rd0 <= 33;
	     {1'd0,  6'd41}: s1rd0 <= 37;
	     {1'd0,  6'd42}: s1rd0 <= 41;
	     {1'd0,  6'd43}: s1rd0 <= 45;
	     {1'd0,  6'd44}: s1rd0 <= 49;
	     {1'd0,  6'd45}: s1rd0 <= 53;
	     {1'd0,  6'd46}: s1rd0 <= 57;
	     {1'd0,  6'd47}: s1rd0 <= 61;
	     {1'd0,  6'd48}: s1rd0 <= 0;
	     {1'd0,  6'd49}: s1rd0 <= 4;
	     {1'd0,  6'd50}: s1rd0 <= 8;
	     {1'd0,  6'd51}: s1rd0 <= 12;
	     {1'd0,  6'd52}: s1rd0 <= 16;
	     {1'd0,  6'd53}: s1rd0 <= 20;
	     {1'd0,  6'd54}: s1rd0 <= 24;
	     {1'd0,  6'd55}: s1rd0 <= 28;
	     {1'd0,  6'd56}: s1rd0 <= 32;
	     {1'd0,  6'd57}: s1rd0 <= 36;
	     {1'd0,  6'd58}: s1rd0 <= 40;
	     {1'd0,  6'd59}: s1rd0 <= 44;
	     {1'd0,  6'd60}: s1rd0 <= 48;
	     {1'd0,  6'd61}: s1rd0 <= 52;
	     {1'd0,  6'd62}: s1rd0 <= 56;
	     {1'd0,  6'd63}: s1rd0 <= 60;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd1 <= 2;
	     {1'd0,  6'd1}: s1rd1 <= 6;
	     {1'd0,  6'd2}: s1rd1 <= 10;
	     {1'd0,  6'd3}: s1rd1 <= 14;
	     {1'd0,  6'd4}: s1rd1 <= 18;
	     {1'd0,  6'd5}: s1rd1 <= 22;
	     {1'd0,  6'd6}: s1rd1 <= 26;
	     {1'd0,  6'd7}: s1rd1 <= 30;
	     {1'd0,  6'd8}: s1rd1 <= 34;
	     {1'd0,  6'd9}: s1rd1 <= 38;
	     {1'd0,  6'd10}: s1rd1 <= 42;
	     {1'd0,  6'd11}: s1rd1 <= 46;
	     {1'd0,  6'd12}: s1rd1 <= 50;
	     {1'd0,  6'd13}: s1rd1 <= 54;
	     {1'd0,  6'd14}: s1rd1 <= 58;
	     {1'd0,  6'd15}: s1rd1 <= 62;
	     {1'd0,  6'd16}: s1rd1 <= 3;
	     {1'd0,  6'd17}: s1rd1 <= 7;
	     {1'd0,  6'd18}: s1rd1 <= 11;
	     {1'd0,  6'd19}: s1rd1 <= 15;
	     {1'd0,  6'd20}: s1rd1 <= 19;
	     {1'd0,  6'd21}: s1rd1 <= 23;
	     {1'd0,  6'd22}: s1rd1 <= 27;
	     {1'd0,  6'd23}: s1rd1 <= 31;
	     {1'd0,  6'd24}: s1rd1 <= 35;
	     {1'd0,  6'd25}: s1rd1 <= 39;
	     {1'd0,  6'd26}: s1rd1 <= 43;
	     {1'd0,  6'd27}: s1rd1 <= 47;
	     {1'd0,  6'd28}: s1rd1 <= 51;
	     {1'd0,  6'd29}: s1rd1 <= 55;
	     {1'd0,  6'd30}: s1rd1 <= 59;
	     {1'd0,  6'd31}: s1rd1 <= 63;
	     {1'd0,  6'd32}: s1rd1 <= 0;
	     {1'd0,  6'd33}: s1rd1 <= 4;
	     {1'd0,  6'd34}: s1rd1 <= 8;
	     {1'd0,  6'd35}: s1rd1 <= 12;
	     {1'd0,  6'd36}: s1rd1 <= 16;
	     {1'd0,  6'd37}: s1rd1 <= 20;
	     {1'd0,  6'd38}: s1rd1 <= 24;
	     {1'd0,  6'd39}: s1rd1 <= 28;
	     {1'd0,  6'd40}: s1rd1 <= 32;
	     {1'd0,  6'd41}: s1rd1 <= 36;
	     {1'd0,  6'd42}: s1rd1 <= 40;
	     {1'd0,  6'd43}: s1rd1 <= 44;
	     {1'd0,  6'd44}: s1rd1 <= 48;
	     {1'd0,  6'd45}: s1rd1 <= 52;
	     {1'd0,  6'd46}: s1rd1 <= 56;
	     {1'd0,  6'd47}: s1rd1 <= 60;
	     {1'd0,  6'd48}: s1rd1 <= 1;
	     {1'd0,  6'd49}: s1rd1 <= 5;
	     {1'd0,  6'd50}: s1rd1 <= 9;
	     {1'd0,  6'd51}: s1rd1 <= 13;
	     {1'd0,  6'd52}: s1rd1 <= 17;
	     {1'd0,  6'd53}: s1rd1 <= 21;
	     {1'd0,  6'd54}: s1rd1 <= 25;
	     {1'd0,  6'd55}: s1rd1 <= 29;
	     {1'd0,  6'd56}: s1rd1 <= 33;
	     {1'd0,  6'd57}: s1rd1 <= 37;
	     {1'd0,  6'd58}: s1rd1 <= 41;
	     {1'd0,  6'd59}: s1rd1 <= 45;
	     {1'd0,  6'd60}: s1rd1 <= 49;
	     {1'd0,  6'd61}: s1rd1 <= 53;
	     {1'd0,  6'd62}: s1rd1 <= 57;
	     {1'd0,  6'd63}: s1rd1 <= 61;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd2 <= 1;
	     {1'd0,  6'd1}: s1rd2 <= 5;
	     {1'd0,  6'd2}: s1rd2 <= 9;
	     {1'd0,  6'd3}: s1rd2 <= 13;
	     {1'd0,  6'd4}: s1rd2 <= 17;
	     {1'd0,  6'd5}: s1rd2 <= 21;
	     {1'd0,  6'd6}: s1rd2 <= 25;
	     {1'd0,  6'd7}: s1rd2 <= 29;
	     {1'd0,  6'd8}: s1rd2 <= 33;
	     {1'd0,  6'd9}: s1rd2 <= 37;
	     {1'd0,  6'd10}: s1rd2 <= 41;
	     {1'd0,  6'd11}: s1rd2 <= 45;
	     {1'd0,  6'd12}: s1rd2 <= 49;
	     {1'd0,  6'd13}: s1rd2 <= 53;
	     {1'd0,  6'd14}: s1rd2 <= 57;
	     {1'd0,  6'd15}: s1rd2 <= 61;
	     {1'd0,  6'd16}: s1rd2 <= 0;
	     {1'd0,  6'd17}: s1rd2 <= 4;
	     {1'd0,  6'd18}: s1rd2 <= 8;
	     {1'd0,  6'd19}: s1rd2 <= 12;
	     {1'd0,  6'd20}: s1rd2 <= 16;
	     {1'd0,  6'd21}: s1rd2 <= 20;
	     {1'd0,  6'd22}: s1rd2 <= 24;
	     {1'd0,  6'd23}: s1rd2 <= 28;
	     {1'd0,  6'd24}: s1rd2 <= 32;
	     {1'd0,  6'd25}: s1rd2 <= 36;
	     {1'd0,  6'd26}: s1rd2 <= 40;
	     {1'd0,  6'd27}: s1rd2 <= 44;
	     {1'd0,  6'd28}: s1rd2 <= 48;
	     {1'd0,  6'd29}: s1rd2 <= 52;
	     {1'd0,  6'd30}: s1rd2 <= 56;
	     {1'd0,  6'd31}: s1rd2 <= 60;
	     {1'd0,  6'd32}: s1rd2 <= 3;
	     {1'd0,  6'd33}: s1rd2 <= 7;
	     {1'd0,  6'd34}: s1rd2 <= 11;
	     {1'd0,  6'd35}: s1rd2 <= 15;
	     {1'd0,  6'd36}: s1rd2 <= 19;
	     {1'd0,  6'd37}: s1rd2 <= 23;
	     {1'd0,  6'd38}: s1rd2 <= 27;
	     {1'd0,  6'd39}: s1rd2 <= 31;
	     {1'd0,  6'd40}: s1rd2 <= 35;
	     {1'd0,  6'd41}: s1rd2 <= 39;
	     {1'd0,  6'd42}: s1rd2 <= 43;
	     {1'd0,  6'd43}: s1rd2 <= 47;
	     {1'd0,  6'd44}: s1rd2 <= 51;
	     {1'd0,  6'd45}: s1rd2 <= 55;
	     {1'd0,  6'd46}: s1rd2 <= 59;
	     {1'd0,  6'd47}: s1rd2 <= 63;
	     {1'd0,  6'd48}: s1rd2 <= 2;
	     {1'd0,  6'd49}: s1rd2 <= 6;
	     {1'd0,  6'd50}: s1rd2 <= 10;
	     {1'd0,  6'd51}: s1rd2 <= 14;
	     {1'd0,  6'd52}: s1rd2 <= 18;
	     {1'd0,  6'd53}: s1rd2 <= 22;
	     {1'd0,  6'd54}: s1rd2 <= 26;
	     {1'd0,  6'd55}: s1rd2 <= 30;
	     {1'd0,  6'd56}: s1rd2 <= 34;
	     {1'd0,  6'd57}: s1rd2 <= 38;
	     {1'd0,  6'd58}: s1rd2 <= 42;
	     {1'd0,  6'd59}: s1rd2 <= 46;
	     {1'd0,  6'd60}: s1rd2 <= 50;
	     {1'd0,  6'd61}: s1rd2 <= 54;
	     {1'd0,  6'd62}: s1rd2 <= 58;
	     {1'd0,  6'd63}: s1rd2 <= 62;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd3 <= 0;
	     {1'd0,  6'd1}: s1rd3 <= 4;
	     {1'd0,  6'd2}: s1rd3 <= 8;
	     {1'd0,  6'd3}: s1rd3 <= 12;
	     {1'd0,  6'd4}: s1rd3 <= 16;
	     {1'd0,  6'd5}: s1rd3 <= 20;
	     {1'd0,  6'd6}: s1rd3 <= 24;
	     {1'd0,  6'd7}: s1rd3 <= 28;
	     {1'd0,  6'd8}: s1rd3 <= 32;
	     {1'd0,  6'd9}: s1rd3 <= 36;
	     {1'd0,  6'd10}: s1rd3 <= 40;
	     {1'd0,  6'd11}: s1rd3 <= 44;
	     {1'd0,  6'd12}: s1rd3 <= 48;
	     {1'd0,  6'd13}: s1rd3 <= 52;
	     {1'd0,  6'd14}: s1rd3 <= 56;
	     {1'd0,  6'd15}: s1rd3 <= 60;
	     {1'd0,  6'd16}: s1rd3 <= 1;
	     {1'd0,  6'd17}: s1rd3 <= 5;
	     {1'd0,  6'd18}: s1rd3 <= 9;
	     {1'd0,  6'd19}: s1rd3 <= 13;
	     {1'd0,  6'd20}: s1rd3 <= 17;
	     {1'd0,  6'd21}: s1rd3 <= 21;
	     {1'd0,  6'd22}: s1rd3 <= 25;
	     {1'd0,  6'd23}: s1rd3 <= 29;
	     {1'd0,  6'd24}: s1rd3 <= 33;
	     {1'd0,  6'd25}: s1rd3 <= 37;
	     {1'd0,  6'd26}: s1rd3 <= 41;
	     {1'd0,  6'd27}: s1rd3 <= 45;
	     {1'd0,  6'd28}: s1rd3 <= 49;
	     {1'd0,  6'd29}: s1rd3 <= 53;
	     {1'd0,  6'd30}: s1rd3 <= 57;
	     {1'd0,  6'd31}: s1rd3 <= 61;
	     {1'd0,  6'd32}: s1rd3 <= 2;
	     {1'd0,  6'd33}: s1rd3 <= 6;
	     {1'd0,  6'd34}: s1rd3 <= 10;
	     {1'd0,  6'd35}: s1rd3 <= 14;
	     {1'd0,  6'd36}: s1rd3 <= 18;
	     {1'd0,  6'd37}: s1rd3 <= 22;
	     {1'd0,  6'd38}: s1rd3 <= 26;
	     {1'd0,  6'd39}: s1rd3 <= 30;
	     {1'd0,  6'd40}: s1rd3 <= 34;
	     {1'd0,  6'd41}: s1rd3 <= 38;
	     {1'd0,  6'd42}: s1rd3 <= 42;
	     {1'd0,  6'd43}: s1rd3 <= 46;
	     {1'd0,  6'd44}: s1rd3 <= 50;
	     {1'd0,  6'd45}: s1rd3 <= 54;
	     {1'd0,  6'd46}: s1rd3 <= 58;
	     {1'd0,  6'd47}: s1rd3 <= 62;
	     {1'd0,  6'd48}: s1rd3 <= 3;
	     {1'd0,  6'd49}: s1rd3 <= 7;
	     {1'd0,  6'd50}: s1rd3 <= 11;
	     {1'd0,  6'd51}: s1rd3 <= 15;
	     {1'd0,  6'd52}: s1rd3 <= 19;
	     {1'd0,  6'd53}: s1rd3 <= 23;
	     {1'd0,  6'd54}: s1rd3 <= 27;
	     {1'd0,  6'd55}: s1rd3 <= 31;
	     {1'd0,  6'd56}: s1rd3 <= 35;
	     {1'd0,  6'd57}: s1rd3 <= 39;
	     {1'd0,  6'd58}: s1rd3 <= 43;
	     {1'd0,  6'd59}: s1rd3 <= 47;
	     {1'd0,  6'd60}: s1rd3 <= 51;
	     {1'd0,  6'd61}: s1rd3 <= 55;
	     {1'd0,  6'd62}: s1rd3 <= 59;
	     {1'd0,  6'd63}: s1rd3 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd4 <= 3;
	     {1'd0,  6'd1}: s1rd4 <= 7;
	     {1'd0,  6'd2}: s1rd4 <= 11;
	     {1'd0,  6'd3}: s1rd4 <= 15;
	     {1'd0,  6'd4}: s1rd4 <= 19;
	     {1'd0,  6'd5}: s1rd4 <= 23;
	     {1'd0,  6'd6}: s1rd4 <= 27;
	     {1'd0,  6'd7}: s1rd4 <= 31;
	     {1'd0,  6'd8}: s1rd4 <= 35;
	     {1'd0,  6'd9}: s1rd4 <= 39;
	     {1'd0,  6'd10}: s1rd4 <= 43;
	     {1'd0,  6'd11}: s1rd4 <= 47;
	     {1'd0,  6'd12}: s1rd4 <= 51;
	     {1'd0,  6'd13}: s1rd4 <= 55;
	     {1'd0,  6'd14}: s1rd4 <= 59;
	     {1'd0,  6'd15}: s1rd4 <= 63;
	     {1'd0,  6'd16}: s1rd4 <= 2;
	     {1'd0,  6'd17}: s1rd4 <= 6;
	     {1'd0,  6'd18}: s1rd4 <= 10;
	     {1'd0,  6'd19}: s1rd4 <= 14;
	     {1'd0,  6'd20}: s1rd4 <= 18;
	     {1'd0,  6'd21}: s1rd4 <= 22;
	     {1'd0,  6'd22}: s1rd4 <= 26;
	     {1'd0,  6'd23}: s1rd4 <= 30;
	     {1'd0,  6'd24}: s1rd4 <= 34;
	     {1'd0,  6'd25}: s1rd4 <= 38;
	     {1'd0,  6'd26}: s1rd4 <= 42;
	     {1'd0,  6'd27}: s1rd4 <= 46;
	     {1'd0,  6'd28}: s1rd4 <= 50;
	     {1'd0,  6'd29}: s1rd4 <= 54;
	     {1'd0,  6'd30}: s1rd4 <= 58;
	     {1'd0,  6'd31}: s1rd4 <= 62;
	     {1'd0,  6'd32}: s1rd4 <= 1;
	     {1'd0,  6'd33}: s1rd4 <= 5;
	     {1'd0,  6'd34}: s1rd4 <= 9;
	     {1'd0,  6'd35}: s1rd4 <= 13;
	     {1'd0,  6'd36}: s1rd4 <= 17;
	     {1'd0,  6'd37}: s1rd4 <= 21;
	     {1'd0,  6'd38}: s1rd4 <= 25;
	     {1'd0,  6'd39}: s1rd4 <= 29;
	     {1'd0,  6'd40}: s1rd4 <= 33;
	     {1'd0,  6'd41}: s1rd4 <= 37;
	     {1'd0,  6'd42}: s1rd4 <= 41;
	     {1'd0,  6'd43}: s1rd4 <= 45;
	     {1'd0,  6'd44}: s1rd4 <= 49;
	     {1'd0,  6'd45}: s1rd4 <= 53;
	     {1'd0,  6'd46}: s1rd4 <= 57;
	     {1'd0,  6'd47}: s1rd4 <= 61;
	     {1'd0,  6'd48}: s1rd4 <= 0;
	     {1'd0,  6'd49}: s1rd4 <= 4;
	     {1'd0,  6'd50}: s1rd4 <= 8;
	     {1'd0,  6'd51}: s1rd4 <= 12;
	     {1'd0,  6'd52}: s1rd4 <= 16;
	     {1'd0,  6'd53}: s1rd4 <= 20;
	     {1'd0,  6'd54}: s1rd4 <= 24;
	     {1'd0,  6'd55}: s1rd4 <= 28;
	     {1'd0,  6'd56}: s1rd4 <= 32;
	     {1'd0,  6'd57}: s1rd4 <= 36;
	     {1'd0,  6'd58}: s1rd4 <= 40;
	     {1'd0,  6'd59}: s1rd4 <= 44;
	     {1'd0,  6'd60}: s1rd4 <= 48;
	     {1'd0,  6'd61}: s1rd4 <= 52;
	     {1'd0,  6'd62}: s1rd4 <= 56;
	     {1'd0,  6'd63}: s1rd4 <= 60;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd5 <= 2;
	     {1'd0,  6'd1}: s1rd5 <= 6;
	     {1'd0,  6'd2}: s1rd5 <= 10;
	     {1'd0,  6'd3}: s1rd5 <= 14;
	     {1'd0,  6'd4}: s1rd5 <= 18;
	     {1'd0,  6'd5}: s1rd5 <= 22;
	     {1'd0,  6'd6}: s1rd5 <= 26;
	     {1'd0,  6'd7}: s1rd5 <= 30;
	     {1'd0,  6'd8}: s1rd5 <= 34;
	     {1'd0,  6'd9}: s1rd5 <= 38;
	     {1'd0,  6'd10}: s1rd5 <= 42;
	     {1'd0,  6'd11}: s1rd5 <= 46;
	     {1'd0,  6'd12}: s1rd5 <= 50;
	     {1'd0,  6'd13}: s1rd5 <= 54;
	     {1'd0,  6'd14}: s1rd5 <= 58;
	     {1'd0,  6'd15}: s1rd5 <= 62;
	     {1'd0,  6'd16}: s1rd5 <= 3;
	     {1'd0,  6'd17}: s1rd5 <= 7;
	     {1'd0,  6'd18}: s1rd5 <= 11;
	     {1'd0,  6'd19}: s1rd5 <= 15;
	     {1'd0,  6'd20}: s1rd5 <= 19;
	     {1'd0,  6'd21}: s1rd5 <= 23;
	     {1'd0,  6'd22}: s1rd5 <= 27;
	     {1'd0,  6'd23}: s1rd5 <= 31;
	     {1'd0,  6'd24}: s1rd5 <= 35;
	     {1'd0,  6'd25}: s1rd5 <= 39;
	     {1'd0,  6'd26}: s1rd5 <= 43;
	     {1'd0,  6'd27}: s1rd5 <= 47;
	     {1'd0,  6'd28}: s1rd5 <= 51;
	     {1'd0,  6'd29}: s1rd5 <= 55;
	     {1'd0,  6'd30}: s1rd5 <= 59;
	     {1'd0,  6'd31}: s1rd5 <= 63;
	     {1'd0,  6'd32}: s1rd5 <= 0;
	     {1'd0,  6'd33}: s1rd5 <= 4;
	     {1'd0,  6'd34}: s1rd5 <= 8;
	     {1'd0,  6'd35}: s1rd5 <= 12;
	     {1'd0,  6'd36}: s1rd5 <= 16;
	     {1'd0,  6'd37}: s1rd5 <= 20;
	     {1'd0,  6'd38}: s1rd5 <= 24;
	     {1'd0,  6'd39}: s1rd5 <= 28;
	     {1'd0,  6'd40}: s1rd5 <= 32;
	     {1'd0,  6'd41}: s1rd5 <= 36;
	     {1'd0,  6'd42}: s1rd5 <= 40;
	     {1'd0,  6'd43}: s1rd5 <= 44;
	     {1'd0,  6'd44}: s1rd5 <= 48;
	     {1'd0,  6'd45}: s1rd5 <= 52;
	     {1'd0,  6'd46}: s1rd5 <= 56;
	     {1'd0,  6'd47}: s1rd5 <= 60;
	     {1'd0,  6'd48}: s1rd5 <= 1;
	     {1'd0,  6'd49}: s1rd5 <= 5;
	     {1'd0,  6'd50}: s1rd5 <= 9;
	     {1'd0,  6'd51}: s1rd5 <= 13;
	     {1'd0,  6'd52}: s1rd5 <= 17;
	     {1'd0,  6'd53}: s1rd5 <= 21;
	     {1'd0,  6'd54}: s1rd5 <= 25;
	     {1'd0,  6'd55}: s1rd5 <= 29;
	     {1'd0,  6'd56}: s1rd5 <= 33;
	     {1'd0,  6'd57}: s1rd5 <= 37;
	     {1'd0,  6'd58}: s1rd5 <= 41;
	     {1'd0,  6'd59}: s1rd5 <= 45;
	     {1'd0,  6'd60}: s1rd5 <= 49;
	     {1'd0,  6'd61}: s1rd5 <= 53;
	     {1'd0,  6'd62}: s1rd5 <= 57;
	     {1'd0,  6'd63}: s1rd5 <= 61;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd6 <= 1;
	     {1'd0,  6'd1}: s1rd6 <= 5;
	     {1'd0,  6'd2}: s1rd6 <= 9;
	     {1'd0,  6'd3}: s1rd6 <= 13;
	     {1'd0,  6'd4}: s1rd6 <= 17;
	     {1'd0,  6'd5}: s1rd6 <= 21;
	     {1'd0,  6'd6}: s1rd6 <= 25;
	     {1'd0,  6'd7}: s1rd6 <= 29;
	     {1'd0,  6'd8}: s1rd6 <= 33;
	     {1'd0,  6'd9}: s1rd6 <= 37;
	     {1'd0,  6'd10}: s1rd6 <= 41;
	     {1'd0,  6'd11}: s1rd6 <= 45;
	     {1'd0,  6'd12}: s1rd6 <= 49;
	     {1'd0,  6'd13}: s1rd6 <= 53;
	     {1'd0,  6'd14}: s1rd6 <= 57;
	     {1'd0,  6'd15}: s1rd6 <= 61;
	     {1'd0,  6'd16}: s1rd6 <= 0;
	     {1'd0,  6'd17}: s1rd6 <= 4;
	     {1'd0,  6'd18}: s1rd6 <= 8;
	     {1'd0,  6'd19}: s1rd6 <= 12;
	     {1'd0,  6'd20}: s1rd6 <= 16;
	     {1'd0,  6'd21}: s1rd6 <= 20;
	     {1'd0,  6'd22}: s1rd6 <= 24;
	     {1'd0,  6'd23}: s1rd6 <= 28;
	     {1'd0,  6'd24}: s1rd6 <= 32;
	     {1'd0,  6'd25}: s1rd6 <= 36;
	     {1'd0,  6'd26}: s1rd6 <= 40;
	     {1'd0,  6'd27}: s1rd6 <= 44;
	     {1'd0,  6'd28}: s1rd6 <= 48;
	     {1'd0,  6'd29}: s1rd6 <= 52;
	     {1'd0,  6'd30}: s1rd6 <= 56;
	     {1'd0,  6'd31}: s1rd6 <= 60;
	     {1'd0,  6'd32}: s1rd6 <= 3;
	     {1'd0,  6'd33}: s1rd6 <= 7;
	     {1'd0,  6'd34}: s1rd6 <= 11;
	     {1'd0,  6'd35}: s1rd6 <= 15;
	     {1'd0,  6'd36}: s1rd6 <= 19;
	     {1'd0,  6'd37}: s1rd6 <= 23;
	     {1'd0,  6'd38}: s1rd6 <= 27;
	     {1'd0,  6'd39}: s1rd6 <= 31;
	     {1'd0,  6'd40}: s1rd6 <= 35;
	     {1'd0,  6'd41}: s1rd6 <= 39;
	     {1'd0,  6'd42}: s1rd6 <= 43;
	     {1'd0,  6'd43}: s1rd6 <= 47;
	     {1'd0,  6'd44}: s1rd6 <= 51;
	     {1'd0,  6'd45}: s1rd6 <= 55;
	     {1'd0,  6'd46}: s1rd6 <= 59;
	     {1'd0,  6'd47}: s1rd6 <= 63;
	     {1'd0,  6'd48}: s1rd6 <= 2;
	     {1'd0,  6'd49}: s1rd6 <= 6;
	     {1'd0,  6'd50}: s1rd6 <= 10;
	     {1'd0,  6'd51}: s1rd6 <= 14;
	     {1'd0,  6'd52}: s1rd6 <= 18;
	     {1'd0,  6'd53}: s1rd6 <= 22;
	     {1'd0,  6'd54}: s1rd6 <= 26;
	     {1'd0,  6'd55}: s1rd6 <= 30;
	     {1'd0,  6'd56}: s1rd6 <= 34;
	     {1'd0,  6'd57}: s1rd6 <= 38;
	     {1'd0,  6'd58}: s1rd6 <= 42;
	     {1'd0,  6'd59}: s1rd6 <= 46;
	     {1'd0,  6'd60}: s1rd6 <= 50;
	     {1'd0,  6'd61}: s1rd6 <= 54;
	     {1'd0,  6'd62}: s1rd6 <= 58;
	     {1'd0,  6'd63}: s1rd6 <= 62;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd7 <= 0;
	     {1'd0,  6'd1}: s1rd7 <= 4;
	     {1'd0,  6'd2}: s1rd7 <= 8;
	     {1'd0,  6'd3}: s1rd7 <= 12;
	     {1'd0,  6'd4}: s1rd7 <= 16;
	     {1'd0,  6'd5}: s1rd7 <= 20;
	     {1'd0,  6'd6}: s1rd7 <= 24;
	     {1'd0,  6'd7}: s1rd7 <= 28;
	     {1'd0,  6'd8}: s1rd7 <= 32;
	     {1'd0,  6'd9}: s1rd7 <= 36;
	     {1'd0,  6'd10}: s1rd7 <= 40;
	     {1'd0,  6'd11}: s1rd7 <= 44;
	     {1'd0,  6'd12}: s1rd7 <= 48;
	     {1'd0,  6'd13}: s1rd7 <= 52;
	     {1'd0,  6'd14}: s1rd7 <= 56;
	     {1'd0,  6'd15}: s1rd7 <= 60;
	     {1'd0,  6'd16}: s1rd7 <= 1;
	     {1'd0,  6'd17}: s1rd7 <= 5;
	     {1'd0,  6'd18}: s1rd7 <= 9;
	     {1'd0,  6'd19}: s1rd7 <= 13;
	     {1'd0,  6'd20}: s1rd7 <= 17;
	     {1'd0,  6'd21}: s1rd7 <= 21;
	     {1'd0,  6'd22}: s1rd7 <= 25;
	     {1'd0,  6'd23}: s1rd7 <= 29;
	     {1'd0,  6'd24}: s1rd7 <= 33;
	     {1'd0,  6'd25}: s1rd7 <= 37;
	     {1'd0,  6'd26}: s1rd7 <= 41;
	     {1'd0,  6'd27}: s1rd7 <= 45;
	     {1'd0,  6'd28}: s1rd7 <= 49;
	     {1'd0,  6'd29}: s1rd7 <= 53;
	     {1'd0,  6'd30}: s1rd7 <= 57;
	     {1'd0,  6'd31}: s1rd7 <= 61;
	     {1'd0,  6'd32}: s1rd7 <= 2;
	     {1'd0,  6'd33}: s1rd7 <= 6;
	     {1'd0,  6'd34}: s1rd7 <= 10;
	     {1'd0,  6'd35}: s1rd7 <= 14;
	     {1'd0,  6'd36}: s1rd7 <= 18;
	     {1'd0,  6'd37}: s1rd7 <= 22;
	     {1'd0,  6'd38}: s1rd7 <= 26;
	     {1'd0,  6'd39}: s1rd7 <= 30;
	     {1'd0,  6'd40}: s1rd7 <= 34;
	     {1'd0,  6'd41}: s1rd7 <= 38;
	     {1'd0,  6'd42}: s1rd7 <= 42;
	     {1'd0,  6'd43}: s1rd7 <= 46;
	     {1'd0,  6'd44}: s1rd7 <= 50;
	     {1'd0,  6'd45}: s1rd7 <= 54;
	     {1'd0,  6'd46}: s1rd7 <= 58;
	     {1'd0,  6'd47}: s1rd7 <= 62;
	     {1'd0,  6'd48}: s1rd7 <= 3;
	     {1'd0,  6'd49}: s1rd7 <= 7;
	     {1'd0,  6'd50}: s1rd7 <= 11;
	     {1'd0,  6'd51}: s1rd7 <= 15;
	     {1'd0,  6'd52}: s1rd7 <= 19;
	     {1'd0,  6'd53}: s1rd7 <= 23;
	     {1'd0,  6'd54}: s1rd7 <= 27;
	     {1'd0,  6'd55}: s1rd7 <= 31;
	     {1'd0,  6'd56}: s1rd7 <= 35;
	     {1'd0,  6'd57}: s1rd7 <= 39;
	     {1'd0,  6'd58}: s1rd7 <= 43;
	     {1'd0,  6'd59}: s1rd7 <= 47;
	     {1'd0,  6'd60}: s1rd7 <= 51;
	     {1'd0,  6'd61}: s1rd7 <= 55;
	     {1'd0,  6'd62}: s1rd7 <= 59;
	     {1'd0,  6'd63}: s1rd7 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd8 <= 3;
	     {1'd0,  6'd1}: s1rd8 <= 7;
	     {1'd0,  6'd2}: s1rd8 <= 11;
	     {1'd0,  6'd3}: s1rd8 <= 15;
	     {1'd0,  6'd4}: s1rd8 <= 19;
	     {1'd0,  6'd5}: s1rd8 <= 23;
	     {1'd0,  6'd6}: s1rd8 <= 27;
	     {1'd0,  6'd7}: s1rd8 <= 31;
	     {1'd0,  6'd8}: s1rd8 <= 35;
	     {1'd0,  6'd9}: s1rd8 <= 39;
	     {1'd0,  6'd10}: s1rd8 <= 43;
	     {1'd0,  6'd11}: s1rd8 <= 47;
	     {1'd0,  6'd12}: s1rd8 <= 51;
	     {1'd0,  6'd13}: s1rd8 <= 55;
	     {1'd0,  6'd14}: s1rd8 <= 59;
	     {1'd0,  6'd15}: s1rd8 <= 63;
	     {1'd0,  6'd16}: s1rd8 <= 2;
	     {1'd0,  6'd17}: s1rd8 <= 6;
	     {1'd0,  6'd18}: s1rd8 <= 10;
	     {1'd0,  6'd19}: s1rd8 <= 14;
	     {1'd0,  6'd20}: s1rd8 <= 18;
	     {1'd0,  6'd21}: s1rd8 <= 22;
	     {1'd0,  6'd22}: s1rd8 <= 26;
	     {1'd0,  6'd23}: s1rd8 <= 30;
	     {1'd0,  6'd24}: s1rd8 <= 34;
	     {1'd0,  6'd25}: s1rd8 <= 38;
	     {1'd0,  6'd26}: s1rd8 <= 42;
	     {1'd0,  6'd27}: s1rd8 <= 46;
	     {1'd0,  6'd28}: s1rd8 <= 50;
	     {1'd0,  6'd29}: s1rd8 <= 54;
	     {1'd0,  6'd30}: s1rd8 <= 58;
	     {1'd0,  6'd31}: s1rd8 <= 62;
	     {1'd0,  6'd32}: s1rd8 <= 1;
	     {1'd0,  6'd33}: s1rd8 <= 5;
	     {1'd0,  6'd34}: s1rd8 <= 9;
	     {1'd0,  6'd35}: s1rd8 <= 13;
	     {1'd0,  6'd36}: s1rd8 <= 17;
	     {1'd0,  6'd37}: s1rd8 <= 21;
	     {1'd0,  6'd38}: s1rd8 <= 25;
	     {1'd0,  6'd39}: s1rd8 <= 29;
	     {1'd0,  6'd40}: s1rd8 <= 33;
	     {1'd0,  6'd41}: s1rd8 <= 37;
	     {1'd0,  6'd42}: s1rd8 <= 41;
	     {1'd0,  6'd43}: s1rd8 <= 45;
	     {1'd0,  6'd44}: s1rd8 <= 49;
	     {1'd0,  6'd45}: s1rd8 <= 53;
	     {1'd0,  6'd46}: s1rd8 <= 57;
	     {1'd0,  6'd47}: s1rd8 <= 61;
	     {1'd0,  6'd48}: s1rd8 <= 0;
	     {1'd0,  6'd49}: s1rd8 <= 4;
	     {1'd0,  6'd50}: s1rd8 <= 8;
	     {1'd0,  6'd51}: s1rd8 <= 12;
	     {1'd0,  6'd52}: s1rd8 <= 16;
	     {1'd0,  6'd53}: s1rd8 <= 20;
	     {1'd0,  6'd54}: s1rd8 <= 24;
	     {1'd0,  6'd55}: s1rd8 <= 28;
	     {1'd0,  6'd56}: s1rd8 <= 32;
	     {1'd0,  6'd57}: s1rd8 <= 36;
	     {1'd0,  6'd58}: s1rd8 <= 40;
	     {1'd0,  6'd59}: s1rd8 <= 44;
	     {1'd0,  6'd60}: s1rd8 <= 48;
	     {1'd0,  6'd61}: s1rd8 <= 52;
	     {1'd0,  6'd62}: s1rd8 <= 56;
	     {1'd0,  6'd63}: s1rd8 <= 60;
      endcase      
   end

// synthesis attribute rom_style of s1rd8 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd9 <= 2;
	     {1'd0,  6'd1}: s1rd9 <= 6;
	     {1'd0,  6'd2}: s1rd9 <= 10;
	     {1'd0,  6'd3}: s1rd9 <= 14;
	     {1'd0,  6'd4}: s1rd9 <= 18;
	     {1'd0,  6'd5}: s1rd9 <= 22;
	     {1'd0,  6'd6}: s1rd9 <= 26;
	     {1'd0,  6'd7}: s1rd9 <= 30;
	     {1'd0,  6'd8}: s1rd9 <= 34;
	     {1'd0,  6'd9}: s1rd9 <= 38;
	     {1'd0,  6'd10}: s1rd9 <= 42;
	     {1'd0,  6'd11}: s1rd9 <= 46;
	     {1'd0,  6'd12}: s1rd9 <= 50;
	     {1'd0,  6'd13}: s1rd9 <= 54;
	     {1'd0,  6'd14}: s1rd9 <= 58;
	     {1'd0,  6'd15}: s1rd9 <= 62;
	     {1'd0,  6'd16}: s1rd9 <= 3;
	     {1'd0,  6'd17}: s1rd9 <= 7;
	     {1'd0,  6'd18}: s1rd9 <= 11;
	     {1'd0,  6'd19}: s1rd9 <= 15;
	     {1'd0,  6'd20}: s1rd9 <= 19;
	     {1'd0,  6'd21}: s1rd9 <= 23;
	     {1'd0,  6'd22}: s1rd9 <= 27;
	     {1'd0,  6'd23}: s1rd9 <= 31;
	     {1'd0,  6'd24}: s1rd9 <= 35;
	     {1'd0,  6'd25}: s1rd9 <= 39;
	     {1'd0,  6'd26}: s1rd9 <= 43;
	     {1'd0,  6'd27}: s1rd9 <= 47;
	     {1'd0,  6'd28}: s1rd9 <= 51;
	     {1'd0,  6'd29}: s1rd9 <= 55;
	     {1'd0,  6'd30}: s1rd9 <= 59;
	     {1'd0,  6'd31}: s1rd9 <= 63;
	     {1'd0,  6'd32}: s1rd9 <= 0;
	     {1'd0,  6'd33}: s1rd9 <= 4;
	     {1'd0,  6'd34}: s1rd9 <= 8;
	     {1'd0,  6'd35}: s1rd9 <= 12;
	     {1'd0,  6'd36}: s1rd9 <= 16;
	     {1'd0,  6'd37}: s1rd9 <= 20;
	     {1'd0,  6'd38}: s1rd9 <= 24;
	     {1'd0,  6'd39}: s1rd9 <= 28;
	     {1'd0,  6'd40}: s1rd9 <= 32;
	     {1'd0,  6'd41}: s1rd9 <= 36;
	     {1'd0,  6'd42}: s1rd9 <= 40;
	     {1'd0,  6'd43}: s1rd9 <= 44;
	     {1'd0,  6'd44}: s1rd9 <= 48;
	     {1'd0,  6'd45}: s1rd9 <= 52;
	     {1'd0,  6'd46}: s1rd9 <= 56;
	     {1'd0,  6'd47}: s1rd9 <= 60;
	     {1'd0,  6'd48}: s1rd9 <= 1;
	     {1'd0,  6'd49}: s1rd9 <= 5;
	     {1'd0,  6'd50}: s1rd9 <= 9;
	     {1'd0,  6'd51}: s1rd9 <= 13;
	     {1'd0,  6'd52}: s1rd9 <= 17;
	     {1'd0,  6'd53}: s1rd9 <= 21;
	     {1'd0,  6'd54}: s1rd9 <= 25;
	     {1'd0,  6'd55}: s1rd9 <= 29;
	     {1'd0,  6'd56}: s1rd9 <= 33;
	     {1'd0,  6'd57}: s1rd9 <= 37;
	     {1'd0,  6'd58}: s1rd9 <= 41;
	     {1'd0,  6'd59}: s1rd9 <= 45;
	     {1'd0,  6'd60}: s1rd9 <= 49;
	     {1'd0,  6'd61}: s1rd9 <= 53;
	     {1'd0,  6'd62}: s1rd9 <= 57;
	     {1'd0,  6'd63}: s1rd9 <= 61;
      endcase      
   end

// synthesis attribute rom_style of s1rd9 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd10 <= 1;
	     {1'd0,  6'd1}: s1rd10 <= 5;
	     {1'd0,  6'd2}: s1rd10 <= 9;
	     {1'd0,  6'd3}: s1rd10 <= 13;
	     {1'd0,  6'd4}: s1rd10 <= 17;
	     {1'd0,  6'd5}: s1rd10 <= 21;
	     {1'd0,  6'd6}: s1rd10 <= 25;
	     {1'd0,  6'd7}: s1rd10 <= 29;
	     {1'd0,  6'd8}: s1rd10 <= 33;
	     {1'd0,  6'd9}: s1rd10 <= 37;
	     {1'd0,  6'd10}: s1rd10 <= 41;
	     {1'd0,  6'd11}: s1rd10 <= 45;
	     {1'd0,  6'd12}: s1rd10 <= 49;
	     {1'd0,  6'd13}: s1rd10 <= 53;
	     {1'd0,  6'd14}: s1rd10 <= 57;
	     {1'd0,  6'd15}: s1rd10 <= 61;
	     {1'd0,  6'd16}: s1rd10 <= 0;
	     {1'd0,  6'd17}: s1rd10 <= 4;
	     {1'd0,  6'd18}: s1rd10 <= 8;
	     {1'd0,  6'd19}: s1rd10 <= 12;
	     {1'd0,  6'd20}: s1rd10 <= 16;
	     {1'd0,  6'd21}: s1rd10 <= 20;
	     {1'd0,  6'd22}: s1rd10 <= 24;
	     {1'd0,  6'd23}: s1rd10 <= 28;
	     {1'd0,  6'd24}: s1rd10 <= 32;
	     {1'd0,  6'd25}: s1rd10 <= 36;
	     {1'd0,  6'd26}: s1rd10 <= 40;
	     {1'd0,  6'd27}: s1rd10 <= 44;
	     {1'd0,  6'd28}: s1rd10 <= 48;
	     {1'd0,  6'd29}: s1rd10 <= 52;
	     {1'd0,  6'd30}: s1rd10 <= 56;
	     {1'd0,  6'd31}: s1rd10 <= 60;
	     {1'd0,  6'd32}: s1rd10 <= 3;
	     {1'd0,  6'd33}: s1rd10 <= 7;
	     {1'd0,  6'd34}: s1rd10 <= 11;
	     {1'd0,  6'd35}: s1rd10 <= 15;
	     {1'd0,  6'd36}: s1rd10 <= 19;
	     {1'd0,  6'd37}: s1rd10 <= 23;
	     {1'd0,  6'd38}: s1rd10 <= 27;
	     {1'd0,  6'd39}: s1rd10 <= 31;
	     {1'd0,  6'd40}: s1rd10 <= 35;
	     {1'd0,  6'd41}: s1rd10 <= 39;
	     {1'd0,  6'd42}: s1rd10 <= 43;
	     {1'd0,  6'd43}: s1rd10 <= 47;
	     {1'd0,  6'd44}: s1rd10 <= 51;
	     {1'd0,  6'd45}: s1rd10 <= 55;
	     {1'd0,  6'd46}: s1rd10 <= 59;
	     {1'd0,  6'd47}: s1rd10 <= 63;
	     {1'd0,  6'd48}: s1rd10 <= 2;
	     {1'd0,  6'd49}: s1rd10 <= 6;
	     {1'd0,  6'd50}: s1rd10 <= 10;
	     {1'd0,  6'd51}: s1rd10 <= 14;
	     {1'd0,  6'd52}: s1rd10 <= 18;
	     {1'd0,  6'd53}: s1rd10 <= 22;
	     {1'd0,  6'd54}: s1rd10 <= 26;
	     {1'd0,  6'd55}: s1rd10 <= 30;
	     {1'd0,  6'd56}: s1rd10 <= 34;
	     {1'd0,  6'd57}: s1rd10 <= 38;
	     {1'd0,  6'd58}: s1rd10 <= 42;
	     {1'd0,  6'd59}: s1rd10 <= 46;
	     {1'd0,  6'd60}: s1rd10 <= 50;
	     {1'd0,  6'd61}: s1rd10 <= 54;
	     {1'd0,  6'd62}: s1rd10 <= 58;
	     {1'd0,  6'd63}: s1rd10 <= 62;
      endcase      
   end

// synthesis attribute rom_style of s1rd10 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd11 <= 0;
	     {1'd0,  6'd1}: s1rd11 <= 4;
	     {1'd0,  6'd2}: s1rd11 <= 8;
	     {1'd0,  6'd3}: s1rd11 <= 12;
	     {1'd0,  6'd4}: s1rd11 <= 16;
	     {1'd0,  6'd5}: s1rd11 <= 20;
	     {1'd0,  6'd6}: s1rd11 <= 24;
	     {1'd0,  6'd7}: s1rd11 <= 28;
	     {1'd0,  6'd8}: s1rd11 <= 32;
	     {1'd0,  6'd9}: s1rd11 <= 36;
	     {1'd0,  6'd10}: s1rd11 <= 40;
	     {1'd0,  6'd11}: s1rd11 <= 44;
	     {1'd0,  6'd12}: s1rd11 <= 48;
	     {1'd0,  6'd13}: s1rd11 <= 52;
	     {1'd0,  6'd14}: s1rd11 <= 56;
	     {1'd0,  6'd15}: s1rd11 <= 60;
	     {1'd0,  6'd16}: s1rd11 <= 1;
	     {1'd0,  6'd17}: s1rd11 <= 5;
	     {1'd0,  6'd18}: s1rd11 <= 9;
	     {1'd0,  6'd19}: s1rd11 <= 13;
	     {1'd0,  6'd20}: s1rd11 <= 17;
	     {1'd0,  6'd21}: s1rd11 <= 21;
	     {1'd0,  6'd22}: s1rd11 <= 25;
	     {1'd0,  6'd23}: s1rd11 <= 29;
	     {1'd0,  6'd24}: s1rd11 <= 33;
	     {1'd0,  6'd25}: s1rd11 <= 37;
	     {1'd0,  6'd26}: s1rd11 <= 41;
	     {1'd0,  6'd27}: s1rd11 <= 45;
	     {1'd0,  6'd28}: s1rd11 <= 49;
	     {1'd0,  6'd29}: s1rd11 <= 53;
	     {1'd0,  6'd30}: s1rd11 <= 57;
	     {1'd0,  6'd31}: s1rd11 <= 61;
	     {1'd0,  6'd32}: s1rd11 <= 2;
	     {1'd0,  6'd33}: s1rd11 <= 6;
	     {1'd0,  6'd34}: s1rd11 <= 10;
	     {1'd0,  6'd35}: s1rd11 <= 14;
	     {1'd0,  6'd36}: s1rd11 <= 18;
	     {1'd0,  6'd37}: s1rd11 <= 22;
	     {1'd0,  6'd38}: s1rd11 <= 26;
	     {1'd0,  6'd39}: s1rd11 <= 30;
	     {1'd0,  6'd40}: s1rd11 <= 34;
	     {1'd0,  6'd41}: s1rd11 <= 38;
	     {1'd0,  6'd42}: s1rd11 <= 42;
	     {1'd0,  6'd43}: s1rd11 <= 46;
	     {1'd0,  6'd44}: s1rd11 <= 50;
	     {1'd0,  6'd45}: s1rd11 <= 54;
	     {1'd0,  6'd46}: s1rd11 <= 58;
	     {1'd0,  6'd47}: s1rd11 <= 62;
	     {1'd0,  6'd48}: s1rd11 <= 3;
	     {1'd0,  6'd49}: s1rd11 <= 7;
	     {1'd0,  6'd50}: s1rd11 <= 11;
	     {1'd0,  6'd51}: s1rd11 <= 15;
	     {1'd0,  6'd52}: s1rd11 <= 19;
	     {1'd0,  6'd53}: s1rd11 <= 23;
	     {1'd0,  6'd54}: s1rd11 <= 27;
	     {1'd0,  6'd55}: s1rd11 <= 31;
	     {1'd0,  6'd56}: s1rd11 <= 35;
	     {1'd0,  6'd57}: s1rd11 <= 39;
	     {1'd0,  6'd58}: s1rd11 <= 43;
	     {1'd0,  6'd59}: s1rd11 <= 47;
	     {1'd0,  6'd60}: s1rd11 <= 51;
	     {1'd0,  6'd61}: s1rd11 <= 55;
	     {1'd0,  6'd62}: s1rd11 <= 59;
	     {1'd0,  6'd63}: s1rd11 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd11 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd12 <= 3;
	     {1'd0,  6'd1}: s1rd12 <= 7;
	     {1'd0,  6'd2}: s1rd12 <= 11;
	     {1'd0,  6'd3}: s1rd12 <= 15;
	     {1'd0,  6'd4}: s1rd12 <= 19;
	     {1'd0,  6'd5}: s1rd12 <= 23;
	     {1'd0,  6'd6}: s1rd12 <= 27;
	     {1'd0,  6'd7}: s1rd12 <= 31;
	     {1'd0,  6'd8}: s1rd12 <= 35;
	     {1'd0,  6'd9}: s1rd12 <= 39;
	     {1'd0,  6'd10}: s1rd12 <= 43;
	     {1'd0,  6'd11}: s1rd12 <= 47;
	     {1'd0,  6'd12}: s1rd12 <= 51;
	     {1'd0,  6'd13}: s1rd12 <= 55;
	     {1'd0,  6'd14}: s1rd12 <= 59;
	     {1'd0,  6'd15}: s1rd12 <= 63;
	     {1'd0,  6'd16}: s1rd12 <= 2;
	     {1'd0,  6'd17}: s1rd12 <= 6;
	     {1'd0,  6'd18}: s1rd12 <= 10;
	     {1'd0,  6'd19}: s1rd12 <= 14;
	     {1'd0,  6'd20}: s1rd12 <= 18;
	     {1'd0,  6'd21}: s1rd12 <= 22;
	     {1'd0,  6'd22}: s1rd12 <= 26;
	     {1'd0,  6'd23}: s1rd12 <= 30;
	     {1'd0,  6'd24}: s1rd12 <= 34;
	     {1'd0,  6'd25}: s1rd12 <= 38;
	     {1'd0,  6'd26}: s1rd12 <= 42;
	     {1'd0,  6'd27}: s1rd12 <= 46;
	     {1'd0,  6'd28}: s1rd12 <= 50;
	     {1'd0,  6'd29}: s1rd12 <= 54;
	     {1'd0,  6'd30}: s1rd12 <= 58;
	     {1'd0,  6'd31}: s1rd12 <= 62;
	     {1'd0,  6'd32}: s1rd12 <= 1;
	     {1'd0,  6'd33}: s1rd12 <= 5;
	     {1'd0,  6'd34}: s1rd12 <= 9;
	     {1'd0,  6'd35}: s1rd12 <= 13;
	     {1'd0,  6'd36}: s1rd12 <= 17;
	     {1'd0,  6'd37}: s1rd12 <= 21;
	     {1'd0,  6'd38}: s1rd12 <= 25;
	     {1'd0,  6'd39}: s1rd12 <= 29;
	     {1'd0,  6'd40}: s1rd12 <= 33;
	     {1'd0,  6'd41}: s1rd12 <= 37;
	     {1'd0,  6'd42}: s1rd12 <= 41;
	     {1'd0,  6'd43}: s1rd12 <= 45;
	     {1'd0,  6'd44}: s1rd12 <= 49;
	     {1'd0,  6'd45}: s1rd12 <= 53;
	     {1'd0,  6'd46}: s1rd12 <= 57;
	     {1'd0,  6'd47}: s1rd12 <= 61;
	     {1'd0,  6'd48}: s1rd12 <= 0;
	     {1'd0,  6'd49}: s1rd12 <= 4;
	     {1'd0,  6'd50}: s1rd12 <= 8;
	     {1'd0,  6'd51}: s1rd12 <= 12;
	     {1'd0,  6'd52}: s1rd12 <= 16;
	     {1'd0,  6'd53}: s1rd12 <= 20;
	     {1'd0,  6'd54}: s1rd12 <= 24;
	     {1'd0,  6'd55}: s1rd12 <= 28;
	     {1'd0,  6'd56}: s1rd12 <= 32;
	     {1'd0,  6'd57}: s1rd12 <= 36;
	     {1'd0,  6'd58}: s1rd12 <= 40;
	     {1'd0,  6'd59}: s1rd12 <= 44;
	     {1'd0,  6'd60}: s1rd12 <= 48;
	     {1'd0,  6'd61}: s1rd12 <= 52;
	     {1'd0,  6'd62}: s1rd12 <= 56;
	     {1'd0,  6'd63}: s1rd12 <= 60;
      endcase      
   end

// synthesis attribute rom_style of s1rd12 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd13 <= 2;
	     {1'd0,  6'd1}: s1rd13 <= 6;
	     {1'd0,  6'd2}: s1rd13 <= 10;
	     {1'd0,  6'd3}: s1rd13 <= 14;
	     {1'd0,  6'd4}: s1rd13 <= 18;
	     {1'd0,  6'd5}: s1rd13 <= 22;
	     {1'd0,  6'd6}: s1rd13 <= 26;
	     {1'd0,  6'd7}: s1rd13 <= 30;
	     {1'd0,  6'd8}: s1rd13 <= 34;
	     {1'd0,  6'd9}: s1rd13 <= 38;
	     {1'd0,  6'd10}: s1rd13 <= 42;
	     {1'd0,  6'd11}: s1rd13 <= 46;
	     {1'd0,  6'd12}: s1rd13 <= 50;
	     {1'd0,  6'd13}: s1rd13 <= 54;
	     {1'd0,  6'd14}: s1rd13 <= 58;
	     {1'd0,  6'd15}: s1rd13 <= 62;
	     {1'd0,  6'd16}: s1rd13 <= 3;
	     {1'd0,  6'd17}: s1rd13 <= 7;
	     {1'd0,  6'd18}: s1rd13 <= 11;
	     {1'd0,  6'd19}: s1rd13 <= 15;
	     {1'd0,  6'd20}: s1rd13 <= 19;
	     {1'd0,  6'd21}: s1rd13 <= 23;
	     {1'd0,  6'd22}: s1rd13 <= 27;
	     {1'd0,  6'd23}: s1rd13 <= 31;
	     {1'd0,  6'd24}: s1rd13 <= 35;
	     {1'd0,  6'd25}: s1rd13 <= 39;
	     {1'd0,  6'd26}: s1rd13 <= 43;
	     {1'd0,  6'd27}: s1rd13 <= 47;
	     {1'd0,  6'd28}: s1rd13 <= 51;
	     {1'd0,  6'd29}: s1rd13 <= 55;
	     {1'd0,  6'd30}: s1rd13 <= 59;
	     {1'd0,  6'd31}: s1rd13 <= 63;
	     {1'd0,  6'd32}: s1rd13 <= 0;
	     {1'd0,  6'd33}: s1rd13 <= 4;
	     {1'd0,  6'd34}: s1rd13 <= 8;
	     {1'd0,  6'd35}: s1rd13 <= 12;
	     {1'd0,  6'd36}: s1rd13 <= 16;
	     {1'd0,  6'd37}: s1rd13 <= 20;
	     {1'd0,  6'd38}: s1rd13 <= 24;
	     {1'd0,  6'd39}: s1rd13 <= 28;
	     {1'd0,  6'd40}: s1rd13 <= 32;
	     {1'd0,  6'd41}: s1rd13 <= 36;
	     {1'd0,  6'd42}: s1rd13 <= 40;
	     {1'd0,  6'd43}: s1rd13 <= 44;
	     {1'd0,  6'd44}: s1rd13 <= 48;
	     {1'd0,  6'd45}: s1rd13 <= 52;
	     {1'd0,  6'd46}: s1rd13 <= 56;
	     {1'd0,  6'd47}: s1rd13 <= 60;
	     {1'd0,  6'd48}: s1rd13 <= 1;
	     {1'd0,  6'd49}: s1rd13 <= 5;
	     {1'd0,  6'd50}: s1rd13 <= 9;
	     {1'd0,  6'd51}: s1rd13 <= 13;
	     {1'd0,  6'd52}: s1rd13 <= 17;
	     {1'd0,  6'd53}: s1rd13 <= 21;
	     {1'd0,  6'd54}: s1rd13 <= 25;
	     {1'd0,  6'd55}: s1rd13 <= 29;
	     {1'd0,  6'd56}: s1rd13 <= 33;
	     {1'd0,  6'd57}: s1rd13 <= 37;
	     {1'd0,  6'd58}: s1rd13 <= 41;
	     {1'd0,  6'd59}: s1rd13 <= 45;
	     {1'd0,  6'd60}: s1rd13 <= 49;
	     {1'd0,  6'd61}: s1rd13 <= 53;
	     {1'd0,  6'd62}: s1rd13 <= 57;
	     {1'd0,  6'd63}: s1rd13 <= 61;
      endcase      
   end

// synthesis attribute rom_style of s1rd13 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd14 <= 1;
	     {1'd0,  6'd1}: s1rd14 <= 5;
	     {1'd0,  6'd2}: s1rd14 <= 9;
	     {1'd0,  6'd3}: s1rd14 <= 13;
	     {1'd0,  6'd4}: s1rd14 <= 17;
	     {1'd0,  6'd5}: s1rd14 <= 21;
	     {1'd0,  6'd6}: s1rd14 <= 25;
	     {1'd0,  6'd7}: s1rd14 <= 29;
	     {1'd0,  6'd8}: s1rd14 <= 33;
	     {1'd0,  6'd9}: s1rd14 <= 37;
	     {1'd0,  6'd10}: s1rd14 <= 41;
	     {1'd0,  6'd11}: s1rd14 <= 45;
	     {1'd0,  6'd12}: s1rd14 <= 49;
	     {1'd0,  6'd13}: s1rd14 <= 53;
	     {1'd0,  6'd14}: s1rd14 <= 57;
	     {1'd0,  6'd15}: s1rd14 <= 61;
	     {1'd0,  6'd16}: s1rd14 <= 0;
	     {1'd0,  6'd17}: s1rd14 <= 4;
	     {1'd0,  6'd18}: s1rd14 <= 8;
	     {1'd0,  6'd19}: s1rd14 <= 12;
	     {1'd0,  6'd20}: s1rd14 <= 16;
	     {1'd0,  6'd21}: s1rd14 <= 20;
	     {1'd0,  6'd22}: s1rd14 <= 24;
	     {1'd0,  6'd23}: s1rd14 <= 28;
	     {1'd0,  6'd24}: s1rd14 <= 32;
	     {1'd0,  6'd25}: s1rd14 <= 36;
	     {1'd0,  6'd26}: s1rd14 <= 40;
	     {1'd0,  6'd27}: s1rd14 <= 44;
	     {1'd0,  6'd28}: s1rd14 <= 48;
	     {1'd0,  6'd29}: s1rd14 <= 52;
	     {1'd0,  6'd30}: s1rd14 <= 56;
	     {1'd0,  6'd31}: s1rd14 <= 60;
	     {1'd0,  6'd32}: s1rd14 <= 3;
	     {1'd0,  6'd33}: s1rd14 <= 7;
	     {1'd0,  6'd34}: s1rd14 <= 11;
	     {1'd0,  6'd35}: s1rd14 <= 15;
	     {1'd0,  6'd36}: s1rd14 <= 19;
	     {1'd0,  6'd37}: s1rd14 <= 23;
	     {1'd0,  6'd38}: s1rd14 <= 27;
	     {1'd0,  6'd39}: s1rd14 <= 31;
	     {1'd0,  6'd40}: s1rd14 <= 35;
	     {1'd0,  6'd41}: s1rd14 <= 39;
	     {1'd0,  6'd42}: s1rd14 <= 43;
	     {1'd0,  6'd43}: s1rd14 <= 47;
	     {1'd0,  6'd44}: s1rd14 <= 51;
	     {1'd0,  6'd45}: s1rd14 <= 55;
	     {1'd0,  6'd46}: s1rd14 <= 59;
	     {1'd0,  6'd47}: s1rd14 <= 63;
	     {1'd0,  6'd48}: s1rd14 <= 2;
	     {1'd0,  6'd49}: s1rd14 <= 6;
	     {1'd0,  6'd50}: s1rd14 <= 10;
	     {1'd0,  6'd51}: s1rd14 <= 14;
	     {1'd0,  6'd52}: s1rd14 <= 18;
	     {1'd0,  6'd53}: s1rd14 <= 22;
	     {1'd0,  6'd54}: s1rd14 <= 26;
	     {1'd0,  6'd55}: s1rd14 <= 30;
	     {1'd0,  6'd56}: s1rd14 <= 34;
	     {1'd0,  6'd57}: s1rd14 <= 38;
	     {1'd0,  6'd58}: s1rd14 <= 42;
	     {1'd0,  6'd59}: s1rd14 <= 46;
	     {1'd0,  6'd60}: s1rd14 <= 50;
	     {1'd0,  6'd61}: s1rd14 <= 54;
	     {1'd0,  6'd62}: s1rd14 <= 58;
	     {1'd0,  6'd63}: s1rd14 <= 62;
      endcase      
   end

// synthesis attribute rom_style of s1rd14 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd15 <= 0;
	     {1'd0,  6'd1}: s1rd15 <= 4;
	     {1'd0,  6'd2}: s1rd15 <= 8;
	     {1'd0,  6'd3}: s1rd15 <= 12;
	     {1'd0,  6'd4}: s1rd15 <= 16;
	     {1'd0,  6'd5}: s1rd15 <= 20;
	     {1'd0,  6'd6}: s1rd15 <= 24;
	     {1'd0,  6'd7}: s1rd15 <= 28;
	     {1'd0,  6'd8}: s1rd15 <= 32;
	     {1'd0,  6'd9}: s1rd15 <= 36;
	     {1'd0,  6'd10}: s1rd15 <= 40;
	     {1'd0,  6'd11}: s1rd15 <= 44;
	     {1'd0,  6'd12}: s1rd15 <= 48;
	     {1'd0,  6'd13}: s1rd15 <= 52;
	     {1'd0,  6'd14}: s1rd15 <= 56;
	     {1'd0,  6'd15}: s1rd15 <= 60;
	     {1'd0,  6'd16}: s1rd15 <= 1;
	     {1'd0,  6'd17}: s1rd15 <= 5;
	     {1'd0,  6'd18}: s1rd15 <= 9;
	     {1'd0,  6'd19}: s1rd15 <= 13;
	     {1'd0,  6'd20}: s1rd15 <= 17;
	     {1'd0,  6'd21}: s1rd15 <= 21;
	     {1'd0,  6'd22}: s1rd15 <= 25;
	     {1'd0,  6'd23}: s1rd15 <= 29;
	     {1'd0,  6'd24}: s1rd15 <= 33;
	     {1'd0,  6'd25}: s1rd15 <= 37;
	     {1'd0,  6'd26}: s1rd15 <= 41;
	     {1'd0,  6'd27}: s1rd15 <= 45;
	     {1'd0,  6'd28}: s1rd15 <= 49;
	     {1'd0,  6'd29}: s1rd15 <= 53;
	     {1'd0,  6'd30}: s1rd15 <= 57;
	     {1'd0,  6'd31}: s1rd15 <= 61;
	     {1'd0,  6'd32}: s1rd15 <= 2;
	     {1'd0,  6'd33}: s1rd15 <= 6;
	     {1'd0,  6'd34}: s1rd15 <= 10;
	     {1'd0,  6'd35}: s1rd15 <= 14;
	     {1'd0,  6'd36}: s1rd15 <= 18;
	     {1'd0,  6'd37}: s1rd15 <= 22;
	     {1'd0,  6'd38}: s1rd15 <= 26;
	     {1'd0,  6'd39}: s1rd15 <= 30;
	     {1'd0,  6'd40}: s1rd15 <= 34;
	     {1'd0,  6'd41}: s1rd15 <= 38;
	     {1'd0,  6'd42}: s1rd15 <= 42;
	     {1'd0,  6'd43}: s1rd15 <= 46;
	     {1'd0,  6'd44}: s1rd15 <= 50;
	     {1'd0,  6'd45}: s1rd15 <= 54;
	     {1'd0,  6'd46}: s1rd15 <= 58;
	     {1'd0,  6'd47}: s1rd15 <= 62;
	     {1'd0,  6'd48}: s1rd15 <= 3;
	     {1'd0,  6'd49}: s1rd15 <= 7;
	     {1'd0,  6'd50}: s1rd15 <= 11;
	     {1'd0,  6'd51}: s1rd15 <= 15;
	     {1'd0,  6'd52}: s1rd15 <= 19;
	     {1'd0,  6'd53}: s1rd15 <= 23;
	     {1'd0,  6'd54}: s1rd15 <= 27;
	     {1'd0,  6'd55}: s1rd15 <= 31;
	     {1'd0,  6'd56}: s1rd15 <= 35;
	     {1'd0,  6'd57}: s1rd15 <= 39;
	     {1'd0,  6'd58}: s1rd15 <= 43;
	     {1'd0,  6'd59}: s1rd15 <= 47;
	     {1'd0,  6'd60}: s1rd15 <= 51;
	     {1'd0,  6'd61}: s1rd15 <= 55;
	     {1'd0,  6'd62}: s1rd15 <= 59;
	     {1'd0,  6'd63}: s1rd15 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd15 is "block"
    swNet18993 sw(tm124_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7, t8, s8, t9, s9, t10, s10, t11, s11, t12, s12, t13, s13, t14, s14, t15, s15);

   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr0 <= 48;
	      {1'd0, 6'd1}: s2wr0 <= 49;
	      {1'd0, 6'd2}: s2wr0 <= 50;
	      {1'd0, 6'd3}: s2wr0 <= 51;
	      {1'd0, 6'd4}: s2wr0 <= 52;
	      {1'd0, 6'd5}: s2wr0 <= 53;
	      {1'd0, 6'd6}: s2wr0 <= 54;
	      {1'd0, 6'd7}: s2wr0 <= 55;
	      {1'd0, 6'd8}: s2wr0 <= 56;
	      {1'd0, 6'd9}: s2wr0 <= 57;
	      {1'd0, 6'd10}: s2wr0 <= 58;
	      {1'd0, 6'd11}: s2wr0 <= 59;
	      {1'd0, 6'd12}: s2wr0 <= 60;
	      {1'd0, 6'd13}: s2wr0 <= 61;
	      {1'd0, 6'd14}: s2wr0 <= 62;
	      {1'd0, 6'd15}: s2wr0 <= 63;
	      {1'd0, 6'd16}: s2wr0 <= 32;
	      {1'd0, 6'd17}: s2wr0 <= 33;
	      {1'd0, 6'd18}: s2wr0 <= 34;
	      {1'd0, 6'd19}: s2wr0 <= 35;
	      {1'd0, 6'd20}: s2wr0 <= 36;
	      {1'd0, 6'd21}: s2wr0 <= 37;
	      {1'd0, 6'd22}: s2wr0 <= 38;
	      {1'd0, 6'd23}: s2wr0 <= 39;
	      {1'd0, 6'd24}: s2wr0 <= 40;
	      {1'd0, 6'd25}: s2wr0 <= 41;
	      {1'd0, 6'd26}: s2wr0 <= 42;
	      {1'd0, 6'd27}: s2wr0 <= 43;
	      {1'd0, 6'd28}: s2wr0 <= 44;
	      {1'd0, 6'd29}: s2wr0 <= 45;
	      {1'd0, 6'd30}: s2wr0 <= 46;
	      {1'd0, 6'd31}: s2wr0 <= 47;
	      {1'd0, 6'd32}: s2wr0 <= 16;
	      {1'd0, 6'd33}: s2wr0 <= 17;
	      {1'd0, 6'd34}: s2wr0 <= 18;
	      {1'd0, 6'd35}: s2wr0 <= 19;
	      {1'd0, 6'd36}: s2wr0 <= 20;
	      {1'd0, 6'd37}: s2wr0 <= 21;
	      {1'd0, 6'd38}: s2wr0 <= 22;
	      {1'd0, 6'd39}: s2wr0 <= 23;
	      {1'd0, 6'd40}: s2wr0 <= 24;
	      {1'd0, 6'd41}: s2wr0 <= 25;
	      {1'd0, 6'd42}: s2wr0 <= 26;
	      {1'd0, 6'd43}: s2wr0 <= 27;
	      {1'd0, 6'd44}: s2wr0 <= 28;
	      {1'd0, 6'd45}: s2wr0 <= 29;
	      {1'd0, 6'd46}: s2wr0 <= 30;
	      {1'd0, 6'd47}: s2wr0 <= 31;
	      {1'd0, 6'd48}: s2wr0 <= 0;
	      {1'd0, 6'd49}: s2wr0 <= 1;
	      {1'd0, 6'd50}: s2wr0 <= 2;
	      {1'd0, 6'd51}: s2wr0 <= 3;
	      {1'd0, 6'd52}: s2wr0 <= 4;
	      {1'd0, 6'd53}: s2wr0 <= 5;
	      {1'd0, 6'd54}: s2wr0 <= 6;
	      {1'd0, 6'd55}: s2wr0 <= 7;
	      {1'd0, 6'd56}: s2wr0 <= 8;
	      {1'd0, 6'd57}: s2wr0 <= 9;
	      {1'd0, 6'd58}: s2wr0 <= 10;
	      {1'd0, 6'd59}: s2wr0 <= 11;
	      {1'd0, 6'd60}: s2wr0 <= 12;
	      {1'd0, 6'd61}: s2wr0 <= 13;
	      {1'd0, 6'd62}: s2wr0 <= 14;
	      {1'd0, 6'd63}: s2wr0 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr1 <= 48;
	      {1'd0, 6'd1}: s2wr1 <= 49;
	      {1'd0, 6'd2}: s2wr1 <= 50;
	      {1'd0, 6'd3}: s2wr1 <= 51;
	      {1'd0, 6'd4}: s2wr1 <= 52;
	      {1'd0, 6'd5}: s2wr1 <= 53;
	      {1'd0, 6'd6}: s2wr1 <= 54;
	      {1'd0, 6'd7}: s2wr1 <= 55;
	      {1'd0, 6'd8}: s2wr1 <= 56;
	      {1'd0, 6'd9}: s2wr1 <= 57;
	      {1'd0, 6'd10}: s2wr1 <= 58;
	      {1'd0, 6'd11}: s2wr1 <= 59;
	      {1'd0, 6'd12}: s2wr1 <= 60;
	      {1'd0, 6'd13}: s2wr1 <= 61;
	      {1'd0, 6'd14}: s2wr1 <= 62;
	      {1'd0, 6'd15}: s2wr1 <= 63;
	      {1'd0, 6'd16}: s2wr1 <= 32;
	      {1'd0, 6'd17}: s2wr1 <= 33;
	      {1'd0, 6'd18}: s2wr1 <= 34;
	      {1'd0, 6'd19}: s2wr1 <= 35;
	      {1'd0, 6'd20}: s2wr1 <= 36;
	      {1'd0, 6'd21}: s2wr1 <= 37;
	      {1'd0, 6'd22}: s2wr1 <= 38;
	      {1'd0, 6'd23}: s2wr1 <= 39;
	      {1'd0, 6'd24}: s2wr1 <= 40;
	      {1'd0, 6'd25}: s2wr1 <= 41;
	      {1'd0, 6'd26}: s2wr1 <= 42;
	      {1'd0, 6'd27}: s2wr1 <= 43;
	      {1'd0, 6'd28}: s2wr1 <= 44;
	      {1'd0, 6'd29}: s2wr1 <= 45;
	      {1'd0, 6'd30}: s2wr1 <= 46;
	      {1'd0, 6'd31}: s2wr1 <= 47;
	      {1'd0, 6'd32}: s2wr1 <= 16;
	      {1'd0, 6'd33}: s2wr1 <= 17;
	      {1'd0, 6'd34}: s2wr1 <= 18;
	      {1'd0, 6'd35}: s2wr1 <= 19;
	      {1'd0, 6'd36}: s2wr1 <= 20;
	      {1'd0, 6'd37}: s2wr1 <= 21;
	      {1'd0, 6'd38}: s2wr1 <= 22;
	      {1'd0, 6'd39}: s2wr1 <= 23;
	      {1'd0, 6'd40}: s2wr1 <= 24;
	      {1'd0, 6'd41}: s2wr1 <= 25;
	      {1'd0, 6'd42}: s2wr1 <= 26;
	      {1'd0, 6'd43}: s2wr1 <= 27;
	      {1'd0, 6'd44}: s2wr1 <= 28;
	      {1'd0, 6'd45}: s2wr1 <= 29;
	      {1'd0, 6'd46}: s2wr1 <= 30;
	      {1'd0, 6'd47}: s2wr1 <= 31;
	      {1'd0, 6'd48}: s2wr1 <= 0;
	      {1'd0, 6'd49}: s2wr1 <= 1;
	      {1'd0, 6'd50}: s2wr1 <= 2;
	      {1'd0, 6'd51}: s2wr1 <= 3;
	      {1'd0, 6'd52}: s2wr1 <= 4;
	      {1'd0, 6'd53}: s2wr1 <= 5;
	      {1'd0, 6'd54}: s2wr1 <= 6;
	      {1'd0, 6'd55}: s2wr1 <= 7;
	      {1'd0, 6'd56}: s2wr1 <= 8;
	      {1'd0, 6'd57}: s2wr1 <= 9;
	      {1'd0, 6'd58}: s2wr1 <= 10;
	      {1'd0, 6'd59}: s2wr1 <= 11;
	      {1'd0, 6'd60}: s2wr1 <= 12;
	      {1'd0, 6'd61}: s2wr1 <= 13;
	      {1'd0, 6'd62}: s2wr1 <= 14;
	      {1'd0, 6'd63}: s2wr1 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr2 <= 48;
	      {1'd0, 6'd1}: s2wr2 <= 49;
	      {1'd0, 6'd2}: s2wr2 <= 50;
	      {1'd0, 6'd3}: s2wr2 <= 51;
	      {1'd0, 6'd4}: s2wr2 <= 52;
	      {1'd0, 6'd5}: s2wr2 <= 53;
	      {1'd0, 6'd6}: s2wr2 <= 54;
	      {1'd0, 6'd7}: s2wr2 <= 55;
	      {1'd0, 6'd8}: s2wr2 <= 56;
	      {1'd0, 6'd9}: s2wr2 <= 57;
	      {1'd0, 6'd10}: s2wr2 <= 58;
	      {1'd0, 6'd11}: s2wr2 <= 59;
	      {1'd0, 6'd12}: s2wr2 <= 60;
	      {1'd0, 6'd13}: s2wr2 <= 61;
	      {1'd0, 6'd14}: s2wr2 <= 62;
	      {1'd0, 6'd15}: s2wr2 <= 63;
	      {1'd0, 6'd16}: s2wr2 <= 32;
	      {1'd0, 6'd17}: s2wr2 <= 33;
	      {1'd0, 6'd18}: s2wr2 <= 34;
	      {1'd0, 6'd19}: s2wr2 <= 35;
	      {1'd0, 6'd20}: s2wr2 <= 36;
	      {1'd0, 6'd21}: s2wr2 <= 37;
	      {1'd0, 6'd22}: s2wr2 <= 38;
	      {1'd0, 6'd23}: s2wr2 <= 39;
	      {1'd0, 6'd24}: s2wr2 <= 40;
	      {1'd0, 6'd25}: s2wr2 <= 41;
	      {1'd0, 6'd26}: s2wr2 <= 42;
	      {1'd0, 6'd27}: s2wr2 <= 43;
	      {1'd0, 6'd28}: s2wr2 <= 44;
	      {1'd0, 6'd29}: s2wr2 <= 45;
	      {1'd0, 6'd30}: s2wr2 <= 46;
	      {1'd0, 6'd31}: s2wr2 <= 47;
	      {1'd0, 6'd32}: s2wr2 <= 16;
	      {1'd0, 6'd33}: s2wr2 <= 17;
	      {1'd0, 6'd34}: s2wr2 <= 18;
	      {1'd0, 6'd35}: s2wr2 <= 19;
	      {1'd0, 6'd36}: s2wr2 <= 20;
	      {1'd0, 6'd37}: s2wr2 <= 21;
	      {1'd0, 6'd38}: s2wr2 <= 22;
	      {1'd0, 6'd39}: s2wr2 <= 23;
	      {1'd0, 6'd40}: s2wr2 <= 24;
	      {1'd0, 6'd41}: s2wr2 <= 25;
	      {1'd0, 6'd42}: s2wr2 <= 26;
	      {1'd0, 6'd43}: s2wr2 <= 27;
	      {1'd0, 6'd44}: s2wr2 <= 28;
	      {1'd0, 6'd45}: s2wr2 <= 29;
	      {1'd0, 6'd46}: s2wr2 <= 30;
	      {1'd0, 6'd47}: s2wr2 <= 31;
	      {1'd0, 6'd48}: s2wr2 <= 0;
	      {1'd0, 6'd49}: s2wr2 <= 1;
	      {1'd0, 6'd50}: s2wr2 <= 2;
	      {1'd0, 6'd51}: s2wr2 <= 3;
	      {1'd0, 6'd52}: s2wr2 <= 4;
	      {1'd0, 6'd53}: s2wr2 <= 5;
	      {1'd0, 6'd54}: s2wr2 <= 6;
	      {1'd0, 6'd55}: s2wr2 <= 7;
	      {1'd0, 6'd56}: s2wr2 <= 8;
	      {1'd0, 6'd57}: s2wr2 <= 9;
	      {1'd0, 6'd58}: s2wr2 <= 10;
	      {1'd0, 6'd59}: s2wr2 <= 11;
	      {1'd0, 6'd60}: s2wr2 <= 12;
	      {1'd0, 6'd61}: s2wr2 <= 13;
	      {1'd0, 6'd62}: s2wr2 <= 14;
	      {1'd0, 6'd63}: s2wr2 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr3 <= 48;
	      {1'd0, 6'd1}: s2wr3 <= 49;
	      {1'd0, 6'd2}: s2wr3 <= 50;
	      {1'd0, 6'd3}: s2wr3 <= 51;
	      {1'd0, 6'd4}: s2wr3 <= 52;
	      {1'd0, 6'd5}: s2wr3 <= 53;
	      {1'd0, 6'd6}: s2wr3 <= 54;
	      {1'd0, 6'd7}: s2wr3 <= 55;
	      {1'd0, 6'd8}: s2wr3 <= 56;
	      {1'd0, 6'd9}: s2wr3 <= 57;
	      {1'd0, 6'd10}: s2wr3 <= 58;
	      {1'd0, 6'd11}: s2wr3 <= 59;
	      {1'd0, 6'd12}: s2wr3 <= 60;
	      {1'd0, 6'd13}: s2wr3 <= 61;
	      {1'd0, 6'd14}: s2wr3 <= 62;
	      {1'd0, 6'd15}: s2wr3 <= 63;
	      {1'd0, 6'd16}: s2wr3 <= 32;
	      {1'd0, 6'd17}: s2wr3 <= 33;
	      {1'd0, 6'd18}: s2wr3 <= 34;
	      {1'd0, 6'd19}: s2wr3 <= 35;
	      {1'd0, 6'd20}: s2wr3 <= 36;
	      {1'd0, 6'd21}: s2wr3 <= 37;
	      {1'd0, 6'd22}: s2wr3 <= 38;
	      {1'd0, 6'd23}: s2wr3 <= 39;
	      {1'd0, 6'd24}: s2wr3 <= 40;
	      {1'd0, 6'd25}: s2wr3 <= 41;
	      {1'd0, 6'd26}: s2wr3 <= 42;
	      {1'd0, 6'd27}: s2wr3 <= 43;
	      {1'd0, 6'd28}: s2wr3 <= 44;
	      {1'd0, 6'd29}: s2wr3 <= 45;
	      {1'd0, 6'd30}: s2wr3 <= 46;
	      {1'd0, 6'd31}: s2wr3 <= 47;
	      {1'd0, 6'd32}: s2wr3 <= 16;
	      {1'd0, 6'd33}: s2wr3 <= 17;
	      {1'd0, 6'd34}: s2wr3 <= 18;
	      {1'd0, 6'd35}: s2wr3 <= 19;
	      {1'd0, 6'd36}: s2wr3 <= 20;
	      {1'd0, 6'd37}: s2wr3 <= 21;
	      {1'd0, 6'd38}: s2wr3 <= 22;
	      {1'd0, 6'd39}: s2wr3 <= 23;
	      {1'd0, 6'd40}: s2wr3 <= 24;
	      {1'd0, 6'd41}: s2wr3 <= 25;
	      {1'd0, 6'd42}: s2wr3 <= 26;
	      {1'd0, 6'd43}: s2wr3 <= 27;
	      {1'd0, 6'd44}: s2wr3 <= 28;
	      {1'd0, 6'd45}: s2wr3 <= 29;
	      {1'd0, 6'd46}: s2wr3 <= 30;
	      {1'd0, 6'd47}: s2wr3 <= 31;
	      {1'd0, 6'd48}: s2wr3 <= 0;
	      {1'd0, 6'd49}: s2wr3 <= 1;
	      {1'd0, 6'd50}: s2wr3 <= 2;
	      {1'd0, 6'd51}: s2wr3 <= 3;
	      {1'd0, 6'd52}: s2wr3 <= 4;
	      {1'd0, 6'd53}: s2wr3 <= 5;
	      {1'd0, 6'd54}: s2wr3 <= 6;
	      {1'd0, 6'd55}: s2wr3 <= 7;
	      {1'd0, 6'd56}: s2wr3 <= 8;
	      {1'd0, 6'd57}: s2wr3 <= 9;
	      {1'd0, 6'd58}: s2wr3 <= 10;
	      {1'd0, 6'd59}: s2wr3 <= 11;
	      {1'd0, 6'd60}: s2wr3 <= 12;
	      {1'd0, 6'd61}: s2wr3 <= 13;
	      {1'd0, 6'd62}: s2wr3 <= 14;
	      {1'd0, 6'd63}: s2wr3 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr4 <= 32;
	      {1'd0, 6'd1}: s2wr4 <= 33;
	      {1'd0, 6'd2}: s2wr4 <= 34;
	      {1'd0, 6'd3}: s2wr4 <= 35;
	      {1'd0, 6'd4}: s2wr4 <= 36;
	      {1'd0, 6'd5}: s2wr4 <= 37;
	      {1'd0, 6'd6}: s2wr4 <= 38;
	      {1'd0, 6'd7}: s2wr4 <= 39;
	      {1'd0, 6'd8}: s2wr4 <= 40;
	      {1'd0, 6'd9}: s2wr4 <= 41;
	      {1'd0, 6'd10}: s2wr4 <= 42;
	      {1'd0, 6'd11}: s2wr4 <= 43;
	      {1'd0, 6'd12}: s2wr4 <= 44;
	      {1'd0, 6'd13}: s2wr4 <= 45;
	      {1'd0, 6'd14}: s2wr4 <= 46;
	      {1'd0, 6'd15}: s2wr4 <= 47;
	      {1'd0, 6'd16}: s2wr4 <= 48;
	      {1'd0, 6'd17}: s2wr4 <= 49;
	      {1'd0, 6'd18}: s2wr4 <= 50;
	      {1'd0, 6'd19}: s2wr4 <= 51;
	      {1'd0, 6'd20}: s2wr4 <= 52;
	      {1'd0, 6'd21}: s2wr4 <= 53;
	      {1'd0, 6'd22}: s2wr4 <= 54;
	      {1'd0, 6'd23}: s2wr4 <= 55;
	      {1'd0, 6'd24}: s2wr4 <= 56;
	      {1'd0, 6'd25}: s2wr4 <= 57;
	      {1'd0, 6'd26}: s2wr4 <= 58;
	      {1'd0, 6'd27}: s2wr4 <= 59;
	      {1'd0, 6'd28}: s2wr4 <= 60;
	      {1'd0, 6'd29}: s2wr4 <= 61;
	      {1'd0, 6'd30}: s2wr4 <= 62;
	      {1'd0, 6'd31}: s2wr4 <= 63;
	      {1'd0, 6'd32}: s2wr4 <= 0;
	      {1'd0, 6'd33}: s2wr4 <= 1;
	      {1'd0, 6'd34}: s2wr4 <= 2;
	      {1'd0, 6'd35}: s2wr4 <= 3;
	      {1'd0, 6'd36}: s2wr4 <= 4;
	      {1'd0, 6'd37}: s2wr4 <= 5;
	      {1'd0, 6'd38}: s2wr4 <= 6;
	      {1'd0, 6'd39}: s2wr4 <= 7;
	      {1'd0, 6'd40}: s2wr4 <= 8;
	      {1'd0, 6'd41}: s2wr4 <= 9;
	      {1'd0, 6'd42}: s2wr4 <= 10;
	      {1'd0, 6'd43}: s2wr4 <= 11;
	      {1'd0, 6'd44}: s2wr4 <= 12;
	      {1'd0, 6'd45}: s2wr4 <= 13;
	      {1'd0, 6'd46}: s2wr4 <= 14;
	      {1'd0, 6'd47}: s2wr4 <= 15;
	      {1'd0, 6'd48}: s2wr4 <= 16;
	      {1'd0, 6'd49}: s2wr4 <= 17;
	      {1'd0, 6'd50}: s2wr4 <= 18;
	      {1'd0, 6'd51}: s2wr4 <= 19;
	      {1'd0, 6'd52}: s2wr4 <= 20;
	      {1'd0, 6'd53}: s2wr4 <= 21;
	      {1'd0, 6'd54}: s2wr4 <= 22;
	      {1'd0, 6'd55}: s2wr4 <= 23;
	      {1'd0, 6'd56}: s2wr4 <= 24;
	      {1'd0, 6'd57}: s2wr4 <= 25;
	      {1'd0, 6'd58}: s2wr4 <= 26;
	      {1'd0, 6'd59}: s2wr4 <= 27;
	      {1'd0, 6'd60}: s2wr4 <= 28;
	      {1'd0, 6'd61}: s2wr4 <= 29;
	      {1'd0, 6'd62}: s2wr4 <= 30;
	      {1'd0, 6'd63}: s2wr4 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr5 <= 32;
	      {1'd0, 6'd1}: s2wr5 <= 33;
	      {1'd0, 6'd2}: s2wr5 <= 34;
	      {1'd0, 6'd3}: s2wr5 <= 35;
	      {1'd0, 6'd4}: s2wr5 <= 36;
	      {1'd0, 6'd5}: s2wr5 <= 37;
	      {1'd0, 6'd6}: s2wr5 <= 38;
	      {1'd0, 6'd7}: s2wr5 <= 39;
	      {1'd0, 6'd8}: s2wr5 <= 40;
	      {1'd0, 6'd9}: s2wr5 <= 41;
	      {1'd0, 6'd10}: s2wr5 <= 42;
	      {1'd0, 6'd11}: s2wr5 <= 43;
	      {1'd0, 6'd12}: s2wr5 <= 44;
	      {1'd0, 6'd13}: s2wr5 <= 45;
	      {1'd0, 6'd14}: s2wr5 <= 46;
	      {1'd0, 6'd15}: s2wr5 <= 47;
	      {1'd0, 6'd16}: s2wr5 <= 48;
	      {1'd0, 6'd17}: s2wr5 <= 49;
	      {1'd0, 6'd18}: s2wr5 <= 50;
	      {1'd0, 6'd19}: s2wr5 <= 51;
	      {1'd0, 6'd20}: s2wr5 <= 52;
	      {1'd0, 6'd21}: s2wr5 <= 53;
	      {1'd0, 6'd22}: s2wr5 <= 54;
	      {1'd0, 6'd23}: s2wr5 <= 55;
	      {1'd0, 6'd24}: s2wr5 <= 56;
	      {1'd0, 6'd25}: s2wr5 <= 57;
	      {1'd0, 6'd26}: s2wr5 <= 58;
	      {1'd0, 6'd27}: s2wr5 <= 59;
	      {1'd0, 6'd28}: s2wr5 <= 60;
	      {1'd0, 6'd29}: s2wr5 <= 61;
	      {1'd0, 6'd30}: s2wr5 <= 62;
	      {1'd0, 6'd31}: s2wr5 <= 63;
	      {1'd0, 6'd32}: s2wr5 <= 0;
	      {1'd0, 6'd33}: s2wr5 <= 1;
	      {1'd0, 6'd34}: s2wr5 <= 2;
	      {1'd0, 6'd35}: s2wr5 <= 3;
	      {1'd0, 6'd36}: s2wr5 <= 4;
	      {1'd0, 6'd37}: s2wr5 <= 5;
	      {1'd0, 6'd38}: s2wr5 <= 6;
	      {1'd0, 6'd39}: s2wr5 <= 7;
	      {1'd0, 6'd40}: s2wr5 <= 8;
	      {1'd0, 6'd41}: s2wr5 <= 9;
	      {1'd0, 6'd42}: s2wr5 <= 10;
	      {1'd0, 6'd43}: s2wr5 <= 11;
	      {1'd0, 6'd44}: s2wr5 <= 12;
	      {1'd0, 6'd45}: s2wr5 <= 13;
	      {1'd0, 6'd46}: s2wr5 <= 14;
	      {1'd0, 6'd47}: s2wr5 <= 15;
	      {1'd0, 6'd48}: s2wr5 <= 16;
	      {1'd0, 6'd49}: s2wr5 <= 17;
	      {1'd0, 6'd50}: s2wr5 <= 18;
	      {1'd0, 6'd51}: s2wr5 <= 19;
	      {1'd0, 6'd52}: s2wr5 <= 20;
	      {1'd0, 6'd53}: s2wr5 <= 21;
	      {1'd0, 6'd54}: s2wr5 <= 22;
	      {1'd0, 6'd55}: s2wr5 <= 23;
	      {1'd0, 6'd56}: s2wr5 <= 24;
	      {1'd0, 6'd57}: s2wr5 <= 25;
	      {1'd0, 6'd58}: s2wr5 <= 26;
	      {1'd0, 6'd59}: s2wr5 <= 27;
	      {1'd0, 6'd60}: s2wr5 <= 28;
	      {1'd0, 6'd61}: s2wr5 <= 29;
	      {1'd0, 6'd62}: s2wr5 <= 30;
	      {1'd0, 6'd63}: s2wr5 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr6 <= 32;
	      {1'd0, 6'd1}: s2wr6 <= 33;
	      {1'd0, 6'd2}: s2wr6 <= 34;
	      {1'd0, 6'd3}: s2wr6 <= 35;
	      {1'd0, 6'd4}: s2wr6 <= 36;
	      {1'd0, 6'd5}: s2wr6 <= 37;
	      {1'd0, 6'd6}: s2wr6 <= 38;
	      {1'd0, 6'd7}: s2wr6 <= 39;
	      {1'd0, 6'd8}: s2wr6 <= 40;
	      {1'd0, 6'd9}: s2wr6 <= 41;
	      {1'd0, 6'd10}: s2wr6 <= 42;
	      {1'd0, 6'd11}: s2wr6 <= 43;
	      {1'd0, 6'd12}: s2wr6 <= 44;
	      {1'd0, 6'd13}: s2wr6 <= 45;
	      {1'd0, 6'd14}: s2wr6 <= 46;
	      {1'd0, 6'd15}: s2wr6 <= 47;
	      {1'd0, 6'd16}: s2wr6 <= 48;
	      {1'd0, 6'd17}: s2wr6 <= 49;
	      {1'd0, 6'd18}: s2wr6 <= 50;
	      {1'd0, 6'd19}: s2wr6 <= 51;
	      {1'd0, 6'd20}: s2wr6 <= 52;
	      {1'd0, 6'd21}: s2wr6 <= 53;
	      {1'd0, 6'd22}: s2wr6 <= 54;
	      {1'd0, 6'd23}: s2wr6 <= 55;
	      {1'd0, 6'd24}: s2wr6 <= 56;
	      {1'd0, 6'd25}: s2wr6 <= 57;
	      {1'd0, 6'd26}: s2wr6 <= 58;
	      {1'd0, 6'd27}: s2wr6 <= 59;
	      {1'd0, 6'd28}: s2wr6 <= 60;
	      {1'd0, 6'd29}: s2wr6 <= 61;
	      {1'd0, 6'd30}: s2wr6 <= 62;
	      {1'd0, 6'd31}: s2wr6 <= 63;
	      {1'd0, 6'd32}: s2wr6 <= 0;
	      {1'd0, 6'd33}: s2wr6 <= 1;
	      {1'd0, 6'd34}: s2wr6 <= 2;
	      {1'd0, 6'd35}: s2wr6 <= 3;
	      {1'd0, 6'd36}: s2wr6 <= 4;
	      {1'd0, 6'd37}: s2wr6 <= 5;
	      {1'd0, 6'd38}: s2wr6 <= 6;
	      {1'd0, 6'd39}: s2wr6 <= 7;
	      {1'd0, 6'd40}: s2wr6 <= 8;
	      {1'd0, 6'd41}: s2wr6 <= 9;
	      {1'd0, 6'd42}: s2wr6 <= 10;
	      {1'd0, 6'd43}: s2wr6 <= 11;
	      {1'd0, 6'd44}: s2wr6 <= 12;
	      {1'd0, 6'd45}: s2wr6 <= 13;
	      {1'd0, 6'd46}: s2wr6 <= 14;
	      {1'd0, 6'd47}: s2wr6 <= 15;
	      {1'd0, 6'd48}: s2wr6 <= 16;
	      {1'd0, 6'd49}: s2wr6 <= 17;
	      {1'd0, 6'd50}: s2wr6 <= 18;
	      {1'd0, 6'd51}: s2wr6 <= 19;
	      {1'd0, 6'd52}: s2wr6 <= 20;
	      {1'd0, 6'd53}: s2wr6 <= 21;
	      {1'd0, 6'd54}: s2wr6 <= 22;
	      {1'd0, 6'd55}: s2wr6 <= 23;
	      {1'd0, 6'd56}: s2wr6 <= 24;
	      {1'd0, 6'd57}: s2wr6 <= 25;
	      {1'd0, 6'd58}: s2wr6 <= 26;
	      {1'd0, 6'd59}: s2wr6 <= 27;
	      {1'd0, 6'd60}: s2wr6 <= 28;
	      {1'd0, 6'd61}: s2wr6 <= 29;
	      {1'd0, 6'd62}: s2wr6 <= 30;
	      {1'd0, 6'd63}: s2wr6 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr7 <= 32;
	      {1'd0, 6'd1}: s2wr7 <= 33;
	      {1'd0, 6'd2}: s2wr7 <= 34;
	      {1'd0, 6'd3}: s2wr7 <= 35;
	      {1'd0, 6'd4}: s2wr7 <= 36;
	      {1'd0, 6'd5}: s2wr7 <= 37;
	      {1'd0, 6'd6}: s2wr7 <= 38;
	      {1'd0, 6'd7}: s2wr7 <= 39;
	      {1'd0, 6'd8}: s2wr7 <= 40;
	      {1'd0, 6'd9}: s2wr7 <= 41;
	      {1'd0, 6'd10}: s2wr7 <= 42;
	      {1'd0, 6'd11}: s2wr7 <= 43;
	      {1'd0, 6'd12}: s2wr7 <= 44;
	      {1'd0, 6'd13}: s2wr7 <= 45;
	      {1'd0, 6'd14}: s2wr7 <= 46;
	      {1'd0, 6'd15}: s2wr7 <= 47;
	      {1'd0, 6'd16}: s2wr7 <= 48;
	      {1'd0, 6'd17}: s2wr7 <= 49;
	      {1'd0, 6'd18}: s2wr7 <= 50;
	      {1'd0, 6'd19}: s2wr7 <= 51;
	      {1'd0, 6'd20}: s2wr7 <= 52;
	      {1'd0, 6'd21}: s2wr7 <= 53;
	      {1'd0, 6'd22}: s2wr7 <= 54;
	      {1'd0, 6'd23}: s2wr7 <= 55;
	      {1'd0, 6'd24}: s2wr7 <= 56;
	      {1'd0, 6'd25}: s2wr7 <= 57;
	      {1'd0, 6'd26}: s2wr7 <= 58;
	      {1'd0, 6'd27}: s2wr7 <= 59;
	      {1'd0, 6'd28}: s2wr7 <= 60;
	      {1'd0, 6'd29}: s2wr7 <= 61;
	      {1'd0, 6'd30}: s2wr7 <= 62;
	      {1'd0, 6'd31}: s2wr7 <= 63;
	      {1'd0, 6'd32}: s2wr7 <= 0;
	      {1'd0, 6'd33}: s2wr7 <= 1;
	      {1'd0, 6'd34}: s2wr7 <= 2;
	      {1'd0, 6'd35}: s2wr7 <= 3;
	      {1'd0, 6'd36}: s2wr7 <= 4;
	      {1'd0, 6'd37}: s2wr7 <= 5;
	      {1'd0, 6'd38}: s2wr7 <= 6;
	      {1'd0, 6'd39}: s2wr7 <= 7;
	      {1'd0, 6'd40}: s2wr7 <= 8;
	      {1'd0, 6'd41}: s2wr7 <= 9;
	      {1'd0, 6'd42}: s2wr7 <= 10;
	      {1'd0, 6'd43}: s2wr7 <= 11;
	      {1'd0, 6'd44}: s2wr7 <= 12;
	      {1'd0, 6'd45}: s2wr7 <= 13;
	      {1'd0, 6'd46}: s2wr7 <= 14;
	      {1'd0, 6'd47}: s2wr7 <= 15;
	      {1'd0, 6'd48}: s2wr7 <= 16;
	      {1'd0, 6'd49}: s2wr7 <= 17;
	      {1'd0, 6'd50}: s2wr7 <= 18;
	      {1'd0, 6'd51}: s2wr7 <= 19;
	      {1'd0, 6'd52}: s2wr7 <= 20;
	      {1'd0, 6'd53}: s2wr7 <= 21;
	      {1'd0, 6'd54}: s2wr7 <= 22;
	      {1'd0, 6'd55}: s2wr7 <= 23;
	      {1'd0, 6'd56}: s2wr7 <= 24;
	      {1'd0, 6'd57}: s2wr7 <= 25;
	      {1'd0, 6'd58}: s2wr7 <= 26;
	      {1'd0, 6'd59}: s2wr7 <= 27;
	      {1'd0, 6'd60}: s2wr7 <= 28;
	      {1'd0, 6'd61}: s2wr7 <= 29;
	      {1'd0, 6'd62}: s2wr7 <= 30;
	      {1'd0, 6'd63}: s2wr7 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr8 <= 16;
	      {1'd0, 6'd1}: s2wr8 <= 17;
	      {1'd0, 6'd2}: s2wr8 <= 18;
	      {1'd0, 6'd3}: s2wr8 <= 19;
	      {1'd0, 6'd4}: s2wr8 <= 20;
	      {1'd0, 6'd5}: s2wr8 <= 21;
	      {1'd0, 6'd6}: s2wr8 <= 22;
	      {1'd0, 6'd7}: s2wr8 <= 23;
	      {1'd0, 6'd8}: s2wr8 <= 24;
	      {1'd0, 6'd9}: s2wr8 <= 25;
	      {1'd0, 6'd10}: s2wr8 <= 26;
	      {1'd0, 6'd11}: s2wr8 <= 27;
	      {1'd0, 6'd12}: s2wr8 <= 28;
	      {1'd0, 6'd13}: s2wr8 <= 29;
	      {1'd0, 6'd14}: s2wr8 <= 30;
	      {1'd0, 6'd15}: s2wr8 <= 31;
	      {1'd0, 6'd16}: s2wr8 <= 0;
	      {1'd0, 6'd17}: s2wr8 <= 1;
	      {1'd0, 6'd18}: s2wr8 <= 2;
	      {1'd0, 6'd19}: s2wr8 <= 3;
	      {1'd0, 6'd20}: s2wr8 <= 4;
	      {1'd0, 6'd21}: s2wr8 <= 5;
	      {1'd0, 6'd22}: s2wr8 <= 6;
	      {1'd0, 6'd23}: s2wr8 <= 7;
	      {1'd0, 6'd24}: s2wr8 <= 8;
	      {1'd0, 6'd25}: s2wr8 <= 9;
	      {1'd0, 6'd26}: s2wr8 <= 10;
	      {1'd0, 6'd27}: s2wr8 <= 11;
	      {1'd0, 6'd28}: s2wr8 <= 12;
	      {1'd0, 6'd29}: s2wr8 <= 13;
	      {1'd0, 6'd30}: s2wr8 <= 14;
	      {1'd0, 6'd31}: s2wr8 <= 15;
	      {1'd0, 6'd32}: s2wr8 <= 48;
	      {1'd0, 6'd33}: s2wr8 <= 49;
	      {1'd0, 6'd34}: s2wr8 <= 50;
	      {1'd0, 6'd35}: s2wr8 <= 51;
	      {1'd0, 6'd36}: s2wr8 <= 52;
	      {1'd0, 6'd37}: s2wr8 <= 53;
	      {1'd0, 6'd38}: s2wr8 <= 54;
	      {1'd0, 6'd39}: s2wr8 <= 55;
	      {1'd0, 6'd40}: s2wr8 <= 56;
	      {1'd0, 6'd41}: s2wr8 <= 57;
	      {1'd0, 6'd42}: s2wr8 <= 58;
	      {1'd0, 6'd43}: s2wr8 <= 59;
	      {1'd0, 6'd44}: s2wr8 <= 60;
	      {1'd0, 6'd45}: s2wr8 <= 61;
	      {1'd0, 6'd46}: s2wr8 <= 62;
	      {1'd0, 6'd47}: s2wr8 <= 63;
	      {1'd0, 6'd48}: s2wr8 <= 32;
	      {1'd0, 6'd49}: s2wr8 <= 33;
	      {1'd0, 6'd50}: s2wr8 <= 34;
	      {1'd0, 6'd51}: s2wr8 <= 35;
	      {1'd0, 6'd52}: s2wr8 <= 36;
	      {1'd0, 6'd53}: s2wr8 <= 37;
	      {1'd0, 6'd54}: s2wr8 <= 38;
	      {1'd0, 6'd55}: s2wr8 <= 39;
	      {1'd0, 6'd56}: s2wr8 <= 40;
	      {1'd0, 6'd57}: s2wr8 <= 41;
	      {1'd0, 6'd58}: s2wr8 <= 42;
	      {1'd0, 6'd59}: s2wr8 <= 43;
	      {1'd0, 6'd60}: s2wr8 <= 44;
	      {1'd0, 6'd61}: s2wr8 <= 45;
	      {1'd0, 6'd62}: s2wr8 <= 46;
	      {1'd0, 6'd63}: s2wr8 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr8 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr9 <= 16;
	      {1'd0, 6'd1}: s2wr9 <= 17;
	      {1'd0, 6'd2}: s2wr9 <= 18;
	      {1'd0, 6'd3}: s2wr9 <= 19;
	      {1'd0, 6'd4}: s2wr9 <= 20;
	      {1'd0, 6'd5}: s2wr9 <= 21;
	      {1'd0, 6'd6}: s2wr9 <= 22;
	      {1'd0, 6'd7}: s2wr9 <= 23;
	      {1'd0, 6'd8}: s2wr9 <= 24;
	      {1'd0, 6'd9}: s2wr9 <= 25;
	      {1'd0, 6'd10}: s2wr9 <= 26;
	      {1'd0, 6'd11}: s2wr9 <= 27;
	      {1'd0, 6'd12}: s2wr9 <= 28;
	      {1'd0, 6'd13}: s2wr9 <= 29;
	      {1'd0, 6'd14}: s2wr9 <= 30;
	      {1'd0, 6'd15}: s2wr9 <= 31;
	      {1'd0, 6'd16}: s2wr9 <= 0;
	      {1'd0, 6'd17}: s2wr9 <= 1;
	      {1'd0, 6'd18}: s2wr9 <= 2;
	      {1'd0, 6'd19}: s2wr9 <= 3;
	      {1'd0, 6'd20}: s2wr9 <= 4;
	      {1'd0, 6'd21}: s2wr9 <= 5;
	      {1'd0, 6'd22}: s2wr9 <= 6;
	      {1'd0, 6'd23}: s2wr9 <= 7;
	      {1'd0, 6'd24}: s2wr9 <= 8;
	      {1'd0, 6'd25}: s2wr9 <= 9;
	      {1'd0, 6'd26}: s2wr9 <= 10;
	      {1'd0, 6'd27}: s2wr9 <= 11;
	      {1'd0, 6'd28}: s2wr9 <= 12;
	      {1'd0, 6'd29}: s2wr9 <= 13;
	      {1'd0, 6'd30}: s2wr9 <= 14;
	      {1'd0, 6'd31}: s2wr9 <= 15;
	      {1'd0, 6'd32}: s2wr9 <= 48;
	      {1'd0, 6'd33}: s2wr9 <= 49;
	      {1'd0, 6'd34}: s2wr9 <= 50;
	      {1'd0, 6'd35}: s2wr9 <= 51;
	      {1'd0, 6'd36}: s2wr9 <= 52;
	      {1'd0, 6'd37}: s2wr9 <= 53;
	      {1'd0, 6'd38}: s2wr9 <= 54;
	      {1'd0, 6'd39}: s2wr9 <= 55;
	      {1'd0, 6'd40}: s2wr9 <= 56;
	      {1'd0, 6'd41}: s2wr9 <= 57;
	      {1'd0, 6'd42}: s2wr9 <= 58;
	      {1'd0, 6'd43}: s2wr9 <= 59;
	      {1'd0, 6'd44}: s2wr9 <= 60;
	      {1'd0, 6'd45}: s2wr9 <= 61;
	      {1'd0, 6'd46}: s2wr9 <= 62;
	      {1'd0, 6'd47}: s2wr9 <= 63;
	      {1'd0, 6'd48}: s2wr9 <= 32;
	      {1'd0, 6'd49}: s2wr9 <= 33;
	      {1'd0, 6'd50}: s2wr9 <= 34;
	      {1'd0, 6'd51}: s2wr9 <= 35;
	      {1'd0, 6'd52}: s2wr9 <= 36;
	      {1'd0, 6'd53}: s2wr9 <= 37;
	      {1'd0, 6'd54}: s2wr9 <= 38;
	      {1'd0, 6'd55}: s2wr9 <= 39;
	      {1'd0, 6'd56}: s2wr9 <= 40;
	      {1'd0, 6'd57}: s2wr9 <= 41;
	      {1'd0, 6'd58}: s2wr9 <= 42;
	      {1'd0, 6'd59}: s2wr9 <= 43;
	      {1'd0, 6'd60}: s2wr9 <= 44;
	      {1'd0, 6'd61}: s2wr9 <= 45;
	      {1'd0, 6'd62}: s2wr9 <= 46;
	      {1'd0, 6'd63}: s2wr9 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr9 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr10 <= 16;
	      {1'd0, 6'd1}: s2wr10 <= 17;
	      {1'd0, 6'd2}: s2wr10 <= 18;
	      {1'd0, 6'd3}: s2wr10 <= 19;
	      {1'd0, 6'd4}: s2wr10 <= 20;
	      {1'd0, 6'd5}: s2wr10 <= 21;
	      {1'd0, 6'd6}: s2wr10 <= 22;
	      {1'd0, 6'd7}: s2wr10 <= 23;
	      {1'd0, 6'd8}: s2wr10 <= 24;
	      {1'd0, 6'd9}: s2wr10 <= 25;
	      {1'd0, 6'd10}: s2wr10 <= 26;
	      {1'd0, 6'd11}: s2wr10 <= 27;
	      {1'd0, 6'd12}: s2wr10 <= 28;
	      {1'd0, 6'd13}: s2wr10 <= 29;
	      {1'd0, 6'd14}: s2wr10 <= 30;
	      {1'd0, 6'd15}: s2wr10 <= 31;
	      {1'd0, 6'd16}: s2wr10 <= 0;
	      {1'd0, 6'd17}: s2wr10 <= 1;
	      {1'd0, 6'd18}: s2wr10 <= 2;
	      {1'd0, 6'd19}: s2wr10 <= 3;
	      {1'd0, 6'd20}: s2wr10 <= 4;
	      {1'd0, 6'd21}: s2wr10 <= 5;
	      {1'd0, 6'd22}: s2wr10 <= 6;
	      {1'd0, 6'd23}: s2wr10 <= 7;
	      {1'd0, 6'd24}: s2wr10 <= 8;
	      {1'd0, 6'd25}: s2wr10 <= 9;
	      {1'd0, 6'd26}: s2wr10 <= 10;
	      {1'd0, 6'd27}: s2wr10 <= 11;
	      {1'd0, 6'd28}: s2wr10 <= 12;
	      {1'd0, 6'd29}: s2wr10 <= 13;
	      {1'd0, 6'd30}: s2wr10 <= 14;
	      {1'd0, 6'd31}: s2wr10 <= 15;
	      {1'd0, 6'd32}: s2wr10 <= 48;
	      {1'd0, 6'd33}: s2wr10 <= 49;
	      {1'd0, 6'd34}: s2wr10 <= 50;
	      {1'd0, 6'd35}: s2wr10 <= 51;
	      {1'd0, 6'd36}: s2wr10 <= 52;
	      {1'd0, 6'd37}: s2wr10 <= 53;
	      {1'd0, 6'd38}: s2wr10 <= 54;
	      {1'd0, 6'd39}: s2wr10 <= 55;
	      {1'd0, 6'd40}: s2wr10 <= 56;
	      {1'd0, 6'd41}: s2wr10 <= 57;
	      {1'd0, 6'd42}: s2wr10 <= 58;
	      {1'd0, 6'd43}: s2wr10 <= 59;
	      {1'd0, 6'd44}: s2wr10 <= 60;
	      {1'd0, 6'd45}: s2wr10 <= 61;
	      {1'd0, 6'd46}: s2wr10 <= 62;
	      {1'd0, 6'd47}: s2wr10 <= 63;
	      {1'd0, 6'd48}: s2wr10 <= 32;
	      {1'd0, 6'd49}: s2wr10 <= 33;
	      {1'd0, 6'd50}: s2wr10 <= 34;
	      {1'd0, 6'd51}: s2wr10 <= 35;
	      {1'd0, 6'd52}: s2wr10 <= 36;
	      {1'd0, 6'd53}: s2wr10 <= 37;
	      {1'd0, 6'd54}: s2wr10 <= 38;
	      {1'd0, 6'd55}: s2wr10 <= 39;
	      {1'd0, 6'd56}: s2wr10 <= 40;
	      {1'd0, 6'd57}: s2wr10 <= 41;
	      {1'd0, 6'd58}: s2wr10 <= 42;
	      {1'd0, 6'd59}: s2wr10 <= 43;
	      {1'd0, 6'd60}: s2wr10 <= 44;
	      {1'd0, 6'd61}: s2wr10 <= 45;
	      {1'd0, 6'd62}: s2wr10 <= 46;
	      {1'd0, 6'd63}: s2wr10 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr10 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr11 <= 16;
	      {1'd0, 6'd1}: s2wr11 <= 17;
	      {1'd0, 6'd2}: s2wr11 <= 18;
	      {1'd0, 6'd3}: s2wr11 <= 19;
	      {1'd0, 6'd4}: s2wr11 <= 20;
	      {1'd0, 6'd5}: s2wr11 <= 21;
	      {1'd0, 6'd6}: s2wr11 <= 22;
	      {1'd0, 6'd7}: s2wr11 <= 23;
	      {1'd0, 6'd8}: s2wr11 <= 24;
	      {1'd0, 6'd9}: s2wr11 <= 25;
	      {1'd0, 6'd10}: s2wr11 <= 26;
	      {1'd0, 6'd11}: s2wr11 <= 27;
	      {1'd0, 6'd12}: s2wr11 <= 28;
	      {1'd0, 6'd13}: s2wr11 <= 29;
	      {1'd0, 6'd14}: s2wr11 <= 30;
	      {1'd0, 6'd15}: s2wr11 <= 31;
	      {1'd0, 6'd16}: s2wr11 <= 0;
	      {1'd0, 6'd17}: s2wr11 <= 1;
	      {1'd0, 6'd18}: s2wr11 <= 2;
	      {1'd0, 6'd19}: s2wr11 <= 3;
	      {1'd0, 6'd20}: s2wr11 <= 4;
	      {1'd0, 6'd21}: s2wr11 <= 5;
	      {1'd0, 6'd22}: s2wr11 <= 6;
	      {1'd0, 6'd23}: s2wr11 <= 7;
	      {1'd0, 6'd24}: s2wr11 <= 8;
	      {1'd0, 6'd25}: s2wr11 <= 9;
	      {1'd0, 6'd26}: s2wr11 <= 10;
	      {1'd0, 6'd27}: s2wr11 <= 11;
	      {1'd0, 6'd28}: s2wr11 <= 12;
	      {1'd0, 6'd29}: s2wr11 <= 13;
	      {1'd0, 6'd30}: s2wr11 <= 14;
	      {1'd0, 6'd31}: s2wr11 <= 15;
	      {1'd0, 6'd32}: s2wr11 <= 48;
	      {1'd0, 6'd33}: s2wr11 <= 49;
	      {1'd0, 6'd34}: s2wr11 <= 50;
	      {1'd0, 6'd35}: s2wr11 <= 51;
	      {1'd0, 6'd36}: s2wr11 <= 52;
	      {1'd0, 6'd37}: s2wr11 <= 53;
	      {1'd0, 6'd38}: s2wr11 <= 54;
	      {1'd0, 6'd39}: s2wr11 <= 55;
	      {1'd0, 6'd40}: s2wr11 <= 56;
	      {1'd0, 6'd41}: s2wr11 <= 57;
	      {1'd0, 6'd42}: s2wr11 <= 58;
	      {1'd0, 6'd43}: s2wr11 <= 59;
	      {1'd0, 6'd44}: s2wr11 <= 60;
	      {1'd0, 6'd45}: s2wr11 <= 61;
	      {1'd0, 6'd46}: s2wr11 <= 62;
	      {1'd0, 6'd47}: s2wr11 <= 63;
	      {1'd0, 6'd48}: s2wr11 <= 32;
	      {1'd0, 6'd49}: s2wr11 <= 33;
	      {1'd0, 6'd50}: s2wr11 <= 34;
	      {1'd0, 6'd51}: s2wr11 <= 35;
	      {1'd0, 6'd52}: s2wr11 <= 36;
	      {1'd0, 6'd53}: s2wr11 <= 37;
	      {1'd0, 6'd54}: s2wr11 <= 38;
	      {1'd0, 6'd55}: s2wr11 <= 39;
	      {1'd0, 6'd56}: s2wr11 <= 40;
	      {1'd0, 6'd57}: s2wr11 <= 41;
	      {1'd0, 6'd58}: s2wr11 <= 42;
	      {1'd0, 6'd59}: s2wr11 <= 43;
	      {1'd0, 6'd60}: s2wr11 <= 44;
	      {1'd0, 6'd61}: s2wr11 <= 45;
	      {1'd0, 6'd62}: s2wr11 <= 46;
	      {1'd0, 6'd63}: s2wr11 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr11 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr12 <= 0;
	      {1'd0, 6'd1}: s2wr12 <= 1;
	      {1'd0, 6'd2}: s2wr12 <= 2;
	      {1'd0, 6'd3}: s2wr12 <= 3;
	      {1'd0, 6'd4}: s2wr12 <= 4;
	      {1'd0, 6'd5}: s2wr12 <= 5;
	      {1'd0, 6'd6}: s2wr12 <= 6;
	      {1'd0, 6'd7}: s2wr12 <= 7;
	      {1'd0, 6'd8}: s2wr12 <= 8;
	      {1'd0, 6'd9}: s2wr12 <= 9;
	      {1'd0, 6'd10}: s2wr12 <= 10;
	      {1'd0, 6'd11}: s2wr12 <= 11;
	      {1'd0, 6'd12}: s2wr12 <= 12;
	      {1'd0, 6'd13}: s2wr12 <= 13;
	      {1'd0, 6'd14}: s2wr12 <= 14;
	      {1'd0, 6'd15}: s2wr12 <= 15;
	      {1'd0, 6'd16}: s2wr12 <= 16;
	      {1'd0, 6'd17}: s2wr12 <= 17;
	      {1'd0, 6'd18}: s2wr12 <= 18;
	      {1'd0, 6'd19}: s2wr12 <= 19;
	      {1'd0, 6'd20}: s2wr12 <= 20;
	      {1'd0, 6'd21}: s2wr12 <= 21;
	      {1'd0, 6'd22}: s2wr12 <= 22;
	      {1'd0, 6'd23}: s2wr12 <= 23;
	      {1'd0, 6'd24}: s2wr12 <= 24;
	      {1'd0, 6'd25}: s2wr12 <= 25;
	      {1'd0, 6'd26}: s2wr12 <= 26;
	      {1'd0, 6'd27}: s2wr12 <= 27;
	      {1'd0, 6'd28}: s2wr12 <= 28;
	      {1'd0, 6'd29}: s2wr12 <= 29;
	      {1'd0, 6'd30}: s2wr12 <= 30;
	      {1'd0, 6'd31}: s2wr12 <= 31;
	      {1'd0, 6'd32}: s2wr12 <= 32;
	      {1'd0, 6'd33}: s2wr12 <= 33;
	      {1'd0, 6'd34}: s2wr12 <= 34;
	      {1'd0, 6'd35}: s2wr12 <= 35;
	      {1'd0, 6'd36}: s2wr12 <= 36;
	      {1'd0, 6'd37}: s2wr12 <= 37;
	      {1'd0, 6'd38}: s2wr12 <= 38;
	      {1'd0, 6'd39}: s2wr12 <= 39;
	      {1'd0, 6'd40}: s2wr12 <= 40;
	      {1'd0, 6'd41}: s2wr12 <= 41;
	      {1'd0, 6'd42}: s2wr12 <= 42;
	      {1'd0, 6'd43}: s2wr12 <= 43;
	      {1'd0, 6'd44}: s2wr12 <= 44;
	      {1'd0, 6'd45}: s2wr12 <= 45;
	      {1'd0, 6'd46}: s2wr12 <= 46;
	      {1'd0, 6'd47}: s2wr12 <= 47;
	      {1'd0, 6'd48}: s2wr12 <= 48;
	      {1'd0, 6'd49}: s2wr12 <= 49;
	      {1'd0, 6'd50}: s2wr12 <= 50;
	      {1'd0, 6'd51}: s2wr12 <= 51;
	      {1'd0, 6'd52}: s2wr12 <= 52;
	      {1'd0, 6'd53}: s2wr12 <= 53;
	      {1'd0, 6'd54}: s2wr12 <= 54;
	      {1'd0, 6'd55}: s2wr12 <= 55;
	      {1'd0, 6'd56}: s2wr12 <= 56;
	      {1'd0, 6'd57}: s2wr12 <= 57;
	      {1'd0, 6'd58}: s2wr12 <= 58;
	      {1'd0, 6'd59}: s2wr12 <= 59;
	      {1'd0, 6'd60}: s2wr12 <= 60;
	      {1'd0, 6'd61}: s2wr12 <= 61;
	      {1'd0, 6'd62}: s2wr12 <= 62;
	      {1'd0, 6'd63}: s2wr12 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr12 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr13 <= 0;
	      {1'd0, 6'd1}: s2wr13 <= 1;
	      {1'd0, 6'd2}: s2wr13 <= 2;
	      {1'd0, 6'd3}: s2wr13 <= 3;
	      {1'd0, 6'd4}: s2wr13 <= 4;
	      {1'd0, 6'd5}: s2wr13 <= 5;
	      {1'd0, 6'd6}: s2wr13 <= 6;
	      {1'd0, 6'd7}: s2wr13 <= 7;
	      {1'd0, 6'd8}: s2wr13 <= 8;
	      {1'd0, 6'd9}: s2wr13 <= 9;
	      {1'd0, 6'd10}: s2wr13 <= 10;
	      {1'd0, 6'd11}: s2wr13 <= 11;
	      {1'd0, 6'd12}: s2wr13 <= 12;
	      {1'd0, 6'd13}: s2wr13 <= 13;
	      {1'd0, 6'd14}: s2wr13 <= 14;
	      {1'd0, 6'd15}: s2wr13 <= 15;
	      {1'd0, 6'd16}: s2wr13 <= 16;
	      {1'd0, 6'd17}: s2wr13 <= 17;
	      {1'd0, 6'd18}: s2wr13 <= 18;
	      {1'd0, 6'd19}: s2wr13 <= 19;
	      {1'd0, 6'd20}: s2wr13 <= 20;
	      {1'd0, 6'd21}: s2wr13 <= 21;
	      {1'd0, 6'd22}: s2wr13 <= 22;
	      {1'd0, 6'd23}: s2wr13 <= 23;
	      {1'd0, 6'd24}: s2wr13 <= 24;
	      {1'd0, 6'd25}: s2wr13 <= 25;
	      {1'd0, 6'd26}: s2wr13 <= 26;
	      {1'd0, 6'd27}: s2wr13 <= 27;
	      {1'd0, 6'd28}: s2wr13 <= 28;
	      {1'd0, 6'd29}: s2wr13 <= 29;
	      {1'd0, 6'd30}: s2wr13 <= 30;
	      {1'd0, 6'd31}: s2wr13 <= 31;
	      {1'd0, 6'd32}: s2wr13 <= 32;
	      {1'd0, 6'd33}: s2wr13 <= 33;
	      {1'd0, 6'd34}: s2wr13 <= 34;
	      {1'd0, 6'd35}: s2wr13 <= 35;
	      {1'd0, 6'd36}: s2wr13 <= 36;
	      {1'd0, 6'd37}: s2wr13 <= 37;
	      {1'd0, 6'd38}: s2wr13 <= 38;
	      {1'd0, 6'd39}: s2wr13 <= 39;
	      {1'd0, 6'd40}: s2wr13 <= 40;
	      {1'd0, 6'd41}: s2wr13 <= 41;
	      {1'd0, 6'd42}: s2wr13 <= 42;
	      {1'd0, 6'd43}: s2wr13 <= 43;
	      {1'd0, 6'd44}: s2wr13 <= 44;
	      {1'd0, 6'd45}: s2wr13 <= 45;
	      {1'd0, 6'd46}: s2wr13 <= 46;
	      {1'd0, 6'd47}: s2wr13 <= 47;
	      {1'd0, 6'd48}: s2wr13 <= 48;
	      {1'd0, 6'd49}: s2wr13 <= 49;
	      {1'd0, 6'd50}: s2wr13 <= 50;
	      {1'd0, 6'd51}: s2wr13 <= 51;
	      {1'd0, 6'd52}: s2wr13 <= 52;
	      {1'd0, 6'd53}: s2wr13 <= 53;
	      {1'd0, 6'd54}: s2wr13 <= 54;
	      {1'd0, 6'd55}: s2wr13 <= 55;
	      {1'd0, 6'd56}: s2wr13 <= 56;
	      {1'd0, 6'd57}: s2wr13 <= 57;
	      {1'd0, 6'd58}: s2wr13 <= 58;
	      {1'd0, 6'd59}: s2wr13 <= 59;
	      {1'd0, 6'd60}: s2wr13 <= 60;
	      {1'd0, 6'd61}: s2wr13 <= 61;
	      {1'd0, 6'd62}: s2wr13 <= 62;
	      {1'd0, 6'd63}: s2wr13 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr13 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr14 <= 0;
	      {1'd0, 6'd1}: s2wr14 <= 1;
	      {1'd0, 6'd2}: s2wr14 <= 2;
	      {1'd0, 6'd3}: s2wr14 <= 3;
	      {1'd0, 6'd4}: s2wr14 <= 4;
	      {1'd0, 6'd5}: s2wr14 <= 5;
	      {1'd0, 6'd6}: s2wr14 <= 6;
	      {1'd0, 6'd7}: s2wr14 <= 7;
	      {1'd0, 6'd8}: s2wr14 <= 8;
	      {1'd0, 6'd9}: s2wr14 <= 9;
	      {1'd0, 6'd10}: s2wr14 <= 10;
	      {1'd0, 6'd11}: s2wr14 <= 11;
	      {1'd0, 6'd12}: s2wr14 <= 12;
	      {1'd0, 6'd13}: s2wr14 <= 13;
	      {1'd0, 6'd14}: s2wr14 <= 14;
	      {1'd0, 6'd15}: s2wr14 <= 15;
	      {1'd0, 6'd16}: s2wr14 <= 16;
	      {1'd0, 6'd17}: s2wr14 <= 17;
	      {1'd0, 6'd18}: s2wr14 <= 18;
	      {1'd0, 6'd19}: s2wr14 <= 19;
	      {1'd0, 6'd20}: s2wr14 <= 20;
	      {1'd0, 6'd21}: s2wr14 <= 21;
	      {1'd0, 6'd22}: s2wr14 <= 22;
	      {1'd0, 6'd23}: s2wr14 <= 23;
	      {1'd0, 6'd24}: s2wr14 <= 24;
	      {1'd0, 6'd25}: s2wr14 <= 25;
	      {1'd0, 6'd26}: s2wr14 <= 26;
	      {1'd0, 6'd27}: s2wr14 <= 27;
	      {1'd0, 6'd28}: s2wr14 <= 28;
	      {1'd0, 6'd29}: s2wr14 <= 29;
	      {1'd0, 6'd30}: s2wr14 <= 30;
	      {1'd0, 6'd31}: s2wr14 <= 31;
	      {1'd0, 6'd32}: s2wr14 <= 32;
	      {1'd0, 6'd33}: s2wr14 <= 33;
	      {1'd0, 6'd34}: s2wr14 <= 34;
	      {1'd0, 6'd35}: s2wr14 <= 35;
	      {1'd0, 6'd36}: s2wr14 <= 36;
	      {1'd0, 6'd37}: s2wr14 <= 37;
	      {1'd0, 6'd38}: s2wr14 <= 38;
	      {1'd0, 6'd39}: s2wr14 <= 39;
	      {1'd0, 6'd40}: s2wr14 <= 40;
	      {1'd0, 6'd41}: s2wr14 <= 41;
	      {1'd0, 6'd42}: s2wr14 <= 42;
	      {1'd0, 6'd43}: s2wr14 <= 43;
	      {1'd0, 6'd44}: s2wr14 <= 44;
	      {1'd0, 6'd45}: s2wr14 <= 45;
	      {1'd0, 6'd46}: s2wr14 <= 46;
	      {1'd0, 6'd47}: s2wr14 <= 47;
	      {1'd0, 6'd48}: s2wr14 <= 48;
	      {1'd0, 6'd49}: s2wr14 <= 49;
	      {1'd0, 6'd50}: s2wr14 <= 50;
	      {1'd0, 6'd51}: s2wr14 <= 51;
	      {1'd0, 6'd52}: s2wr14 <= 52;
	      {1'd0, 6'd53}: s2wr14 <= 53;
	      {1'd0, 6'd54}: s2wr14 <= 54;
	      {1'd0, 6'd55}: s2wr14 <= 55;
	      {1'd0, 6'd56}: s2wr14 <= 56;
	      {1'd0, 6'd57}: s2wr14 <= 57;
	      {1'd0, 6'd58}: s2wr14 <= 58;
	      {1'd0, 6'd59}: s2wr14 <= 59;
	      {1'd0, 6'd60}: s2wr14 <= 60;
	      {1'd0, 6'd61}: s2wr14 <= 61;
	      {1'd0, 6'd62}: s2wr14 <= 62;
	      {1'd0, 6'd63}: s2wr14 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr14 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr15 <= 0;
	      {1'd0, 6'd1}: s2wr15 <= 1;
	      {1'd0, 6'd2}: s2wr15 <= 2;
	      {1'd0, 6'd3}: s2wr15 <= 3;
	      {1'd0, 6'd4}: s2wr15 <= 4;
	      {1'd0, 6'd5}: s2wr15 <= 5;
	      {1'd0, 6'd6}: s2wr15 <= 6;
	      {1'd0, 6'd7}: s2wr15 <= 7;
	      {1'd0, 6'd8}: s2wr15 <= 8;
	      {1'd0, 6'd9}: s2wr15 <= 9;
	      {1'd0, 6'd10}: s2wr15 <= 10;
	      {1'd0, 6'd11}: s2wr15 <= 11;
	      {1'd0, 6'd12}: s2wr15 <= 12;
	      {1'd0, 6'd13}: s2wr15 <= 13;
	      {1'd0, 6'd14}: s2wr15 <= 14;
	      {1'd0, 6'd15}: s2wr15 <= 15;
	      {1'd0, 6'd16}: s2wr15 <= 16;
	      {1'd0, 6'd17}: s2wr15 <= 17;
	      {1'd0, 6'd18}: s2wr15 <= 18;
	      {1'd0, 6'd19}: s2wr15 <= 19;
	      {1'd0, 6'd20}: s2wr15 <= 20;
	      {1'd0, 6'd21}: s2wr15 <= 21;
	      {1'd0, 6'd22}: s2wr15 <= 22;
	      {1'd0, 6'd23}: s2wr15 <= 23;
	      {1'd0, 6'd24}: s2wr15 <= 24;
	      {1'd0, 6'd25}: s2wr15 <= 25;
	      {1'd0, 6'd26}: s2wr15 <= 26;
	      {1'd0, 6'd27}: s2wr15 <= 27;
	      {1'd0, 6'd28}: s2wr15 <= 28;
	      {1'd0, 6'd29}: s2wr15 <= 29;
	      {1'd0, 6'd30}: s2wr15 <= 30;
	      {1'd0, 6'd31}: s2wr15 <= 31;
	      {1'd0, 6'd32}: s2wr15 <= 32;
	      {1'd0, 6'd33}: s2wr15 <= 33;
	      {1'd0, 6'd34}: s2wr15 <= 34;
	      {1'd0, 6'd35}: s2wr15 <= 35;
	      {1'd0, 6'd36}: s2wr15 <= 36;
	      {1'd0, 6'd37}: s2wr15 <= 37;
	      {1'd0, 6'd38}: s2wr15 <= 38;
	      {1'd0, 6'd39}: s2wr15 <= 39;
	      {1'd0, 6'd40}: s2wr15 <= 40;
	      {1'd0, 6'd41}: s2wr15 <= 41;
	      {1'd0, 6'd42}: s2wr15 <= 42;
	      {1'd0, 6'd43}: s2wr15 <= 43;
	      {1'd0, 6'd44}: s2wr15 <= 44;
	      {1'd0, 6'd45}: s2wr15 <= 45;
	      {1'd0, 6'd46}: s2wr15 <= 46;
	      {1'd0, 6'd47}: s2wr15 <= 47;
	      {1'd0, 6'd48}: s2wr15 <= 48;
	      {1'd0, 6'd49}: s2wr15 <= 49;
	      {1'd0, 6'd50}: s2wr15 <= 50;
	      {1'd0, 6'd51}: s2wr15 <= 51;
	      {1'd0, 6'd52}: s2wr15 <= 52;
	      {1'd0, 6'd53}: s2wr15 <= 53;
	      {1'd0, 6'd54}: s2wr15 <= 54;
	      {1'd0, 6'd55}: s2wr15 <= 55;
	      {1'd0, 6'd56}: s2wr15 <= 56;
	      {1'd0, 6'd57}: s2wr15 <= 57;
	      {1'd0, 6'd58}: s2wr15 <= 58;
	      {1'd0, 6'd59}: s2wr15 <= 59;
	      {1'd0, 6'd60}: s2wr15 <= 60;
	      {1'd0, 6'd61}: s2wr15 <= 61;
	      {1'd0, 6'd62}: s2wr15 <= 62;
	      {1'd0, 6'd63}: s2wr15 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr15 is "block"
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule

