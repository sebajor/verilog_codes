/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 128 cycles
//   Latency: 422 cycles

//   Resources required:
//     116 multipliers (16 x 16 bit)
//     220 adders (16 x 16 bit)
//     24 RAMs (256 words, 32 bits per word)
//     8 RAMs (16 words, 32 bits per word)
//     8 RAMs (128 words, 32 bits per word)
//     8 RAMs (8 words, 32 bits per word)
//     8 RAMs (64 words, 32 bits per word)
//     8 RAMs (32 words, 32 bits per word)
//     8 ROMs (16 words, 16 bits per word)
//     8 ROMs (128 words, 16 bits per word)
//     8 ROMs (8 words, 16 bits per word)
//     8 ROMs (64 words, 16 bits per word)
//     8 ROMs (32 words, 16 bits per word)

// Generated on Thu Mar 03 07:24:34 EST 2022

// Latency: 422 clock cycles
// Throughput: 1 transform every 128 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 128 cycles.  This means that
// 128 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 422 cycles.  This means that
// the 'next_out' will be asserted 422 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [15:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;

   


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end

   initial begin
        $dumpfile("traces.fst");
        $dumpvars();
   end

   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 1024 complex data points enter the system over 128 cycles
      for (j=0; j < 127; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 127;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 126)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 127; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 2048 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 127;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 2048 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule

// Latency: 422
// Gap: 128
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire [15:0] t6_8;
   wire [15:0] t6_9;
   wire [15:0] t6_10;
   wire [15:0] t6_11;
   wire [15:0] t6_12;
   wire [15:0] t6_13;
   wire [15:0] t6_14;
   wire [15:0] t6_15;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire [15:0] t7_8;
   wire [15:0] t7_9;
   wire [15:0] t7_10;
   wire [15:0] t7_11;
   wire [15:0] t7_12;
   wire [15:0] t7_13;
   wire [15:0] t7_14;
   wire [15:0] t7_15;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire [15:0] t8_8;
   wire [15:0] t8_9;
   wire [15:0] t8_10;
   wire [15:0] t8_11;
   wire [15:0] t8_12;
   wire [15:0] t8_13;
   wire [15:0] t8_14;
   wire [15:0] t8_15;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire [15:0] t9_8;
   wire [15:0] t9_9;
   wire [15:0] t9_10;
   wire [15:0] t9_11;
   wire [15:0] t9_12;
   wire [15:0] t9_13;
   wire [15:0] t9_14;
   wire [15:0] t9_15;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire [15:0] t10_8;
   wire [15:0] t10_9;
   wire [15:0] t10_10;
   wire [15:0] t10_11;
   wire [15:0] t10_12;
   wire [15:0] t10_13;
   wire [15:0] t10_14;
   wire [15:0] t10_15;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire [15:0] t11_8;
   wire [15:0] t11_9;
   wire [15:0] t11_10;
   wire [15:0] t11_11;
   wire [15:0] t11_12;
   wire [15:0] t11_13;
   wire [15:0] t11_14;
   wire [15:0] t11_15;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire [15:0] t12_8;
   wire [15:0] t12_9;
   wire [15:0] t12_10;
   wire [15:0] t12_11;
   wire [15:0] t12_12;
   wire [15:0] t12_13;
   wire [15:0] t12_14;
   wire [15:0] t12_15;
   wire next_12;
   wire [15:0] t13_0;
   wire [15:0] t13_1;
   wire [15:0] t13_2;
   wire [15:0] t13_3;
   wire [15:0] t13_4;
   wire [15:0] t13_5;
   wire [15:0] t13_6;
   wire [15:0] t13_7;
   wire [15:0] t13_8;
   wire [15:0] t13_9;
   wire [15:0] t13_10;
   wire [15:0] t13_11;
   wire [15:0] t13_12;
   wire [15:0] t13_13;
   wire [15:0] t13_14;
   wire [15:0] t13_15;
   wire next_13;
   wire [15:0] t14_0;
   wire [15:0] t14_1;
   wire [15:0] t14_2;
   wire [15:0] t14_3;
   wire [15:0] t14_4;
   wire [15:0] t14_5;
   wire [15:0] t14_6;
   wire [15:0] t14_7;
   wire [15:0] t14_8;
   wire [15:0] t14_9;
   wire [15:0] t14_10;
   wire [15:0] t14_11;
   wire [15:0] t14_12;
   wire [15:0] t14_13;
   wire [15:0] t14_14;
   wire [15:0] t14_15;
   wire next_14;
   wire [15:0] t15_0;
   wire [15:0] t15_1;
   wire [15:0] t15_2;
   wire [15:0] t15_3;
   wire [15:0] t15_4;
   wire [15:0] t15_5;
   wire [15:0] t15_6;
   wire [15:0] t15_7;
   wire [15:0] t15_8;
   wire [15:0] t15_9;
   wire [15:0] t15_10;
   wire [15:0] t15_11;
   wire [15:0] t15_12;
   wire [15:0] t15_13;
   wire [15:0] t15_14;
   wire [15:0] t15_15;
   wire next_15;
   wire [15:0] t16_0;
   wire [15:0] t16_1;
   wire [15:0] t16_2;
   wire [15:0] t16_3;
   wire [15:0] t16_4;
   wire [15:0] t16_5;
   wire [15:0] t16_6;
   wire [15:0] t16_7;
   wire [15:0] t16_8;
   wire [15:0] t16_9;
   wire [15:0] t16_10;
   wire [15:0] t16_11;
   wire [15:0] t16_12;
   wire [15:0] t16_13;
   wire [15:0] t16_14;
   wire [15:0] t16_15;
   wire next_16;
   wire [15:0] t17_0;
   wire [15:0] t17_1;
   wire [15:0] t17_2;
   wire [15:0] t17_3;
   wire [15:0] t17_4;
   wire [15:0] t17_5;
   wire [15:0] t17_6;
   wire [15:0] t17_7;
   wire [15:0] t17_8;
   wire [15:0] t17_9;
   wire [15:0] t17_10;
   wire [15:0] t17_11;
   wire [15:0] t17_12;
   wire [15:0] t17_13;
   wire [15:0] t17_14;
   wire [15:0] t17_15;
   wire next_17;
   wire [15:0] t18_0;
   wire [15:0] t18_1;
   wire [15:0] t18_2;
   wire [15:0] t18_3;
   wire [15:0] t18_4;
   wire [15:0] t18_5;
   wire [15:0] t18_6;
   wire [15:0] t18_7;
   wire [15:0] t18_8;
   wire [15:0] t18_9;
   wire [15:0] t18_10;
   wire [15:0] t18_11;
   wire [15:0] t18_12;
   wire [15:0] t18_13;
   wire [15:0] t18_14;
   wire [15:0] t18_15;
   wire next_18;
   wire [15:0] t19_0;
   wire [15:0] t19_1;
   wire [15:0] t19_2;
   wire [15:0] t19_3;
   wire [15:0] t19_4;
   wire [15:0] t19_5;
   wire [15:0] t19_6;
   wire [15:0] t19_7;
   wire [15:0] t19_8;
   wire [15:0] t19_9;
   wire [15:0] t19_10;
   wire [15:0] t19_11;
   wire [15:0] t19_12;
   wire [15:0] t19_13;
   wire [15:0] t19_14;
   wire [15:0] t19_15;
   wire next_19;
   wire [15:0] t20_0;
   wire [15:0] t20_1;
   wire [15:0] t20_2;
   wire [15:0] t20_3;
   wire [15:0] t20_4;
   wire [15:0] t20_5;
   wire [15:0] t20_6;
   wire [15:0] t20_7;
   wire [15:0] t20_8;
   wire [15:0] t20_9;
   wire [15:0] t20_10;
   wire [15:0] t20_11;
   wire [15:0] t20_12;
   wire [15:0] t20_13;
   wire [15:0] t20_14;
   wire [15:0] t20_15;
   wire next_20;
   wire [15:0] t21_0;
   wire [15:0] t21_1;
   wire [15:0] t21_2;
   wire [15:0] t21_3;
   wire [15:0] t21_4;
   wire [15:0] t21_5;
   wire [15:0] t21_6;
   wire [15:0] t21_7;
   wire [15:0] t21_8;
   wire [15:0] t21_9;
   wire [15:0] t21_10;
   wire [15:0] t21_11;
   wire [15:0] t21_12;
   wire [15:0] t21_13;
   wire [15:0] t21_14;
   wire [15:0] t21_15;
   wire next_21;
   wire [15:0] t22_0;
   wire [15:0] t22_1;
   wire [15:0] t22_2;
   wire [15:0] t22_3;
   wire [15:0] t22_4;
   wire [15:0] t22_5;
   wire [15:0] t22_6;
   wire [15:0] t22_7;
   wire [15:0] t22_8;
   wire [15:0] t22_9;
   wire [15:0] t22_10;
   wire [15:0] t22_11;
   wire [15:0] t22_12;
   wire [15:0] t22_13;
   wire [15:0] t22_14;
   wire [15:0] t22_15;
   wire next_22;
   wire [15:0] t23_0;
   wire [15:0] t23_1;
   wire [15:0] t23_2;
   wire [15:0] t23_3;
   wire [15:0] t23_4;
   wire [15:0] t23_5;
   wire [15:0] t23_6;
   wire [15:0] t23_7;
   wire [15:0] t23_8;
   wire [15:0] t23_9;
   wire [15:0] t23_10;
   wire [15:0] t23_11;
   wire [15:0] t23_12;
   wire [15:0] t23_13;
   wire [15:0] t23_14;
   wire [15:0] t23_15;
   wire next_23;
   wire [15:0] t24_0;
   wire [15:0] t24_1;
   wire [15:0] t24_2;
   wire [15:0] t24_3;
   wire [15:0] t24_4;
   wire [15:0] t24_5;
   wire [15:0] t24_6;
   wire [15:0] t24_7;
   wire [15:0] t24_8;
   wire [15:0] t24_9;
   wire [15:0] t24_10;
   wire [15:0] t24_11;
   wire [15:0] t24_12;
   wire [15:0] t24_13;
   wire [15:0] t24_14;
   wire [15:0] t24_15;
   wire next_24;
   wire [15:0] t25_0;
   wire [15:0] t25_1;
   wire [15:0] t25_2;
   wire [15:0] t25_3;
   wire [15:0] t25_4;
   wire [15:0] t25_5;
   wire [15:0] t25_6;
   wire [15:0] t25_7;
   wire [15:0] t25_8;
   wire [15:0] t25_9;
   wire [15:0] t25_10;
   wire [15:0] t25_11;
   wire [15:0] t25_12;
   wire [15:0] t25_13;
   wire [15:0] t25_14;
   wire [15:0] t25_15;
   wire next_25;
   wire [15:0] t26_0;
   wire [15:0] t26_1;
   wire [15:0] t26_2;
   wire [15:0] t26_3;
   wire [15:0] t26_4;
   wire [15:0] t26_5;
   wire [15:0] t26_6;
   wire [15:0] t26_7;
   wire [15:0] t26_8;
   wire [15:0] t26_9;
   wire [15:0] t26_10;
   wire [15:0] t26_11;
   wire [15:0] t26_12;
   wire [15:0] t26_13;
   wire [15:0] t26_14;
   wire [15:0] t26_15;
   wire next_26;
   assign t0_0 = X0;
   assign Y0 = t26_0;
   assign t0_1 = X1;
   assign Y1 = t26_1;
   assign t0_2 = X2;
   assign Y2 = t26_2;
   assign t0_3 = X3;
   assign Y3 = t26_3;
   assign t0_4 = X4;
   assign Y4 = t26_4;
   assign t0_5 = X5;
   assign Y5 = t26_5;
   assign t0_6 = X6;
   assign Y6 = t26_6;
   assign t0_7 = X7;
   assign Y7 = t26_7;
   assign t0_8 = X8;
   assign Y8 = t26_8;
   assign t0_9 = X9;
   assign Y9 = t26_9;
   assign t0_10 = X10;
   assign Y10 = t26_10;
   assign t0_11 = X11;
   assign Y11 = t26_11;
   assign t0_12 = X12;
   assign Y12 = t26_12;
   assign t0_13 = X13;
   assign Y13 = t26_13;
   assign t0_14 = X14;
   assign Y14 = t26_14;
   assign t0_15 = X15;
   assign Y15 = t26_15;
   assign next_0 = next;
   assign next_out = next_26;

// latency=128, gap=128
   rc72851 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=2, gap=128
   codeBlock72853 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=2, gap=128
   codeBlock73160 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15));


// latency=5, gap=128
   codeBlock73467 stage3(.clk(clk), .reset(reset), .next_in(next_3), .next_out(next_4),
       .X0_in(t3_0), .Y0(t4_0),
       .X1_in(t3_1), .Y1(t4_1),
       .X2_in(t3_2), .Y2(t4_2),
       .X3_in(t3_3), .Y3(t4_3),
       .X4_in(t3_4), .Y4(t4_4),
       .X5_in(t3_5), .Y5(t4_5),
       .X6_in(t3_6), .Y6(t4_6),
       .X7_in(t3_7), .Y7(t4_7),
       .X8_in(t3_8), .Y8(t4_8),
       .X9_in(t3_9), .Y9(t4_9),
       .X10_in(t3_10), .Y10(t4_10),
       .X11_in(t3_11), .Y11(t4_11),
       .X12_in(t3_12), .Y12(t4_12),
       .X13_in(t3_13), .Y13(t4_13),
       .X14_in(t3_14), .Y14(t4_14),
       .X15_in(t3_15), .Y15(t4_15));


// latency=4, gap=128
   rc73816 stage4(.clk(clk), .reset(reset), .next(next_4), .next_out(next_5),
    .X0(t4_0), .Y0(t5_0),
    .X1(t4_1), .Y1(t5_1),
    .X2(t4_2), .Y2(t5_2),
    .X3(t4_3), .Y3(t5_3),
    .X4(t4_4), .Y4(t5_4),
    .X5(t4_5), .Y5(t5_5),
    .X6(t4_6), .Y6(t5_6),
    .X7(t4_7), .Y7(t5_7),
    .X8(t4_8), .Y8(t5_8),
    .X9(t4_9), .Y9(t5_9),
    .X10(t4_10), .Y10(t5_10),
    .X11(t4_11), .Y11(t5_11),
    .X12(t4_12), .Y12(t5_12),
    .X13(t4_13), .Y13(t5_13),
    .X14(t4_14), .Y14(t5_14),
    .X15(t4_15), .Y15(t5_15));


// latency=8, gap=128
   DirSum_74525 stage5(.next(next_5), .clk(clk), .reset(reset), .next_out(next_6),
       .X0(t5_0), .Y0(t6_0),
       .X1(t5_1), .Y1(t6_1),
       .X2(t5_2), .Y2(t6_2),
       .X3(t5_3), .Y3(t6_3),
       .X4(t5_4), .Y4(t6_4),
       .X5(t5_5), .Y5(t6_5),
       .X6(t5_6), .Y6(t6_6),
       .X7(t5_7), .Y7(t6_7),
       .X8(t5_8), .Y8(t6_8),
       .X9(t5_9), .Y9(t6_9),
       .X10(t5_10), .Y10(t6_10),
       .X11(t5_11), .Y11(t6_11),
       .X12(t5_12), .Y12(t6_12),
       .X13(t5_13), .Y13(t6_13),
       .X14(t5_14), .Y14(t6_14),
       .X15(t5_15), .Y15(t6_15));


// latency=2, gap=128
   codeBlock74528 stage6(.clk(clk), .reset(reset), .next_in(next_6), .next_out(next_7),
       .X0_in(t6_0), .Y0(t7_0),
       .X1_in(t6_1), .Y1(t7_1),
       .X2_in(t6_2), .Y2(t7_2),
       .X3_in(t6_3), .Y3(t7_3),
       .X4_in(t6_4), .Y4(t7_4),
       .X5_in(t6_5), .Y5(t7_5),
       .X6_in(t6_6), .Y6(t7_6),
       .X7_in(t6_7), .Y7(t7_7),
       .X8_in(t6_8), .Y8(t7_8),
       .X9_in(t6_9), .Y9(t7_9),
       .X10_in(t6_10), .Y10(t7_10),
       .X11_in(t6_11), .Y11(t7_11),
       .X12_in(t6_12), .Y12(t7_12),
       .X13_in(t6_13), .Y13(t7_13),
       .X14_in(t6_14), .Y14(t7_14),
       .X15_in(t6_15), .Y15(t7_15));


// latency=5, gap=128
   rc74837 stage7(.clk(clk), .reset(reset), .next(next_7), .next_out(next_8),
    .X0(t7_0), .Y0(t8_0),
    .X1(t7_1), .Y1(t8_1),
    .X2(t7_2), .Y2(t8_2),
    .X3(t7_3), .Y3(t8_3),
    .X4(t7_4), .Y4(t8_4),
    .X5(t7_5), .Y5(t8_5),
    .X6(t7_6), .Y6(t8_6),
    .X7(t7_7), .Y7(t8_7),
    .X8(t7_8), .Y8(t8_8),
    .X9(t7_9), .Y9(t8_9),
    .X10(t7_10), .Y10(t8_10),
    .X11(t7_11), .Y11(t8_11),
    .X12(t7_12), .Y12(t8_12),
    .X13(t7_13), .Y13(t8_13),
    .X14(t7_14), .Y14(t8_14),
    .X15(t7_15), .Y15(t8_15));


// latency=8, gap=128
   DirSum_75578 stage8(.next(next_8), .clk(clk), .reset(reset), .next_out(next_9),
       .X0(t8_0), .Y0(t9_0),
       .X1(t8_1), .Y1(t9_1),
       .X2(t8_2), .Y2(t9_2),
       .X3(t8_3), .Y3(t9_3),
       .X4(t8_4), .Y4(t9_4),
       .X5(t8_5), .Y5(t9_5),
       .X6(t8_6), .Y6(t9_6),
       .X7(t8_7), .Y7(t9_7),
       .X8(t8_8), .Y8(t9_8),
       .X9(t8_9), .Y9(t9_9),
       .X10(t8_10), .Y10(t9_10),
       .X11(t8_11), .Y11(t9_11),
       .X12(t8_12), .Y12(t9_12),
       .X13(t8_13), .Y13(t9_13),
       .X14(t8_14), .Y14(t9_14),
       .X15(t8_15), .Y15(t9_15));


// latency=2, gap=128
   codeBlock75581 stage9(.clk(clk), .reset(reset), .next_in(next_9), .next_out(next_10),
       .X0_in(t9_0), .Y0(t10_0),
       .X1_in(t9_1), .Y1(t10_1),
       .X2_in(t9_2), .Y2(t10_2),
       .X3_in(t9_3), .Y3(t10_3),
       .X4_in(t9_4), .Y4(t10_4),
       .X5_in(t9_5), .Y5(t10_5),
       .X6_in(t9_6), .Y6(t10_6),
       .X7_in(t9_7), .Y7(t10_7),
       .X8_in(t9_8), .Y8(t10_8),
       .X9_in(t9_9), .Y9(t10_9),
       .X10_in(t9_10), .Y10(t10_10),
       .X11_in(t9_11), .Y11(t10_11),
       .X12_in(t9_12), .Y12(t10_12),
       .X13_in(t9_13), .Y13(t10_13),
       .X14_in(t9_14), .Y14(t10_14),
       .X15_in(t9_15), .Y15(t10_15));


// latency=7, gap=128
   rc75890 stage10(.clk(clk), .reset(reset), .next(next_10), .next_out(next_11),
    .X0(t10_0), .Y0(t11_0),
    .X1(t10_1), .Y1(t11_1),
    .X2(t10_2), .Y2(t11_2),
    .X3(t10_3), .Y3(t11_3),
    .X4(t10_4), .Y4(t11_4),
    .X5(t10_5), .Y5(t11_5),
    .X6(t10_6), .Y6(t11_6),
    .X7(t10_7), .Y7(t11_7),
    .X8(t10_8), .Y8(t11_8),
    .X9(t10_9), .Y9(t11_9),
    .X10(t10_10), .Y10(t11_10),
    .X11(t10_11), .Y11(t11_11),
    .X12(t10_12), .Y12(t11_12),
    .X13(t10_13), .Y13(t11_13),
    .X14(t10_14), .Y14(t11_14),
    .X15(t10_15), .Y15(t11_15));


// latency=8, gap=128
   DirSum_76695 stage11(.next(next_11), .clk(clk), .reset(reset), .next_out(next_12),
       .X0(t11_0), .Y0(t12_0),
       .X1(t11_1), .Y1(t12_1),
       .X2(t11_2), .Y2(t12_2),
       .X3(t11_3), .Y3(t12_3),
       .X4(t11_4), .Y4(t12_4),
       .X5(t11_5), .Y5(t12_5),
       .X6(t11_6), .Y6(t12_6),
       .X7(t11_7), .Y7(t12_7),
       .X8(t11_8), .Y8(t12_8),
       .X9(t11_9), .Y9(t12_9),
       .X10(t11_10), .Y10(t12_10),
       .X11(t11_11), .Y11(t12_11),
       .X12(t11_12), .Y12(t12_12),
       .X13(t11_13), .Y13(t12_13),
       .X14(t11_14), .Y14(t12_14),
       .X15(t11_15), .Y15(t12_15));


// latency=2, gap=128
   codeBlock76698 stage12(.clk(clk), .reset(reset), .next_in(next_12), .next_out(next_13),
       .X0_in(t12_0), .Y0(t13_0),
       .X1_in(t12_1), .Y1(t13_1),
       .X2_in(t12_2), .Y2(t13_2),
       .X3_in(t12_3), .Y3(t13_3),
       .X4_in(t12_4), .Y4(t13_4),
       .X5_in(t12_5), .Y5(t13_5),
       .X6_in(t12_6), .Y6(t13_6),
       .X7_in(t12_7), .Y7(t13_7),
       .X8_in(t12_8), .Y8(t13_8),
       .X9_in(t12_9), .Y9(t13_9),
       .X10_in(t12_10), .Y10(t13_10),
       .X11_in(t12_11), .Y11(t13_11),
       .X12_in(t12_12), .Y12(t13_12),
       .X13_in(t12_13), .Y13(t13_13),
       .X14_in(t12_14), .Y14(t13_14),
       .X15_in(t12_15), .Y15(t13_15));


// latency=11, gap=128
   rc77007 stage13(.clk(clk), .reset(reset), .next(next_13), .next_out(next_14),
    .X0(t13_0), .Y0(t14_0),
    .X1(t13_1), .Y1(t14_1),
    .X2(t13_2), .Y2(t14_2),
    .X3(t13_3), .Y3(t14_3),
    .X4(t13_4), .Y4(t14_4),
    .X5(t13_5), .Y5(t14_5),
    .X6(t13_6), .Y6(t14_6),
    .X7(t13_7), .Y7(t14_7),
    .X8(t13_8), .Y8(t14_8),
    .X9(t13_9), .Y9(t14_9),
    .X10(t13_10), .Y10(t14_10),
    .X11(t13_11), .Y11(t14_11),
    .X12(t13_12), .Y12(t14_12),
    .X13(t13_13), .Y13(t14_13),
    .X14(t13_14), .Y14(t14_14),
    .X15(t13_15), .Y15(t14_15));


// latency=8, gap=128
   DirSum_77940 stage14(.next(next_14), .clk(clk), .reset(reset), .next_out(next_15),
       .X0(t14_0), .Y0(t15_0),
       .X1(t14_1), .Y1(t15_1),
       .X2(t14_2), .Y2(t15_2),
       .X3(t14_3), .Y3(t15_3),
       .X4(t14_4), .Y4(t15_4),
       .X5(t14_5), .Y5(t15_5),
       .X6(t14_6), .Y6(t15_6),
       .X7(t14_7), .Y7(t15_7),
       .X8(t14_8), .Y8(t15_8),
       .X9(t14_9), .Y9(t15_9),
       .X10(t14_10), .Y10(t15_10),
       .X11(t14_11), .Y11(t15_11),
       .X12(t14_12), .Y12(t15_12),
       .X13(t14_13), .Y13(t15_13),
       .X14(t14_14), .Y14(t15_14),
       .X15(t14_15), .Y15(t15_15));


// latency=2, gap=128
   codeBlock77943 stage15(.clk(clk), .reset(reset), .next_in(next_15), .next_out(next_16),
       .X0_in(t15_0), .Y0(t16_0),
       .X1_in(t15_1), .Y1(t16_1),
       .X2_in(t15_2), .Y2(t16_2),
       .X3_in(t15_3), .Y3(t16_3),
       .X4_in(t15_4), .Y4(t16_4),
       .X5_in(t15_5), .Y5(t16_5),
       .X6_in(t15_6), .Y6(t16_6),
       .X7_in(t15_7), .Y7(t16_7),
       .X8_in(t15_8), .Y8(t16_8),
       .X9_in(t15_9), .Y9(t16_9),
       .X10_in(t15_10), .Y10(t16_10),
       .X11_in(t15_11), .Y11(t16_11),
       .X12_in(t15_12), .Y12(t16_12),
       .X13_in(t15_13), .Y13(t16_13),
       .X14_in(t15_14), .Y14(t16_14),
       .X15_in(t15_15), .Y15(t16_15));


// latency=19, gap=128
   rc78252 stage16(.clk(clk), .reset(reset), .next(next_16), .next_out(next_17),
    .X0(t16_0), .Y0(t17_0),
    .X1(t16_1), .Y1(t17_1),
    .X2(t16_2), .Y2(t17_2),
    .X3(t16_3), .Y3(t17_3),
    .X4(t16_4), .Y4(t17_4),
    .X5(t16_5), .Y5(t17_5),
    .X6(t16_6), .Y6(t17_6),
    .X7(t16_7), .Y7(t17_7),
    .X8(t16_8), .Y8(t17_8),
    .X9(t16_9), .Y9(t17_9),
    .X10(t16_10), .Y10(t17_10),
    .X11(t16_11), .Y11(t17_11),
    .X12(t16_12), .Y12(t17_12),
    .X13(t16_13), .Y13(t17_13),
    .X14(t16_14), .Y14(t17_14),
    .X15(t16_15), .Y15(t17_15));


// latency=8, gap=128
   DirSum_79441 stage17(.next(next_17), .clk(clk), .reset(reset), .next_out(next_18),
       .X0(t17_0), .Y0(t18_0),
       .X1(t17_1), .Y1(t18_1),
       .X2(t17_2), .Y2(t18_2),
       .X3(t17_3), .Y3(t18_3),
       .X4(t17_4), .Y4(t18_4),
       .X5(t17_5), .Y5(t18_5),
       .X6(t17_6), .Y6(t18_6),
       .X7(t17_7), .Y7(t18_7),
       .X8(t17_8), .Y8(t18_8),
       .X9(t17_9), .Y9(t18_9),
       .X10(t17_10), .Y10(t18_10),
       .X11(t17_11), .Y11(t18_11),
       .X12(t17_12), .Y12(t18_12),
       .X13(t17_13), .Y13(t18_13),
       .X14(t17_14), .Y14(t18_14),
       .X15(t17_15), .Y15(t18_15));


// latency=2, gap=128
   codeBlock79444 stage18(.clk(clk), .reset(reset), .next_in(next_18), .next_out(next_19),
       .X0_in(t18_0), .Y0(t19_0),
       .X1_in(t18_1), .Y1(t19_1),
       .X2_in(t18_2), .Y2(t19_2),
       .X3_in(t18_3), .Y3(t19_3),
       .X4_in(t18_4), .Y4(t19_4),
       .X5_in(t18_5), .Y5(t19_5),
       .X6_in(t18_6), .Y6(t19_6),
       .X7_in(t18_7), .Y7(t19_7),
       .X8_in(t18_8), .Y8(t19_8),
       .X9_in(t18_9), .Y9(t19_9),
       .X10_in(t18_10), .Y10(t19_10),
       .X11_in(t18_11), .Y11(t19_11),
       .X12_in(t18_12), .Y12(t19_12),
       .X13_in(t18_13), .Y13(t19_13),
       .X14_in(t18_14), .Y14(t19_14),
       .X15_in(t18_15), .Y15(t19_15));


// latency=35, gap=128
   rc79753 stage19(.clk(clk), .reset(reset), .next(next_19), .next_out(next_20),
    .X0(t19_0), .Y0(t20_0),
    .X1(t19_1), .Y1(t20_1),
    .X2(t19_2), .Y2(t20_2),
    .X3(t19_3), .Y3(t20_3),
    .X4(t19_4), .Y4(t20_4),
    .X5(t19_5), .Y5(t20_5),
    .X6(t19_6), .Y6(t20_6),
    .X7(t19_7), .Y7(t20_7),
    .X8(t19_8), .Y8(t20_8),
    .X9(t19_9), .Y9(t20_9),
    .X10(t19_10), .Y10(t20_10),
    .X11(t19_11), .Y11(t20_11),
    .X12(t19_12), .Y12(t20_12),
    .X13(t19_13), .Y13(t20_13),
    .X14(t19_14), .Y14(t20_14),
    .X15(t19_15), .Y15(t20_15));


// latency=8, gap=128
   DirSum_81454 stage20(.next(next_20), .clk(clk), .reset(reset), .next_out(next_21),
       .X0(t20_0), .Y0(t21_0),
       .X1(t20_1), .Y1(t21_1),
       .X2(t20_2), .Y2(t21_2),
       .X3(t20_3), .Y3(t21_3),
       .X4(t20_4), .Y4(t21_4),
       .X5(t20_5), .Y5(t21_5),
       .X6(t20_6), .Y6(t21_6),
       .X7(t20_7), .Y7(t21_7),
       .X8(t20_8), .Y8(t21_8),
       .X9(t20_9), .Y9(t21_9),
       .X10(t20_10), .Y10(t21_10),
       .X11(t20_11), .Y11(t21_11),
       .X12(t20_12), .Y12(t21_12),
       .X13(t20_13), .Y13(t21_13),
       .X14(t20_14), .Y14(t21_14),
       .X15(t20_15), .Y15(t21_15));


// latency=2, gap=128
   codeBlock81457 stage21(.clk(clk), .reset(reset), .next_in(next_21), .next_out(next_22),
       .X0_in(t21_0), .Y0(t22_0),
       .X1_in(t21_1), .Y1(t22_1),
       .X2_in(t21_2), .Y2(t22_2),
       .X3_in(t21_3), .Y3(t22_3),
       .X4_in(t21_4), .Y4(t22_4),
       .X5_in(t21_5), .Y5(t22_5),
       .X6_in(t21_6), .Y6(t22_6),
       .X7_in(t21_7), .Y7(t22_7),
       .X8_in(t21_8), .Y8(t22_8),
       .X9_in(t21_9), .Y9(t22_9),
       .X10_in(t21_10), .Y10(t22_10),
       .X11_in(t21_11), .Y11(t22_11),
       .X12_in(t21_12), .Y12(t22_12),
       .X13_in(t21_13), .Y13(t22_13),
       .X14_in(t21_14), .Y14(t22_14),
       .X15_in(t21_15), .Y15(t22_15));


// latency=67, gap=128
   rc81766 stage22(.clk(clk), .reset(reset), .next(next_22), .next_out(next_23),
    .X0(t22_0), .Y0(t23_0),
    .X1(t22_1), .Y1(t23_1),
    .X2(t22_2), .Y2(t23_2),
    .X3(t22_3), .Y3(t23_3),
    .X4(t22_4), .Y4(t23_4),
    .X5(t22_5), .Y5(t23_5),
    .X6(t22_6), .Y6(t23_6),
    .X7(t22_7), .Y7(t23_7),
    .X8(t22_8), .Y8(t23_8),
    .X9(t22_9), .Y9(t23_9),
    .X10(t22_10), .Y10(t23_10),
    .X11(t22_11), .Y11(t23_11),
    .X12(t22_12), .Y12(t23_12),
    .X13(t22_13), .Y13(t23_13),
    .X14(t22_14), .Y14(t23_14),
    .X15(t22_15), .Y15(t23_15));


// latency=8, gap=128
   DirSum_84490 stage23(.next(next_23), .clk(clk), .reset(reset), .next_out(next_24),
       .X0(t23_0), .Y0(t24_0),
       .X1(t23_1), .Y1(t24_1),
       .X2(t23_2), .Y2(t24_2),
       .X3(t23_3), .Y3(t24_3),
       .X4(t23_4), .Y4(t24_4),
       .X5(t23_5), .Y5(t24_5),
       .X6(t23_6), .Y6(t24_6),
       .X7(t23_7), .Y7(t24_7),
       .X8(t23_8), .Y8(t24_8),
       .X9(t23_9), .Y9(t24_9),
       .X10(t23_10), .Y10(t24_10),
       .X11(t23_11), .Y11(t24_11),
       .X12(t23_12), .Y12(t24_12),
       .X13(t23_13), .Y13(t24_13),
       .X14(t23_14), .Y14(t24_14),
       .X15(t23_15), .Y15(t24_15));


// latency=2, gap=128
   codeBlock84493 stage24(.clk(clk), .reset(reset), .next_in(next_24), .next_out(next_25),
       .X0_in(t24_0), .Y0(t25_0),
       .X1_in(t24_1), .Y1(t25_1),
       .X2_in(t24_2), .Y2(t25_2),
       .X3_in(t24_3), .Y3(t25_3),
       .X4_in(t24_4), .Y4(t25_4),
       .X5_in(t24_5), .Y5(t25_5),
       .X6_in(t24_6), .Y6(t25_6),
       .X7_in(t24_7), .Y7(t25_7),
       .X8_in(t24_8), .Y8(t25_8),
       .X9_in(t24_9), .Y9(t25_9),
       .X10_in(t24_10), .Y10(t25_10),
       .X11_in(t24_11), .Y11(t25_11),
       .X12_in(t24_12), .Y12(t25_12),
       .X13_in(t24_13), .Y13(t25_13),
       .X14_in(t24_14), .Y14(t25_14),
       .X15_in(t24_15), .Y15(t25_15));


// latency=67, gap=128
   rc84802 stage25(.clk(clk), .reset(reset), .next(next_25), .next_out(next_26),
    .X0(t25_0), .Y0(t26_0),
    .X1(t25_1), .Y1(t26_1),
    .X2(t25_2), .Y2(t26_2),
    .X3(t25_3), .Y3(t26_3),
    .X4(t25_4), .Y4(t26_4),
    .X5(t25_5), .Y5(t26_5),
    .X6(t25_6), .Y6(t26_6),
    .X7(t25_7), .Y7(t26_7),
    .X8(t25_8), .Y8(t26_8),
    .X9(t25_9), .Y9(t26_9),
    .X10(t25_10), .Y10(t26_10),
    .X11(t25_11), .Y11(t26_11),
    .X12(t25_12), .Y12(t26_12),
    .X13(t25_13), .Y13(t26_13),
    .X14(t25_14), .Y14(t26_14),
    .X15(t25_15), .Y15(t26_15));


endmodule

// Latency: 128
// Gap: 128
module rc72851(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm72849 instPerm90290(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 128
// Gap: 128
module perm72849(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[9] ^ addr0[2];
   assign inBank0[1] = addr0[8] ^ addr0[1];
   assign inBank0[2] = addr0[7] ^ addr0[0];
   assign inAddr0[0] = addr0[6];
   assign inAddr0[1] = addr0[5];
   assign inAddr0[2] = addr0[4];
   assign inAddr0[3] = addr0[3];
   assign inAddr0[4] = addr0[2];
   assign inAddr0[5] = addr0[1];
   assign inAddr0[6] = addr0[0];
   assign outBank0[0] = addr0b[7] ^ addr0b[0];
   assign outBank0[1] = addr0b[8] ^ addr0b[1];
   assign outBank0[2] = addr0b[9] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[7] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[8] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[9] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[9] ^ addr1[2];
   assign inBank1[1] = addr1[8] ^ addr1[1];
   assign inBank1[2] = addr1[7] ^ addr1[0];
   assign inAddr1[0] = addr1[6];
   assign inAddr1[1] = addr1[5];
   assign inAddr1[2] = addr1[4];
   assign inAddr1[3] = addr1[3];
   assign inAddr1[4] = addr1[2];
   assign inAddr1[5] = addr1[1];
   assign inAddr1[6] = addr1[0];
   assign outBank1[0] = addr1b[7] ^ addr1b[0];
   assign outBank1[1] = addr1b[8] ^ addr1b[1];
   assign outBank1[2] = addr1b[9] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[7] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[8] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[9] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[9] ^ addr2[2];
   assign inBank2[1] = addr2[8] ^ addr2[1];
   assign inBank2[2] = addr2[7] ^ addr2[0];
   assign inAddr2[0] = addr2[6];
   assign inAddr2[1] = addr2[5];
   assign inAddr2[2] = addr2[4];
   assign inAddr2[3] = addr2[3];
   assign inAddr2[4] = addr2[2];
   assign inAddr2[5] = addr2[1];
   assign inAddr2[6] = addr2[0];
   assign outBank2[0] = addr2b[7] ^ addr2b[0];
   assign outBank2[1] = addr2b[8] ^ addr2b[1];
   assign outBank2[2] = addr2b[9] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[7] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[8] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[9] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[9] ^ addr3[2];
   assign inBank3[1] = addr3[8] ^ addr3[1];
   assign inBank3[2] = addr3[7] ^ addr3[0];
   assign inAddr3[0] = addr3[6];
   assign inAddr3[1] = addr3[5];
   assign inAddr3[2] = addr3[4];
   assign inAddr3[3] = addr3[3];
   assign inAddr3[4] = addr3[2];
   assign inAddr3[5] = addr3[1];
   assign inAddr3[6] = addr3[0];
   assign outBank3[0] = addr3b[7] ^ addr3b[0];
   assign outBank3[1] = addr3b[8] ^ addr3b[1];
   assign outBank3[2] = addr3b[9] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[7] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[8] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[9] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[9] ^ addr4[2];
   assign inBank4[1] = addr4[8] ^ addr4[1];
   assign inBank4[2] = addr4[7] ^ addr4[0];
   assign inAddr4[0] = addr4[6];
   assign inAddr4[1] = addr4[5];
   assign inAddr4[2] = addr4[4];
   assign inAddr4[3] = addr4[3];
   assign inAddr4[4] = addr4[2];
   assign inAddr4[5] = addr4[1];
   assign inAddr4[6] = addr4[0];
   assign outBank4[0] = addr4b[7] ^ addr4b[0];
   assign outBank4[1] = addr4b[8] ^ addr4b[1];
   assign outBank4[2] = addr4b[9] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[7] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[8] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[9] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[9] ^ addr5[2];
   assign inBank5[1] = addr5[8] ^ addr5[1];
   assign inBank5[2] = addr5[7] ^ addr5[0];
   assign inAddr5[0] = addr5[6];
   assign inAddr5[1] = addr5[5];
   assign inAddr5[2] = addr5[4];
   assign inAddr5[3] = addr5[3];
   assign inAddr5[4] = addr5[2];
   assign inAddr5[5] = addr5[1];
   assign inAddr5[6] = addr5[0];
   assign outBank5[0] = addr5b[7] ^ addr5b[0];
   assign outBank5[1] = addr5b[8] ^ addr5b[1];
   assign outBank5[2] = addr5b[9] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[7] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[8] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[9] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[9] ^ addr6[2];
   assign inBank6[1] = addr6[8] ^ addr6[1];
   assign inBank6[2] = addr6[7] ^ addr6[0];
   assign inAddr6[0] = addr6[6];
   assign inAddr6[1] = addr6[5];
   assign inAddr6[2] = addr6[4];
   assign inAddr6[3] = addr6[3];
   assign inAddr6[4] = addr6[2];
   assign inAddr6[5] = addr6[1];
   assign inAddr6[6] = addr6[0];
   assign outBank6[0] = addr6b[7] ^ addr6b[0];
   assign outBank6[1] = addr6b[8] ^ addr6b[1];
   assign outBank6[2] = addr6b[9] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[7] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[8] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[9] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[9] ^ addr7[2];
   assign inBank7[1] = addr7[8] ^ addr7[1];
   assign inBank7[2] = addr7[7] ^ addr7[0];
   assign inAddr7[0] = addr7[6];
   assign inAddr7[1] = addr7[5];
   assign inAddr7[2] = addr7[4];
   assign inAddr7[3] = addr7[3];
   assign inAddr7[4] = addr7[2];
   assign inAddr7[5] = addr7[1];
   assign inAddr7[6] = addr7[0];
   assign outBank7[0] = addr7b[7] ^ addr7b[0];
   assign outBank7[1] = addr7b[8] ^ addr7b[1];
   assign outBank7[2] = addr7b[9] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[7] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[8] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[9] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(122, 7) nextReg_90295(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_90298(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_72849 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 121)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 125)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 121) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 121)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_4 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_3 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[5];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[4];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_4_pipe), .y0(w_3_0), .y1(w_3_4), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_1_pipe), .x1(w_2_5_pipe), .y0(w_3_1), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_2_pipe), .x1(w_2_6_pipe), .y0(w_3_2), .y1(w_3_6), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_3_pipe), .x1(w_2_7_pipe), .y0(w_3_3), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[4];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[4];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray1024_72849(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_90303(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock72853(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90310(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1850;
   wire signed [15:0] a1851;
   wire signed [15:0] a1852;
   wire signed [15:0] a1853;
   wire signed [15:0] a1858;
   wire signed [15:0] a1859;
   wire signed [15:0] a1860;
   wire signed [15:0] a1861;
   wire signed [15:0] a1866;
   wire signed [15:0] a1867;
   wire signed [15:0] a1868;
   wire signed [15:0] a1869;
   wire signed [15:0] a1874;
   wire signed [15:0] a1875;
   wire signed [15:0] a1876;
   wire signed [15:0] a1877;
   wire signed [16:0] tm737;
   wire signed [16:0] tm738;
   wire signed [16:0] tm739;
   wire signed [16:0] tm740;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm741;
   wire signed [16:0] tm742;
   wire signed [16:0] tm743;
   wire signed [16:0] tm744;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm745;
   wire signed [16:0] tm746;
   wire signed [16:0] tm747;
   wire signed [16:0] tm748;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm749;
   wire signed [16:0] tm750;
   wire signed [16:0] tm751;
   wire signed [16:0] tm752;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t1066;
   wire signed [15:0] t1067;
   wire signed [15:0] t1068;
   wire signed [15:0] t1069;
   wire signed [15:0] t1070;
   wire signed [15:0] t1071;
   wire signed [15:0] t1072;
   wire signed [15:0] t1073;
   wire signed [15:0] t1074;
   wire signed [15:0] t1075;
   wire signed [15:0] t1076;
   wire signed [15:0] t1077;
   wire signed [15:0] t1078;
   wire signed [15:0] t1079;
   wire signed [15:0] t1080;
   wire signed [15:0] t1081;


   assign a1850 = X0;
   assign a1851 = X2;
   assign a1852 = X1;
   assign a1853 = X3;
   assign a1858 = X4;
   assign a1859 = X6;
   assign a1860 = X5;
   assign a1861 = X7;
   assign a1866 = X8;
   assign a1867 = X10;
   assign a1868 = X9;
   assign a1869 = X11;
   assign a1874 = X12;
   assign a1875 = X14;
   assign a1876 = X13;
   assign a1877 = X15;
   assign Y0 = t1066;
   assign Y1 = t1067;
   assign Y2 = t1068;
   assign Y3 = t1069;
   assign Y4 = t1070;
   assign Y5 = t1071;
   assign Y6 = t1072;
   assign Y7 = t1073;
   assign Y8 = t1074;
   assign Y9 = t1075;
   assign Y10 = t1076;
   assign Y11 = t1077;
   assign Y12 = t1078;
   assign Y13 = t1079;
   assign Y14 = t1080;
   assign Y15 = t1081;
   assign t1066 = tm737[16:1];
   assign t1067 = tm738[16:1];
   assign t1068 = tm739[16:1];
   assign t1069 = tm740[16:1];
   assign t1070 = tm741[16:1];
   assign t1071 = tm742[16:1];
   assign t1072 = tm743[16:1];
   assign t1073 = tm744[16:1];
   assign t1074 = tm745[16:1];
   assign t1075 = tm746[16:1];
   assign t1076 = tm747[16:1];
   assign t1077 = tm748[16:1];
   assign t1078 = tm749[16:1];
   assign t1079 = tm750[16:1];
   assign t1080 = tm751[16:1];
   assign t1081 = tm752[16:1];

    addfxp #(17, 1) add72865(.a({{1{a1850[15]}}, a1850}), .b({{1{a1851[15]}}, a1851}), .clk(clk), .q(tm737));    // 0
    addfxp #(17, 1) add72880(.a({{1{a1852[15]}}, a1852}), .b({{1{a1853[15]}}, a1853}), .clk(clk), .q(tm738));    // 0
    subfxp #(17, 1) sub72895(.a({{1{a1850[15]}}, a1850}), .b({{1{a1851[15]}}, a1851}), .clk(clk), .q(tm739));    // 0
    subfxp #(17, 1) sub72910(.a({{1{a1852[15]}}, a1852}), .b({{1{a1853[15]}}, a1853}), .clk(clk), .q(tm740));    // 0
    addfxp #(17, 1) add72941(.a({{1{a1858[15]}}, a1858}), .b({{1{a1859[15]}}, a1859}), .clk(clk), .q(tm741));    // 0
    addfxp #(17, 1) add72956(.a({{1{a1860[15]}}, a1860}), .b({{1{a1861[15]}}, a1861}), .clk(clk), .q(tm742));    // 0
    subfxp #(17, 1) sub72971(.a({{1{a1858[15]}}, a1858}), .b({{1{a1859[15]}}, a1859}), .clk(clk), .q(tm743));    // 0
    subfxp #(17, 1) sub72986(.a({{1{a1860[15]}}, a1860}), .b({{1{a1861[15]}}, a1861}), .clk(clk), .q(tm744));    // 0
    addfxp #(17, 1) add73017(.a({{1{a1866[15]}}, a1866}), .b({{1{a1867[15]}}, a1867}), .clk(clk), .q(tm745));    // 0
    addfxp #(17, 1) add73032(.a({{1{a1868[15]}}, a1868}), .b({{1{a1869[15]}}, a1869}), .clk(clk), .q(tm746));    // 0
    subfxp #(17, 1) sub73047(.a({{1{a1866[15]}}, a1866}), .b({{1{a1867[15]}}, a1867}), .clk(clk), .q(tm747));    // 0
    subfxp #(17, 1) sub73062(.a({{1{a1868[15]}}, a1868}), .b({{1{a1869[15]}}, a1869}), .clk(clk), .q(tm748));    // 0
    addfxp #(17, 1) add73093(.a({{1{a1874[15]}}, a1874}), .b({{1{a1875[15]}}, a1875}), .clk(clk), .q(tm749));    // 0
    addfxp #(17, 1) add73108(.a({{1{a1876[15]}}, a1876}), .b({{1{a1877[15]}}, a1877}), .clk(clk), .q(tm750));    // 0
    subfxp #(17, 1) sub73123(.a({{1{a1874[15]}}, a1874}), .b({{1{a1875[15]}}, a1875}), .clk(clk), .q(tm751));    // 0
    subfxp #(17, 1) sub73138(.a({{1{a1876[15]}}, a1876}), .b({{1{a1877[15]}}, a1877}), .clk(clk), .q(tm752));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock73160(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90313(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1786;
   wire signed [15:0] a1787;
   wire signed [15:0] a1788;
   wire signed [15:0] a1789;
   wire signed [15:0] a1794;
   wire signed [15:0] a1795;
   wire signed [15:0] a1796;
   wire signed [15:0] a1797;
   wire signed [15:0] a1802;
   wire signed [15:0] a1803;
   wire signed [15:0] a1804;
   wire signed [15:0] a1805;
   wire signed [15:0] a1810;
   wire signed [15:0] a1811;
   wire signed [15:0] a1812;
   wire signed [15:0] a1813;
   wire signed [16:0] tm753;
   wire signed [16:0] tm754;
   wire signed [16:0] tm755;
   wire signed [16:0] tm756;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm757;
   wire signed [16:0] tm758;
   wire signed [16:0] tm759;
   wire signed [16:0] tm760;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm761;
   wire signed [16:0] tm762;
   wire signed [16:0] tm763;
   wire signed [16:0] tm764;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm765;
   wire signed [16:0] tm766;
   wire signed [16:0] tm767;
   wire signed [16:0] tm768;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t962;
   wire signed [15:0] t963;
   wire signed [15:0] t964;
   wire signed [15:0] t965;
   wire signed [15:0] t966;
   wire signed [15:0] t967;
   wire signed [15:0] t968;
   wire signed [15:0] t969;
   wire signed [15:0] t970;
   wire signed [15:0] t971;
   wire signed [15:0] t972;
   wire signed [15:0] t973;
   wire signed [15:0] t974;
   wire signed [15:0] t975;
   wire signed [15:0] t976;
   wire signed [15:0] t977;


   assign a1786 = X0;
   assign a1787 = X4;
   assign a1788 = X1;
   assign a1789 = X5;
   assign a1794 = X2;
   assign a1795 = X7;
   assign a1796 = X3;
   assign a1797 = X6;
   assign a1802 = X8;
   assign a1803 = X12;
   assign a1804 = X9;
   assign a1805 = X13;
   assign a1810 = X10;
   assign a1811 = X15;
   assign a1812 = X11;
   assign a1813 = X14;
   assign Y0 = t962;
   assign Y1 = t963;
   assign Y2 = t964;
   assign Y3 = t965;
   assign Y4 = t966;
   assign Y5 = t967;
   assign Y6 = t968;
   assign Y7 = t969;
   assign Y8 = t970;
   assign Y9 = t971;
   assign Y10 = t972;
   assign Y11 = t973;
   assign Y12 = t974;
   assign Y13 = t975;
   assign Y14 = t976;
   assign Y15 = t977;
   assign t962 = tm753[16:1];
   assign t963 = tm754[16:1];
   assign t964 = tm755[16:1];
   assign t965 = tm756[16:1];
   assign t966 = tm757[16:1];
   assign t967 = tm758[16:1];
   assign t968 = tm759[16:1];
   assign t969 = tm760[16:1];
   assign t970 = tm761[16:1];
   assign t971 = tm762[16:1];
   assign t972 = tm763[16:1];
   assign t973 = tm764[16:1];
   assign t974 = tm765[16:1];
   assign t975 = tm766[16:1];
   assign t976 = tm767[16:1];
   assign t977 = tm768[16:1];

    addfxp #(17, 1) add73172(.a({{1{a1786[15]}}, a1786}), .b({{1{a1787[15]}}, a1787}), .clk(clk), .q(tm753));    // 0
    addfxp #(17, 1) add73187(.a({{1{a1788[15]}}, a1788}), .b({{1{a1789[15]}}, a1789}), .clk(clk), .q(tm754));    // 0
    subfxp #(17, 1) sub73202(.a({{1{a1786[15]}}, a1786}), .b({{1{a1787[15]}}, a1787}), .clk(clk), .q(tm755));    // 0
    subfxp #(17, 1) sub73217(.a({{1{a1788[15]}}, a1788}), .b({{1{a1789[15]}}, a1789}), .clk(clk), .q(tm756));    // 0
    addfxp #(17, 1) add73248(.a({{1{a1794[15]}}, a1794}), .b({{1{a1795[15]}}, a1795}), .clk(clk), .q(tm757));    // 0
    subfxp #(17, 1) sub73263(.a({{1{a1796[15]}}, a1796}), .b({{1{a1797[15]}}, a1797}), .clk(clk), .q(tm758));    // 0
    subfxp #(17, 1) sub73278(.a({{1{a1794[15]}}, a1794}), .b({{1{a1795[15]}}, a1795}), .clk(clk), .q(tm759));    // 0
    addfxp #(17, 1) add73293(.a({{1{a1796[15]}}, a1796}), .b({{1{a1797[15]}}, a1797}), .clk(clk), .q(tm760));    // 0
    addfxp #(17, 1) add73324(.a({{1{a1802[15]}}, a1802}), .b({{1{a1803[15]}}, a1803}), .clk(clk), .q(tm761));    // 0
    addfxp #(17, 1) add73339(.a({{1{a1804[15]}}, a1804}), .b({{1{a1805[15]}}, a1805}), .clk(clk), .q(tm762));    // 0
    subfxp #(17, 1) sub73354(.a({{1{a1802[15]}}, a1802}), .b({{1{a1803[15]}}, a1803}), .clk(clk), .q(tm763));    // 0
    subfxp #(17, 1) sub73369(.a({{1{a1804[15]}}, a1804}), .b({{1{a1805[15]}}, a1805}), .clk(clk), .q(tm764));    // 0
    addfxp #(17, 1) add73400(.a({{1{a1810[15]}}, a1810}), .b({{1{a1811[15]}}, a1811}), .clk(clk), .q(tm765));    // 0
    subfxp #(17, 1) sub73415(.a({{1{a1812[15]}}, a1812}), .b({{1{a1813[15]}}, a1813}), .clk(clk), .q(tm766));    // 0
    subfxp #(17, 1) sub73430(.a({{1{a1810[15]}}, a1810}), .b({{1{a1811[15]}}, a1811}), .clk(clk), .q(tm767));    // 0
    addfxp #(17, 1) add73445(.a({{1{a1812[15]}}, a1812}), .b({{1{a1813[15]}}, a1813}), .clk(clk), .q(tm768));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 5
// Gap: 1
module codeBlock73467(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(4, 1) shiftFIFO_90316(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1726;
   wire signed [15:0] a1727;
   wire signed [15:0] a1728;
   wire signed [15:0] a1729;
   wire signed [15:0] a1734;
   wire signed [15:0] a1735;
   wire signed [15:0] a1736;
   wire signed [15:0] a1737;
   wire signed [15:0] a1740;
   wire signed [15:0] a1741;
   wire signed [15:0] a1742;
   wire signed [15:0] a1743;
   wire signed [15:0] a1748;
   wire signed [15:0] a1749;
   wire signed [15:0] a1750;
   wire signed [15:0] a1751;
   wire signed [16:0] tm769;
   wire signed [16:0] tm770;
   wire signed [16:0] tm771;
   wire signed [16:0] tm772;
   wire signed [16:0] tm777;
   wire signed [16:0] tm778;
   wire signed [16:0] tm779;
   wire signed [16:0] tm780;
   wire signed [15:0] t838;
   wire signed [15:0] t839;
   wire signed [15:0] t840;
   wire signed [15:0] t841;
   wire signed [15:0] t848;
   wire signed [15:0] t849;
   wire signed [15:0] t850;
   wire signed [15:0] t851;
   reg signed [15:0] tm897;
   reg signed [15:0] tm900;
   reg signed [15:0] tm909;
   reg signed [15:0] tm912;
   wire signed [15:0] a1722;
   wire signed [15:0] a1723;
   wire signed [15:0] a1724;
   wire signed [15:0] a1725;
   reg signed [15:0] tm898;
   reg signed [15:0] tm901;
   reg signed [15:0] tm910;
   reg signed [15:0] tm913;
   reg signed [15:0] tm921;
   reg signed [15:0] tm924;
   reg signed [15:0] tm927;
   reg signed [15:0] tm930;
   reg signed [15:0] tm933;
   reg signed [15:0] tm936;
   reg signed [15:0] tm939;
   reg signed [15:0] tm942;
   wire signed [15:0] t842;
   wire signed [15:0] t843;
   wire signed [15:0] t852;
   wire signed [15:0] t853;
   reg signed [15:0] tm899;
   reg signed [15:0] tm902;
   reg signed [15:0] tm911;
   reg signed [15:0] tm914;
   reg signed [15:0] tm922;
   reg signed [15:0] tm925;
   reg signed [15:0] tm928;
   reg signed [15:0] tm931;
   reg signed [15:0] tm934;
   reg signed [15:0] tm937;
   reg signed [15:0] tm940;
   reg signed [15:0] tm943;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm773;
   wire signed [16:0] tm774;
   wire signed [16:0] tm775;
   wire signed [16:0] tm776;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm781;
   wire signed [16:0] tm782;
   wire signed [16:0] tm783;
   wire signed [16:0] tm784;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t844;
   wire signed [15:0] t845;
   wire signed [15:0] t846;
   wire signed [15:0] t847;
   wire signed [15:0] t854;
   wire signed [15:0] t855;
   wire signed [15:0] t856;
   wire signed [15:0] t857;
   reg signed [15:0] tm923;
   reg signed [15:0] tm926;
   reg signed [15:0] tm929;
   reg signed [15:0] tm932;
   reg signed [15:0] tm935;
   reg signed [15:0] tm938;
   reg signed [15:0] tm941;
   reg signed [15:0] tm944;

   wire signed [15:0] tm0;
   assign tm0 = 16'h2d41;

   assign a1726 = X0;
   assign a1727 = X8;
   assign a1728 = X1;
   assign a1729 = X9;
   assign a1734 = X12;
   assign a1735 = X13;
   assign a1736 = X4;
   assign a1737 = X5;
   assign a1740 = X2;
   assign a1741 = X11;
   assign a1742 = X3;
   assign a1743 = X10;
   assign a1748 = X15;
   assign a1749 = X14;
   assign a1750 = X6;
   assign a1751 = X7;
   assign t838 = tm769[16:1];
   assign t839 = tm770[16:1];
   assign t840 = tm771[16:1];
   assign t841 = tm772[16:1];
   assign t848 = tm777[16:1];
   assign t849 = tm778[16:1];
   assign t850 = tm779[16:1];
   assign t851 = tm780[16:1];
   assign Y0 = tm923;
   assign Y1 = tm926;
   assign Y2 = tm929;
   assign Y3 = tm932;
   assign Y4 = t844;
   assign Y5 = t845;
   assign Y6 = t846;
   assign Y7 = t847;
   assign Y8 = tm935;
   assign Y9 = tm938;
   assign Y10 = tm941;
   assign Y11 = tm944;
   assign Y12 = t854;
   assign Y13 = t855;
   assign Y14 = t856;
   assign Y15 = t857;
   assign t844 = tm773[16:1];
   assign t845 = tm774[16:1];
   assign t846 = tm775[16:1];
   assign t847 = tm776[16:1];
   assign t854 = tm781[16:1];
   assign t855 = tm782[16:1];
   assign t856 = tm783[16:1];
   assign t857 = tm784[16:1];

    addfxp #(17, 1) add73479(.a({{1{a1726[15]}}, a1726}), .b({{1{a1727[15]}}, a1727}), .clk(clk), .q(tm769));    // 0
    addfxp #(17, 1) add73494(.a({{1{a1728[15]}}, a1728}), .b({{1{a1729[15]}}, a1729}), .clk(clk), .q(tm770));    // 0
    subfxp #(17, 1) sub73509(.a({{1{a1726[15]}}, a1726}), .b({{1{a1727[15]}}, a1727}), .clk(clk), .q(tm771));    // 0
    subfxp #(17, 1) sub73524(.a({{1{a1728[15]}}, a1728}), .b({{1{a1729[15]}}, a1729}), .clk(clk), .q(tm772));    // 0
    addfxp #(17, 1) add73651(.a({{1{a1740[15]}}, a1740}), .b({{1{a1741[15]}}, a1741}), .clk(clk), .q(tm777));    // 0
    subfxp #(17, 1) sub73666(.a({{1{a1742[15]}}, a1742}), .b({{1{a1743[15]}}, a1743}), .clk(clk), .q(tm778));    // 0
    subfxp #(17, 1) sub73681(.a({{1{a1740[15]}}, a1740}), .b({{1{a1741[15]}}, a1741}), .clk(clk), .q(tm779));    // 0
    addfxp #(17, 1) add73696(.a({{1{a1742[15]}}, a1742}), .b({{1{a1743[15]}}, a1743}), .clk(clk), .q(tm780));    // 0
    multfix #(16, 2) m73551(.a(tm0), .b(a1734), .clk(clk), .q_sc(a1722), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73562(.a(tm0), .b(a1735), .clk(clk), .q_sc(a1723), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73723(.a(tm0), .b(a1748), .clk(clk), .q_sc(a1724), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73734(.a(tm0), .b(a1749), .clk(clk), .q_sc(a1725), .q_unsc(), .rst(reset));
    addfxp #(16, 1) add73569(.a(a1722), .b(a1723), .clk(clk), .q(t842));    // 2
    subfxp #(16, 1) sub73576(.a(a1723), .b(a1722), .clk(clk), .q(t843));    // 2
    subfxp #(16, 1) sub73741(.a(a1724), .b(a1725), .clk(clk), .q(t852));    // 2
    addfxp #(16, 1) add73748(.a(a1725), .b(a1724), .clk(clk), .q(t853));    // 2
    addfxp #(17, 1) add73587(.a({{1{tm899[15]}}, tm899}), .b({{1{t842[15]}}, t842}), .clk(clk), .q(tm773));    // 3
    addfxp #(17, 1) add73598(.a({{1{tm902[15]}}, tm902}), .b({{1{t843[15]}}, t843}), .clk(clk), .q(tm774));    // 3
    subfxp #(17, 1) sub73609(.a({{1{tm899[15]}}, tm899}), .b({{1{t842[15]}}, t842}), .clk(clk), .q(tm775));    // 3
    subfxp #(17, 1) sub73620(.a({{1{tm902[15]}}, tm902}), .b({{1{t843[15]}}, t843}), .clk(clk), .q(tm776));    // 3
    addfxp #(17, 1) add73759(.a({{1{tm911[15]}}, tm911}), .b({{1{t852[15]}}, t852}), .clk(clk), .q(tm781));    // 3
    subfxp #(17, 1) sub73770(.a({{1{tm914[15]}}, tm914}), .b({{1{t853[15]}}, t853}), .clk(clk), .q(tm782));    // 3
    subfxp #(17, 1) sub73781(.a({{1{tm911[15]}}, tm911}), .b({{1{t852[15]}}, t852}), .clk(clk), .q(tm783));    // 3
    addfxp #(17, 1) add73792(.a({{1{tm914[15]}}, tm914}), .b({{1{t853[15]}}, t853}), .clk(clk), .q(tm784));    // 3


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm897 <= a1736;
         tm900 <= a1737;
         tm909 <= a1750;
         tm912 <= a1751;
         tm898 <= tm897;
         tm901 <= tm900;
         tm910 <= tm909;
         tm913 <= tm912;
         tm921 <= t838;
         tm924 <= t839;
         tm927 <= t840;
         tm930 <= t841;
         tm933 <= t848;
         tm936 <= t849;
         tm939 <= t850;
         tm942 <= t851;
         tm899 <= tm898;
         tm902 <= tm901;
         tm911 <= tm910;
         tm914 <= tm913;
         tm922 <= tm921;
         tm925 <= tm924;
         tm928 <= tm927;
         tm931 <= tm930;
         tm934 <= tm933;
         tm937 <= tm936;
         tm940 <= tm939;
         tm943 <= tm942;
         tm923 <= tm922;
         tm926 <= tm925;
         tm929 <= tm928;
         tm932 <= tm931;
         tm935 <= tm934;
         tm938 <= tm937;
         tm941 <= tm940;
         tm944 <= tm943;
      end
   end
endmodule

// Latency: 4
// Gap: 2
module rc73816(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm73814 instPerm90317(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm73814(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[0];
   assign outBank0[0] = addr0b[3] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outBank_a0[0] = addr0c[3] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[0];
   assign outBank1[0] = addr1b[3] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outBank_a1[0] = addr1c[3] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];

   assign inBank2[0] = addr2[3] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[0];
   assign outBank2[0] = addr2b[3] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outBank_a2[0] = addr2c[3] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];

   assign inBank3[0] = addr3[3] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[0];
   assign outBank3[0] = addr3b[3] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outBank_a3[0] = addr3c[3] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];

   assign inBank4[0] = addr4[3] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[0];
   assign outBank4[0] = addr4b[3] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outBank_a4[0] = addr4c[3] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];

   assign inBank5[0] = addr5[3] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[0];
   assign outBank5[0] = addr5b[3] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outBank_a5[0] = addr5c[3] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];

   assign inBank6[0] = addr6[3] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[0];
   assign outBank6[0] = addr6b[3] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outBank_a6[0] = addr6c[3] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];

   assign inBank7[0] = addr7[3] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[0];
   assign outBank7[0] = addr7b[3] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outBank_a7[0] = addr7c[3] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];

   shiftRegFIFO #(2, 1) shiftFIFO_90320(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90323(.X(next0), .Y(next_out), .clk(clk));


   memArray16_73814 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_73814(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(2, 1) shiftFIFO_90326(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 2
module DirSum_74525(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [0:0] i7;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i7 <= 0;
      end
      else begin
         if (next == 1)
            i7 <= 0;
         else if (i7 == 1)
            i7 <= 0;
         else
            i7 <= i7 + 1;
      end
   end

   codeBlock73819 codeBlockIsnt90327(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i7_in(i7),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D106_74463(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D100_74475(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D108_74479(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D98_74491(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D102_74503(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h2d41;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D112_74511(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hc4df;
      1: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D104_74523(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h187e;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock73819(clk, reset, next_in, next_out,
   i7_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i7_in;
   reg [0:0] i7;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90330(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1634;
   reg signed [15:0] tm15;
   reg signed [15:0] tm137;
   wire signed [15:0] a1650;
   wire signed [15:0] a1603;
   wire signed [15:0] a1653;
   wire signed [15:0] a1607;
   wire signed [15:0] a1654;
   wire signed [15:0] a1655;
   wire signed [15:0] a1658;
   wire signed [15:0] a1615;
   wire signed [15:0] a1661;
   wire signed [15:0] a1619;
   wire signed [15:0] a1662;
   wire signed [15:0] a1663;
   wire signed [15:0] a1666;
   wire signed [15:0] a1627;
   wire signed [15:0] a1669;
   wire signed [15:0] a1631;
   wire signed [15:0] a1670;
   wire signed [15:0] a1671;
   wire signed [15:0] a1674;
   wire signed [15:0] a1639;
   wire signed [15:0] a1677;
   wire signed [15:0] a1643;
   wire signed [15:0] a1678;
   wire signed [15:0] a1679;
   reg signed [15:0] tm945;
   reg signed [15:0] tm949;
   reg signed [15:0] tm961;
   reg signed [15:0] tm965;
   reg signed [15:0] tm977;
   reg signed [15:0] tm985;
   reg signed [15:0] tm993;
   reg signed [15:0] tm997;
   reg signed [15:0] tm1009;
   reg signed [15:0] tm1016;
   reg signed [15:0] tm1023;
   reg signed [15:0] tm1030;
   reg signed [15:0] tm1037;
   reg signed [15:0] tm1044;
   reg signed [15:0] tm1051;
   reg signed [15:0] tm1058;
   wire signed [15:0] a1635;
   wire signed [15:0] a1636;
   reg signed [15:0] tm946;
   reg signed [15:0] tm950;
   reg signed [15:0] tm962;
   reg signed [15:0] tm966;
   reg signed [15:0] tm978;
   reg signed [15:0] tm986;
   reg signed [15:0] tm994;
   reg signed [15:0] tm998;
   reg signed [15:0] tm1010;
   reg signed [15:0] tm1017;
   reg signed [15:0] tm1024;
   reg signed [15:0] tm1031;
   reg signed [15:0] tm1038;
   reg signed [15:0] tm1045;
   reg signed [15:0] tm1052;
   reg signed [15:0] tm1059;
   wire signed [15:0] tm6;
   wire signed [15:0] a1608;
   wire signed [15:0] tm7;
   wire signed [15:0] a1610;
   wire signed [15:0] tm10;
   wire signed [15:0] a1620;
   wire signed [15:0] tm11;
   wire signed [15:0] a1622;
   wire signed [15:0] tm14;
   wire signed [15:0] a1632;
   wire signed [15:0] tm18;
   wire signed [15:0] a1644;
   wire signed [15:0] tm19;
   wire signed [15:0] a1646;
   reg signed [15:0] tm947;
   reg signed [15:0] tm951;
   reg signed [15:0] tm963;
   reg signed [15:0] tm967;
   reg signed [15:0] tm979;
   reg signed [15:0] tm981;
   reg signed [15:0] tm987;
   reg signed [15:0] tm989;
   reg signed [15:0] tm995;
   reg signed [15:0] tm999;
   reg signed [15:0] tm1011;
   reg signed [15:0] tm1018;
   reg signed [15:0] tm1025;
   reg signed [15:0] tm1032;
   reg signed [15:0] tm1039;
   reg signed [15:0] tm1046;
   reg signed [15:0] tm1053;
   reg signed [15:0] tm1060;
   reg signed [15:0] tm120;
   reg signed [15:0] tm121;
   reg signed [15:0] tm128;
   reg signed [15:0] tm129;
   reg signed [15:0] tm136;
   reg signed [15:0] tm144;
   reg signed [15:0] tm145;
   reg signed [15:0] tm948;
   reg signed [15:0] tm952;
   reg signed [15:0] tm964;
   reg signed [15:0] tm968;
   reg signed [15:0] tm980;
   reg signed [15:0] tm982;
   reg signed [15:0] tm988;
   reg signed [15:0] tm990;
   reg signed [15:0] tm996;
   reg signed [15:0] tm1000;
   reg signed [15:0] tm1012;
   reg signed [15:0] tm1019;
   reg signed [15:0] tm1026;
   reg signed [15:0] tm1033;
   reg signed [15:0] tm1040;
   reg signed [15:0] tm1047;
   reg signed [15:0] tm1054;
   reg signed [15:0] tm1061;
   reg signed [15:0] tm983;
   reg signed [15:0] tm991;
   reg signed [15:0] tm1013;
   reg signed [15:0] tm1020;
   reg signed [15:0] tm1027;
   reg signed [15:0] tm1034;
   reg signed [15:0] tm1041;
   reg signed [15:0] tm1048;
   reg signed [15:0] tm1055;
   reg signed [15:0] tm1062;
   wire signed [15:0] a1609;
   wire signed [15:0] a1611;
   wire signed [15:0] a1612;
   wire signed [15:0] a1613;
   wire signed [15:0] a1621;
   wire signed [15:0] a1623;
   wire signed [15:0] a1624;
   wire signed [15:0] a1625;
   wire signed [15:0] a1633;
   wire signed [15:0] a1637;
   wire signed [15:0] a1645;
   wire signed [15:0] a1647;
   wire signed [15:0] a1648;
   wire signed [15:0] a1649;
   reg signed [15:0] tm984;
   reg signed [15:0] tm992;
   reg signed [15:0] tm1014;
   reg signed [15:0] tm1021;
   reg signed [15:0] tm1028;
   reg signed [15:0] tm1035;
   reg signed [15:0] tm1042;
   reg signed [15:0] tm1049;
   reg signed [15:0] tm1056;
   reg signed [15:0] tm1063;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1015;
   reg signed [15:0] tm1022;
   reg signed [15:0] tm1029;
   reg signed [15:0] tm1036;
   reg signed [15:0] tm1043;
   reg signed [15:0] tm1050;
   reg signed [15:0] tm1057;
   reg signed [15:0] tm1064;

   wire signed [15:0] tm382;
   assign tm382 = 16'hd2bf;

   assign a1634 = tm15;
   assign a1650 = X0;
   assign a1603 = a1650;
   assign a1653 = X1;
   assign a1607 = a1653;
   assign a1654 = X2;
   assign a1655 = X3;
   assign a1658 = X4;
   assign a1615 = a1658;
   assign a1661 = X5;
   assign a1619 = a1661;
   assign a1662 = X6;
   assign a1663 = X7;
   assign a1666 = X8;
   assign a1627 = a1666;
   assign a1669 = X9;
   assign a1631 = a1669;
   assign a1670 = X10;
   assign a1671 = X11;
   assign a1674 = X12;
   assign a1639 = a1674;
   assign a1677 = X13;
   assign a1643 = a1677;
   assign a1678 = X14;
   assign a1679 = X15;
   assign a1608 = tm6;
   assign a1610 = tm7;
   assign a1620 = tm10;
   assign a1622 = tm11;
   assign a1632 = tm14;
   assign a1644 = tm18;
   assign a1646 = tm19;
   assign Y0 = tm1015;
   assign Y1 = tm1022;
   assign Y4 = tm1029;
   assign Y5 = tm1036;
   assign Y8 = tm1043;
   assign Y9 = tm1050;
   assign Y12 = tm1057;
   assign Y13 = tm1064;

   D106_74463 instD106inst0_74463(.addr(i7[0:0]), .out(tm7), .clk(clk));

   D100_74475 instD100inst0_74475(.addr(i7[0:0]), .out(tm10), .clk(clk));

   D108_74479 instD108inst0_74479(.addr(i7[0:0]), .out(tm11), .clk(clk));

   D98_74491 instD98inst0_74491(.addr(i7[0:0]), .out(tm6), .clk(clk));

   D102_74503 instD102inst0_74503(.addr(i7[0:0]), .out(tm14), .clk(clk));

   D112_74511 instD112inst0_74511(.addr(i7[0:0]), .out(tm19), .clk(clk));

   D104_74523 instD104inst0_74523(.addr(i7[0:0]), .out(tm18), .clk(clk));

    multfix #(16, 2) m74260(.a(tm137), .b(a1671), .clk(clk), .q_sc(a1635), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74278(.a(tm137), .b(a1670), .clk(clk), .q_sc(a1636), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73918(.a(tm120), .b(tm948), .clk(clk), .q_sc(a1609), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73940(.a(tm121), .b(tm952), .clk(clk), .q_sc(a1611), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73958(.a(tm121), .b(tm948), .clk(clk), .q_sc(a1612), .q_unsc(), .rst(reset));
    multfix #(16, 2) m73969(.a(tm120), .b(tm952), .clk(clk), .q_sc(a1613), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74078(.a(tm128), .b(tm964), .clk(clk), .q_sc(a1621), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74100(.a(tm129), .b(tm968), .clk(clk), .q_sc(a1623), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74118(.a(tm129), .b(tm964), .clk(clk), .q_sc(a1624), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74129(.a(tm128), .b(tm968), .clk(clk), .q_sc(a1625), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74238(.a(tm136), .b(tm980), .clk(clk), .q_sc(a1633), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74289(.a(tm136), .b(tm988), .clk(clk), .q_sc(a1637), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74398(.a(tm144), .b(tm996), .clk(clk), .q_sc(a1645), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74420(.a(tm145), .b(tm1000), .clk(clk), .q_sc(a1647), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74438(.a(tm145), .b(tm996), .clk(clk), .q_sc(a1648), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74449(.a(tm144), .b(tm1000), .clk(clk), .q_sc(a1649), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub73947(.a(a1609), .b(a1611), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add73976(.a(a1612), .b(a1613), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub74107(.a(a1621), .b(a1623), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add74136(.a(a1624), .b(a1625), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub74267(.a(a1633), .b(tm984), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add74296(.a(tm992), .b(a1637), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub74427(.a(a1645), .b(a1647), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add74456(.a(a1648), .b(a1649), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm137 <= 0;
         tm137 <= 0;
         tm120 <= 0;
         tm948 <= 0;
         tm121 <= 0;
         tm952 <= 0;
         tm121 <= 0;
         tm948 <= 0;
         tm120 <= 0;
         tm952 <= 0;
         tm128 <= 0;
         tm964 <= 0;
         tm129 <= 0;
         tm968 <= 0;
         tm129 <= 0;
         tm964 <= 0;
         tm128 <= 0;
         tm968 <= 0;
         tm136 <= 0;
         tm980 <= 0;
         tm136 <= 0;
         tm988 <= 0;
         tm144 <= 0;
         tm996 <= 0;
         tm145 <= 0;
         tm1000 <= 0;
         tm145 <= 0;
         tm996 <= 0;
         tm144 <= 0;
         tm1000 <= 0;
      end
      else begin
         i7 <= i7_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm15 <= tm382;
         tm137 <= a1634;
         tm945 <= a1654;
         tm949 <= a1655;
         tm961 <= a1662;
         tm965 <= a1663;
         tm977 <= a1670;
         tm985 <= a1671;
         tm993 <= a1678;
         tm997 <= a1679;
         tm1009 <= a1603;
         tm1016 <= a1607;
         tm1023 <= a1615;
         tm1030 <= a1619;
         tm1037 <= a1627;
         tm1044 <= a1631;
         tm1051 <= a1639;
         tm1058 <= a1643;
         tm946 <= tm945;
         tm950 <= tm949;
         tm962 <= tm961;
         tm966 <= tm965;
         tm978 <= tm977;
         tm986 <= tm985;
         tm994 <= tm993;
         tm998 <= tm997;
         tm1010 <= tm1009;
         tm1017 <= tm1016;
         tm1024 <= tm1023;
         tm1031 <= tm1030;
         tm1038 <= tm1037;
         tm1045 <= tm1044;
         tm1052 <= tm1051;
         tm1059 <= tm1058;
         tm947 <= tm946;
         tm951 <= tm950;
         tm963 <= tm962;
         tm967 <= tm966;
         tm979 <= tm978;
         tm981 <= a1635;
         tm987 <= tm986;
         tm989 <= a1636;
         tm995 <= tm994;
         tm999 <= tm998;
         tm1011 <= tm1010;
         tm1018 <= tm1017;
         tm1025 <= tm1024;
         tm1032 <= tm1031;
         tm1039 <= tm1038;
         tm1046 <= tm1045;
         tm1053 <= tm1052;
         tm1060 <= tm1059;
         tm120 <= a1608;
         tm121 <= a1610;
         tm128 <= a1620;
         tm129 <= a1622;
         tm136 <= a1632;
         tm144 <= a1644;
         tm145 <= a1646;
         tm948 <= tm947;
         tm952 <= tm951;
         tm964 <= tm963;
         tm968 <= tm967;
         tm980 <= tm979;
         tm982 <= tm981;
         tm988 <= tm987;
         tm990 <= tm989;
         tm996 <= tm995;
         tm1000 <= tm999;
         tm1012 <= tm1011;
         tm1019 <= tm1018;
         tm1026 <= tm1025;
         tm1033 <= tm1032;
         tm1040 <= tm1039;
         tm1047 <= tm1046;
         tm1054 <= tm1053;
         tm1061 <= tm1060;
         tm983 <= tm982;
         tm991 <= tm990;
         tm1013 <= tm1012;
         tm1020 <= tm1019;
         tm1027 <= tm1026;
         tm1034 <= tm1033;
         tm1041 <= tm1040;
         tm1048 <= tm1047;
         tm1055 <= tm1054;
         tm1062 <= tm1061;
         tm984 <= tm983;
         tm992 <= tm991;
         tm1014 <= tm1013;
         tm1021 <= tm1020;
         tm1028 <= tm1027;
         tm1035 <= tm1034;
         tm1042 <= tm1041;
         tm1049 <= tm1048;
         tm1056 <= tm1055;
         tm1063 <= tm1062;
         tm1015 <= tm1014;
         tm1022 <= tm1021;
         tm1029 <= tm1028;
         tm1036 <= tm1035;
         tm1043 <= tm1042;
         tm1050 <= tm1049;
         tm1057 <= tm1056;
         tm1064 <= tm1063;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock74528(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90333(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1474;
   wire signed [15:0] a1475;
   wire signed [15:0] a1476;
   wire signed [15:0] a1477;
   wire signed [15:0] a1482;
   wire signed [15:0] a1483;
   wire signed [15:0] a1484;
   wire signed [15:0] a1485;
   wire signed [15:0] a1490;
   wire signed [15:0] a1491;
   wire signed [15:0] a1492;
   wire signed [15:0] a1493;
   wire signed [15:0] a1498;
   wire signed [15:0] a1499;
   wire signed [15:0] a1500;
   wire signed [15:0] a1501;
   wire signed [16:0] tm785;
   wire signed [16:0] tm786;
   wire signed [16:0] tm787;
   wire signed [16:0] tm788;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm789;
   wire signed [16:0] tm790;
   wire signed [16:0] tm791;
   wire signed [16:0] tm792;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm793;
   wire signed [16:0] tm794;
   wire signed [16:0] tm795;
   wire signed [16:0] tm796;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm797;
   wire signed [16:0] tm798;
   wire signed [16:0] tm799;
   wire signed [16:0] tm800;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t714;
   wire signed [15:0] t715;
   wire signed [15:0] t716;
   wire signed [15:0] t717;
   wire signed [15:0] t718;
   wire signed [15:0] t719;
   wire signed [15:0] t720;
   wire signed [15:0] t721;
   wire signed [15:0] t722;
   wire signed [15:0] t723;
   wire signed [15:0] t724;
   wire signed [15:0] t725;
   wire signed [15:0] t726;
   wire signed [15:0] t727;
   wire signed [15:0] t728;
   wire signed [15:0] t729;


   assign a1474 = X0;
   assign a1475 = X2;
   assign a1476 = X1;
   assign a1477 = X3;
   assign a1482 = X4;
   assign a1483 = X6;
   assign a1484 = X5;
   assign a1485 = X7;
   assign a1490 = X8;
   assign a1491 = X10;
   assign a1492 = X9;
   assign a1493 = X11;
   assign a1498 = X12;
   assign a1499 = X14;
   assign a1500 = X13;
   assign a1501 = X15;
   assign Y0 = t714;
   assign Y1 = t715;
   assign Y2 = t716;
   assign Y3 = t717;
   assign Y4 = t718;
   assign Y5 = t719;
   assign Y6 = t720;
   assign Y7 = t721;
   assign Y8 = t722;
   assign Y9 = t723;
   assign Y10 = t724;
   assign Y11 = t725;
   assign Y12 = t726;
   assign Y13 = t727;
   assign Y14 = t728;
   assign Y15 = t729;
   assign t714 = tm785[16:1];
   assign t715 = tm786[16:1];
   assign t716 = tm787[16:1];
   assign t717 = tm788[16:1];
   assign t718 = tm789[16:1];
   assign t719 = tm790[16:1];
   assign t720 = tm791[16:1];
   assign t721 = tm792[16:1];
   assign t722 = tm793[16:1];
   assign t723 = tm794[16:1];
   assign t724 = tm795[16:1];
   assign t725 = tm796[16:1];
   assign t726 = tm797[16:1];
   assign t727 = tm798[16:1];
   assign t728 = tm799[16:1];
   assign t729 = tm800[16:1];

    addfxp #(17, 1) add74540(.a({{1{a1474[15]}}, a1474}), .b({{1{a1475[15]}}, a1475}), .clk(clk), .q(tm785));    // 0
    addfxp #(17, 1) add74555(.a({{1{a1476[15]}}, a1476}), .b({{1{a1477[15]}}, a1477}), .clk(clk), .q(tm786));    // 0
    subfxp #(17, 1) sub74570(.a({{1{a1474[15]}}, a1474}), .b({{1{a1475[15]}}, a1475}), .clk(clk), .q(tm787));    // 0
    subfxp #(17, 1) sub74585(.a({{1{a1476[15]}}, a1476}), .b({{1{a1477[15]}}, a1477}), .clk(clk), .q(tm788));    // 0
    addfxp #(17, 1) add74616(.a({{1{a1482[15]}}, a1482}), .b({{1{a1483[15]}}, a1483}), .clk(clk), .q(tm789));    // 0
    addfxp #(17, 1) add74631(.a({{1{a1484[15]}}, a1484}), .b({{1{a1485[15]}}, a1485}), .clk(clk), .q(tm790));    // 0
    subfxp #(17, 1) sub74646(.a({{1{a1482[15]}}, a1482}), .b({{1{a1483[15]}}, a1483}), .clk(clk), .q(tm791));    // 0
    subfxp #(17, 1) sub74661(.a({{1{a1484[15]}}, a1484}), .b({{1{a1485[15]}}, a1485}), .clk(clk), .q(tm792));    // 0
    addfxp #(17, 1) add74692(.a({{1{a1490[15]}}, a1490}), .b({{1{a1491[15]}}, a1491}), .clk(clk), .q(tm793));    // 0
    addfxp #(17, 1) add74707(.a({{1{a1492[15]}}, a1492}), .b({{1{a1493[15]}}, a1493}), .clk(clk), .q(tm794));    // 0
    subfxp #(17, 1) sub74722(.a({{1{a1490[15]}}, a1490}), .b({{1{a1491[15]}}, a1491}), .clk(clk), .q(tm795));    // 0
    subfxp #(17, 1) sub74737(.a({{1{a1492[15]}}, a1492}), .b({{1{a1493[15]}}, a1493}), .clk(clk), .q(tm796));    // 0
    addfxp #(17, 1) add74768(.a({{1{a1498[15]}}, a1498}), .b({{1{a1499[15]}}, a1499}), .clk(clk), .q(tm797));    // 0
    addfxp #(17, 1) add74783(.a({{1{a1500[15]}}, a1500}), .b({{1{a1501[15]}}, a1501}), .clk(clk), .q(tm798));    // 0
    subfxp #(17, 1) sub74798(.a({{1{a1498[15]}}, a1498}), .b({{1{a1499[15]}}, a1499}), .clk(clk), .q(tm799));    // 0
    subfxp #(17, 1) sub74813(.a({{1{a1500[15]}}, a1500}), .b({{1{a1501[15]}}, a1501}), .clk(clk), .q(tm800));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 5
// Gap: 4
module rc74837(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm74835 instPerm90334(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 5
// Gap: 4
module perm74835(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 4;
   parameter logDepth = 2;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[4] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[0];
   assign outBank0[0] = addr0b[4] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outBank_a0[0] = addr0c[4] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];

   assign inBank1[0] = addr1[4] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[0];
   assign outBank1[0] = addr1b[4] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outBank_a1[0] = addr1c[4] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];

   assign inBank2[0] = addr2[4] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[0];
   assign outBank2[0] = addr2b[4] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outBank_a2[0] = addr2c[4] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];

   assign inBank3[0] = addr3[4] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[0];
   assign outBank3[0] = addr3b[4] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outBank_a3[0] = addr3c[4] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];

   assign inBank4[0] = addr4[4] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[0];
   assign outBank4[0] = addr4b[4] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outBank_a4[0] = addr4c[4] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];

   assign inBank5[0] = addr5[4] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[0];
   assign outBank5[0] = addr5b[4] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outBank_a5[0] = addr5c[4] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];

   assign inBank6[0] = addr6[4] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[0];
   assign outBank6[0] = addr6b[4] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outBank_a6[0] = addr6c[4] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];

   assign inBank7[0] = addr7[4] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[0];
   assign outBank7[0] = addr7b[4] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outBank_a7[0] = addr7c[4] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];

   shiftRegFIFO #(3, 1) shiftFIFO_90337(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90340(.X(next0), .Y(next_out), .clk(clk));


   memArray32_74835 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_4;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_4 <= 0;
        end
        else begin
            resetOutCountRd2_4 <= (inCount == 3) ? 1'b1 : 1'b0;
            if (resetOutCountRd2_4 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 2)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 2) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 3) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 2)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[1];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[1];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[1];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray32_74835(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 4;
   parameter logDepth = 2;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(4, 1) shiftFIFO_90343(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 4
module DirSum_75578(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [1:0] i6;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i6 <= 0;
      end
      else begin
         if (next == 1)
            i6 <= 0;
         else if (i6 == 3)
            i6 <= 0;
         else
            i6 <= i6 + 1;
      end
   end

   codeBlock74840 codeBlockIsnt90344(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i6_in(i6),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D96_75486(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hdc72;
      1: out3 <= 16'hc13b;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D94_75498(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      2: out3 <= 16'hc4df;
      3: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D92_75510(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hcac9;
      2: out3 <= 16'hc13b;
      3: out3 <= 16'hdc72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D90_75522(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      2: out3 <= 16'hc000;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D88_75534(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3537;
      1: out3 <= 16'hc7c;
      2: out3 <= 16'hdc72;
      3: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D86_75546(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'h187e;
      2: out3 <= 16'he782;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D84_75558(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h238e;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hcac9;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D82_75570(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      2: out3 <= 16'h0;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock74840(clk, reset, next_in, next_out,
   i6_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i6_in;
   reg [1:0] i6;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90347(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1410;
   wire signed [15:0] a1363;
   wire signed [15:0] a1413;
   wire signed [15:0] a1367;
   wire signed [15:0] a1414;
   wire signed [15:0] a1415;
   wire signed [15:0] a1418;
   wire signed [15:0] a1375;
   wire signed [15:0] a1421;
   wire signed [15:0] a1379;
   wire signed [15:0] a1422;
   wire signed [15:0] a1423;
   wire signed [15:0] a1426;
   wire signed [15:0] a1387;
   wire signed [15:0] a1429;
   wire signed [15:0] a1391;
   wire signed [15:0] a1430;
   wire signed [15:0] a1431;
   wire signed [15:0] a1434;
   wire signed [15:0] a1399;
   wire signed [15:0] a1437;
   wire signed [15:0] a1403;
   wire signed [15:0] a1438;
   wire signed [15:0] a1439;
   reg signed [15:0] tm1065;
   reg signed [15:0] tm1069;
   reg signed [15:0] tm1081;
   reg signed [15:0] tm1085;
   reg signed [15:0] tm1097;
   reg signed [15:0] tm1101;
   reg signed [15:0] tm1113;
   reg signed [15:0] tm1117;
   reg signed [15:0] tm1129;
   reg signed [15:0] tm1136;
   reg signed [15:0] tm1143;
   reg signed [15:0] tm1150;
   reg signed [15:0] tm1157;
   reg signed [15:0] tm1164;
   reg signed [15:0] tm1171;
   reg signed [15:0] tm1178;
   reg signed [15:0] tm1066;
   reg signed [15:0] tm1070;
   reg signed [15:0] tm1082;
   reg signed [15:0] tm1086;
   reg signed [15:0] tm1098;
   reg signed [15:0] tm1102;
   reg signed [15:0] tm1114;
   reg signed [15:0] tm1118;
   reg signed [15:0] tm1130;
   reg signed [15:0] tm1137;
   reg signed [15:0] tm1144;
   reg signed [15:0] tm1151;
   reg signed [15:0] tm1158;
   reg signed [15:0] tm1165;
   reg signed [15:0] tm1172;
   reg signed [15:0] tm1179;
   wire signed [15:0] tm22;
   wire signed [15:0] a1368;
   wire signed [15:0] tm23;
   wire signed [15:0] a1370;
   wire signed [15:0] tm26;
   wire signed [15:0] a1380;
   wire signed [15:0] tm27;
   wire signed [15:0] a1382;
   wire signed [15:0] tm30;
   wire signed [15:0] a1392;
   wire signed [15:0] tm31;
   wire signed [15:0] a1394;
   wire signed [15:0] tm34;
   wire signed [15:0] a1404;
   wire signed [15:0] tm35;
   wire signed [15:0] a1406;
   reg signed [15:0] tm1067;
   reg signed [15:0] tm1071;
   reg signed [15:0] tm1083;
   reg signed [15:0] tm1087;
   reg signed [15:0] tm1099;
   reg signed [15:0] tm1103;
   reg signed [15:0] tm1115;
   reg signed [15:0] tm1119;
   reg signed [15:0] tm1131;
   reg signed [15:0] tm1138;
   reg signed [15:0] tm1145;
   reg signed [15:0] tm1152;
   reg signed [15:0] tm1159;
   reg signed [15:0] tm1166;
   reg signed [15:0] tm1173;
   reg signed [15:0] tm1180;
   reg signed [15:0] tm152;
   reg signed [15:0] tm153;
   reg signed [15:0] tm160;
   reg signed [15:0] tm161;
   reg signed [15:0] tm168;
   reg signed [15:0] tm169;
   reg signed [15:0] tm176;
   reg signed [15:0] tm177;
   reg signed [15:0] tm1068;
   reg signed [15:0] tm1072;
   reg signed [15:0] tm1084;
   reg signed [15:0] tm1088;
   reg signed [15:0] tm1100;
   reg signed [15:0] tm1104;
   reg signed [15:0] tm1116;
   reg signed [15:0] tm1120;
   reg signed [15:0] tm1132;
   reg signed [15:0] tm1139;
   reg signed [15:0] tm1146;
   reg signed [15:0] tm1153;
   reg signed [15:0] tm1160;
   reg signed [15:0] tm1167;
   reg signed [15:0] tm1174;
   reg signed [15:0] tm1181;
   reg signed [15:0] tm1133;
   reg signed [15:0] tm1140;
   reg signed [15:0] tm1147;
   reg signed [15:0] tm1154;
   reg signed [15:0] tm1161;
   reg signed [15:0] tm1168;
   reg signed [15:0] tm1175;
   reg signed [15:0] tm1182;
   wire signed [15:0] a1369;
   wire signed [15:0] a1371;
   wire signed [15:0] a1372;
   wire signed [15:0] a1373;
   wire signed [15:0] a1381;
   wire signed [15:0] a1383;
   wire signed [15:0] a1384;
   wire signed [15:0] a1385;
   wire signed [15:0] a1393;
   wire signed [15:0] a1395;
   wire signed [15:0] a1396;
   wire signed [15:0] a1397;
   wire signed [15:0] a1405;
   wire signed [15:0] a1407;
   wire signed [15:0] a1408;
   wire signed [15:0] a1409;
   reg signed [15:0] tm1134;
   reg signed [15:0] tm1141;
   reg signed [15:0] tm1148;
   reg signed [15:0] tm1155;
   reg signed [15:0] tm1162;
   reg signed [15:0] tm1169;
   reg signed [15:0] tm1176;
   reg signed [15:0] tm1183;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1135;
   reg signed [15:0] tm1142;
   reg signed [15:0] tm1149;
   reg signed [15:0] tm1156;
   reg signed [15:0] tm1163;
   reg signed [15:0] tm1170;
   reg signed [15:0] tm1177;
   reg signed [15:0] tm1184;


   assign a1410 = X0;
   assign a1363 = a1410;
   assign a1413 = X1;
   assign a1367 = a1413;
   assign a1414 = X2;
   assign a1415 = X3;
   assign a1418 = X4;
   assign a1375 = a1418;
   assign a1421 = X5;
   assign a1379 = a1421;
   assign a1422 = X6;
   assign a1423 = X7;
   assign a1426 = X8;
   assign a1387 = a1426;
   assign a1429 = X9;
   assign a1391 = a1429;
   assign a1430 = X10;
   assign a1431 = X11;
   assign a1434 = X12;
   assign a1399 = a1434;
   assign a1437 = X13;
   assign a1403 = a1437;
   assign a1438 = X14;
   assign a1439 = X15;
   assign a1368 = tm22;
   assign a1370 = tm23;
   assign a1380 = tm26;
   assign a1382 = tm27;
   assign a1392 = tm30;
   assign a1394 = tm31;
   assign a1404 = tm34;
   assign a1406 = tm35;
   assign Y0 = tm1135;
   assign Y1 = tm1142;
   assign Y4 = tm1149;
   assign Y5 = tm1156;
   assign Y8 = tm1163;
   assign Y9 = tm1170;
   assign Y12 = tm1177;
   assign Y13 = tm1184;

   D96_75486 instD96inst0_75486(.addr(i6[1:0]), .out(tm35), .clk(clk));

   D94_75498 instD94inst0_75498(.addr(i6[1:0]), .out(tm31), .clk(clk));

   D92_75510 instD92inst0_75510(.addr(i6[1:0]), .out(tm27), .clk(clk));

   D90_75522 instD90inst0_75522(.addr(i6[1:0]), .out(tm23), .clk(clk));

   D88_75534 instD88inst0_75534(.addr(i6[1:0]), .out(tm34), .clk(clk));

   D86_75546 instD86inst0_75546(.addr(i6[1:0]), .out(tm30), .clk(clk));

   D84_75558 instD84inst0_75558(.addr(i6[1:0]), .out(tm26), .clk(clk));

   D82_75570 instD82inst0_75570(.addr(i6[1:0]), .out(tm22), .clk(clk));

    multfix #(16, 2) m74939(.a(tm152), .b(tm1068), .clk(clk), .q_sc(a1369), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74961(.a(tm153), .b(tm1072), .clk(clk), .q_sc(a1371), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74979(.a(tm153), .b(tm1068), .clk(clk), .q_sc(a1372), .q_unsc(), .rst(reset));
    multfix #(16, 2) m74990(.a(tm152), .b(tm1072), .clk(clk), .q_sc(a1373), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75099(.a(tm160), .b(tm1084), .clk(clk), .q_sc(a1381), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75121(.a(tm161), .b(tm1088), .clk(clk), .q_sc(a1383), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75139(.a(tm161), .b(tm1084), .clk(clk), .q_sc(a1384), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75150(.a(tm160), .b(tm1088), .clk(clk), .q_sc(a1385), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75259(.a(tm168), .b(tm1100), .clk(clk), .q_sc(a1393), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75281(.a(tm169), .b(tm1104), .clk(clk), .q_sc(a1395), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75299(.a(tm169), .b(tm1100), .clk(clk), .q_sc(a1396), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75310(.a(tm168), .b(tm1104), .clk(clk), .q_sc(a1397), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75419(.a(tm176), .b(tm1116), .clk(clk), .q_sc(a1405), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75441(.a(tm177), .b(tm1120), .clk(clk), .q_sc(a1407), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75459(.a(tm177), .b(tm1116), .clk(clk), .q_sc(a1408), .q_unsc(), .rst(reset));
    multfix #(16, 2) m75470(.a(tm176), .b(tm1120), .clk(clk), .q_sc(a1409), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub74968(.a(a1369), .b(a1371), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add74997(.a(a1372), .b(a1373), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub75128(.a(a1381), .b(a1383), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add75157(.a(a1384), .b(a1385), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub75288(.a(a1393), .b(a1395), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add75317(.a(a1396), .b(a1397), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub75448(.a(a1405), .b(a1407), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add75477(.a(a1408), .b(a1409), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm152 <= 0;
         tm1068 <= 0;
         tm153 <= 0;
         tm1072 <= 0;
         tm153 <= 0;
         tm1068 <= 0;
         tm152 <= 0;
         tm1072 <= 0;
         tm160 <= 0;
         tm1084 <= 0;
         tm161 <= 0;
         tm1088 <= 0;
         tm161 <= 0;
         tm1084 <= 0;
         tm160 <= 0;
         tm1088 <= 0;
         tm168 <= 0;
         tm1100 <= 0;
         tm169 <= 0;
         tm1104 <= 0;
         tm169 <= 0;
         tm1100 <= 0;
         tm168 <= 0;
         tm1104 <= 0;
         tm176 <= 0;
         tm1116 <= 0;
         tm177 <= 0;
         tm1120 <= 0;
         tm177 <= 0;
         tm1116 <= 0;
         tm176 <= 0;
         tm1120 <= 0;
      end
      else begin
         i6 <= i6_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1065 <= a1414;
         tm1069 <= a1415;
         tm1081 <= a1422;
         tm1085 <= a1423;
         tm1097 <= a1430;
         tm1101 <= a1431;
         tm1113 <= a1438;
         tm1117 <= a1439;
         tm1129 <= a1363;
         tm1136 <= a1367;
         tm1143 <= a1375;
         tm1150 <= a1379;
         tm1157 <= a1387;
         tm1164 <= a1391;
         tm1171 <= a1399;
         tm1178 <= a1403;
         tm1066 <= tm1065;
         tm1070 <= tm1069;
         tm1082 <= tm1081;
         tm1086 <= tm1085;
         tm1098 <= tm1097;
         tm1102 <= tm1101;
         tm1114 <= tm1113;
         tm1118 <= tm1117;
         tm1130 <= tm1129;
         tm1137 <= tm1136;
         tm1144 <= tm1143;
         tm1151 <= tm1150;
         tm1158 <= tm1157;
         tm1165 <= tm1164;
         tm1172 <= tm1171;
         tm1179 <= tm1178;
         tm1067 <= tm1066;
         tm1071 <= tm1070;
         tm1083 <= tm1082;
         tm1087 <= tm1086;
         tm1099 <= tm1098;
         tm1103 <= tm1102;
         tm1115 <= tm1114;
         tm1119 <= tm1118;
         tm1131 <= tm1130;
         tm1138 <= tm1137;
         tm1145 <= tm1144;
         tm1152 <= tm1151;
         tm1159 <= tm1158;
         tm1166 <= tm1165;
         tm1173 <= tm1172;
         tm1180 <= tm1179;
         tm152 <= a1368;
         tm153 <= a1370;
         tm160 <= a1380;
         tm161 <= a1382;
         tm168 <= a1392;
         tm169 <= a1394;
         tm176 <= a1404;
         tm177 <= a1406;
         tm1068 <= tm1067;
         tm1072 <= tm1071;
         tm1084 <= tm1083;
         tm1088 <= tm1087;
         tm1100 <= tm1099;
         tm1104 <= tm1103;
         tm1116 <= tm1115;
         tm1120 <= tm1119;
         tm1132 <= tm1131;
         tm1139 <= tm1138;
         tm1146 <= tm1145;
         tm1153 <= tm1152;
         tm1160 <= tm1159;
         tm1167 <= tm1166;
         tm1174 <= tm1173;
         tm1181 <= tm1180;
         tm1133 <= tm1132;
         tm1140 <= tm1139;
         tm1147 <= tm1146;
         tm1154 <= tm1153;
         tm1161 <= tm1160;
         tm1168 <= tm1167;
         tm1175 <= tm1174;
         tm1182 <= tm1181;
         tm1134 <= tm1133;
         tm1141 <= tm1140;
         tm1148 <= tm1147;
         tm1155 <= tm1154;
         tm1162 <= tm1161;
         tm1169 <= tm1168;
         tm1176 <= tm1175;
         tm1183 <= tm1182;
         tm1135 <= tm1134;
         tm1142 <= tm1141;
         tm1149 <= tm1148;
         tm1156 <= tm1155;
         tm1163 <= tm1162;
         tm1170 <= tm1169;
         tm1177 <= tm1176;
         tm1184 <= tm1183;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock75581(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90350(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1234;
   wire signed [15:0] a1235;
   wire signed [15:0] a1236;
   wire signed [15:0] a1237;
   wire signed [15:0] a1242;
   wire signed [15:0] a1243;
   wire signed [15:0] a1244;
   wire signed [15:0] a1245;
   wire signed [15:0] a1250;
   wire signed [15:0] a1251;
   wire signed [15:0] a1252;
   wire signed [15:0] a1253;
   wire signed [15:0] a1258;
   wire signed [15:0] a1259;
   wire signed [15:0] a1260;
   wire signed [15:0] a1261;
   wire signed [16:0] tm801;
   wire signed [16:0] tm802;
   wire signed [16:0] tm803;
   wire signed [16:0] tm804;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm805;
   wire signed [16:0] tm806;
   wire signed [16:0] tm807;
   wire signed [16:0] tm808;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm809;
   wire signed [16:0] tm810;
   wire signed [16:0] tm811;
   wire signed [16:0] tm812;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm813;
   wire signed [16:0] tm814;
   wire signed [16:0] tm815;
   wire signed [16:0] tm816;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t610;
   wire signed [15:0] t611;
   wire signed [15:0] t612;
   wire signed [15:0] t613;
   wire signed [15:0] t614;
   wire signed [15:0] t615;
   wire signed [15:0] t616;
   wire signed [15:0] t617;
   wire signed [15:0] t618;
   wire signed [15:0] t619;
   wire signed [15:0] t620;
   wire signed [15:0] t621;
   wire signed [15:0] t622;
   wire signed [15:0] t623;
   wire signed [15:0] t624;
   wire signed [15:0] t625;


   assign a1234 = X0;
   assign a1235 = X2;
   assign a1236 = X1;
   assign a1237 = X3;
   assign a1242 = X4;
   assign a1243 = X6;
   assign a1244 = X5;
   assign a1245 = X7;
   assign a1250 = X8;
   assign a1251 = X10;
   assign a1252 = X9;
   assign a1253 = X11;
   assign a1258 = X12;
   assign a1259 = X14;
   assign a1260 = X13;
   assign a1261 = X15;
   assign Y0 = t610;
   assign Y1 = t611;
   assign Y2 = t612;
   assign Y3 = t613;
   assign Y4 = t614;
   assign Y5 = t615;
   assign Y6 = t616;
   assign Y7 = t617;
   assign Y8 = t618;
   assign Y9 = t619;
   assign Y10 = t620;
   assign Y11 = t621;
   assign Y12 = t622;
   assign Y13 = t623;
   assign Y14 = t624;
   assign Y15 = t625;
   assign t610 = tm801[16:1];
   assign t611 = tm802[16:1];
   assign t612 = tm803[16:1];
   assign t613 = tm804[16:1];
   assign t614 = tm805[16:1];
   assign t615 = tm806[16:1];
   assign t616 = tm807[16:1];
   assign t617 = tm808[16:1];
   assign t618 = tm809[16:1];
   assign t619 = tm810[16:1];
   assign t620 = tm811[16:1];
   assign t621 = tm812[16:1];
   assign t622 = tm813[16:1];
   assign t623 = tm814[16:1];
   assign t624 = tm815[16:1];
   assign t625 = tm816[16:1];

    addfxp #(17, 1) add75593(.a({{1{a1234[15]}}, a1234}), .b({{1{a1235[15]}}, a1235}), .clk(clk), .q(tm801));    // 0
    addfxp #(17, 1) add75608(.a({{1{a1236[15]}}, a1236}), .b({{1{a1237[15]}}, a1237}), .clk(clk), .q(tm802));    // 0
    subfxp #(17, 1) sub75623(.a({{1{a1234[15]}}, a1234}), .b({{1{a1235[15]}}, a1235}), .clk(clk), .q(tm803));    // 0
    subfxp #(17, 1) sub75638(.a({{1{a1236[15]}}, a1236}), .b({{1{a1237[15]}}, a1237}), .clk(clk), .q(tm804));    // 0
    addfxp #(17, 1) add75669(.a({{1{a1242[15]}}, a1242}), .b({{1{a1243[15]}}, a1243}), .clk(clk), .q(tm805));    // 0
    addfxp #(17, 1) add75684(.a({{1{a1244[15]}}, a1244}), .b({{1{a1245[15]}}, a1245}), .clk(clk), .q(tm806));    // 0
    subfxp #(17, 1) sub75699(.a({{1{a1242[15]}}, a1242}), .b({{1{a1243[15]}}, a1243}), .clk(clk), .q(tm807));    // 0
    subfxp #(17, 1) sub75714(.a({{1{a1244[15]}}, a1244}), .b({{1{a1245[15]}}, a1245}), .clk(clk), .q(tm808));    // 0
    addfxp #(17, 1) add75745(.a({{1{a1250[15]}}, a1250}), .b({{1{a1251[15]}}, a1251}), .clk(clk), .q(tm809));    // 0
    addfxp #(17, 1) add75760(.a({{1{a1252[15]}}, a1252}), .b({{1{a1253[15]}}, a1253}), .clk(clk), .q(tm810));    // 0
    subfxp #(17, 1) sub75775(.a({{1{a1250[15]}}, a1250}), .b({{1{a1251[15]}}, a1251}), .clk(clk), .q(tm811));    // 0
    subfxp #(17, 1) sub75790(.a({{1{a1252[15]}}, a1252}), .b({{1{a1253[15]}}, a1253}), .clk(clk), .q(tm812));    // 0
    addfxp #(17, 1) add75821(.a({{1{a1258[15]}}, a1258}), .b({{1{a1259[15]}}, a1259}), .clk(clk), .q(tm813));    // 0
    addfxp #(17, 1) add75836(.a({{1{a1260[15]}}, a1260}), .b({{1{a1261[15]}}, a1261}), .clk(clk), .q(tm814));    // 0
    subfxp #(17, 1) sub75851(.a({{1{a1258[15]}}, a1258}), .b({{1{a1259[15]}}, a1259}), .clk(clk), .q(tm815));    // 0
    subfxp #(17, 1) sub75866(.a({{1{a1260[15]}}, a1260}), .b({{1{a1261[15]}}, a1261}), .clk(clk), .q(tm816));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 7
// Gap: 8
module rc75890(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm75888 instPerm90351(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 7
// Gap: 8
module perm75888(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[5] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[0];
   assign outBank0[0] = addr0b[5] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outBank_a0[0] = addr0c[5] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];

   assign inBank1[0] = addr1[5] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[0];
   assign outBank1[0] = addr1b[5] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outBank_a1[0] = addr1c[5] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];

   assign inBank2[0] = addr2[5] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[0];
   assign outBank2[0] = addr2b[5] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outBank_a2[0] = addr2c[5] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];

   assign inBank3[0] = addr3[5] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[0];
   assign outBank3[0] = addr3b[5] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outBank_a3[0] = addr3c[5] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];

   assign inBank4[0] = addr4[5] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[0];
   assign outBank4[0] = addr4b[5] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outBank_a4[0] = addr4c[5] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];

   assign inBank5[0] = addr5[5] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[0];
   assign outBank5[0] = addr5b[5] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outBank_a5[0] = addr5c[5] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];

   assign inBank6[0] = addr6[5] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[0];
   assign outBank6[0] = addr6b[5] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outBank_a6[0] = addr6c[5] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];

   assign inBank7[0] = addr7[5] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[0];
   assign outBank7[0] = addr7b[5] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outBank_a7[0] = addr7c[5] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];

   shiftRegFIFO #(5, 1) shiftFIFO_90354(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90357(.X(next0), .Y(next_out), .clk(clk));


   memArray64_75888 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 4)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 6)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 4) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 7) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 4)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[2];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[2];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray64_75888(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(8, 1) shiftFIFO_90360(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 8
module DirSum_76695(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [2:0] i5;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i5 <= 0;
      end
      else begin
         if (next == 1)
            i5 <= 0;
         else if (i5 == 7)
            i5 <= 0;
         else
            i5 <= i5 + 1;
      end
   end

   codeBlock75893 codeBlockIsnt90361(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i5_in(i5),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D80_76543(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hed6c;
      1: out3 <= 16'hd766;
      2: out3 <= 16'hc78f;
      3: out3 <= 16'hc04f;
      4: out3 <= 16'hc2c1;
      5: out3 <= 16'hce87;
      6: out3 <= 16'he1d5;
      7: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D78_76563(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hc13b;
      4: out3 <= 16'hc13b;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D76_76583(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'he1d5;
      2: out3 <= 16'hce87;
      3: out3 <= 16'hc2c1;
      4: out3 <= 16'hc04f;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hd766;
      7: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D74_76603(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      4: out3 <= 16'hc000;
      5: out3 <= 16'hc4df;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D72_76623(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3d3f;
      1: out3 <= 16'h3179;
      2: out3 <= 16'h1e2b;
      3: out3 <= 16'h646;
      4: out3 <= 16'hed6c;
      5: out3 <= 16'hd766;
      6: out3 <= 16'hc78f;
      7: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D70_76643(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h238e;
      3: out3 <= 16'hc7c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hdc72;
      6: out3 <= 16'hcac9;
      7: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D68_76663(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3871;
      2: out3 <= 16'h289a;
      3: out3 <= 16'h1294;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hce87;
      7: out3 <= 16'hc2c1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D66_76683(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      4: out3 <= 16'h0;
      5: out3 <= 16'he782;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock75893(clk, reset, next_in, next_out,
   i5_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i5_in;
   reg [2:0] i5;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90364(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1170;
   wire signed [15:0] a1123;
   wire signed [15:0] a1173;
   wire signed [15:0] a1127;
   wire signed [15:0] a1174;
   wire signed [15:0] a1175;
   wire signed [15:0] a1178;
   wire signed [15:0] a1135;
   wire signed [15:0] a1181;
   wire signed [15:0] a1139;
   wire signed [15:0] a1182;
   wire signed [15:0] a1183;
   wire signed [15:0] a1186;
   wire signed [15:0] a1147;
   wire signed [15:0] a1189;
   wire signed [15:0] a1151;
   wire signed [15:0] a1190;
   wire signed [15:0] a1191;
   wire signed [15:0] a1194;
   wire signed [15:0] a1159;
   wire signed [15:0] a1197;
   wire signed [15:0] a1163;
   wire signed [15:0] a1198;
   wire signed [15:0] a1199;
   reg signed [15:0] tm1185;
   reg signed [15:0] tm1189;
   reg signed [15:0] tm1201;
   reg signed [15:0] tm1205;
   reg signed [15:0] tm1217;
   reg signed [15:0] tm1221;
   reg signed [15:0] tm1233;
   reg signed [15:0] tm1237;
   reg signed [15:0] tm1249;
   reg signed [15:0] tm1256;
   reg signed [15:0] tm1263;
   reg signed [15:0] tm1270;
   reg signed [15:0] tm1277;
   reg signed [15:0] tm1284;
   reg signed [15:0] tm1291;
   reg signed [15:0] tm1298;
   reg signed [15:0] tm1186;
   reg signed [15:0] tm1190;
   reg signed [15:0] tm1202;
   reg signed [15:0] tm1206;
   reg signed [15:0] tm1218;
   reg signed [15:0] tm1222;
   reg signed [15:0] tm1234;
   reg signed [15:0] tm1238;
   reg signed [15:0] tm1250;
   reg signed [15:0] tm1257;
   reg signed [15:0] tm1264;
   reg signed [15:0] tm1271;
   reg signed [15:0] tm1278;
   reg signed [15:0] tm1285;
   reg signed [15:0] tm1292;
   reg signed [15:0] tm1299;
   wire signed [15:0] tm38;
   wire signed [15:0] a1128;
   wire signed [15:0] tm39;
   wire signed [15:0] a1130;
   wire signed [15:0] tm42;
   wire signed [15:0] a1140;
   wire signed [15:0] tm43;
   wire signed [15:0] a1142;
   wire signed [15:0] tm46;
   wire signed [15:0] a1152;
   wire signed [15:0] tm47;
   wire signed [15:0] a1154;
   wire signed [15:0] tm50;
   wire signed [15:0] a1164;
   wire signed [15:0] tm51;
   wire signed [15:0] a1166;
   reg signed [15:0] tm1187;
   reg signed [15:0] tm1191;
   reg signed [15:0] tm1203;
   reg signed [15:0] tm1207;
   reg signed [15:0] tm1219;
   reg signed [15:0] tm1223;
   reg signed [15:0] tm1235;
   reg signed [15:0] tm1239;
   reg signed [15:0] tm1251;
   reg signed [15:0] tm1258;
   reg signed [15:0] tm1265;
   reg signed [15:0] tm1272;
   reg signed [15:0] tm1279;
   reg signed [15:0] tm1286;
   reg signed [15:0] tm1293;
   reg signed [15:0] tm1300;
   reg signed [15:0] tm184;
   reg signed [15:0] tm185;
   reg signed [15:0] tm192;
   reg signed [15:0] tm193;
   reg signed [15:0] tm200;
   reg signed [15:0] tm201;
   reg signed [15:0] tm208;
   reg signed [15:0] tm209;
   reg signed [15:0] tm1188;
   reg signed [15:0] tm1192;
   reg signed [15:0] tm1204;
   reg signed [15:0] tm1208;
   reg signed [15:0] tm1220;
   reg signed [15:0] tm1224;
   reg signed [15:0] tm1236;
   reg signed [15:0] tm1240;
   reg signed [15:0] tm1252;
   reg signed [15:0] tm1259;
   reg signed [15:0] tm1266;
   reg signed [15:0] tm1273;
   reg signed [15:0] tm1280;
   reg signed [15:0] tm1287;
   reg signed [15:0] tm1294;
   reg signed [15:0] tm1301;
   reg signed [15:0] tm1253;
   reg signed [15:0] tm1260;
   reg signed [15:0] tm1267;
   reg signed [15:0] tm1274;
   reg signed [15:0] tm1281;
   reg signed [15:0] tm1288;
   reg signed [15:0] tm1295;
   reg signed [15:0] tm1302;
   wire signed [15:0] a1129;
   wire signed [15:0] a1131;
   wire signed [15:0] a1132;
   wire signed [15:0] a1133;
   wire signed [15:0] a1141;
   wire signed [15:0] a1143;
   wire signed [15:0] a1144;
   wire signed [15:0] a1145;
   wire signed [15:0] a1153;
   wire signed [15:0] a1155;
   wire signed [15:0] a1156;
   wire signed [15:0] a1157;
   wire signed [15:0] a1165;
   wire signed [15:0] a1167;
   wire signed [15:0] a1168;
   wire signed [15:0] a1169;
   reg signed [15:0] tm1254;
   reg signed [15:0] tm1261;
   reg signed [15:0] tm1268;
   reg signed [15:0] tm1275;
   reg signed [15:0] tm1282;
   reg signed [15:0] tm1289;
   reg signed [15:0] tm1296;
   reg signed [15:0] tm1303;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1255;
   reg signed [15:0] tm1262;
   reg signed [15:0] tm1269;
   reg signed [15:0] tm1276;
   reg signed [15:0] tm1283;
   reg signed [15:0] tm1290;
   reg signed [15:0] tm1297;
   reg signed [15:0] tm1304;


   assign a1170 = X0;
   assign a1123 = a1170;
   assign a1173 = X1;
   assign a1127 = a1173;
   assign a1174 = X2;
   assign a1175 = X3;
   assign a1178 = X4;
   assign a1135 = a1178;
   assign a1181 = X5;
   assign a1139 = a1181;
   assign a1182 = X6;
   assign a1183 = X7;
   assign a1186 = X8;
   assign a1147 = a1186;
   assign a1189 = X9;
   assign a1151 = a1189;
   assign a1190 = X10;
   assign a1191 = X11;
   assign a1194 = X12;
   assign a1159 = a1194;
   assign a1197 = X13;
   assign a1163 = a1197;
   assign a1198 = X14;
   assign a1199 = X15;
   assign a1128 = tm38;
   assign a1130 = tm39;
   assign a1140 = tm42;
   assign a1142 = tm43;
   assign a1152 = tm46;
   assign a1154 = tm47;
   assign a1164 = tm50;
   assign a1166 = tm51;
   assign Y0 = tm1255;
   assign Y1 = tm1262;
   assign Y4 = tm1269;
   assign Y5 = tm1276;
   assign Y8 = tm1283;
   assign Y9 = tm1290;
   assign Y12 = tm1297;
   assign Y13 = tm1304;

   D80_76543 instD80inst0_76543(.addr(i5[2:0]), .out(tm51), .clk(clk));

   D78_76563 instD78inst0_76563(.addr(i5[2:0]), .out(tm47), .clk(clk));

   D76_76583 instD76inst0_76583(.addr(i5[2:0]), .out(tm43), .clk(clk));

   D74_76603 instD74inst0_76603(.addr(i5[2:0]), .out(tm39), .clk(clk));

   D72_76623 instD72inst0_76623(.addr(i5[2:0]), .out(tm50), .clk(clk));

   D70_76643 instD70inst0_76643(.addr(i5[2:0]), .out(tm46), .clk(clk));

   D68_76663 instD68inst0_76663(.addr(i5[2:0]), .out(tm42), .clk(clk));

   D66_76683 instD66inst0_76683(.addr(i5[2:0]), .out(tm38), .clk(clk));

    multfix #(16, 2) m75992(.a(tm184), .b(tm1188), .clk(clk), .q_sc(a1129), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76014(.a(tm185), .b(tm1192), .clk(clk), .q_sc(a1131), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76032(.a(tm185), .b(tm1188), .clk(clk), .q_sc(a1132), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76043(.a(tm184), .b(tm1192), .clk(clk), .q_sc(a1133), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76152(.a(tm192), .b(tm1204), .clk(clk), .q_sc(a1141), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76174(.a(tm193), .b(tm1208), .clk(clk), .q_sc(a1143), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76192(.a(tm193), .b(tm1204), .clk(clk), .q_sc(a1144), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76203(.a(tm192), .b(tm1208), .clk(clk), .q_sc(a1145), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76312(.a(tm200), .b(tm1220), .clk(clk), .q_sc(a1153), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76334(.a(tm201), .b(tm1224), .clk(clk), .q_sc(a1155), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76352(.a(tm201), .b(tm1220), .clk(clk), .q_sc(a1156), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76363(.a(tm200), .b(tm1224), .clk(clk), .q_sc(a1157), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76472(.a(tm208), .b(tm1236), .clk(clk), .q_sc(a1165), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76494(.a(tm209), .b(tm1240), .clk(clk), .q_sc(a1167), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76512(.a(tm209), .b(tm1236), .clk(clk), .q_sc(a1168), .q_unsc(), .rst(reset));
    multfix #(16, 2) m76523(.a(tm208), .b(tm1240), .clk(clk), .q_sc(a1169), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub76021(.a(a1129), .b(a1131), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add76050(.a(a1132), .b(a1133), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub76181(.a(a1141), .b(a1143), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add76210(.a(a1144), .b(a1145), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub76341(.a(a1153), .b(a1155), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add76370(.a(a1156), .b(a1157), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub76501(.a(a1165), .b(a1167), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add76530(.a(a1168), .b(a1169), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm184 <= 0;
         tm1188 <= 0;
         tm185 <= 0;
         tm1192 <= 0;
         tm185 <= 0;
         tm1188 <= 0;
         tm184 <= 0;
         tm1192 <= 0;
         tm192 <= 0;
         tm1204 <= 0;
         tm193 <= 0;
         tm1208 <= 0;
         tm193 <= 0;
         tm1204 <= 0;
         tm192 <= 0;
         tm1208 <= 0;
         tm200 <= 0;
         tm1220 <= 0;
         tm201 <= 0;
         tm1224 <= 0;
         tm201 <= 0;
         tm1220 <= 0;
         tm200 <= 0;
         tm1224 <= 0;
         tm208 <= 0;
         tm1236 <= 0;
         tm209 <= 0;
         tm1240 <= 0;
         tm209 <= 0;
         tm1236 <= 0;
         tm208 <= 0;
         tm1240 <= 0;
      end
      else begin
         i5 <= i5_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1185 <= a1174;
         tm1189 <= a1175;
         tm1201 <= a1182;
         tm1205 <= a1183;
         tm1217 <= a1190;
         tm1221 <= a1191;
         tm1233 <= a1198;
         tm1237 <= a1199;
         tm1249 <= a1123;
         tm1256 <= a1127;
         tm1263 <= a1135;
         tm1270 <= a1139;
         tm1277 <= a1147;
         tm1284 <= a1151;
         tm1291 <= a1159;
         tm1298 <= a1163;
         tm1186 <= tm1185;
         tm1190 <= tm1189;
         tm1202 <= tm1201;
         tm1206 <= tm1205;
         tm1218 <= tm1217;
         tm1222 <= tm1221;
         tm1234 <= tm1233;
         tm1238 <= tm1237;
         tm1250 <= tm1249;
         tm1257 <= tm1256;
         tm1264 <= tm1263;
         tm1271 <= tm1270;
         tm1278 <= tm1277;
         tm1285 <= tm1284;
         tm1292 <= tm1291;
         tm1299 <= tm1298;
         tm1187 <= tm1186;
         tm1191 <= tm1190;
         tm1203 <= tm1202;
         tm1207 <= tm1206;
         tm1219 <= tm1218;
         tm1223 <= tm1222;
         tm1235 <= tm1234;
         tm1239 <= tm1238;
         tm1251 <= tm1250;
         tm1258 <= tm1257;
         tm1265 <= tm1264;
         tm1272 <= tm1271;
         tm1279 <= tm1278;
         tm1286 <= tm1285;
         tm1293 <= tm1292;
         tm1300 <= tm1299;
         tm184 <= a1128;
         tm185 <= a1130;
         tm192 <= a1140;
         tm193 <= a1142;
         tm200 <= a1152;
         tm201 <= a1154;
         tm208 <= a1164;
         tm209 <= a1166;
         tm1188 <= tm1187;
         tm1192 <= tm1191;
         tm1204 <= tm1203;
         tm1208 <= tm1207;
         tm1220 <= tm1219;
         tm1224 <= tm1223;
         tm1236 <= tm1235;
         tm1240 <= tm1239;
         tm1252 <= tm1251;
         tm1259 <= tm1258;
         tm1266 <= tm1265;
         tm1273 <= tm1272;
         tm1280 <= tm1279;
         tm1287 <= tm1286;
         tm1294 <= tm1293;
         tm1301 <= tm1300;
         tm1253 <= tm1252;
         tm1260 <= tm1259;
         tm1267 <= tm1266;
         tm1274 <= tm1273;
         tm1281 <= tm1280;
         tm1288 <= tm1287;
         tm1295 <= tm1294;
         tm1302 <= tm1301;
         tm1254 <= tm1253;
         tm1261 <= tm1260;
         tm1268 <= tm1267;
         tm1275 <= tm1274;
         tm1282 <= tm1281;
         tm1289 <= tm1288;
         tm1296 <= tm1295;
         tm1303 <= tm1302;
         tm1255 <= tm1254;
         tm1262 <= tm1261;
         tm1269 <= tm1268;
         tm1276 <= tm1275;
         tm1283 <= tm1282;
         tm1290 <= tm1289;
         tm1297 <= tm1296;
         tm1304 <= tm1303;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock76698(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90367(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a994;
   wire signed [15:0] a995;
   wire signed [15:0] a996;
   wire signed [15:0] a997;
   wire signed [15:0] a1002;
   wire signed [15:0] a1003;
   wire signed [15:0] a1004;
   wire signed [15:0] a1005;
   wire signed [15:0] a1010;
   wire signed [15:0] a1011;
   wire signed [15:0] a1012;
   wire signed [15:0] a1013;
   wire signed [15:0] a1018;
   wire signed [15:0] a1019;
   wire signed [15:0] a1020;
   wire signed [15:0] a1021;
   wire signed [16:0] tm817;
   wire signed [16:0] tm818;
   wire signed [16:0] tm819;
   wire signed [16:0] tm820;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm821;
   wire signed [16:0] tm822;
   wire signed [16:0] tm823;
   wire signed [16:0] tm824;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm825;
   wire signed [16:0] tm826;
   wire signed [16:0] tm827;
   wire signed [16:0] tm828;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm829;
   wire signed [16:0] tm830;
   wire signed [16:0] tm831;
   wire signed [16:0] tm832;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t506;
   wire signed [15:0] t507;
   wire signed [15:0] t508;
   wire signed [15:0] t509;
   wire signed [15:0] t510;
   wire signed [15:0] t511;
   wire signed [15:0] t512;
   wire signed [15:0] t513;
   wire signed [15:0] t514;
   wire signed [15:0] t515;
   wire signed [15:0] t516;
   wire signed [15:0] t517;
   wire signed [15:0] t518;
   wire signed [15:0] t519;
   wire signed [15:0] t520;
   wire signed [15:0] t521;


   assign a994 = X0;
   assign a995 = X2;
   assign a996 = X1;
   assign a997 = X3;
   assign a1002 = X4;
   assign a1003 = X6;
   assign a1004 = X5;
   assign a1005 = X7;
   assign a1010 = X8;
   assign a1011 = X10;
   assign a1012 = X9;
   assign a1013 = X11;
   assign a1018 = X12;
   assign a1019 = X14;
   assign a1020 = X13;
   assign a1021 = X15;
   assign Y0 = t506;
   assign Y1 = t507;
   assign Y2 = t508;
   assign Y3 = t509;
   assign Y4 = t510;
   assign Y5 = t511;
   assign Y6 = t512;
   assign Y7 = t513;
   assign Y8 = t514;
   assign Y9 = t515;
   assign Y10 = t516;
   assign Y11 = t517;
   assign Y12 = t518;
   assign Y13 = t519;
   assign Y14 = t520;
   assign Y15 = t521;
   assign t506 = tm817[16:1];
   assign t507 = tm818[16:1];
   assign t508 = tm819[16:1];
   assign t509 = tm820[16:1];
   assign t510 = tm821[16:1];
   assign t511 = tm822[16:1];
   assign t512 = tm823[16:1];
   assign t513 = tm824[16:1];
   assign t514 = tm825[16:1];
   assign t515 = tm826[16:1];
   assign t516 = tm827[16:1];
   assign t517 = tm828[16:1];
   assign t518 = tm829[16:1];
   assign t519 = tm830[16:1];
   assign t520 = tm831[16:1];
   assign t521 = tm832[16:1];

    addfxp #(17, 1) add76710(.a({{1{a994[15]}}, a994}), .b({{1{a995[15]}}, a995}), .clk(clk), .q(tm817));    // 0
    addfxp #(17, 1) add76725(.a({{1{a996[15]}}, a996}), .b({{1{a997[15]}}, a997}), .clk(clk), .q(tm818));    // 0
    subfxp #(17, 1) sub76740(.a({{1{a994[15]}}, a994}), .b({{1{a995[15]}}, a995}), .clk(clk), .q(tm819));    // 0
    subfxp #(17, 1) sub76755(.a({{1{a996[15]}}, a996}), .b({{1{a997[15]}}, a997}), .clk(clk), .q(tm820));    // 0
    addfxp #(17, 1) add76786(.a({{1{a1002[15]}}, a1002}), .b({{1{a1003[15]}}, a1003}), .clk(clk), .q(tm821));    // 0
    addfxp #(17, 1) add76801(.a({{1{a1004[15]}}, a1004}), .b({{1{a1005[15]}}, a1005}), .clk(clk), .q(tm822));    // 0
    subfxp #(17, 1) sub76816(.a({{1{a1002[15]}}, a1002}), .b({{1{a1003[15]}}, a1003}), .clk(clk), .q(tm823));    // 0
    subfxp #(17, 1) sub76831(.a({{1{a1004[15]}}, a1004}), .b({{1{a1005[15]}}, a1005}), .clk(clk), .q(tm824));    // 0
    addfxp #(17, 1) add76862(.a({{1{a1010[15]}}, a1010}), .b({{1{a1011[15]}}, a1011}), .clk(clk), .q(tm825));    // 0
    addfxp #(17, 1) add76877(.a({{1{a1012[15]}}, a1012}), .b({{1{a1013[15]}}, a1013}), .clk(clk), .q(tm826));    // 0
    subfxp #(17, 1) sub76892(.a({{1{a1010[15]}}, a1010}), .b({{1{a1011[15]}}, a1011}), .clk(clk), .q(tm827));    // 0
    subfxp #(17, 1) sub76907(.a({{1{a1012[15]}}, a1012}), .b({{1{a1013[15]}}, a1013}), .clk(clk), .q(tm828));    // 0
    addfxp #(17, 1) add76938(.a({{1{a1018[15]}}, a1018}), .b({{1{a1019[15]}}, a1019}), .clk(clk), .q(tm829));    // 0
    addfxp #(17, 1) add76953(.a({{1{a1020[15]}}, a1020}), .b({{1{a1021[15]}}, a1021}), .clk(clk), .q(tm830));    // 0
    subfxp #(17, 1) sub76968(.a({{1{a1018[15]}}, a1018}), .b({{1{a1019[15]}}, a1019}), .clk(clk), .q(tm831));    // 0
    subfxp #(17, 1) sub76983(.a({{1{a1020[15]}}, a1020}), .b({{1{a1021[15]}}, a1021}), .clk(clk), .q(tm832));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 11
// Gap: 16
module rc77007(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm77005 instPerm90368(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 11
// Gap: 16
module perm77005(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 16;
   parameter logDepth = 4;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[0];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[0];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[0];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[0];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[0];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[0];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[0];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[0];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];

   nextReg #(9, 4) nextReg_90373(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90376(.X(next0), .Y(next_out), .clk(clk));


   memArray128_77005 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 8)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 10)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 8) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 15) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 8)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[3];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[3];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[3];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray128_77005(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 16;
   parameter logDepth = 4;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(16, 4) nextReg_90381(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 16
module DirSum_77940(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [3:0] i4;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 15)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock77010 codeBlockIsnt90386(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D50_77686(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      8: out3 <= 16'h0;
      9: out3 <= 16'hf384;
      10: out3 <= 16'he782;
      11: out3 <= 16'hdc72;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hcac9;
      14: out3 <= 16'hc4df;
      15: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D52_77722(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3e15;
      2: out3 <= 16'h39db;
      3: out3 <= 16'h3368;
      4: out3 <= 16'h2afb;
      5: out3 <= 16'h20e7;
      6: out3 <= 16'h1590;
      7: out3 <= 16'h964;
      8: out3 <= 16'hfcdc;
      9: out3 <= 16'hf073;
      10: out3 <= 16'he4a3;
      11: out3 <= 16'hd9e0;
      12: out3 <= 16'hd094;
      13: out3 <= 16'hc91b;
      14: out3 <= 16'hc3be;
      15: out3 <= 16'hc0b1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D64_77758(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf69c;
      1: out3 <= 16'hea70;
      2: out3 <= 16'hdf19;
      3: out3 <= 16'hd505;
      4: out3 <= 16'hcc98;
      5: out3 <= 16'hc625;
      6: out3 <= 16'hc1eb;
      7: out3 <= 16'hc014;
      8: out3 <= 16'hc0b1;
      9: out3 <= 16'hc3be;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hd094;
      12: out3 <= 16'hd9e0;
      13: out3 <= 16'he4a3;
      14: out3 <= 16'hf073;
      15: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D54_77776(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3871;
      3: out3 <= 16'h3179;
      4: out3 <= 16'h289a;
      5: out3 <= 16'h1e2b;
      6: out3 <= 16'h1294;
      7: out3 <= 16'h646;
      8: out3 <= 16'hf9ba;
      9: out3 <= 16'hed6c;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hd766;
      12: out3 <= 16'hce87;
      13: out3 <= 16'hc78f;
      14: out3 <= 16'hc2c1;
      15: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D62_77830(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'he1d5;
      3: out3 <= 16'hd766;
      4: out3 <= 16'hce87;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hc2c1;
      7: out3 <= 16'hc04f;
      8: out3 <= 16'hc04f;
      9: out3 <= 16'hc2c1;
      10: out3 <= 16'hc78f;
      11: out3 <= 16'hce87;
      12: out3 <= 16'hd766;
      13: out3 <= 16'he1d5;
      14: out3 <= 16'hed6c;
      15: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D56_77848(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3f4f;
      1: out3 <= 16'h3c42;
      2: out3 <= 16'h36e5;
      3: out3 <= 16'h2f6c;
      4: out3 <= 16'h2620;
      5: out3 <= 16'h1b5d;
      6: out3 <= 16'hf8d;
      7: out3 <= 16'h324;
      8: out3 <= 16'hf69c;
      9: out3 <= 16'hea70;
      10: out3 <= 16'hdf19;
      11: out3 <= 16'hd505;
      12: out3 <= 16'hcc98;
      13: out3 <= 16'hc625;
      14: out3 <= 16'hc1eb;
      15: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D58_77902(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      8: out3 <= 16'hc000;
      9: out3 <= 16'hc13b;
      10: out3 <= 16'hc4df;
      11: out3 <= 16'hcac9;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hdc72;
      14: out3 <= 16'he782;
      15: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D60_77920(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf073;
      2: out3 <= 16'he4a3;
      3: out3 <= 16'hd9e0;
      4: out3 <= 16'hd094;
      5: out3 <= 16'hc91b;
      6: out3 <= 16'hc3be;
      7: out3 <= 16'hc0b1;
      8: out3 <= 16'hc014;
      9: out3 <= 16'hc1eb;
      10: out3 <= 16'hc625;
      11: out3 <= 16'hcc98;
      12: out3 <= 16'hd505;
      13: out3 <= 16'hdf19;
      14: out3 <= 16'hea70;
      15: out3 <= 16'hf69c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock77010(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i4_in;
   reg [3:0] i4;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90389(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a930;
   wire signed [15:0] a883;
   wire signed [15:0] a933;
   wire signed [15:0] a887;
   wire signed [15:0] a934;
   wire signed [15:0] a935;
   wire signed [15:0] a938;
   wire signed [15:0] a895;
   wire signed [15:0] a941;
   wire signed [15:0] a899;
   wire signed [15:0] a942;
   wire signed [15:0] a943;
   wire signed [15:0] a946;
   wire signed [15:0] a907;
   wire signed [15:0] a949;
   wire signed [15:0] a911;
   wire signed [15:0] a950;
   wire signed [15:0] a951;
   wire signed [15:0] a954;
   wire signed [15:0] a919;
   wire signed [15:0] a957;
   wire signed [15:0] a923;
   wire signed [15:0] a958;
   wire signed [15:0] a959;
   reg signed [15:0] tm1305;
   reg signed [15:0] tm1309;
   reg signed [15:0] tm1321;
   reg signed [15:0] tm1325;
   reg signed [15:0] tm1337;
   reg signed [15:0] tm1341;
   reg signed [15:0] tm1353;
   reg signed [15:0] tm1357;
   reg signed [15:0] tm1369;
   reg signed [15:0] tm1376;
   reg signed [15:0] tm1383;
   reg signed [15:0] tm1390;
   reg signed [15:0] tm1397;
   reg signed [15:0] tm1404;
   reg signed [15:0] tm1411;
   reg signed [15:0] tm1418;
   reg signed [15:0] tm1306;
   reg signed [15:0] tm1310;
   reg signed [15:0] tm1322;
   reg signed [15:0] tm1326;
   reg signed [15:0] tm1338;
   reg signed [15:0] tm1342;
   reg signed [15:0] tm1354;
   reg signed [15:0] tm1358;
   reg signed [15:0] tm1370;
   reg signed [15:0] tm1377;
   reg signed [15:0] tm1384;
   reg signed [15:0] tm1391;
   reg signed [15:0] tm1398;
   reg signed [15:0] tm1405;
   reg signed [15:0] tm1412;
   reg signed [15:0] tm1419;
   wire signed [15:0] tm54;
   wire signed [15:0] a888;
   wire signed [15:0] tm55;
   wire signed [15:0] a890;
   wire signed [15:0] tm58;
   wire signed [15:0] a900;
   wire signed [15:0] tm59;
   wire signed [15:0] a902;
   wire signed [15:0] tm62;
   wire signed [15:0] a912;
   wire signed [15:0] tm63;
   wire signed [15:0] a914;
   wire signed [15:0] tm66;
   wire signed [15:0] a924;
   wire signed [15:0] tm67;
   wire signed [15:0] a926;
   reg signed [15:0] tm1307;
   reg signed [15:0] tm1311;
   reg signed [15:0] tm1323;
   reg signed [15:0] tm1327;
   reg signed [15:0] tm1339;
   reg signed [15:0] tm1343;
   reg signed [15:0] tm1355;
   reg signed [15:0] tm1359;
   reg signed [15:0] tm1371;
   reg signed [15:0] tm1378;
   reg signed [15:0] tm1385;
   reg signed [15:0] tm1392;
   reg signed [15:0] tm1399;
   reg signed [15:0] tm1406;
   reg signed [15:0] tm1413;
   reg signed [15:0] tm1420;
   reg signed [15:0] tm216;
   reg signed [15:0] tm217;
   reg signed [15:0] tm224;
   reg signed [15:0] tm225;
   reg signed [15:0] tm232;
   reg signed [15:0] tm233;
   reg signed [15:0] tm240;
   reg signed [15:0] tm241;
   reg signed [15:0] tm1308;
   reg signed [15:0] tm1312;
   reg signed [15:0] tm1324;
   reg signed [15:0] tm1328;
   reg signed [15:0] tm1340;
   reg signed [15:0] tm1344;
   reg signed [15:0] tm1356;
   reg signed [15:0] tm1360;
   reg signed [15:0] tm1372;
   reg signed [15:0] tm1379;
   reg signed [15:0] tm1386;
   reg signed [15:0] tm1393;
   reg signed [15:0] tm1400;
   reg signed [15:0] tm1407;
   reg signed [15:0] tm1414;
   reg signed [15:0] tm1421;
   reg signed [15:0] tm1373;
   reg signed [15:0] tm1380;
   reg signed [15:0] tm1387;
   reg signed [15:0] tm1394;
   reg signed [15:0] tm1401;
   reg signed [15:0] tm1408;
   reg signed [15:0] tm1415;
   reg signed [15:0] tm1422;
   wire signed [15:0] a889;
   wire signed [15:0] a891;
   wire signed [15:0] a892;
   wire signed [15:0] a893;
   wire signed [15:0] a901;
   wire signed [15:0] a903;
   wire signed [15:0] a904;
   wire signed [15:0] a905;
   wire signed [15:0] a913;
   wire signed [15:0] a915;
   wire signed [15:0] a916;
   wire signed [15:0] a917;
   wire signed [15:0] a925;
   wire signed [15:0] a927;
   wire signed [15:0] a928;
   wire signed [15:0] a929;
   reg signed [15:0] tm1374;
   reg signed [15:0] tm1381;
   reg signed [15:0] tm1388;
   reg signed [15:0] tm1395;
   reg signed [15:0] tm1402;
   reg signed [15:0] tm1409;
   reg signed [15:0] tm1416;
   reg signed [15:0] tm1423;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1375;
   reg signed [15:0] tm1382;
   reg signed [15:0] tm1389;
   reg signed [15:0] tm1396;
   reg signed [15:0] tm1403;
   reg signed [15:0] tm1410;
   reg signed [15:0] tm1417;
   reg signed [15:0] tm1424;


   assign a930 = X0;
   assign a883 = a930;
   assign a933 = X1;
   assign a887 = a933;
   assign a934 = X2;
   assign a935 = X3;
   assign a938 = X4;
   assign a895 = a938;
   assign a941 = X5;
   assign a899 = a941;
   assign a942 = X6;
   assign a943 = X7;
   assign a946 = X8;
   assign a907 = a946;
   assign a949 = X9;
   assign a911 = a949;
   assign a950 = X10;
   assign a951 = X11;
   assign a954 = X12;
   assign a919 = a954;
   assign a957 = X13;
   assign a923 = a957;
   assign a958 = X14;
   assign a959 = X15;
   assign a888 = tm54;
   assign a890 = tm55;
   assign a900 = tm58;
   assign a902 = tm59;
   assign a912 = tm62;
   assign a914 = tm63;
   assign a924 = tm66;
   assign a926 = tm67;
   assign Y0 = tm1375;
   assign Y1 = tm1382;
   assign Y4 = tm1389;
   assign Y5 = tm1396;
   assign Y8 = tm1403;
   assign Y9 = tm1410;
   assign Y12 = tm1417;
   assign Y13 = tm1424;

   D50_77686 instD50inst0_77686(.addr(i4[3:0]), .out(tm54), .clk(clk));

   D52_77722 instD52inst0_77722(.addr(i4[3:0]), .out(tm58), .clk(clk));

   D64_77758 instD64inst0_77758(.addr(i4[3:0]), .out(tm67), .clk(clk));

   D54_77776 instD54inst0_77776(.addr(i4[3:0]), .out(tm62), .clk(clk));

   D62_77830 instD62inst0_77830(.addr(i4[3:0]), .out(tm63), .clk(clk));

   D56_77848 instD56inst0_77848(.addr(i4[3:0]), .out(tm66), .clk(clk));

   D58_77902 instD58inst0_77902(.addr(i4[3:0]), .out(tm55), .clk(clk));

   D60_77920 instD60inst0_77920(.addr(i4[3:0]), .out(tm59), .clk(clk));

    multfix #(16, 2) m77109(.a(tm216), .b(tm1308), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77131(.a(tm217), .b(tm1312), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77149(.a(tm217), .b(tm1308), .clk(clk), .q_sc(a892), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77160(.a(tm216), .b(tm1312), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77269(.a(tm224), .b(tm1324), .clk(clk), .q_sc(a901), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77291(.a(tm225), .b(tm1328), .clk(clk), .q_sc(a903), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77309(.a(tm225), .b(tm1324), .clk(clk), .q_sc(a904), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77320(.a(tm224), .b(tm1328), .clk(clk), .q_sc(a905), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77429(.a(tm232), .b(tm1340), .clk(clk), .q_sc(a913), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77451(.a(tm233), .b(tm1344), .clk(clk), .q_sc(a915), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77469(.a(tm233), .b(tm1340), .clk(clk), .q_sc(a916), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77480(.a(tm232), .b(tm1344), .clk(clk), .q_sc(a917), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77589(.a(tm240), .b(tm1356), .clk(clk), .q_sc(a925), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77611(.a(tm241), .b(tm1360), .clk(clk), .q_sc(a927), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77629(.a(tm241), .b(tm1356), .clk(clk), .q_sc(a928), .q_unsc(), .rst(reset));
    multfix #(16, 2) m77640(.a(tm240), .b(tm1360), .clk(clk), .q_sc(a929), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub77138(.a(a889), .b(a891), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add77167(.a(a892), .b(a893), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub77298(.a(a901), .b(a903), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add77327(.a(a904), .b(a905), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub77458(.a(a913), .b(a915), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add77487(.a(a916), .b(a917), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub77618(.a(a925), .b(a927), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add77647(.a(a928), .b(a929), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm216 <= 0;
         tm1308 <= 0;
         tm217 <= 0;
         tm1312 <= 0;
         tm217 <= 0;
         tm1308 <= 0;
         tm216 <= 0;
         tm1312 <= 0;
         tm224 <= 0;
         tm1324 <= 0;
         tm225 <= 0;
         tm1328 <= 0;
         tm225 <= 0;
         tm1324 <= 0;
         tm224 <= 0;
         tm1328 <= 0;
         tm232 <= 0;
         tm1340 <= 0;
         tm233 <= 0;
         tm1344 <= 0;
         tm233 <= 0;
         tm1340 <= 0;
         tm232 <= 0;
         tm1344 <= 0;
         tm240 <= 0;
         tm1356 <= 0;
         tm241 <= 0;
         tm1360 <= 0;
         tm241 <= 0;
         tm1356 <= 0;
         tm240 <= 0;
         tm1360 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1305 <= a934;
         tm1309 <= a935;
         tm1321 <= a942;
         tm1325 <= a943;
         tm1337 <= a950;
         tm1341 <= a951;
         tm1353 <= a958;
         tm1357 <= a959;
         tm1369 <= a883;
         tm1376 <= a887;
         tm1383 <= a895;
         tm1390 <= a899;
         tm1397 <= a907;
         tm1404 <= a911;
         tm1411 <= a919;
         tm1418 <= a923;
         tm1306 <= tm1305;
         tm1310 <= tm1309;
         tm1322 <= tm1321;
         tm1326 <= tm1325;
         tm1338 <= tm1337;
         tm1342 <= tm1341;
         tm1354 <= tm1353;
         tm1358 <= tm1357;
         tm1370 <= tm1369;
         tm1377 <= tm1376;
         tm1384 <= tm1383;
         tm1391 <= tm1390;
         tm1398 <= tm1397;
         tm1405 <= tm1404;
         tm1412 <= tm1411;
         tm1419 <= tm1418;
         tm1307 <= tm1306;
         tm1311 <= tm1310;
         tm1323 <= tm1322;
         tm1327 <= tm1326;
         tm1339 <= tm1338;
         tm1343 <= tm1342;
         tm1355 <= tm1354;
         tm1359 <= tm1358;
         tm1371 <= tm1370;
         tm1378 <= tm1377;
         tm1385 <= tm1384;
         tm1392 <= tm1391;
         tm1399 <= tm1398;
         tm1406 <= tm1405;
         tm1413 <= tm1412;
         tm1420 <= tm1419;
         tm216 <= a888;
         tm217 <= a890;
         tm224 <= a900;
         tm225 <= a902;
         tm232 <= a912;
         tm233 <= a914;
         tm240 <= a924;
         tm241 <= a926;
         tm1308 <= tm1307;
         tm1312 <= tm1311;
         tm1324 <= tm1323;
         tm1328 <= tm1327;
         tm1340 <= tm1339;
         tm1344 <= tm1343;
         tm1356 <= tm1355;
         tm1360 <= tm1359;
         tm1372 <= tm1371;
         tm1379 <= tm1378;
         tm1386 <= tm1385;
         tm1393 <= tm1392;
         tm1400 <= tm1399;
         tm1407 <= tm1406;
         tm1414 <= tm1413;
         tm1421 <= tm1420;
         tm1373 <= tm1372;
         tm1380 <= tm1379;
         tm1387 <= tm1386;
         tm1394 <= tm1393;
         tm1401 <= tm1400;
         tm1408 <= tm1407;
         tm1415 <= tm1414;
         tm1422 <= tm1421;
         tm1374 <= tm1373;
         tm1381 <= tm1380;
         tm1388 <= tm1387;
         tm1395 <= tm1394;
         tm1402 <= tm1401;
         tm1409 <= tm1408;
         tm1416 <= tm1415;
         tm1423 <= tm1422;
         tm1375 <= tm1374;
         tm1382 <= tm1381;
         tm1389 <= tm1388;
         tm1396 <= tm1395;
         tm1403 <= tm1402;
         tm1410 <= tm1409;
         tm1417 <= tm1416;
         tm1424 <= tm1423;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock77943(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90392(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a754;
   wire signed [15:0] a755;
   wire signed [15:0] a756;
   wire signed [15:0] a757;
   wire signed [15:0] a762;
   wire signed [15:0] a763;
   wire signed [15:0] a764;
   wire signed [15:0] a765;
   wire signed [15:0] a770;
   wire signed [15:0] a771;
   wire signed [15:0] a772;
   wire signed [15:0] a773;
   wire signed [15:0] a778;
   wire signed [15:0] a779;
   wire signed [15:0] a780;
   wire signed [15:0] a781;
   wire signed [16:0] tm833;
   wire signed [16:0] tm834;
   wire signed [16:0] tm835;
   wire signed [16:0] tm836;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm837;
   wire signed [16:0] tm838;
   wire signed [16:0] tm839;
   wire signed [16:0] tm840;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm841;
   wire signed [16:0] tm842;
   wire signed [16:0] tm843;
   wire signed [16:0] tm844;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm845;
   wire signed [16:0] tm846;
   wire signed [16:0] tm847;
   wire signed [16:0] tm848;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t402;
   wire signed [15:0] t403;
   wire signed [15:0] t404;
   wire signed [15:0] t405;
   wire signed [15:0] t406;
   wire signed [15:0] t407;
   wire signed [15:0] t408;
   wire signed [15:0] t409;
   wire signed [15:0] t410;
   wire signed [15:0] t411;
   wire signed [15:0] t412;
   wire signed [15:0] t413;
   wire signed [15:0] t414;
   wire signed [15:0] t415;
   wire signed [15:0] t416;
   wire signed [15:0] t417;


   assign a754 = X0;
   assign a755 = X2;
   assign a756 = X1;
   assign a757 = X3;
   assign a762 = X4;
   assign a763 = X6;
   assign a764 = X5;
   assign a765 = X7;
   assign a770 = X8;
   assign a771 = X10;
   assign a772 = X9;
   assign a773 = X11;
   assign a778 = X12;
   assign a779 = X14;
   assign a780 = X13;
   assign a781 = X15;
   assign Y0 = t402;
   assign Y1 = t403;
   assign Y2 = t404;
   assign Y3 = t405;
   assign Y4 = t406;
   assign Y5 = t407;
   assign Y6 = t408;
   assign Y7 = t409;
   assign Y8 = t410;
   assign Y9 = t411;
   assign Y10 = t412;
   assign Y11 = t413;
   assign Y12 = t414;
   assign Y13 = t415;
   assign Y14 = t416;
   assign Y15 = t417;
   assign t402 = tm833[16:1];
   assign t403 = tm834[16:1];
   assign t404 = tm835[16:1];
   assign t405 = tm836[16:1];
   assign t406 = tm837[16:1];
   assign t407 = tm838[16:1];
   assign t408 = tm839[16:1];
   assign t409 = tm840[16:1];
   assign t410 = tm841[16:1];
   assign t411 = tm842[16:1];
   assign t412 = tm843[16:1];
   assign t413 = tm844[16:1];
   assign t414 = tm845[16:1];
   assign t415 = tm846[16:1];
   assign t416 = tm847[16:1];
   assign t417 = tm848[16:1];

    addfxp #(17, 1) add77955(.a({{1{a754[15]}}, a754}), .b({{1{a755[15]}}, a755}), .clk(clk), .q(tm833));    // 0
    addfxp #(17, 1) add77970(.a({{1{a756[15]}}, a756}), .b({{1{a757[15]}}, a757}), .clk(clk), .q(tm834));    // 0
    subfxp #(17, 1) sub77985(.a({{1{a754[15]}}, a754}), .b({{1{a755[15]}}, a755}), .clk(clk), .q(tm835));    // 0
    subfxp #(17, 1) sub78000(.a({{1{a756[15]}}, a756}), .b({{1{a757[15]}}, a757}), .clk(clk), .q(tm836));    // 0
    addfxp #(17, 1) add78031(.a({{1{a762[15]}}, a762}), .b({{1{a763[15]}}, a763}), .clk(clk), .q(tm837));    // 0
    addfxp #(17, 1) add78046(.a({{1{a764[15]}}, a764}), .b({{1{a765[15]}}, a765}), .clk(clk), .q(tm838));    // 0
    subfxp #(17, 1) sub78061(.a({{1{a762[15]}}, a762}), .b({{1{a763[15]}}, a763}), .clk(clk), .q(tm839));    // 0
    subfxp #(17, 1) sub78076(.a({{1{a764[15]}}, a764}), .b({{1{a765[15]}}, a765}), .clk(clk), .q(tm840));    // 0
    addfxp #(17, 1) add78107(.a({{1{a770[15]}}, a770}), .b({{1{a771[15]}}, a771}), .clk(clk), .q(tm841));    // 0
    addfxp #(17, 1) add78122(.a({{1{a772[15]}}, a772}), .b({{1{a773[15]}}, a773}), .clk(clk), .q(tm842));    // 0
    subfxp #(17, 1) sub78137(.a({{1{a770[15]}}, a770}), .b({{1{a771[15]}}, a771}), .clk(clk), .q(tm843));    // 0
    subfxp #(17, 1) sub78152(.a({{1{a772[15]}}, a772}), .b({{1{a773[15]}}, a773}), .clk(clk), .q(tm844));    // 0
    addfxp #(17, 1) add78183(.a({{1{a778[15]}}, a778}), .b({{1{a779[15]}}, a779}), .clk(clk), .q(tm845));    // 0
    addfxp #(17, 1) add78198(.a({{1{a780[15]}}, a780}), .b({{1{a781[15]}}, a781}), .clk(clk), .q(tm846));    // 0
    subfxp #(17, 1) sub78213(.a({{1{a778[15]}}, a778}), .b({{1{a779[15]}}, a779}), .clk(clk), .q(tm847));    // 0
    subfxp #(17, 1) sub78228(.a({{1{a780[15]}}, a780}), .b({{1{a781[15]}}, a781}), .clk(clk), .q(tm848));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 19
// Gap: 32
module rc78252(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm78250 instPerm90393(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 19
// Gap: 32
module perm78250(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[7] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[0];
   assign outBank0[0] = addr0b[7] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outBank_a0[0] = addr0c[7] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];

   assign inBank1[0] = addr1[7] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[0];
   assign outBank1[0] = addr1b[7] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outBank_a1[0] = addr1c[7] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];

   assign inBank2[0] = addr2[7] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[0];
   assign outBank2[0] = addr2b[7] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outBank_a2[0] = addr2c[7] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];

   assign inBank3[0] = addr3[7] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[0];
   assign outBank3[0] = addr3b[7] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outBank_a3[0] = addr3c[7] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];

   assign inBank4[0] = addr4[7] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[6];
   assign inAddr4[4] = addr4[0];
   assign outBank4[0] = addr4b[7] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outBank_a4[0] = addr4c[7] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];

   assign inBank5[0] = addr5[7] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[6];
   assign inAddr5[4] = addr5[0];
   assign outBank5[0] = addr5b[7] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outBank_a5[0] = addr5c[7] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];

   assign inBank6[0] = addr6[7] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[6];
   assign inAddr6[4] = addr6[0];
   assign outBank6[0] = addr6b[7] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outBank_a6[0] = addr6c[7] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];

   assign inBank7[0] = addr7[7] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[6];
   assign inAddr7[4] = addr7[0];
   assign outBank7[0] = addr7b[7] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outBank_a7[0] = addr7c[7] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];

   nextReg #(17, 5) nextReg_90398(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90401(.X(next0), .Y(next_out), .clk(clk));


   memArray256_78250 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 16)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 18)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 16) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 31) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 16)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[4];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[4];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[4];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray256_78250(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(32, 5) nextReg_90406(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 32
module DirSum_79441(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [4:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 31)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock78255 codeBlockIsnt90411(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D40_78929(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fd4;
      1: out3 <= 16'h3f0f;
      2: out3 <= 16'h3daf;
      3: out3 <= 16'h3bb6;
      4: out3 <= 16'h392b;
      5: out3 <= 16'h3612;
      6: out3 <= 16'h3274;
      7: out3 <= 16'h2e5a;
      8: out3 <= 16'h29ce;
      9: out3 <= 16'h24da;
      10: out3 <= 16'h1f8c;
      11: out3 <= 16'h19ef;
      12: out3 <= 16'h1413;
      13: out3 <= 16'he06;
      14: out3 <= 16'h7d6;
      15: out3 <= 16'h192;
      16: out3 <= 16'hfb4b;
      17: out3 <= 16'hf50f;
      18: out3 <= 16'heeee;
      19: out3 <= 16'he8f7;
      20: out3 <= 16'he33a;
      21: out3 <= 16'hddc3;
      22: out3 <= 16'hd8a0;
      23: out3 <= 16'hd3df;
      24: out3 <= 16'hcf8a;
      25: out3 <= 16'hcbad;
      26: out3 <= 16'hc850;
      27: out3 <= 16'hc57e;
      28: out3 <= 16'hc33b;
      29: out3 <= 16'hc18e;
      30: out3 <= 16'hc07b;
      31: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D38_79031(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3e15;
      3: out3 <= 16'h3c42;
      4: out3 <= 16'h39db;
      5: out3 <= 16'h36e5;
      6: out3 <= 16'h3368;
      7: out3 <= 16'h2f6c;
      8: out3 <= 16'h2afb;
      9: out3 <= 16'h2620;
      10: out3 <= 16'h20e7;
      11: out3 <= 16'h1b5d;
      12: out3 <= 16'h1590;
      13: out3 <= 16'hf8d;
      14: out3 <= 16'h964;
      15: out3 <= 16'h324;
      16: out3 <= 16'hfcdc;
      17: out3 <= 16'hf69c;
      18: out3 <= 16'hf073;
      19: out3 <= 16'hea70;
      20: out3 <= 16'he4a3;
      21: out3 <= 16'hdf19;
      22: out3 <= 16'hd9e0;
      23: out3 <= 16'hd505;
      24: out3 <= 16'hd094;
      25: out3 <= 16'hcc98;
      26: out3 <= 16'hc91b;
      27: out3 <= 16'hc625;
      28: out3 <= 16'hc3be;
      29: out3 <= 16'hc1eb;
      30: out3 <= 16'hc0b1;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D42_79065(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      16: out3 <= 16'hc000;
      17: out3 <= 16'hc04f;
      18: out3 <= 16'hc13b;
      19: out3 <= 16'hc2c1;
      20: out3 <= 16'hc4df;
      21: out3 <= 16'hc78f;
      22: out3 <= 16'hcac9;
      23: out3 <= 16'hce87;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hd766;
      26: out3 <= 16'hdc72;
      27: out3 <= 16'he1d5;
      28: out3 <= 16'he782;
      29: out3 <= 16'hed6c;
      30: out3 <= 16'hf384;
      31: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D36_79167(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3f85;
      2: out3 <= 16'h3e72;
      3: out3 <= 16'h3cc5;
      4: out3 <= 16'h3a82;
      5: out3 <= 16'h37b0;
      6: out3 <= 16'h3453;
      7: out3 <= 16'h3076;
      8: out3 <= 16'h2c21;
      9: out3 <= 16'h2760;
      10: out3 <= 16'h223d;
      11: out3 <= 16'h1cc6;
      12: out3 <= 16'h1709;
      13: out3 <= 16'h1112;
      14: out3 <= 16'haf1;
      15: out3 <= 16'h4b5;
      16: out3 <= 16'hfe6e;
      17: out3 <= 16'hf82a;
      18: out3 <= 16'hf1fa;
      19: out3 <= 16'hebed;
      20: out3 <= 16'he611;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdb26;
      23: out3 <= 16'hd632;
      24: out3 <= 16'hd1a6;
      25: out3 <= 16'hcd8c;
      26: out3 <= 16'hc9ee;
      27: out3 <= 16'hc6d5;
      28: out3 <= 16'hc44a;
      29: out3 <= 16'hc251;
      30: out3 <= 16'hc0f1;
      31: out3 <= 16'hc02c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D44_79201(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hf82a;
      2: out3 <= 16'hf1fa;
      3: out3 <= 16'hebed;
      4: out3 <= 16'he611;
      5: out3 <= 16'he074;
      6: out3 <= 16'hdb26;
      7: out3 <= 16'hd632;
      8: out3 <= 16'hd1a6;
      9: out3 <= 16'hcd8c;
      10: out3 <= 16'hc9ee;
      11: out3 <= 16'hc6d5;
      12: out3 <= 16'hc44a;
      13: out3 <= 16'hc251;
      14: out3 <= 16'hc0f1;
      15: out3 <= 16'hc02c;
      16: out3 <= 16'hc005;
      17: out3 <= 16'hc07b;
      18: out3 <= 16'hc18e;
      19: out3 <= 16'hc33b;
      20: out3 <= 16'hc57e;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hcbad;
      23: out3 <= 16'hcf8a;
      24: out3 <= 16'hd3df;
      25: out3 <= 16'hd8a0;
      26: out3 <= 16'hddc3;
      27: out3 <= 16'he33a;
      28: out3 <= 16'he8f7;
      29: out3 <= 16'heeee;
      30: out3 <= 16'hf50f;
      31: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D34_79303(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      16: out3 <= 16'h0;
      17: out3 <= 16'hf9ba;
      18: out3 <= 16'hf384;
      19: out3 <= 16'hed6c;
      20: out3 <= 16'he782;
      21: out3 <= 16'he1d5;
      22: out3 <= 16'hdc72;
      23: out3 <= 16'hd766;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hce87;
      26: out3 <= 16'hcac9;
      27: out3 <= 16'hc78f;
      28: out3 <= 16'hc4df;
      29: out3 <= 16'hc2c1;
      30: out3 <= 16'hc13b;
      31: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D46_79371(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hf073;
      3: out3 <= 16'hea70;
      4: out3 <= 16'he4a3;
      5: out3 <= 16'hdf19;
      6: out3 <= 16'hd9e0;
      7: out3 <= 16'hd505;
      8: out3 <= 16'hd094;
      9: out3 <= 16'hcc98;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hc625;
      12: out3 <= 16'hc3be;
      13: out3 <= 16'hc1eb;
      14: out3 <= 16'hc0b1;
      15: out3 <= 16'hc014;
      16: out3 <= 16'hc014;
      17: out3 <= 16'hc0b1;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc625;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hcc98;
      23: out3 <= 16'hd094;
      24: out3 <= 16'hd505;
      25: out3 <= 16'hd9e0;
      26: out3 <= 16'hdf19;
      27: out3 <= 16'he4a3;
      28: out3 <= 16'hea70;
      29: out3 <= 16'hf073;
      30: out3 <= 16'hf69c;
      31: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D48_79439(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfb4b;
      1: out3 <= 16'hf50f;
      2: out3 <= 16'heeee;
      3: out3 <= 16'he8f7;
      4: out3 <= 16'he33a;
      5: out3 <= 16'hddc3;
      6: out3 <= 16'hd8a0;
      7: out3 <= 16'hd3df;
      8: out3 <= 16'hcf8a;
      9: out3 <= 16'hcbad;
      10: out3 <= 16'hc850;
      11: out3 <= 16'hc57e;
      12: out3 <= 16'hc33b;
      13: out3 <= 16'hc18e;
      14: out3 <= 16'hc07b;
      15: out3 <= 16'hc005;
      16: out3 <= 16'hc02c;
      17: out3 <= 16'hc0f1;
      18: out3 <= 16'hc251;
      19: out3 <= 16'hc44a;
      20: out3 <= 16'hc6d5;
      21: out3 <= 16'hc9ee;
      22: out3 <= 16'hcd8c;
      23: out3 <= 16'hd1a6;
      24: out3 <= 16'hd632;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'he074;
      27: out3 <= 16'he611;
      28: out3 <= 16'hebed;
      29: out3 <= 16'hf1fa;
      30: out3 <= 16'hf82a;
      31: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock78255(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i3_in;
   reg [4:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90414(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a690;
   wire signed [15:0] a643;
   wire signed [15:0] a693;
   wire signed [15:0] a647;
   wire signed [15:0] a694;
   wire signed [15:0] a695;
   wire signed [15:0] a698;
   wire signed [15:0] a655;
   wire signed [15:0] a701;
   wire signed [15:0] a659;
   wire signed [15:0] a702;
   wire signed [15:0] a703;
   wire signed [15:0] a706;
   wire signed [15:0] a667;
   wire signed [15:0] a709;
   wire signed [15:0] a671;
   wire signed [15:0] a710;
   wire signed [15:0] a711;
   wire signed [15:0] a714;
   wire signed [15:0] a679;
   wire signed [15:0] a717;
   wire signed [15:0] a683;
   wire signed [15:0] a718;
   wire signed [15:0] a719;
   reg signed [15:0] tm1425;
   reg signed [15:0] tm1429;
   reg signed [15:0] tm1441;
   reg signed [15:0] tm1445;
   reg signed [15:0] tm1457;
   reg signed [15:0] tm1461;
   reg signed [15:0] tm1473;
   reg signed [15:0] tm1477;
   reg signed [15:0] tm1489;
   reg signed [15:0] tm1496;
   reg signed [15:0] tm1503;
   reg signed [15:0] tm1510;
   reg signed [15:0] tm1517;
   reg signed [15:0] tm1524;
   reg signed [15:0] tm1531;
   reg signed [15:0] tm1538;
   reg signed [15:0] tm1426;
   reg signed [15:0] tm1430;
   reg signed [15:0] tm1442;
   reg signed [15:0] tm1446;
   reg signed [15:0] tm1458;
   reg signed [15:0] tm1462;
   reg signed [15:0] tm1474;
   reg signed [15:0] tm1478;
   reg signed [15:0] tm1490;
   reg signed [15:0] tm1497;
   reg signed [15:0] tm1504;
   reg signed [15:0] tm1511;
   reg signed [15:0] tm1518;
   reg signed [15:0] tm1525;
   reg signed [15:0] tm1532;
   reg signed [15:0] tm1539;
   wire signed [15:0] tm70;
   wire signed [15:0] a648;
   wire signed [15:0] tm71;
   wire signed [15:0] a650;
   wire signed [15:0] tm74;
   wire signed [15:0] a660;
   wire signed [15:0] tm75;
   wire signed [15:0] a662;
   wire signed [15:0] tm78;
   wire signed [15:0] a672;
   wire signed [15:0] tm79;
   wire signed [15:0] a674;
   wire signed [15:0] tm82;
   wire signed [15:0] a684;
   wire signed [15:0] tm83;
   wire signed [15:0] a686;
   reg signed [15:0] tm1427;
   reg signed [15:0] tm1431;
   reg signed [15:0] tm1443;
   reg signed [15:0] tm1447;
   reg signed [15:0] tm1459;
   reg signed [15:0] tm1463;
   reg signed [15:0] tm1475;
   reg signed [15:0] tm1479;
   reg signed [15:0] tm1491;
   reg signed [15:0] tm1498;
   reg signed [15:0] tm1505;
   reg signed [15:0] tm1512;
   reg signed [15:0] tm1519;
   reg signed [15:0] tm1526;
   reg signed [15:0] tm1533;
   reg signed [15:0] tm1540;
   reg signed [15:0] tm248;
   reg signed [15:0] tm249;
   reg signed [15:0] tm256;
   reg signed [15:0] tm257;
   reg signed [15:0] tm264;
   reg signed [15:0] tm265;
   reg signed [15:0] tm272;
   reg signed [15:0] tm273;
   reg signed [15:0] tm1428;
   reg signed [15:0] tm1432;
   reg signed [15:0] tm1444;
   reg signed [15:0] tm1448;
   reg signed [15:0] tm1460;
   reg signed [15:0] tm1464;
   reg signed [15:0] tm1476;
   reg signed [15:0] tm1480;
   reg signed [15:0] tm1492;
   reg signed [15:0] tm1499;
   reg signed [15:0] tm1506;
   reg signed [15:0] tm1513;
   reg signed [15:0] tm1520;
   reg signed [15:0] tm1527;
   reg signed [15:0] tm1534;
   reg signed [15:0] tm1541;
   reg signed [15:0] tm1493;
   reg signed [15:0] tm1500;
   reg signed [15:0] tm1507;
   reg signed [15:0] tm1514;
   reg signed [15:0] tm1521;
   reg signed [15:0] tm1528;
   reg signed [15:0] tm1535;
   reg signed [15:0] tm1542;
   wire signed [15:0] a649;
   wire signed [15:0] a651;
   wire signed [15:0] a652;
   wire signed [15:0] a653;
   wire signed [15:0] a661;
   wire signed [15:0] a663;
   wire signed [15:0] a664;
   wire signed [15:0] a665;
   wire signed [15:0] a673;
   wire signed [15:0] a675;
   wire signed [15:0] a676;
   wire signed [15:0] a677;
   wire signed [15:0] a685;
   wire signed [15:0] a687;
   wire signed [15:0] a688;
   wire signed [15:0] a689;
   reg signed [15:0] tm1494;
   reg signed [15:0] tm1501;
   reg signed [15:0] tm1508;
   reg signed [15:0] tm1515;
   reg signed [15:0] tm1522;
   reg signed [15:0] tm1529;
   reg signed [15:0] tm1536;
   reg signed [15:0] tm1543;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1495;
   reg signed [15:0] tm1502;
   reg signed [15:0] tm1509;
   reg signed [15:0] tm1516;
   reg signed [15:0] tm1523;
   reg signed [15:0] tm1530;
   reg signed [15:0] tm1537;
   reg signed [15:0] tm1544;


   assign a690 = X0;
   assign a643 = a690;
   assign a693 = X1;
   assign a647 = a693;
   assign a694 = X2;
   assign a695 = X3;
   assign a698 = X4;
   assign a655 = a698;
   assign a701 = X5;
   assign a659 = a701;
   assign a702 = X6;
   assign a703 = X7;
   assign a706 = X8;
   assign a667 = a706;
   assign a709 = X9;
   assign a671 = a709;
   assign a710 = X10;
   assign a711 = X11;
   assign a714 = X12;
   assign a679 = a714;
   assign a717 = X13;
   assign a683 = a717;
   assign a718 = X14;
   assign a719 = X15;
   assign a648 = tm70;
   assign a650 = tm71;
   assign a660 = tm74;
   assign a662 = tm75;
   assign a672 = tm78;
   assign a674 = tm79;
   assign a684 = tm82;
   assign a686 = tm83;
   assign Y0 = tm1495;
   assign Y1 = tm1502;
   assign Y4 = tm1509;
   assign Y5 = tm1516;
   assign Y8 = tm1523;
   assign Y9 = tm1530;
   assign Y12 = tm1537;
   assign Y13 = tm1544;

   D40_78929 instD40inst0_78929(.addr(i3[4:0]), .out(tm82), .clk(clk));

   D38_79031 instD38inst0_79031(.addr(i3[4:0]), .out(tm78), .clk(clk));

   D42_79065 instD42inst0_79065(.addr(i3[4:0]), .out(tm71), .clk(clk));

   D36_79167 instD36inst0_79167(.addr(i3[4:0]), .out(tm74), .clk(clk));

   D44_79201 instD44inst0_79201(.addr(i3[4:0]), .out(tm75), .clk(clk));

   D34_79303 instD34inst0_79303(.addr(i3[4:0]), .out(tm70), .clk(clk));

   D46_79371 instD46inst0_79371(.addr(i3[4:0]), .out(tm79), .clk(clk));

   D48_79439 instD48inst0_79439(.addr(i3[4:0]), .out(tm83), .clk(clk));

    multfix #(16, 2) m78354(.a(tm248), .b(tm1428), .clk(clk), .q_sc(a649), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78376(.a(tm249), .b(tm1432), .clk(clk), .q_sc(a651), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78394(.a(tm249), .b(tm1428), .clk(clk), .q_sc(a652), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78405(.a(tm248), .b(tm1432), .clk(clk), .q_sc(a653), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78514(.a(tm256), .b(tm1444), .clk(clk), .q_sc(a661), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78536(.a(tm257), .b(tm1448), .clk(clk), .q_sc(a663), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78554(.a(tm257), .b(tm1444), .clk(clk), .q_sc(a664), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78565(.a(tm256), .b(tm1448), .clk(clk), .q_sc(a665), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78674(.a(tm264), .b(tm1460), .clk(clk), .q_sc(a673), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78696(.a(tm265), .b(tm1464), .clk(clk), .q_sc(a675), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78714(.a(tm265), .b(tm1460), .clk(clk), .q_sc(a676), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78725(.a(tm264), .b(tm1464), .clk(clk), .q_sc(a677), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78834(.a(tm272), .b(tm1476), .clk(clk), .q_sc(a685), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78856(.a(tm273), .b(tm1480), .clk(clk), .q_sc(a687), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78874(.a(tm273), .b(tm1476), .clk(clk), .q_sc(a688), .q_unsc(), .rst(reset));
    multfix #(16, 2) m78885(.a(tm272), .b(tm1480), .clk(clk), .q_sc(a689), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub78383(.a(a649), .b(a651), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add78412(.a(a652), .b(a653), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub78543(.a(a661), .b(a663), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add78572(.a(a664), .b(a665), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub78703(.a(a673), .b(a675), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add78732(.a(a676), .b(a677), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub78863(.a(a685), .b(a687), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add78892(.a(a688), .b(a689), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm248 <= 0;
         tm1428 <= 0;
         tm249 <= 0;
         tm1432 <= 0;
         tm249 <= 0;
         tm1428 <= 0;
         tm248 <= 0;
         tm1432 <= 0;
         tm256 <= 0;
         tm1444 <= 0;
         tm257 <= 0;
         tm1448 <= 0;
         tm257 <= 0;
         tm1444 <= 0;
         tm256 <= 0;
         tm1448 <= 0;
         tm264 <= 0;
         tm1460 <= 0;
         tm265 <= 0;
         tm1464 <= 0;
         tm265 <= 0;
         tm1460 <= 0;
         tm264 <= 0;
         tm1464 <= 0;
         tm272 <= 0;
         tm1476 <= 0;
         tm273 <= 0;
         tm1480 <= 0;
         tm273 <= 0;
         tm1476 <= 0;
         tm272 <= 0;
         tm1480 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1425 <= a694;
         tm1429 <= a695;
         tm1441 <= a702;
         tm1445 <= a703;
         tm1457 <= a710;
         tm1461 <= a711;
         tm1473 <= a718;
         tm1477 <= a719;
         tm1489 <= a643;
         tm1496 <= a647;
         tm1503 <= a655;
         tm1510 <= a659;
         tm1517 <= a667;
         tm1524 <= a671;
         tm1531 <= a679;
         tm1538 <= a683;
         tm1426 <= tm1425;
         tm1430 <= tm1429;
         tm1442 <= tm1441;
         tm1446 <= tm1445;
         tm1458 <= tm1457;
         tm1462 <= tm1461;
         tm1474 <= tm1473;
         tm1478 <= tm1477;
         tm1490 <= tm1489;
         tm1497 <= tm1496;
         tm1504 <= tm1503;
         tm1511 <= tm1510;
         tm1518 <= tm1517;
         tm1525 <= tm1524;
         tm1532 <= tm1531;
         tm1539 <= tm1538;
         tm1427 <= tm1426;
         tm1431 <= tm1430;
         tm1443 <= tm1442;
         tm1447 <= tm1446;
         tm1459 <= tm1458;
         tm1463 <= tm1462;
         tm1475 <= tm1474;
         tm1479 <= tm1478;
         tm1491 <= tm1490;
         tm1498 <= tm1497;
         tm1505 <= tm1504;
         tm1512 <= tm1511;
         tm1519 <= tm1518;
         tm1526 <= tm1525;
         tm1533 <= tm1532;
         tm1540 <= tm1539;
         tm248 <= a648;
         tm249 <= a650;
         tm256 <= a660;
         tm257 <= a662;
         tm264 <= a672;
         tm265 <= a674;
         tm272 <= a684;
         tm273 <= a686;
         tm1428 <= tm1427;
         tm1432 <= tm1431;
         tm1444 <= tm1443;
         tm1448 <= tm1447;
         tm1460 <= tm1459;
         tm1464 <= tm1463;
         tm1476 <= tm1475;
         tm1480 <= tm1479;
         tm1492 <= tm1491;
         tm1499 <= tm1498;
         tm1506 <= tm1505;
         tm1513 <= tm1512;
         tm1520 <= tm1519;
         tm1527 <= tm1526;
         tm1534 <= tm1533;
         tm1541 <= tm1540;
         tm1493 <= tm1492;
         tm1500 <= tm1499;
         tm1507 <= tm1506;
         tm1514 <= tm1513;
         tm1521 <= tm1520;
         tm1528 <= tm1527;
         tm1535 <= tm1534;
         tm1542 <= tm1541;
         tm1494 <= tm1493;
         tm1501 <= tm1500;
         tm1508 <= tm1507;
         tm1515 <= tm1514;
         tm1522 <= tm1521;
         tm1529 <= tm1528;
         tm1536 <= tm1535;
         tm1543 <= tm1542;
         tm1495 <= tm1494;
         tm1502 <= tm1501;
         tm1509 <= tm1508;
         tm1516 <= tm1515;
         tm1523 <= tm1522;
         tm1530 <= tm1529;
         tm1537 <= tm1536;
         tm1544 <= tm1543;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock79444(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90417(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a514;
   wire signed [15:0] a515;
   wire signed [15:0] a516;
   wire signed [15:0] a517;
   wire signed [15:0] a522;
   wire signed [15:0] a523;
   wire signed [15:0] a524;
   wire signed [15:0] a525;
   wire signed [15:0] a530;
   wire signed [15:0] a531;
   wire signed [15:0] a532;
   wire signed [15:0] a533;
   wire signed [15:0] a538;
   wire signed [15:0] a539;
   wire signed [15:0] a540;
   wire signed [15:0] a541;
   wire signed [16:0] tm849;
   wire signed [16:0] tm850;
   wire signed [16:0] tm851;
   wire signed [16:0] tm852;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm853;
   wire signed [16:0] tm854;
   wire signed [16:0] tm855;
   wire signed [16:0] tm856;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm857;
   wire signed [16:0] tm858;
   wire signed [16:0] tm859;
   wire signed [16:0] tm860;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm861;
   wire signed [16:0] tm862;
   wire signed [16:0] tm863;
   wire signed [16:0] tm864;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t297;
   wire signed [15:0] t298;
   wire signed [15:0] t299;
   wire signed [15:0] t300;
   wire signed [15:0] t301;
   wire signed [15:0] t302;
   wire signed [15:0] t303;
   wire signed [15:0] t304;
   wire signed [15:0] t305;
   wire signed [15:0] t306;
   wire signed [15:0] t307;
   wire signed [15:0] t308;
   wire signed [15:0] t309;
   wire signed [15:0] t310;
   wire signed [15:0] t311;
   wire signed [15:0] t312;


   assign a514 = X0;
   assign a515 = X2;
   assign a516 = X1;
   assign a517 = X3;
   assign a522 = X4;
   assign a523 = X6;
   assign a524 = X5;
   assign a525 = X7;
   assign a530 = X8;
   assign a531 = X10;
   assign a532 = X9;
   assign a533 = X11;
   assign a538 = X12;
   assign a539 = X14;
   assign a540 = X13;
   assign a541 = X15;
   assign Y0 = t297;
   assign Y1 = t298;
   assign Y2 = t299;
   assign Y3 = t300;
   assign Y4 = t301;
   assign Y5 = t302;
   assign Y6 = t303;
   assign Y7 = t304;
   assign Y8 = t305;
   assign Y9 = t306;
   assign Y10 = t307;
   assign Y11 = t308;
   assign Y12 = t309;
   assign Y13 = t310;
   assign Y14 = t311;
   assign Y15 = t312;
   assign t297 = tm849[16:1];
   assign t298 = tm850[16:1];
   assign t299 = tm851[16:1];
   assign t300 = tm852[16:1];
   assign t301 = tm853[16:1];
   assign t302 = tm854[16:1];
   assign t303 = tm855[16:1];
   assign t304 = tm856[16:1];
   assign t305 = tm857[16:1];
   assign t306 = tm858[16:1];
   assign t307 = tm859[16:1];
   assign t308 = tm860[16:1];
   assign t309 = tm861[16:1];
   assign t310 = tm862[16:1];
   assign t311 = tm863[16:1];
   assign t312 = tm864[16:1];

    addfxp #(17, 1) add79456(.a({{1{a514[15]}}, a514}), .b({{1{a515[15]}}, a515}), .clk(clk), .q(tm849));    // 0
    addfxp #(17, 1) add79471(.a({{1{a516[15]}}, a516}), .b({{1{a517[15]}}, a517}), .clk(clk), .q(tm850));    // 0
    subfxp #(17, 1) sub79486(.a({{1{a514[15]}}, a514}), .b({{1{a515[15]}}, a515}), .clk(clk), .q(tm851));    // 0
    subfxp #(17, 1) sub79501(.a({{1{a516[15]}}, a516}), .b({{1{a517[15]}}, a517}), .clk(clk), .q(tm852));    // 0
    addfxp #(17, 1) add79532(.a({{1{a522[15]}}, a522}), .b({{1{a523[15]}}, a523}), .clk(clk), .q(tm853));    // 0
    addfxp #(17, 1) add79547(.a({{1{a524[15]}}, a524}), .b({{1{a525[15]}}, a525}), .clk(clk), .q(tm854));    // 0
    subfxp #(17, 1) sub79562(.a({{1{a522[15]}}, a522}), .b({{1{a523[15]}}, a523}), .clk(clk), .q(tm855));    // 0
    subfxp #(17, 1) sub79577(.a({{1{a524[15]}}, a524}), .b({{1{a525[15]}}, a525}), .clk(clk), .q(tm856));    // 0
    addfxp #(17, 1) add79608(.a({{1{a530[15]}}, a530}), .b({{1{a531[15]}}, a531}), .clk(clk), .q(tm857));    // 0
    addfxp #(17, 1) add79623(.a({{1{a532[15]}}, a532}), .b({{1{a533[15]}}, a533}), .clk(clk), .q(tm858));    // 0
    subfxp #(17, 1) sub79638(.a({{1{a530[15]}}, a530}), .b({{1{a531[15]}}, a531}), .clk(clk), .q(tm859));    // 0
    subfxp #(17, 1) sub79653(.a({{1{a532[15]}}, a532}), .b({{1{a533[15]}}, a533}), .clk(clk), .q(tm860));    // 0
    addfxp #(17, 1) add79684(.a({{1{a538[15]}}, a538}), .b({{1{a539[15]}}, a539}), .clk(clk), .q(tm861));    // 0
    addfxp #(17, 1) add79699(.a({{1{a540[15]}}, a540}), .b({{1{a541[15]}}, a541}), .clk(clk), .q(tm862));    // 0
    subfxp #(17, 1) sub79714(.a({{1{a538[15]}}, a538}), .b({{1{a539[15]}}, a539}), .clk(clk), .q(tm863));    // 0
    subfxp #(17, 1) sub79729(.a({{1{a540[15]}}, a540}), .b({{1{a541[15]}}, a541}), .clk(clk), .q(tm864));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 35
// Gap: 64
module rc79753(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm79751 instPerm90418(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 35
// Gap: 64
module perm79751(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[8] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[7];
   assign inAddr0[5] = addr0[0];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];

   assign inBank1[0] = addr1[8] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[7];
   assign inAddr1[5] = addr1[0];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];

   assign inBank2[0] = addr2[8] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[7];
   assign inAddr2[5] = addr2[0];
   assign outBank2[0] = addr2b[8] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outBank_a2[0] = addr2c[8] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];

   assign inBank3[0] = addr3[8] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[7];
   assign inAddr3[5] = addr3[0];
   assign outBank3[0] = addr3b[8] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outBank_a3[0] = addr3c[8] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];

   assign inBank4[0] = addr4[8] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[6];
   assign inAddr4[4] = addr4[7];
   assign inAddr4[5] = addr4[0];
   assign outBank4[0] = addr4b[8] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outBank_a4[0] = addr4c[8] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];

   assign inBank5[0] = addr5[8] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[6];
   assign inAddr5[4] = addr5[7];
   assign inAddr5[5] = addr5[0];
   assign outBank5[0] = addr5b[8] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outBank_a5[0] = addr5c[8] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];

   assign inBank6[0] = addr6[8] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[6];
   assign inAddr6[4] = addr6[7];
   assign inAddr6[5] = addr6[0];
   assign outBank6[0] = addr6b[8] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outBank_a6[0] = addr6c[8] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];

   assign inBank7[0] = addr7[8] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[6];
   assign inAddr7[4] = addr7[7];
   assign inAddr7[5] = addr7[0];
   assign outBank7[0] = addr7b[8] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outBank_a7[0] = addr7c[8] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];

   nextReg #(33, 6) nextReg_90423(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90426(.X(next0), .Y(next_out), .clk(clk));


   memArray512_79751 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 32)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 34)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 32) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 32)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray512_79751(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(64, 6) nextReg_90431(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 64
module DirSum_81454(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [5:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 63)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock79756 codeBlockIsnt90436(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D20_80462(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3fe1;
      2: out3 <= 16'h3f9c;
      3: out3 <= 16'h3f30;
      4: out3 <= 16'h3e9d;
      5: out3 <= 16'h3de3;
      6: out3 <= 16'h3d03;
      7: out3 <= 16'h3bfd;
      8: out3 <= 16'h3ad3;
      9: out3 <= 16'h3984;
      10: out3 <= 16'h3812;
      11: out3 <= 16'h367d;
      12: out3 <= 16'h34c6;
      13: out3 <= 16'h32ef;
      14: out3 <= 16'h30f9;
      15: out3 <= 16'h2ee4;
      16: out3 <= 16'h2cb2;
      17: out3 <= 16'h2a65;
      18: out3 <= 16'h27fe;
      19: out3 <= 16'h257e;
      20: out3 <= 16'h22e7;
      21: out3 <= 16'h203a;
      22: out3 <= 16'h1d79;
      23: out3 <= 16'h1aa7;
      24: out3 <= 16'h17c4;
      25: out3 <= 16'h14d2;
      26: out3 <= 16'h11d3;
      27: out3 <= 16'heca;
      28: out3 <= 16'hbb7;
      29: out3 <= 16'h89d;
      30: out3 <= 16'h57e;
      31: out3 <= 16'h25b;
      32: out3 <= 16'hff37;
      33: out3 <= 16'hfc13;
      34: out3 <= 16'hf8f2;
      35: out3 <= 16'hf5d5;
      36: out3 <= 16'hf2bf;
      37: out3 <= 16'hefb0;
      38: out3 <= 16'hecac;
      39: out3 <= 16'he9b4;
      40: out3 <= 16'he6c9;
      41: out3 <= 16'he3ee;
      42: out3 <= 16'he124;
      43: out3 <= 16'hde6d;
      44: out3 <= 16'hdbcb;
      45: out3 <= 16'hd93f;
      46: out3 <= 16'hd6cb;
      47: out3 <= 16'hd471;
      48: out3 <= 16'hd231;
      49: out3 <= 16'hd00e;
      50: out3 <= 16'hce08;
      51: out3 <= 16'hcc21;
      52: out3 <= 16'hca5b;
      53: out3 <= 16'hc8b5;
      54: out3 <= 16'hc731;
      55: out3 <= 16'hc5d0;
      56: out3 <= 16'hc493;
      57: out3 <= 16'hc37b;
      58: out3 <= 16'hc288;
      59: out3 <= 16'hc1bb;
      60: out3 <= 16'hc115;
      61: out3 <= 16'hc095;
      62: out3 <= 16'hc03c;
      63: out3 <= 16'hc00b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D18_80660(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fec;
      2: out3 <= 16'h3fb1;
      3: out3 <= 16'h3f4f;
      4: out3 <= 16'h3ec5;
      5: out3 <= 16'h3e15;
      6: out3 <= 16'h3d3f;
      7: out3 <= 16'h3c42;
      8: out3 <= 16'h3b21;
      9: out3 <= 16'h39db;
      10: out3 <= 16'h3871;
      11: out3 <= 16'h36e5;
      12: out3 <= 16'h3537;
      13: out3 <= 16'h3368;
      14: out3 <= 16'h3179;
      15: out3 <= 16'h2f6c;
      16: out3 <= 16'h2d41;
      17: out3 <= 16'h2afb;
      18: out3 <= 16'h289a;
      19: out3 <= 16'h2620;
      20: out3 <= 16'h238e;
      21: out3 <= 16'h20e7;
      22: out3 <= 16'h1e2b;
      23: out3 <= 16'h1b5d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h1590;
      26: out3 <= 16'h1294;
      27: out3 <= 16'hf8d;
      28: out3 <= 16'hc7c;
      29: out3 <= 16'h964;
      30: out3 <= 16'h646;
      31: out3 <= 16'h324;
      32: out3 <= 16'h0;
      33: out3 <= 16'hfcdc;
      34: out3 <= 16'hf9ba;
      35: out3 <= 16'hf69c;
      36: out3 <= 16'hf384;
      37: out3 <= 16'hf073;
      38: out3 <= 16'hed6c;
      39: out3 <= 16'hea70;
      40: out3 <= 16'he782;
      41: out3 <= 16'he4a3;
      42: out3 <= 16'he1d5;
      43: out3 <= 16'hdf19;
      44: out3 <= 16'hdc72;
      45: out3 <= 16'hd9e0;
      46: out3 <= 16'hd766;
      47: out3 <= 16'hd505;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd094;
      50: out3 <= 16'hce87;
      51: out3 <= 16'hcc98;
      52: out3 <= 16'hcac9;
      53: out3 <= 16'hc91b;
      54: out3 <= 16'hc78f;
      55: out3 <= 16'hc625;
      56: out3 <= 16'hc4df;
      57: out3 <= 16'hc3be;
      58: out3 <= 16'hc2c1;
      59: out3 <= 16'hc1eb;
      60: out3 <= 16'hc13b;
      61: out3 <= 16'hc0b1;
      62: out3 <= 16'hc04f;
      63: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D22_80726(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f85;
      3: out3 <= 16'h3f0f;
      4: out3 <= 16'h3e72;
      5: out3 <= 16'h3daf;
      6: out3 <= 16'h3cc5;
      7: out3 <= 16'h3bb6;
      8: out3 <= 16'h3a82;
      9: out3 <= 16'h392b;
      10: out3 <= 16'h37b0;
      11: out3 <= 16'h3612;
      12: out3 <= 16'h3453;
      13: out3 <= 16'h3274;
      14: out3 <= 16'h3076;
      15: out3 <= 16'h2e5a;
      16: out3 <= 16'h2c21;
      17: out3 <= 16'h29ce;
      18: out3 <= 16'h2760;
      19: out3 <= 16'h24da;
      20: out3 <= 16'h223d;
      21: out3 <= 16'h1f8c;
      22: out3 <= 16'h1cc6;
      23: out3 <= 16'h19ef;
      24: out3 <= 16'h1709;
      25: out3 <= 16'h1413;
      26: out3 <= 16'h1112;
      27: out3 <= 16'he06;
      28: out3 <= 16'haf1;
      29: out3 <= 16'h7d6;
      30: out3 <= 16'h4b5;
      31: out3 <= 16'h192;
      32: out3 <= 16'hfe6e;
      33: out3 <= 16'hfb4b;
      34: out3 <= 16'hf82a;
      35: out3 <= 16'hf50f;
      36: out3 <= 16'hf1fa;
      37: out3 <= 16'heeee;
      38: out3 <= 16'hebed;
      39: out3 <= 16'he8f7;
      40: out3 <= 16'he611;
      41: out3 <= 16'he33a;
      42: out3 <= 16'he074;
      43: out3 <= 16'hddc3;
      44: out3 <= 16'hdb26;
      45: out3 <= 16'hd8a0;
      46: out3 <= 16'hd632;
      47: out3 <= 16'hd3df;
      48: out3 <= 16'hd1a6;
      49: out3 <= 16'hcf8a;
      50: out3 <= 16'hcd8c;
      51: out3 <= 16'hcbad;
      52: out3 <= 16'hc9ee;
      53: out3 <= 16'hc850;
      54: out3 <= 16'hc6d5;
      55: out3 <= 16'hc57e;
      56: out3 <= 16'hc44a;
      57: out3 <= 16'hc33b;
      58: out3 <= 16'hc251;
      59: out3 <= 16'hc18e;
      60: out3 <= 16'hc0f1;
      61: out3 <= 16'hc07b;
      62: out3 <= 16'hc02c;
      63: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D24_80924(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ff5;
      1: out3 <= 16'h3fc4;
      2: out3 <= 16'h3f6b;
      3: out3 <= 16'h3eeb;
      4: out3 <= 16'h3e45;
      5: out3 <= 16'h3d78;
      6: out3 <= 16'h3c85;
      7: out3 <= 16'h3b6d;
      8: out3 <= 16'h3a30;
      9: out3 <= 16'h38cf;
      10: out3 <= 16'h374b;
      11: out3 <= 16'h35a5;
      12: out3 <= 16'h33df;
      13: out3 <= 16'h31f8;
      14: out3 <= 16'h2ff2;
      15: out3 <= 16'h2dcf;
      16: out3 <= 16'h2b8f;
      17: out3 <= 16'h2935;
      18: out3 <= 16'h26c1;
      19: out3 <= 16'h2435;
      20: out3 <= 16'h2193;
      21: out3 <= 16'h1edc;
      22: out3 <= 16'h1c12;
      23: out3 <= 16'h1937;
      24: out3 <= 16'h164c;
      25: out3 <= 16'h1354;
      26: out3 <= 16'h1050;
      27: out3 <= 16'hd41;
      28: out3 <= 16'ha2b;
      29: out3 <= 16'h70e;
      30: out3 <= 16'h3ed;
      31: out3 <= 16'hc9;
      32: out3 <= 16'hfda5;
      33: out3 <= 16'hfa82;
      34: out3 <= 16'hf763;
      35: out3 <= 16'hf449;
      36: out3 <= 16'hf136;
      37: out3 <= 16'hee2d;
      38: out3 <= 16'heb2e;
      39: out3 <= 16'he83c;
      40: out3 <= 16'he559;
      41: out3 <= 16'he287;
      42: out3 <= 16'hdfc6;
      43: out3 <= 16'hdd19;
      44: out3 <= 16'hda82;
      45: out3 <= 16'hd802;
      46: out3 <= 16'hd59b;
      47: out3 <= 16'hd34e;
      48: out3 <= 16'hd11c;
      49: out3 <= 16'hcf07;
      50: out3 <= 16'hcd11;
      51: out3 <= 16'hcb3a;
      52: out3 <= 16'hc983;
      53: out3 <= 16'hc7ee;
      54: out3 <= 16'hc67c;
      55: out3 <= 16'hc52d;
      56: out3 <= 16'hc403;
      57: out3 <= 16'hc2fd;
      58: out3 <= 16'hc21d;
      59: out3 <= 16'hc163;
      60: out3 <= 16'hc0d0;
      61: out3 <= 16'hc064;
      62: out3 <= 16'hc01f;
      63: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D32_80990(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfda5;
      1: out3 <= 16'hfa82;
      2: out3 <= 16'hf763;
      3: out3 <= 16'hf449;
      4: out3 <= 16'hf136;
      5: out3 <= 16'hee2d;
      6: out3 <= 16'heb2e;
      7: out3 <= 16'he83c;
      8: out3 <= 16'he559;
      9: out3 <= 16'he287;
      10: out3 <= 16'hdfc6;
      11: out3 <= 16'hdd19;
      12: out3 <= 16'hda82;
      13: out3 <= 16'hd802;
      14: out3 <= 16'hd59b;
      15: out3 <= 16'hd34e;
      16: out3 <= 16'hd11c;
      17: out3 <= 16'hcf07;
      18: out3 <= 16'hcd11;
      19: out3 <= 16'hcb3a;
      20: out3 <= 16'hc983;
      21: out3 <= 16'hc7ee;
      22: out3 <= 16'hc67c;
      23: out3 <= 16'hc52d;
      24: out3 <= 16'hc403;
      25: out3 <= 16'hc2fd;
      26: out3 <= 16'hc21d;
      27: out3 <= 16'hc163;
      28: out3 <= 16'hc0d0;
      29: out3 <= 16'hc064;
      30: out3 <= 16'hc01f;
      31: out3 <= 16'hc001;
      32: out3 <= 16'hc00b;
      33: out3 <= 16'hc03c;
      34: out3 <= 16'hc095;
      35: out3 <= 16'hc115;
      36: out3 <= 16'hc1bb;
      37: out3 <= 16'hc288;
      38: out3 <= 16'hc37b;
      39: out3 <= 16'hc493;
      40: out3 <= 16'hc5d0;
      41: out3 <= 16'hc731;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hca5b;
      44: out3 <= 16'hcc21;
      45: out3 <= 16'hce08;
      46: out3 <= 16'hd00e;
      47: out3 <= 16'hd231;
      48: out3 <= 16'hd471;
      49: out3 <= 16'hd6cb;
      50: out3 <= 16'hd93f;
      51: out3 <= 16'hdbcb;
      52: out3 <= 16'hde6d;
      53: out3 <= 16'he124;
      54: out3 <= 16'he3ee;
      55: out3 <= 16'he6c9;
      56: out3 <= 16'he9b4;
      57: out3 <= 16'hecac;
      58: out3 <= 16'hefb0;
      59: out3 <= 16'hf2bf;
      60: out3 <= 16'hf5d5;
      61: out3 <= 16'hf8f2;
      62: out3 <= 16'hfc13;
      63: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D26_81188(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfcdc;
      2: out3 <= 16'hf9ba;
      3: out3 <= 16'hf69c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hf073;
      6: out3 <= 16'hed6c;
      7: out3 <= 16'hea70;
      8: out3 <= 16'he782;
      9: out3 <= 16'he4a3;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hdf19;
      12: out3 <= 16'hdc72;
      13: out3 <= 16'hd9e0;
      14: out3 <= 16'hd766;
      15: out3 <= 16'hd505;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd094;
      18: out3 <= 16'hce87;
      19: out3 <= 16'hcc98;
      20: out3 <= 16'hcac9;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hc78f;
      23: out3 <= 16'hc625;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc3be;
      26: out3 <= 16'hc2c1;
      27: out3 <= 16'hc1eb;
      28: out3 <= 16'hc13b;
      29: out3 <= 16'hc0b1;
      30: out3 <= 16'hc04f;
      31: out3 <= 16'hc014;
      32: out3 <= 16'hc000;
      33: out3 <= 16'hc014;
      34: out3 <= 16'hc04f;
      35: out3 <= 16'hc0b1;
      36: out3 <= 16'hc13b;
      37: out3 <= 16'hc1eb;
      38: out3 <= 16'hc2c1;
      39: out3 <= 16'hc3be;
      40: out3 <= 16'hc4df;
      41: out3 <= 16'hc625;
      42: out3 <= 16'hc78f;
      43: out3 <= 16'hc91b;
      44: out3 <= 16'hcac9;
      45: out3 <= 16'hcc98;
      46: out3 <= 16'hce87;
      47: out3 <= 16'hd094;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd505;
      50: out3 <= 16'hd766;
      51: out3 <= 16'hd9e0;
      52: out3 <= 16'hdc72;
      53: out3 <= 16'hdf19;
      54: out3 <= 16'he1d5;
      55: out3 <= 16'he4a3;
      56: out3 <= 16'he782;
      57: out3 <= 16'hea70;
      58: out3 <= 16'hed6c;
      59: out3 <= 16'hf073;
      60: out3 <= 16'hf384;
      61: out3 <= 16'hf69c;
      62: out3 <= 16'hf9ba;
      63: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D30_81254(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf82a;
      3: out3 <= 16'hf50f;
      4: out3 <= 16'hf1fa;
      5: out3 <= 16'heeee;
      6: out3 <= 16'hebed;
      7: out3 <= 16'he8f7;
      8: out3 <= 16'he611;
      9: out3 <= 16'he33a;
      10: out3 <= 16'he074;
      11: out3 <= 16'hddc3;
      12: out3 <= 16'hdb26;
      13: out3 <= 16'hd8a0;
      14: out3 <= 16'hd632;
      15: out3 <= 16'hd3df;
      16: out3 <= 16'hd1a6;
      17: out3 <= 16'hcf8a;
      18: out3 <= 16'hcd8c;
      19: out3 <= 16'hcbad;
      20: out3 <= 16'hc9ee;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hc6d5;
      23: out3 <= 16'hc57e;
      24: out3 <= 16'hc44a;
      25: out3 <= 16'hc33b;
      26: out3 <= 16'hc251;
      27: out3 <= 16'hc18e;
      28: out3 <= 16'hc0f1;
      29: out3 <= 16'hc07b;
      30: out3 <= 16'hc02c;
      31: out3 <= 16'hc005;
      32: out3 <= 16'hc005;
      33: out3 <= 16'hc02c;
      34: out3 <= 16'hc07b;
      35: out3 <= 16'hc0f1;
      36: out3 <= 16'hc18e;
      37: out3 <= 16'hc251;
      38: out3 <= 16'hc33b;
      39: out3 <= 16'hc44a;
      40: out3 <= 16'hc57e;
      41: out3 <= 16'hc6d5;
      42: out3 <= 16'hc850;
      43: out3 <= 16'hc9ee;
      44: out3 <= 16'hcbad;
      45: out3 <= 16'hcd8c;
      46: out3 <= 16'hcf8a;
      47: out3 <= 16'hd1a6;
      48: out3 <= 16'hd3df;
      49: out3 <= 16'hd632;
      50: out3 <= 16'hd8a0;
      51: out3 <= 16'hdb26;
      52: out3 <= 16'hddc3;
      53: out3 <= 16'he074;
      54: out3 <= 16'he33a;
      55: out3 <= 16'he611;
      56: out3 <= 16'he8f7;
      57: out3 <= 16'hebed;
      58: out3 <= 16'heeee;
      59: out3 <= 16'hf1fa;
      60: out3 <= 16'hf50f;
      61: out3 <= 16'hf82a;
      62: out3 <= 16'hfb4b;
      63: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D28_81452(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfc13;
      2: out3 <= 16'hf8f2;
      3: out3 <= 16'hf5d5;
      4: out3 <= 16'hf2bf;
      5: out3 <= 16'hefb0;
      6: out3 <= 16'hecac;
      7: out3 <= 16'he9b4;
      8: out3 <= 16'he6c9;
      9: out3 <= 16'he3ee;
      10: out3 <= 16'he124;
      11: out3 <= 16'hde6d;
      12: out3 <= 16'hdbcb;
      13: out3 <= 16'hd93f;
      14: out3 <= 16'hd6cb;
      15: out3 <= 16'hd471;
      16: out3 <= 16'hd231;
      17: out3 <= 16'hd00e;
      18: out3 <= 16'hce08;
      19: out3 <= 16'hcc21;
      20: out3 <= 16'hca5b;
      21: out3 <= 16'hc8b5;
      22: out3 <= 16'hc731;
      23: out3 <= 16'hc5d0;
      24: out3 <= 16'hc493;
      25: out3 <= 16'hc37b;
      26: out3 <= 16'hc288;
      27: out3 <= 16'hc1bb;
      28: out3 <= 16'hc115;
      29: out3 <= 16'hc095;
      30: out3 <= 16'hc03c;
      31: out3 <= 16'hc00b;
      32: out3 <= 16'hc001;
      33: out3 <= 16'hc01f;
      34: out3 <= 16'hc064;
      35: out3 <= 16'hc0d0;
      36: out3 <= 16'hc163;
      37: out3 <= 16'hc21d;
      38: out3 <= 16'hc2fd;
      39: out3 <= 16'hc403;
      40: out3 <= 16'hc52d;
      41: out3 <= 16'hc67c;
      42: out3 <= 16'hc7ee;
      43: out3 <= 16'hc983;
      44: out3 <= 16'hcb3a;
      45: out3 <= 16'hcd11;
      46: out3 <= 16'hcf07;
      47: out3 <= 16'hd11c;
      48: out3 <= 16'hd34e;
      49: out3 <= 16'hd59b;
      50: out3 <= 16'hd802;
      51: out3 <= 16'hda82;
      52: out3 <= 16'hdd19;
      53: out3 <= 16'hdfc6;
      54: out3 <= 16'he287;
      55: out3 <= 16'he559;
      56: out3 <= 16'he83c;
      57: out3 <= 16'heb2e;
      58: out3 <= 16'hee2d;
      59: out3 <= 16'hf136;
      60: out3 <= 16'hf449;
      61: out3 <= 16'hf763;
      62: out3 <= 16'hfa82;
      63: out3 <= 16'hfda5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock79756(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i2_in;
   reg [5:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90439(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a450;
   wire signed [15:0] a403;
   wire signed [15:0] a453;
   wire signed [15:0] a407;
   wire signed [15:0] a454;
   wire signed [15:0] a455;
   wire signed [15:0] a458;
   wire signed [15:0] a415;
   wire signed [15:0] a461;
   wire signed [15:0] a419;
   wire signed [15:0] a462;
   wire signed [15:0] a463;
   wire signed [15:0] a466;
   wire signed [15:0] a427;
   wire signed [15:0] a469;
   wire signed [15:0] a431;
   wire signed [15:0] a470;
   wire signed [15:0] a471;
   wire signed [15:0] a474;
   wire signed [15:0] a439;
   wire signed [15:0] a477;
   wire signed [15:0] a443;
   wire signed [15:0] a478;
   wire signed [15:0] a479;
   reg signed [15:0] tm1545;
   reg signed [15:0] tm1549;
   reg signed [15:0] tm1561;
   reg signed [15:0] tm1565;
   reg signed [15:0] tm1577;
   reg signed [15:0] tm1581;
   reg signed [15:0] tm1593;
   reg signed [15:0] tm1597;
   reg signed [15:0] tm1609;
   reg signed [15:0] tm1616;
   reg signed [15:0] tm1623;
   reg signed [15:0] tm1630;
   reg signed [15:0] tm1637;
   reg signed [15:0] tm1644;
   reg signed [15:0] tm1651;
   reg signed [15:0] tm1658;
   reg signed [15:0] tm1546;
   reg signed [15:0] tm1550;
   reg signed [15:0] tm1562;
   reg signed [15:0] tm1566;
   reg signed [15:0] tm1578;
   reg signed [15:0] tm1582;
   reg signed [15:0] tm1594;
   reg signed [15:0] tm1598;
   reg signed [15:0] tm1610;
   reg signed [15:0] tm1617;
   reg signed [15:0] tm1624;
   reg signed [15:0] tm1631;
   reg signed [15:0] tm1638;
   reg signed [15:0] tm1645;
   reg signed [15:0] tm1652;
   reg signed [15:0] tm1659;
   wire signed [15:0] tm86;
   wire signed [15:0] a408;
   wire signed [15:0] tm87;
   wire signed [15:0] a410;
   wire signed [15:0] tm90;
   wire signed [15:0] a420;
   wire signed [15:0] tm91;
   wire signed [15:0] a422;
   wire signed [15:0] tm94;
   wire signed [15:0] a432;
   wire signed [15:0] tm95;
   wire signed [15:0] a434;
   wire signed [15:0] tm98;
   wire signed [15:0] a444;
   wire signed [15:0] tm99;
   wire signed [15:0] a446;
   reg signed [15:0] tm1547;
   reg signed [15:0] tm1551;
   reg signed [15:0] tm1563;
   reg signed [15:0] tm1567;
   reg signed [15:0] tm1579;
   reg signed [15:0] tm1583;
   reg signed [15:0] tm1595;
   reg signed [15:0] tm1599;
   reg signed [15:0] tm1611;
   reg signed [15:0] tm1618;
   reg signed [15:0] tm1625;
   reg signed [15:0] tm1632;
   reg signed [15:0] tm1639;
   reg signed [15:0] tm1646;
   reg signed [15:0] tm1653;
   reg signed [15:0] tm1660;
   reg signed [15:0] tm280;
   reg signed [15:0] tm281;
   reg signed [15:0] tm288;
   reg signed [15:0] tm289;
   reg signed [15:0] tm296;
   reg signed [15:0] tm297;
   reg signed [15:0] tm304;
   reg signed [15:0] tm305;
   reg signed [15:0] tm1548;
   reg signed [15:0] tm1552;
   reg signed [15:0] tm1564;
   reg signed [15:0] tm1568;
   reg signed [15:0] tm1580;
   reg signed [15:0] tm1584;
   reg signed [15:0] tm1596;
   reg signed [15:0] tm1600;
   reg signed [15:0] tm1612;
   reg signed [15:0] tm1619;
   reg signed [15:0] tm1626;
   reg signed [15:0] tm1633;
   reg signed [15:0] tm1640;
   reg signed [15:0] tm1647;
   reg signed [15:0] tm1654;
   reg signed [15:0] tm1661;
   reg signed [15:0] tm1613;
   reg signed [15:0] tm1620;
   reg signed [15:0] tm1627;
   reg signed [15:0] tm1634;
   reg signed [15:0] tm1641;
   reg signed [15:0] tm1648;
   reg signed [15:0] tm1655;
   reg signed [15:0] tm1662;
   wire signed [15:0] a409;
   wire signed [15:0] a411;
   wire signed [15:0] a412;
   wire signed [15:0] a413;
   wire signed [15:0] a421;
   wire signed [15:0] a423;
   wire signed [15:0] a424;
   wire signed [15:0] a425;
   wire signed [15:0] a433;
   wire signed [15:0] a435;
   wire signed [15:0] a436;
   wire signed [15:0] a437;
   wire signed [15:0] a445;
   wire signed [15:0] a447;
   wire signed [15:0] a448;
   wire signed [15:0] a449;
   reg signed [15:0] tm1614;
   reg signed [15:0] tm1621;
   reg signed [15:0] tm1628;
   reg signed [15:0] tm1635;
   reg signed [15:0] tm1642;
   reg signed [15:0] tm1649;
   reg signed [15:0] tm1656;
   reg signed [15:0] tm1663;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1615;
   reg signed [15:0] tm1622;
   reg signed [15:0] tm1629;
   reg signed [15:0] tm1636;
   reg signed [15:0] tm1643;
   reg signed [15:0] tm1650;
   reg signed [15:0] tm1657;
   reg signed [15:0] tm1664;


   assign a450 = X0;
   assign a403 = a450;
   assign a453 = X1;
   assign a407 = a453;
   assign a454 = X2;
   assign a455 = X3;
   assign a458 = X4;
   assign a415 = a458;
   assign a461 = X5;
   assign a419 = a461;
   assign a462 = X6;
   assign a463 = X7;
   assign a466 = X8;
   assign a427 = a466;
   assign a469 = X9;
   assign a431 = a469;
   assign a470 = X10;
   assign a471 = X11;
   assign a474 = X12;
   assign a439 = a474;
   assign a477 = X13;
   assign a443 = a477;
   assign a478 = X14;
   assign a479 = X15;
   assign a408 = tm86;
   assign a410 = tm87;
   assign a420 = tm90;
   assign a422 = tm91;
   assign a432 = tm94;
   assign a434 = tm95;
   assign a444 = tm98;
   assign a446 = tm99;
   assign Y0 = tm1615;
   assign Y1 = tm1622;
   assign Y4 = tm1629;
   assign Y5 = tm1636;
   assign Y8 = tm1643;
   assign Y9 = tm1650;
   assign Y12 = tm1657;
   assign Y13 = tm1664;

   D20_80462 instD20inst0_80462(.addr(i2[5:0]), .out(tm90), .clk(clk));

   D18_80660 instD18inst0_80660(.addr(i2[5:0]), .out(tm86), .clk(clk));

   D22_80726 instD22inst0_80726(.addr(i2[5:0]), .out(tm94), .clk(clk));

   D24_80924 instD24inst0_80924(.addr(i2[5:0]), .out(tm98), .clk(clk));

   D32_80990 instD32inst0_80990(.addr(i2[5:0]), .out(tm99), .clk(clk));

   D26_81188 instD26inst0_81188(.addr(i2[5:0]), .out(tm87), .clk(clk));

   D30_81254 instD30inst0_81254(.addr(i2[5:0]), .out(tm95), .clk(clk));

   D28_81452 instD28inst0_81452(.addr(i2[5:0]), .out(tm91), .clk(clk));

    multfix #(16, 2) m79855(.a(tm280), .b(tm1548), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(16, 2) m79877(.a(tm281), .b(tm1552), .clk(clk), .q_sc(a411), .q_unsc(), .rst(reset));
    multfix #(16, 2) m79895(.a(tm281), .b(tm1548), .clk(clk), .q_sc(a412), .q_unsc(), .rst(reset));
    multfix #(16, 2) m79906(.a(tm280), .b(tm1552), .clk(clk), .q_sc(a413), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80015(.a(tm288), .b(tm1564), .clk(clk), .q_sc(a421), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80037(.a(tm289), .b(tm1568), .clk(clk), .q_sc(a423), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80055(.a(tm289), .b(tm1564), .clk(clk), .q_sc(a424), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80066(.a(tm288), .b(tm1568), .clk(clk), .q_sc(a425), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80175(.a(tm296), .b(tm1580), .clk(clk), .q_sc(a433), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80197(.a(tm297), .b(tm1584), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80215(.a(tm297), .b(tm1580), .clk(clk), .q_sc(a436), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80226(.a(tm296), .b(tm1584), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80335(.a(tm304), .b(tm1596), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80357(.a(tm305), .b(tm1600), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80375(.a(tm305), .b(tm1596), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(16, 2) m80386(.a(tm304), .b(tm1600), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub79884(.a(a409), .b(a411), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add79913(.a(a412), .b(a413), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub80044(.a(a421), .b(a423), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add80073(.a(a424), .b(a425), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub80204(.a(a433), .b(a435), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add80233(.a(a436), .b(a437), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub80364(.a(a445), .b(a447), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add80393(.a(a448), .b(a449), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm280 <= 0;
         tm1548 <= 0;
         tm281 <= 0;
         tm1552 <= 0;
         tm281 <= 0;
         tm1548 <= 0;
         tm280 <= 0;
         tm1552 <= 0;
         tm288 <= 0;
         tm1564 <= 0;
         tm289 <= 0;
         tm1568 <= 0;
         tm289 <= 0;
         tm1564 <= 0;
         tm288 <= 0;
         tm1568 <= 0;
         tm296 <= 0;
         tm1580 <= 0;
         tm297 <= 0;
         tm1584 <= 0;
         tm297 <= 0;
         tm1580 <= 0;
         tm296 <= 0;
         tm1584 <= 0;
         tm304 <= 0;
         tm1596 <= 0;
         tm305 <= 0;
         tm1600 <= 0;
         tm305 <= 0;
         tm1596 <= 0;
         tm304 <= 0;
         tm1600 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1545 <= a454;
         tm1549 <= a455;
         tm1561 <= a462;
         tm1565 <= a463;
         tm1577 <= a470;
         tm1581 <= a471;
         tm1593 <= a478;
         tm1597 <= a479;
         tm1609 <= a403;
         tm1616 <= a407;
         tm1623 <= a415;
         tm1630 <= a419;
         tm1637 <= a427;
         tm1644 <= a431;
         tm1651 <= a439;
         tm1658 <= a443;
         tm1546 <= tm1545;
         tm1550 <= tm1549;
         tm1562 <= tm1561;
         tm1566 <= tm1565;
         tm1578 <= tm1577;
         tm1582 <= tm1581;
         tm1594 <= tm1593;
         tm1598 <= tm1597;
         tm1610 <= tm1609;
         tm1617 <= tm1616;
         tm1624 <= tm1623;
         tm1631 <= tm1630;
         tm1638 <= tm1637;
         tm1645 <= tm1644;
         tm1652 <= tm1651;
         tm1659 <= tm1658;
         tm1547 <= tm1546;
         tm1551 <= tm1550;
         tm1563 <= tm1562;
         tm1567 <= tm1566;
         tm1579 <= tm1578;
         tm1583 <= tm1582;
         tm1595 <= tm1594;
         tm1599 <= tm1598;
         tm1611 <= tm1610;
         tm1618 <= tm1617;
         tm1625 <= tm1624;
         tm1632 <= tm1631;
         tm1639 <= tm1638;
         tm1646 <= tm1645;
         tm1653 <= tm1652;
         tm1660 <= tm1659;
         tm280 <= a408;
         tm281 <= a410;
         tm288 <= a420;
         tm289 <= a422;
         tm296 <= a432;
         tm297 <= a434;
         tm304 <= a444;
         tm305 <= a446;
         tm1548 <= tm1547;
         tm1552 <= tm1551;
         tm1564 <= tm1563;
         tm1568 <= tm1567;
         tm1580 <= tm1579;
         tm1584 <= tm1583;
         tm1596 <= tm1595;
         tm1600 <= tm1599;
         tm1612 <= tm1611;
         tm1619 <= tm1618;
         tm1626 <= tm1625;
         tm1633 <= tm1632;
         tm1640 <= tm1639;
         tm1647 <= tm1646;
         tm1654 <= tm1653;
         tm1661 <= tm1660;
         tm1613 <= tm1612;
         tm1620 <= tm1619;
         tm1627 <= tm1626;
         tm1634 <= tm1633;
         tm1641 <= tm1640;
         tm1648 <= tm1647;
         tm1655 <= tm1654;
         tm1662 <= tm1661;
         tm1614 <= tm1613;
         tm1621 <= tm1620;
         tm1628 <= tm1627;
         tm1635 <= tm1634;
         tm1642 <= tm1641;
         tm1649 <= tm1648;
         tm1656 <= tm1655;
         tm1663 <= tm1662;
         tm1615 <= tm1614;
         tm1622 <= tm1621;
         tm1629 <= tm1628;
         tm1636 <= tm1635;
         tm1643 <= tm1642;
         tm1650 <= tm1649;
         tm1657 <= tm1656;
         tm1664 <= tm1663;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock81457(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90442(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a273;
   wire signed [15:0] a274;
   wire signed [15:0] a275;
   wire signed [15:0] a276;
   wire signed [15:0] a281;
   wire signed [15:0] a282;
   wire signed [15:0] a283;
   wire signed [15:0] a284;
   wire signed [15:0] a289;
   wire signed [15:0] a290;
   wire signed [15:0] a291;
   wire signed [15:0] a292;
   wire signed [15:0] a297;
   wire signed [15:0] a298;
   wire signed [15:0] a299;
   wire signed [15:0] a300;
   wire signed [16:0] tm865;
   wire signed [16:0] tm866;
   wire signed [16:0] tm867;
   wire signed [16:0] tm868;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm869;
   wire signed [16:0] tm870;
   wire signed [16:0] tm871;
   wire signed [16:0] tm872;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm873;
   wire signed [16:0] tm874;
   wire signed [16:0] tm875;
   wire signed [16:0] tm876;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm877;
   wire signed [16:0] tm878;
   wire signed [16:0] tm879;
   wire signed [16:0] tm880;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t193;
   wire signed [15:0] t194;
   wire signed [15:0] t195;
   wire signed [15:0] t196;
   wire signed [15:0] t197;
   wire signed [15:0] t198;
   wire signed [15:0] t199;
   wire signed [15:0] t200;
   wire signed [15:0] t201;
   wire signed [15:0] t202;
   wire signed [15:0] t203;
   wire signed [15:0] t204;
   wire signed [15:0] t205;
   wire signed [15:0] t206;
   wire signed [15:0] t207;
   wire signed [15:0] t208;


   assign a273 = X0;
   assign a274 = X2;
   assign a275 = X1;
   assign a276 = X3;
   assign a281 = X4;
   assign a282 = X6;
   assign a283 = X5;
   assign a284 = X7;
   assign a289 = X8;
   assign a290 = X10;
   assign a291 = X9;
   assign a292 = X11;
   assign a297 = X12;
   assign a298 = X14;
   assign a299 = X13;
   assign a300 = X15;
   assign Y0 = t193;
   assign Y1 = t194;
   assign Y2 = t195;
   assign Y3 = t196;
   assign Y4 = t197;
   assign Y5 = t198;
   assign Y6 = t199;
   assign Y7 = t200;
   assign Y8 = t201;
   assign Y9 = t202;
   assign Y10 = t203;
   assign Y11 = t204;
   assign Y12 = t205;
   assign Y13 = t206;
   assign Y14 = t207;
   assign Y15 = t208;
   assign t193 = tm865[16:1];
   assign t194 = tm866[16:1];
   assign t195 = tm867[16:1];
   assign t196 = tm868[16:1];
   assign t197 = tm869[16:1];
   assign t198 = tm870[16:1];
   assign t199 = tm871[16:1];
   assign t200 = tm872[16:1];
   assign t201 = tm873[16:1];
   assign t202 = tm874[16:1];
   assign t203 = tm875[16:1];
   assign t204 = tm876[16:1];
   assign t205 = tm877[16:1];
   assign t206 = tm878[16:1];
   assign t207 = tm879[16:1];
   assign t208 = tm880[16:1];

    addfxp #(17, 1) add81469(.a({{1{a273[15]}}, a273}), .b({{1{a274[15]}}, a274}), .clk(clk), .q(tm865));    // 0
    addfxp #(17, 1) add81484(.a({{1{a275[15]}}, a275}), .b({{1{a276[15]}}, a276}), .clk(clk), .q(tm866));    // 0
    subfxp #(17, 1) sub81499(.a({{1{a273[15]}}, a273}), .b({{1{a274[15]}}, a274}), .clk(clk), .q(tm867));    // 0
    subfxp #(17, 1) sub81514(.a({{1{a275[15]}}, a275}), .b({{1{a276[15]}}, a276}), .clk(clk), .q(tm868));    // 0
    addfxp #(17, 1) add81545(.a({{1{a281[15]}}, a281}), .b({{1{a282[15]}}, a282}), .clk(clk), .q(tm869));    // 0
    addfxp #(17, 1) add81560(.a({{1{a283[15]}}, a283}), .b({{1{a284[15]}}, a284}), .clk(clk), .q(tm870));    // 0
    subfxp #(17, 1) sub81575(.a({{1{a281[15]}}, a281}), .b({{1{a282[15]}}, a282}), .clk(clk), .q(tm871));    // 0
    subfxp #(17, 1) sub81590(.a({{1{a283[15]}}, a283}), .b({{1{a284[15]}}, a284}), .clk(clk), .q(tm872));    // 0
    addfxp #(17, 1) add81621(.a({{1{a289[15]}}, a289}), .b({{1{a290[15]}}, a290}), .clk(clk), .q(tm873));    // 0
    addfxp #(17, 1) add81636(.a({{1{a291[15]}}, a291}), .b({{1{a292[15]}}, a292}), .clk(clk), .q(tm874));    // 0
    subfxp #(17, 1) sub81651(.a({{1{a289[15]}}, a289}), .b({{1{a290[15]}}, a290}), .clk(clk), .q(tm875));    // 0
    subfxp #(17, 1) sub81666(.a({{1{a291[15]}}, a291}), .b({{1{a292[15]}}, a292}), .clk(clk), .q(tm876));    // 0
    addfxp #(17, 1) add81697(.a({{1{a297[15]}}, a297}), .b({{1{a298[15]}}, a298}), .clk(clk), .q(tm877));    // 0
    addfxp #(17, 1) add81712(.a({{1{a299[15]}}, a299}), .b({{1{a300[15]}}, a300}), .clk(clk), .q(tm878));    // 0
    subfxp #(17, 1) sub81727(.a({{1{a297[15]}}, a297}), .b({{1{a298[15]}}, a298}), .clk(clk), .q(tm879));    // 0
    subfxp #(17, 1) sub81742(.a({{1{a299[15]}}, a299}), .b({{1{a300[15]}}, a300}), .clk(clk), .q(tm880));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 67
// Gap: 128
module rc81766(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm81764 instPerm90443(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 67
// Gap: 128
module perm81764(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[9] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[7];
   assign inAddr0[5] = addr0[8];
   assign inAddr0[6] = addr0[0];
   assign outBank0[0] = addr0b[9] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[9] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[9] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[7];
   assign inAddr1[5] = addr1[8];
   assign inAddr1[6] = addr1[0];
   assign outBank1[0] = addr1b[9] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[9] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[9] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[7];
   assign inAddr2[5] = addr2[8];
   assign inAddr2[6] = addr2[0];
   assign outBank2[0] = addr2b[9] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[9] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[9] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[7];
   assign inAddr3[5] = addr3[8];
   assign inAddr3[6] = addr3[0];
   assign outBank3[0] = addr3b[9] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[9] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[9] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[6];
   assign inAddr4[4] = addr4[7];
   assign inAddr4[5] = addr4[8];
   assign inAddr4[6] = addr4[0];
   assign outBank4[0] = addr4b[9] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[9] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[9] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[6];
   assign inAddr5[4] = addr5[7];
   assign inAddr5[5] = addr5[8];
   assign inAddr5[6] = addr5[0];
   assign outBank5[0] = addr5b[9] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[9] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[9] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[6];
   assign inAddr6[4] = addr6[7];
   assign inAddr6[5] = addr6[8];
   assign inAddr6[6] = addr6[0];
   assign outBank6[0] = addr6b[9] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[9] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[9] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[6];
   assign inAddr7[4] = addr7[7];
   assign inAddr7[5] = addr7[8];
   assign inAddr7[6] = addr7[0];
   assign outBank7[0] = addr7b[9] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[9] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(65, 7) nextReg_90448(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90451(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_81764 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 64)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 66)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 64) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 64)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray1024_81764(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_90456(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 128
module DirSum_84490(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [6:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 127)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock81768 codeBlockIsnt90461(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D10_82668(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfe6e;
      2: out3 <= 16'hfcdc;
      3: out3 <= 16'hfb4b;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'hf69c;
      7: out3 <= 16'hf50f;
      8: out3 <= 16'hf384;
      9: out3 <= 16'hf1fa;
      10: out3 <= 16'hf073;
      11: out3 <= 16'heeee;
      12: out3 <= 16'hed6c;
      13: out3 <= 16'hebed;
      14: out3 <= 16'hea70;
      15: out3 <= 16'he8f7;
      16: out3 <= 16'he782;
      17: out3 <= 16'he611;
      18: out3 <= 16'he4a3;
      19: out3 <= 16'he33a;
      20: out3 <= 16'he1d5;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdf19;
      23: out3 <= 16'hddc3;
      24: out3 <= 16'hdc72;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'hd9e0;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'hd766;
      29: out3 <= 16'hd632;
      30: out3 <= 16'hd505;
      31: out3 <= 16'hd3df;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd1a6;
      34: out3 <= 16'hd094;
      35: out3 <= 16'hcf8a;
      36: out3 <= 16'hce87;
      37: out3 <= 16'hcd8c;
      38: out3 <= 16'hcc98;
      39: out3 <= 16'hcbad;
      40: out3 <= 16'hcac9;
      41: out3 <= 16'hc9ee;
      42: out3 <= 16'hc91b;
      43: out3 <= 16'hc850;
      44: out3 <= 16'hc78f;
      45: out3 <= 16'hc6d5;
      46: out3 <= 16'hc625;
      47: out3 <= 16'hc57e;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc44a;
      50: out3 <= 16'hc3be;
      51: out3 <= 16'hc33b;
      52: out3 <= 16'hc2c1;
      53: out3 <= 16'hc251;
      54: out3 <= 16'hc1eb;
      55: out3 <= 16'hc18e;
      56: out3 <= 16'hc13b;
      57: out3 <= 16'hc0f1;
      58: out3 <= 16'hc0b1;
      59: out3 <= 16'hc07b;
      60: out3 <= 16'hc04f;
      61: out3 <= 16'hc02c;
      62: out3 <= 16'hc014;
      63: out3 <= 16'hc005;
      64: out3 <= 16'hc000;
      65: out3 <= 16'hc005;
      66: out3 <= 16'hc014;
      67: out3 <= 16'hc02c;
      68: out3 <= 16'hc04f;
      69: out3 <= 16'hc07b;
      70: out3 <= 16'hc0b1;
      71: out3 <= 16'hc0f1;
      72: out3 <= 16'hc13b;
      73: out3 <= 16'hc18e;
      74: out3 <= 16'hc1eb;
      75: out3 <= 16'hc251;
      76: out3 <= 16'hc2c1;
      77: out3 <= 16'hc33b;
      78: out3 <= 16'hc3be;
      79: out3 <= 16'hc44a;
      80: out3 <= 16'hc4df;
      81: out3 <= 16'hc57e;
      82: out3 <= 16'hc625;
      83: out3 <= 16'hc6d5;
      84: out3 <= 16'hc78f;
      85: out3 <= 16'hc850;
      86: out3 <= 16'hc91b;
      87: out3 <= 16'hc9ee;
      88: out3 <= 16'hcac9;
      89: out3 <= 16'hcbad;
      90: out3 <= 16'hcc98;
      91: out3 <= 16'hcd8c;
      92: out3 <= 16'hce87;
      93: out3 <= 16'hcf8a;
      94: out3 <= 16'hd094;
      95: out3 <= 16'hd1a6;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd3df;
      98: out3 <= 16'hd505;
      99: out3 <= 16'hd632;
      100: out3 <= 16'hd766;
      101: out3 <= 16'hd8a0;
      102: out3 <= 16'hd9e0;
      103: out3 <= 16'hdb26;
      104: out3 <= 16'hdc72;
      105: out3 <= 16'hddc3;
      106: out3 <= 16'hdf19;
      107: out3 <= 16'he074;
      108: out3 <= 16'he1d5;
      109: out3 <= 16'he33a;
      110: out3 <= 16'he4a3;
      111: out3 <= 16'he611;
      112: out3 <= 16'he782;
      113: out3 <= 16'he8f7;
      114: out3 <= 16'hea70;
      115: out3 <= 16'hebed;
      116: out3 <= 16'hed6c;
      117: out3 <= 16'heeee;
      118: out3 <= 16'hf073;
      119: out3 <= 16'hf1fa;
      120: out3 <= 16'hf384;
      121: out3 <= 16'hf50f;
      122: out3 <= 16'hf69c;
      123: out3 <= 16'hf82a;
      124: out3 <= 16'hf9ba;
      125: out3 <= 16'hfb4b;
      126: out3 <= 16'hfcdc;
      127: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D2_82928(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffb;
      2: out3 <= 16'h3fec;
      3: out3 <= 16'h3fd4;
      4: out3 <= 16'h3fb1;
      5: out3 <= 16'h3f85;
      6: out3 <= 16'h3f4f;
      7: out3 <= 16'h3f0f;
      8: out3 <= 16'h3ec5;
      9: out3 <= 16'h3e72;
      10: out3 <= 16'h3e15;
      11: out3 <= 16'h3daf;
      12: out3 <= 16'h3d3f;
      13: out3 <= 16'h3cc5;
      14: out3 <= 16'h3c42;
      15: out3 <= 16'h3bb6;
      16: out3 <= 16'h3b21;
      17: out3 <= 16'h3a82;
      18: out3 <= 16'h39db;
      19: out3 <= 16'h392b;
      20: out3 <= 16'h3871;
      21: out3 <= 16'h37b0;
      22: out3 <= 16'h36e5;
      23: out3 <= 16'h3612;
      24: out3 <= 16'h3537;
      25: out3 <= 16'h3453;
      26: out3 <= 16'h3368;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h3179;
      29: out3 <= 16'h3076;
      30: out3 <= 16'h2f6c;
      31: out3 <= 16'h2e5a;
      32: out3 <= 16'h2d41;
      33: out3 <= 16'h2c21;
      34: out3 <= 16'h2afb;
      35: out3 <= 16'h29ce;
      36: out3 <= 16'h289a;
      37: out3 <= 16'h2760;
      38: out3 <= 16'h2620;
      39: out3 <= 16'h24da;
      40: out3 <= 16'h238e;
      41: out3 <= 16'h223d;
      42: out3 <= 16'h20e7;
      43: out3 <= 16'h1f8c;
      44: out3 <= 16'h1e2b;
      45: out3 <= 16'h1cc6;
      46: out3 <= 16'h1b5d;
      47: out3 <= 16'h19ef;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1709;
      50: out3 <= 16'h1590;
      51: out3 <= 16'h1413;
      52: out3 <= 16'h1294;
      53: out3 <= 16'h1112;
      54: out3 <= 16'hf8d;
      55: out3 <= 16'he06;
      56: out3 <= 16'hc7c;
      57: out3 <= 16'haf1;
      58: out3 <= 16'h964;
      59: out3 <= 16'h7d6;
      60: out3 <= 16'h646;
      61: out3 <= 16'h4b5;
      62: out3 <= 16'h324;
      63: out3 <= 16'h192;
      64: out3 <= 16'h0;
      65: out3 <= 16'hfe6e;
      66: out3 <= 16'hfcdc;
      67: out3 <= 16'hfb4b;
      68: out3 <= 16'hf9ba;
      69: out3 <= 16'hf82a;
      70: out3 <= 16'hf69c;
      71: out3 <= 16'hf50f;
      72: out3 <= 16'hf384;
      73: out3 <= 16'hf1fa;
      74: out3 <= 16'hf073;
      75: out3 <= 16'heeee;
      76: out3 <= 16'hed6c;
      77: out3 <= 16'hebed;
      78: out3 <= 16'hea70;
      79: out3 <= 16'he8f7;
      80: out3 <= 16'he782;
      81: out3 <= 16'he611;
      82: out3 <= 16'he4a3;
      83: out3 <= 16'he33a;
      84: out3 <= 16'he1d5;
      85: out3 <= 16'he074;
      86: out3 <= 16'hdf19;
      87: out3 <= 16'hddc3;
      88: out3 <= 16'hdc72;
      89: out3 <= 16'hdb26;
      90: out3 <= 16'hd9e0;
      91: out3 <= 16'hd8a0;
      92: out3 <= 16'hd766;
      93: out3 <= 16'hd632;
      94: out3 <= 16'hd505;
      95: out3 <= 16'hd3df;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd1a6;
      98: out3 <= 16'hd094;
      99: out3 <= 16'hcf8a;
      100: out3 <= 16'hce87;
      101: out3 <= 16'hcd8c;
      102: out3 <= 16'hcc98;
      103: out3 <= 16'hcbad;
      104: out3 <= 16'hcac9;
      105: out3 <= 16'hc9ee;
      106: out3 <= 16'hc91b;
      107: out3 <= 16'hc850;
      108: out3 <= 16'hc78f;
      109: out3 <= 16'hc6d5;
      110: out3 <= 16'hc625;
      111: out3 <= 16'hc57e;
      112: out3 <= 16'hc4df;
      113: out3 <= 16'hc44a;
      114: out3 <= 16'hc3be;
      115: out3 <= 16'hc33b;
      116: out3 <= 16'hc2c1;
      117: out3 <= 16'hc251;
      118: out3 <= 16'hc1eb;
      119: out3 <= 16'hc18e;
      120: out3 <= 16'hc13b;
      121: out3 <= 16'hc0f1;
      122: out3 <= 16'hc0b1;
      123: out3 <= 16'hc07b;
      124: out3 <= 16'hc04f;
      125: out3 <= 16'hc02c;
      126: out3 <= 16'hc014;
      127: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8_83188(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffd;
      1: out3 <= 16'h3ff1;
      2: out3 <= 16'h3fdb;
      3: out3 <= 16'h3fbb;
      4: out3 <= 16'h3f91;
      5: out3 <= 16'h3f5d;
      6: out3 <= 16'h3f20;
      7: out3 <= 16'h3ed8;
      8: out3 <= 16'h3e88;
      9: out3 <= 16'h3e2d;
      10: out3 <= 16'h3dc9;
      11: out3 <= 16'h3d5b;
      12: out3 <= 16'h3ce4;
      13: out3 <= 16'h3c64;
      14: out3 <= 16'h3bda;
      15: out3 <= 16'h3b47;
      16: out3 <= 16'h3aab;
      17: out3 <= 16'h3a06;
      18: out3 <= 16'h3958;
      19: out3 <= 16'h38a1;
      20: out3 <= 16'h37e1;
      21: out3 <= 16'h3718;
      22: out3 <= 16'h3648;
      23: out3 <= 16'h356e;
      24: out3 <= 16'h348d;
      25: out3 <= 16'h33a3;
      26: out3 <= 16'h32b2;
      27: out3 <= 16'h31b9;
      28: out3 <= 16'h30b8;
      29: out3 <= 16'h2faf;
      30: out3 <= 16'h2e9f;
      31: out3 <= 16'h2d88;
      32: out3 <= 16'h2c6a;
      33: out3 <= 16'h2b45;
      34: out3 <= 16'h2a1a;
      35: out3 <= 16'h28e7;
      36: out3 <= 16'h27af;
      37: out3 <= 16'h2671;
      38: out3 <= 16'h252c;
      39: out3 <= 16'h23e2;
      40: out3 <= 16'h2292;
      41: out3 <= 16'h213d;
      42: out3 <= 16'h1fe3;
      43: out3 <= 16'h1e84;
      44: out3 <= 16'h1d20;
      45: out3 <= 16'h1bb8;
      46: out3 <= 16'h1a4b;
      47: out3 <= 16'h18db;
      48: out3 <= 16'h1766;
      49: out3 <= 16'h15ee;
      50: out3 <= 16'h1473;
      51: out3 <= 16'h12f4;
      52: out3 <= 16'h1173;
      53: out3 <= 16'hfee;
      54: out3 <= 16'he68;
      55: out3 <= 16'hcdf;
      56: out3 <= 16'hb54;
      57: out3 <= 16'h9c7;
      58: out3 <= 16'h839;
      59: out3 <= 16'h6aa;
      60: out3 <= 16'h51a;
      61: out3 <= 16'h388;
      62: out3 <= 16'h1f7;
      63: out3 <= 16'h65;
      64: out3 <= 16'hfed2;
      65: out3 <= 16'hfd40;
      66: out3 <= 16'hfbaf;
      67: out3 <= 16'hfa1e;
      68: out3 <= 16'hf88e;
      69: out3 <= 16'hf6ff;
      70: out3 <= 16'hf572;
      71: out3 <= 16'hf3e6;
      72: out3 <= 16'hf25c;
      73: out3 <= 16'hf0d5;
      74: out3 <= 16'hef4f;
      75: out3 <= 16'hedcc;
      76: out3 <= 16'hec4c;
      77: out3 <= 16'heacf;
      78: out3 <= 16'he955;
      79: out3 <= 16'he7df;
      80: out3 <= 16'he66d;
      81: out3 <= 16'he4fe;
      82: out3 <= 16'he394;
      83: out3 <= 16'he22d;
      84: out3 <= 16'he0cc;
      85: out3 <= 16'hdf6f;
      86: out3 <= 16'hde18;
      87: out3 <= 16'hdcc5;
      88: out3 <= 16'hdb78;
      89: out3 <= 16'hda31;
      90: out3 <= 16'hd8ef;
      91: out3 <= 16'hd7b4;
      92: out3 <= 16'hd67f;
      93: out3 <= 16'hd550;
      94: out3 <= 16'hd428;
      95: out3 <= 16'hd306;
      96: out3 <= 16'hd1eb;
      97: out3 <= 16'hd0d8;
      98: out3 <= 16'hcfcc;
      99: out3 <= 16'hcec7;
      100: out3 <= 16'hcdca;
      101: out3 <= 16'hccd4;
      102: out3 <= 16'hcbe7;
      103: out3 <= 16'hcb01;
      104: out3 <= 16'hca24;
      105: out3 <= 16'hc94f;
      106: out3 <= 16'hc882;
      107: out3 <= 16'hc7be;
      108: out3 <= 16'hc703;
      109: out3 <= 16'hc650;
      110: out3 <= 16'hc5a7;
      111: out3 <= 16'hc506;
      112: out3 <= 16'hc46e;
      113: out3 <= 16'hc3e0;
      114: out3 <= 16'hc35b;
      115: out3 <= 16'hc2df;
      116: out3 <= 16'hc26d;
      117: out3 <= 16'hc204;
      118: out3 <= 16'hc1a4;
      119: out3 <= 16'hc14f;
      120: out3 <= 16'hc103;
      121: out3 <= 16'hc0c0;
      122: out3 <= 16'hc088;
      123: out3 <= 16'hc059;
      124: out3 <= 16'hc034;
      125: out3 <= 16'hc019;
      126: out3 <= 16'hc008;
      127: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16_83318(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfed2;
      1: out3 <= 16'hfd40;
      2: out3 <= 16'hfbaf;
      3: out3 <= 16'hfa1e;
      4: out3 <= 16'hf88e;
      5: out3 <= 16'hf6ff;
      6: out3 <= 16'hf572;
      7: out3 <= 16'hf3e6;
      8: out3 <= 16'hf25c;
      9: out3 <= 16'hf0d5;
      10: out3 <= 16'hef4f;
      11: out3 <= 16'hedcc;
      12: out3 <= 16'hec4c;
      13: out3 <= 16'heacf;
      14: out3 <= 16'he955;
      15: out3 <= 16'he7df;
      16: out3 <= 16'he66d;
      17: out3 <= 16'he4fe;
      18: out3 <= 16'he394;
      19: out3 <= 16'he22d;
      20: out3 <= 16'he0cc;
      21: out3 <= 16'hdf6f;
      22: out3 <= 16'hde18;
      23: out3 <= 16'hdcc5;
      24: out3 <= 16'hdb78;
      25: out3 <= 16'hda31;
      26: out3 <= 16'hd8ef;
      27: out3 <= 16'hd7b4;
      28: out3 <= 16'hd67f;
      29: out3 <= 16'hd550;
      30: out3 <= 16'hd428;
      31: out3 <= 16'hd306;
      32: out3 <= 16'hd1eb;
      33: out3 <= 16'hd0d8;
      34: out3 <= 16'hcfcc;
      35: out3 <= 16'hcec7;
      36: out3 <= 16'hcdca;
      37: out3 <= 16'hccd4;
      38: out3 <= 16'hcbe7;
      39: out3 <= 16'hcb01;
      40: out3 <= 16'hca24;
      41: out3 <= 16'hc94f;
      42: out3 <= 16'hc882;
      43: out3 <= 16'hc7be;
      44: out3 <= 16'hc703;
      45: out3 <= 16'hc650;
      46: out3 <= 16'hc5a7;
      47: out3 <= 16'hc506;
      48: out3 <= 16'hc46e;
      49: out3 <= 16'hc3e0;
      50: out3 <= 16'hc35b;
      51: out3 <= 16'hc2df;
      52: out3 <= 16'hc26d;
      53: out3 <= 16'hc204;
      54: out3 <= 16'hc1a4;
      55: out3 <= 16'hc14f;
      56: out3 <= 16'hc103;
      57: out3 <= 16'hc0c0;
      58: out3 <= 16'hc088;
      59: out3 <= 16'hc059;
      60: out3 <= 16'hc034;
      61: out3 <= 16'hc019;
      62: out3 <= 16'hc008;
      63: out3 <= 16'hc000;
      64: out3 <= 16'hc003;
      65: out3 <= 16'hc00f;
      66: out3 <= 16'hc025;
      67: out3 <= 16'hc045;
      68: out3 <= 16'hc06f;
      69: out3 <= 16'hc0a3;
      70: out3 <= 16'hc0e0;
      71: out3 <= 16'hc128;
      72: out3 <= 16'hc178;
      73: out3 <= 16'hc1d3;
      74: out3 <= 16'hc237;
      75: out3 <= 16'hc2a5;
      76: out3 <= 16'hc31c;
      77: out3 <= 16'hc39c;
      78: out3 <= 16'hc426;
      79: out3 <= 16'hc4b9;
      80: out3 <= 16'hc555;
      81: out3 <= 16'hc5fa;
      82: out3 <= 16'hc6a8;
      83: out3 <= 16'hc75f;
      84: out3 <= 16'hc81f;
      85: out3 <= 16'hc8e8;
      86: out3 <= 16'hc9b8;
      87: out3 <= 16'hca92;
      88: out3 <= 16'hcb73;
      89: out3 <= 16'hcc5d;
      90: out3 <= 16'hcd4e;
      91: out3 <= 16'hce47;
      92: out3 <= 16'hcf48;
      93: out3 <= 16'hd051;
      94: out3 <= 16'hd161;
      95: out3 <= 16'hd278;
      96: out3 <= 16'hd396;
      97: out3 <= 16'hd4bb;
      98: out3 <= 16'hd5e6;
      99: out3 <= 16'hd719;
      100: out3 <= 16'hd851;
      101: out3 <= 16'hd98f;
      102: out3 <= 16'hdad4;
      103: out3 <= 16'hdc1e;
      104: out3 <= 16'hdd6e;
      105: out3 <= 16'hdec3;
      106: out3 <= 16'he01d;
      107: out3 <= 16'he17c;
      108: out3 <= 16'he2e0;
      109: out3 <= 16'he448;
      110: out3 <= 16'he5b5;
      111: out3 <= 16'he725;
      112: out3 <= 16'he89a;
      113: out3 <= 16'hea12;
      114: out3 <= 16'heb8d;
      115: out3 <= 16'hed0c;
      116: out3 <= 16'hee8d;
      117: out3 <= 16'hf012;
      118: out3 <= 16'hf198;
      119: out3 <= 16'hf321;
      120: out3 <= 16'hf4ac;
      121: out3 <= 16'hf639;
      122: out3 <= 16'hf7c7;
      123: out3 <= 16'hf956;
      124: out3 <= 16'hfae6;
      125: out3 <= 16'hfc78;
      126: out3 <= 16'hfe09;
      127: out3 <= 16'hff9b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D12_83578(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff9b;
      1: out3 <= 16'hfe09;
      2: out3 <= 16'hfc78;
      3: out3 <= 16'hfae6;
      4: out3 <= 16'hf956;
      5: out3 <= 16'hf7c7;
      6: out3 <= 16'hf639;
      7: out3 <= 16'hf4ac;
      8: out3 <= 16'hf321;
      9: out3 <= 16'hf198;
      10: out3 <= 16'hf012;
      11: out3 <= 16'hee8d;
      12: out3 <= 16'hed0c;
      13: out3 <= 16'heb8d;
      14: out3 <= 16'hea12;
      15: out3 <= 16'he89a;
      16: out3 <= 16'he725;
      17: out3 <= 16'he5b5;
      18: out3 <= 16'he448;
      19: out3 <= 16'he2e0;
      20: out3 <= 16'he17c;
      21: out3 <= 16'he01d;
      22: out3 <= 16'hdec3;
      23: out3 <= 16'hdd6e;
      24: out3 <= 16'hdc1e;
      25: out3 <= 16'hdad4;
      26: out3 <= 16'hd98f;
      27: out3 <= 16'hd851;
      28: out3 <= 16'hd719;
      29: out3 <= 16'hd5e6;
      30: out3 <= 16'hd4bb;
      31: out3 <= 16'hd396;
      32: out3 <= 16'hd278;
      33: out3 <= 16'hd161;
      34: out3 <= 16'hd051;
      35: out3 <= 16'hcf48;
      36: out3 <= 16'hce47;
      37: out3 <= 16'hcd4e;
      38: out3 <= 16'hcc5d;
      39: out3 <= 16'hcb73;
      40: out3 <= 16'hca92;
      41: out3 <= 16'hc9b8;
      42: out3 <= 16'hc8e8;
      43: out3 <= 16'hc81f;
      44: out3 <= 16'hc75f;
      45: out3 <= 16'hc6a8;
      46: out3 <= 16'hc5fa;
      47: out3 <= 16'hc555;
      48: out3 <= 16'hc4b9;
      49: out3 <= 16'hc426;
      50: out3 <= 16'hc39c;
      51: out3 <= 16'hc31c;
      52: out3 <= 16'hc2a5;
      53: out3 <= 16'hc237;
      54: out3 <= 16'hc1d3;
      55: out3 <= 16'hc178;
      56: out3 <= 16'hc128;
      57: out3 <= 16'hc0e0;
      58: out3 <= 16'hc0a3;
      59: out3 <= 16'hc06f;
      60: out3 <= 16'hc045;
      61: out3 <= 16'hc025;
      62: out3 <= 16'hc00f;
      63: out3 <= 16'hc003;
      64: out3 <= 16'hc000;
      65: out3 <= 16'hc008;
      66: out3 <= 16'hc019;
      67: out3 <= 16'hc034;
      68: out3 <= 16'hc059;
      69: out3 <= 16'hc088;
      70: out3 <= 16'hc0c0;
      71: out3 <= 16'hc103;
      72: out3 <= 16'hc14f;
      73: out3 <= 16'hc1a4;
      74: out3 <= 16'hc204;
      75: out3 <= 16'hc26d;
      76: out3 <= 16'hc2df;
      77: out3 <= 16'hc35b;
      78: out3 <= 16'hc3e0;
      79: out3 <= 16'hc46e;
      80: out3 <= 16'hc506;
      81: out3 <= 16'hc5a7;
      82: out3 <= 16'hc650;
      83: out3 <= 16'hc703;
      84: out3 <= 16'hc7be;
      85: out3 <= 16'hc882;
      86: out3 <= 16'hc94f;
      87: out3 <= 16'hca24;
      88: out3 <= 16'hcb01;
      89: out3 <= 16'hcbe7;
      90: out3 <= 16'hccd4;
      91: out3 <= 16'hcdca;
      92: out3 <= 16'hcec7;
      93: out3 <= 16'hcfcc;
      94: out3 <= 16'hd0d8;
      95: out3 <= 16'hd1eb;
      96: out3 <= 16'hd306;
      97: out3 <= 16'hd428;
      98: out3 <= 16'hd550;
      99: out3 <= 16'hd67f;
      100: out3 <= 16'hd7b4;
      101: out3 <= 16'hd8ef;
      102: out3 <= 16'hda31;
      103: out3 <= 16'hdb78;
      104: out3 <= 16'hdcc5;
      105: out3 <= 16'hde18;
      106: out3 <= 16'hdf6f;
      107: out3 <= 16'he0cc;
      108: out3 <= 16'he22d;
      109: out3 <= 16'he394;
      110: out3 <= 16'he4fe;
      111: out3 <= 16'he66d;
      112: out3 <= 16'he7df;
      113: out3 <= 16'he955;
      114: out3 <= 16'heacf;
      115: out3 <= 16'hec4c;
      116: out3 <= 16'hedcc;
      117: out3 <= 16'hef4f;
      118: out3 <= 16'hf0d5;
      119: out3 <= 16'hf25c;
      120: out3 <= 16'hf3e6;
      121: out3 <= 16'hf572;
      122: out3 <= 16'hf6ff;
      123: out3 <= 16'hf88e;
      124: out3 <= 16'hfa1e;
      125: out3 <= 16'hfbaf;
      126: out3 <= 16'hfd40;
      127: out3 <= 16'hfed2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_83968(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ff8;
      2: out3 <= 16'h3fe7;
      3: out3 <= 16'h3fcc;
      4: out3 <= 16'h3fa7;
      5: out3 <= 16'h3f78;
      6: out3 <= 16'h3f40;
      7: out3 <= 16'h3efd;
      8: out3 <= 16'h3eb1;
      9: out3 <= 16'h3e5c;
      10: out3 <= 16'h3dfc;
      11: out3 <= 16'h3d93;
      12: out3 <= 16'h3d21;
      13: out3 <= 16'h3ca5;
      14: out3 <= 16'h3c20;
      15: out3 <= 16'h3b92;
      16: out3 <= 16'h3afa;
      17: out3 <= 16'h3a59;
      18: out3 <= 16'h39b0;
      19: out3 <= 16'h38fd;
      20: out3 <= 16'h3842;
      21: out3 <= 16'h377e;
      22: out3 <= 16'h36b1;
      23: out3 <= 16'h35dc;
      24: out3 <= 16'h34ff;
      25: out3 <= 16'h3419;
      26: out3 <= 16'h332c;
      27: out3 <= 16'h3236;
      28: out3 <= 16'h3139;
      29: out3 <= 16'h3034;
      30: out3 <= 16'h2f28;
      31: out3 <= 16'h2e15;
      32: out3 <= 16'h2cfa;
      33: out3 <= 16'h2bd8;
      34: out3 <= 16'h2ab0;
      35: out3 <= 16'h2981;
      36: out3 <= 16'h284c;
      37: out3 <= 16'h2711;
      38: out3 <= 16'h25cf;
      39: out3 <= 16'h2488;
      40: out3 <= 16'h233b;
      41: out3 <= 16'h21e8;
      42: out3 <= 16'h2091;
      43: out3 <= 16'h1f34;
      44: out3 <= 16'h1dd3;
      45: out3 <= 16'h1c6c;
      46: out3 <= 16'h1b02;
      47: out3 <= 16'h1993;
      48: out3 <= 16'h1821;
      49: out3 <= 16'h16ab;
      50: out3 <= 16'h1531;
      51: out3 <= 16'h13b4;
      52: out3 <= 16'h1234;
      53: out3 <= 16'h10b1;
      54: out3 <= 16'hf2b;
      55: out3 <= 16'hda4;
      56: out3 <= 16'hc1a;
      57: out3 <= 16'ha8e;
      58: out3 <= 16'h901;
      59: out3 <= 16'h772;
      60: out3 <= 16'h5e2;
      61: out3 <= 16'h451;
      62: out3 <= 16'h2c0;
      63: out3 <= 16'h12e;
      64: out3 <= 16'hff9b;
      65: out3 <= 16'hfe09;
      66: out3 <= 16'hfc78;
      67: out3 <= 16'hfae6;
      68: out3 <= 16'hf956;
      69: out3 <= 16'hf7c7;
      70: out3 <= 16'hf639;
      71: out3 <= 16'hf4ac;
      72: out3 <= 16'hf321;
      73: out3 <= 16'hf198;
      74: out3 <= 16'hf012;
      75: out3 <= 16'hee8d;
      76: out3 <= 16'hed0c;
      77: out3 <= 16'heb8d;
      78: out3 <= 16'hea12;
      79: out3 <= 16'he89a;
      80: out3 <= 16'he725;
      81: out3 <= 16'he5b5;
      82: out3 <= 16'he448;
      83: out3 <= 16'he2e0;
      84: out3 <= 16'he17c;
      85: out3 <= 16'he01d;
      86: out3 <= 16'hdec3;
      87: out3 <= 16'hdd6e;
      88: out3 <= 16'hdc1e;
      89: out3 <= 16'hdad4;
      90: out3 <= 16'hd98f;
      91: out3 <= 16'hd851;
      92: out3 <= 16'hd719;
      93: out3 <= 16'hd5e6;
      94: out3 <= 16'hd4bb;
      95: out3 <= 16'hd396;
      96: out3 <= 16'hd278;
      97: out3 <= 16'hd161;
      98: out3 <= 16'hd051;
      99: out3 <= 16'hcf48;
      100: out3 <= 16'hce47;
      101: out3 <= 16'hcd4e;
      102: out3 <= 16'hcc5d;
      103: out3 <= 16'hcb73;
      104: out3 <= 16'hca92;
      105: out3 <= 16'hc9b8;
      106: out3 <= 16'hc8e8;
      107: out3 <= 16'hc81f;
      108: out3 <= 16'hc75f;
      109: out3 <= 16'hc6a8;
      110: out3 <= 16'hc5fa;
      111: out3 <= 16'hc555;
      112: out3 <= 16'hc4b9;
      113: out3 <= 16'hc426;
      114: out3 <= 16'hc39c;
      115: out3 <= 16'hc31c;
      116: out3 <= 16'hc2a5;
      117: out3 <= 16'hc237;
      118: out3 <= 16'hc1d3;
      119: out3 <= 16'hc178;
      120: out3 <= 16'hc128;
      121: out3 <= 16'hc0e0;
      122: out3 <= 16'hc0a3;
      123: out3 <= 16'hc06f;
      124: out3 <= 16'hc045;
      125: out3 <= 16'hc025;
      126: out3 <= 16'hc00f;
      127: out3 <= 16'hc003;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_84228(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fe1;
      3: out3 <= 16'h3fc4;
      4: out3 <= 16'h3f9c;
      5: out3 <= 16'h3f6b;
      6: out3 <= 16'h3f30;
      7: out3 <= 16'h3eeb;
      8: out3 <= 16'h3e9d;
      9: out3 <= 16'h3e45;
      10: out3 <= 16'h3de3;
      11: out3 <= 16'h3d78;
      12: out3 <= 16'h3d03;
      13: out3 <= 16'h3c85;
      14: out3 <= 16'h3bfd;
      15: out3 <= 16'h3b6d;
      16: out3 <= 16'h3ad3;
      17: out3 <= 16'h3a30;
      18: out3 <= 16'h3984;
      19: out3 <= 16'h38cf;
      20: out3 <= 16'h3812;
      21: out3 <= 16'h374b;
      22: out3 <= 16'h367d;
      23: out3 <= 16'h35a5;
      24: out3 <= 16'h34c6;
      25: out3 <= 16'h33df;
      26: out3 <= 16'h32ef;
      27: out3 <= 16'h31f8;
      28: out3 <= 16'h30f9;
      29: out3 <= 16'h2ff2;
      30: out3 <= 16'h2ee4;
      31: out3 <= 16'h2dcf;
      32: out3 <= 16'h2cb2;
      33: out3 <= 16'h2b8f;
      34: out3 <= 16'h2a65;
      35: out3 <= 16'h2935;
      36: out3 <= 16'h27fe;
      37: out3 <= 16'h26c1;
      38: out3 <= 16'h257e;
      39: out3 <= 16'h2435;
      40: out3 <= 16'h22e7;
      41: out3 <= 16'h2193;
      42: out3 <= 16'h203a;
      43: out3 <= 16'h1edc;
      44: out3 <= 16'h1d79;
      45: out3 <= 16'h1c12;
      46: out3 <= 16'h1aa7;
      47: out3 <= 16'h1937;
      48: out3 <= 16'h17c4;
      49: out3 <= 16'h164c;
      50: out3 <= 16'h14d2;
      51: out3 <= 16'h1354;
      52: out3 <= 16'h11d3;
      53: out3 <= 16'h1050;
      54: out3 <= 16'heca;
      55: out3 <= 16'hd41;
      56: out3 <= 16'hbb7;
      57: out3 <= 16'ha2b;
      58: out3 <= 16'h89d;
      59: out3 <= 16'h70e;
      60: out3 <= 16'h57e;
      61: out3 <= 16'h3ed;
      62: out3 <= 16'h25b;
      63: out3 <= 16'hc9;
      64: out3 <= 16'hff37;
      65: out3 <= 16'hfda5;
      66: out3 <= 16'hfc13;
      67: out3 <= 16'hfa82;
      68: out3 <= 16'hf8f2;
      69: out3 <= 16'hf763;
      70: out3 <= 16'hf5d5;
      71: out3 <= 16'hf449;
      72: out3 <= 16'hf2bf;
      73: out3 <= 16'hf136;
      74: out3 <= 16'hefb0;
      75: out3 <= 16'hee2d;
      76: out3 <= 16'hecac;
      77: out3 <= 16'heb2e;
      78: out3 <= 16'he9b4;
      79: out3 <= 16'he83c;
      80: out3 <= 16'he6c9;
      81: out3 <= 16'he559;
      82: out3 <= 16'he3ee;
      83: out3 <= 16'he287;
      84: out3 <= 16'he124;
      85: out3 <= 16'hdfc6;
      86: out3 <= 16'hde6d;
      87: out3 <= 16'hdd19;
      88: out3 <= 16'hdbcb;
      89: out3 <= 16'hda82;
      90: out3 <= 16'hd93f;
      91: out3 <= 16'hd802;
      92: out3 <= 16'hd6cb;
      93: out3 <= 16'hd59b;
      94: out3 <= 16'hd471;
      95: out3 <= 16'hd34e;
      96: out3 <= 16'hd231;
      97: out3 <= 16'hd11c;
      98: out3 <= 16'hd00e;
      99: out3 <= 16'hcf07;
      100: out3 <= 16'hce08;
      101: out3 <= 16'hcd11;
      102: out3 <= 16'hcc21;
      103: out3 <= 16'hcb3a;
      104: out3 <= 16'hca5b;
      105: out3 <= 16'hc983;
      106: out3 <= 16'hc8b5;
      107: out3 <= 16'hc7ee;
      108: out3 <= 16'hc731;
      109: out3 <= 16'hc67c;
      110: out3 <= 16'hc5d0;
      111: out3 <= 16'hc52d;
      112: out3 <= 16'hc493;
      113: out3 <= 16'hc403;
      114: out3 <= 16'hc37b;
      115: out3 <= 16'hc2fd;
      116: out3 <= 16'hc288;
      117: out3 <= 16'hc21d;
      118: out3 <= 16'hc1bb;
      119: out3 <= 16'hc163;
      120: out3 <= 16'hc115;
      121: out3 <= 16'hc0d0;
      122: out3 <= 16'hc095;
      123: out3 <= 16'hc064;
      124: out3 <= 16'hc03c;
      125: out3 <= 16'hc01f;
      126: out3 <= 16'hc00b;
      127: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D14_84358(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfc13;
      3: out3 <= 16'hfa82;
      4: out3 <= 16'hf8f2;
      5: out3 <= 16'hf763;
      6: out3 <= 16'hf5d5;
      7: out3 <= 16'hf449;
      8: out3 <= 16'hf2bf;
      9: out3 <= 16'hf136;
      10: out3 <= 16'hefb0;
      11: out3 <= 16'hee2d;
      12: out3 <= 16'hecac;
      13: out3 <= 16'heb2e;
      14: out3 <= 16'he9b4;
      15: out3 <= 16'he83c;
      16: out3 <= 16'he6c9;
      17: out3 <= 16'he559;
      18: out3 <= 16'he3ee;
      19: out3 <= 16'he287;
      20: out3 <= 16'he124;
      21: out3 <= 16'hdfc6;
      22: out3 <= 16'hde6d;
      23: out3 <= 16'hdd19;
      24: out3 <= 16'hdbcb;
      25: out3 <= 16'hda82;
      26: out3 <= 16'hd93f;
      27: out3 <= 16'hd802;
      28: out3 <= 16'hd6cb;
      29: out3 <= 16'hd59b;
      30: out3 <= 16'hd471;
      31: out3 <= 16'hd34e;
      32: out3 <= 16'hd231;
      33: out3 <= 16'hd11c;
      34: out3 <= 16'hd00e;
      35: out3 <= 16'hcf07;
      36: out3 <= 16'hce08;
      37: out3 <= 16'hcd11;
      38: out3 <= 16'hcc21;
      39: out3 <= 16'hcb3a;
      40: out3 <= 16'hca5b;
      41: out3 <= 16'hc983;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hc7ee;
      44: out3 <= 16'hc731;
      45: out3 <= 16'hc67c;
      46: out3 <= 16'hc5d0;
      47: out3 <= 16'hc52d;
      48: out3 <= 16'hc493;
      49: out3 <= 16'hc403;
      50: out3 <= 16'hc37b;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc288;
      53: out3 <= 16'hc21d;
      54: out3 <= 16'hc1bb;
      55: out3 <= 16'hc163;
      56: out3 <= 16'hc115;
      57: out3 <= 16'hc0d0;
      58: out3 <= 16'hc095;
      59: out3 <= 16'hc064;
      60: out3 <= 16'hc03c;
      61: out3 <= 16'hc01f;
      62: out3 <= 16'hc00b;
      63: out3 <= 16'hc001;
      64: out3 <= 16'hc001;
      65: out3 <= 16'hc00b;
      66: out3 <= 16'hc01f;
      67: out3 <= 16'hc03c;
      68: out3 <= 16'hc064;
      69: out3 <= 16'hc095;
      70: out3 <= 16'hc0d0;
      71: out3 <= 16'hc115;
      72: out3 <= 16'hc163;
      73: out3 <= 16'hc1bb;
      74: out3 <= 16'hc21d;
      75: out3 <= 16'hc288;
      76: out3 <= 16'hc2fd;
      77: out3 <= 16'hc37b;
      78: out3 <= 16'hc403;
      79: out3 <= 16'hc493;
      80: out3 <= 16'hc52d;
      81: out3 <= 16'hc5d0;
      82: out3 <= 16'hc67c;
      83: out3 <= 16'hc731;
      84: out3 <= 16'hc7ee;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc983;
      87: out3 <= 16'hca5b;
      88: out3 <= 16'hcb3a;
      89: out3 <= 16'hcc21;
      90: out3 <= 16'hcd11;
      91: out3 <= 16'hce08;
      92: out3 <= 16'hcf07;
      93: out3 <= 16'hd00e;
      94: out3 <= 16'hd11c;
      95: out3 <= 16'hd231;
      96: out3 <= 16'hd34e;
      97: out3 <= 16'hd471;
      98: out3 <= 16'hd59b;
      99: out3 <= 16'hd6cb;
      100: out3 <= 16'hd802;
      101: out3 <= 16'hd93f;
      102: out3 <= 16'hda82;
      103: out3 <= 16'hdbcb;
      104: out3 <= 16'hdd19;
      105: out3 <= 16'hde6d;
      106: out3 <= 16'hdfc6;
      107: out3 <= 16'he124;
      108: out3 <= 16'he287;
      109: out3 <= 16'he3ee;
      110: out3 <= 16'he559;
      111: out3 <= 16'he6c9;
      112: out3 <= 16'he83c;
      113: out3 <= 16'he9b4;
      114: out3 <= 16'heb2e;
      115: out3 <= 16'hecac;
      116: out3 <= 16'hee2d;
      117: out3 <= 16'hefb0;
      118: out3 <= 16'hf136;
      119: out3 <= 16'hf2bf;
      120: out3 <= 16'hf449;
      121: out3 <= 16'hf5d5;
      122: out3 <= 16'hf763;
      123: out3 <= 16'hf8f2;
      124: out3 <= 16'hfa82;
      125: out3 <= 16'hfc13;
      126: out3 <= 16'hfda5;
      127: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock81768(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i1_in;
   reg [6:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_90464(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a209;
   wire signed [15:0] a162;
   wire signed [15:0] a212;
   wire signed [15:0] a166;
   wire signed [15:0] a213;
   wire signed [15:0] a214;
   wire signed [15:0] a217;
   wire signed [15:0] a174;
   wire signed [15:0] a220;
   wire signed [15:0] a178;
   wire signed [15:0] a221;
   wire signed [15:0] a222;
   wire signed [15:0] a225;
   wire signed [15:0] a186;
   wire signed [15:0] a228;
   wire signed [15:0] a190;
   wire signed [15:0] a229;
   wire signed [15:0] a230;
   wire signed [15:0] a233;
   wire signed [15:0] a198;
   wire signed [15:0] a236;
   wire signed [15:0] a202;
   wire signed [15:0] a237;
   wire signed [15:0] a238;
   reg signed [15:0] tm1665;
   reg signed [15:0] tm1669;
   reg signed [15:0] tm1681;
   reg signed [15:0] tm1685;
   reg signed [15:0] tm1697;
   reg signed [15:0] tm1701;
   reg signed [15:0] tm1713;
   reg signed [15:0] tm1717;
   reg signed [15:0] tm1729;
   reg signed [15:0] tm1736;
   reg signed [15:0] tm1743;
   reg signed [15:0] tm1750;
   reg signed [15:0] tm1757;
   reg signed [15:0] tm1764;
   reg signed [15:0] tm1771;
   reg signed [15:0] tm1778;
   reg signed [15:0] tm1666;
   reg signed [15:0] tm1670;
   reg signed [15:0] tm1682;
   reg signed [15:0] tm1686;
   reg signed [15:0] tm1698;
   reg signed [15:0] tm1702;
   reg signed [15:0] tm1714;
   reg signed [15:0] tm1718;
   reg signed [15:0] tm1730;
   reg signed [15:0] tm1737;
   reg signed [15:0] tm1744;
   reg signed [15:0] tm1751;
   reg signed [15:0] tm1758;
   reg signed [15:0] tm1765;
   reg signed [15:0] tm1772;
   reg signed [15:0] tm1779;
   wire signed [15:0] tm102;
   wire signed [15:0] a167;
   wire signed [15:0] tm103;
   wire signed [15:0] a169;
   wire signed [15:0] tm106;
   wire signed [15:0] a179;
   wire signed [15:0] tm107;
   wire signed [15:0] a181;
   wire signed [15:0] tm110;
   wire signed [15:0] a191;
   wire signed [15:0] tm111;
   wire signed [15:0] a193;
   wire signed [15:0] tm114;
   wire signed [15:0] a203;
   wire signed [15:0] tm115;
   wire signed [15:0] a205;
   reg signed [15:0] tm1667;
   reg signed [15:0] tm1671;
   reg signed [15:0] tm1683;
   reg signed [15:0] tm1687;
   reg signed [15:0] tm1699;
   reg signed [15:0] tm1703;
   reg signed [15:0] tm1715;
   reg signed [15:0] tm1719;
   reg signed [15:0] tm1731;
   reg signed [15:0] tm1738;
   reg signed [15:0] tm1745;
   reg signed [15:0] tm1752;
   reg signed [15:0] tm1759;
   reg signed [15:0] tm1766;
   reg signed [15:0] tm1773;
   reg signed [15:0] tm1780;
   reg signed [15:0] tm312;
   reg signed [15:0] tm313;
   reg signed [15:0] tm320;
   reg signed [15:0] tm321;
   reg signed [15:0] tm328;
   reg signed [15:0] tm329;
   reg signed [15:0] tm336;
   reg signed [15:0] tm337;
   reg signed [15:0] tm1668;
   reg signed [15:0] tm1672;
   reg signed [15:0] tm1684;
   reg signed [15:0] tm1688;
   reg signed [15:0] tm1700;
   reg signed [15:0] tm1704;
   reg signed [15:0] tm1716;
   reg signed [15:0] tm1720;
   reg signed [15:0] tm1732;
   reg signed [15:0] tm1739;
   reg signed [15:0] tm1746;
   reg signed [15:0] tm1753;
   reg signed [15:0] tm1760;
   reg signed [15:0] tm1767;
   reg signed [15:0] tm1774;
   reg signed [15:0] tm1781;
   reg signed [15:0] tm1733;
   reg signed [15:0] tm1740;
   reg signed [15:0] tm1747;
   reg signed [15:0] tm1754;
   reg signed [15:0] tm1761;
   reg signed [15:0] tm1768;
   reg signed [15:0] tm1775;
   reg signed [15:0] tm1782;
   wire signed [15:0] a168;
   wire signed [15:0] a170;
   wire signed [15:0] a171;
   wire signed [15:0] a172;
   wire signed [15:0] a180;
   wire signed [15:0] a182;
   wire signed [15:0] a183;
   wire signed [15:0] a184;
   wire signed [15:0] a192;
   wire signed [15:0] a194;
   wire signed [15:0] a195;
   wire signed [15:0] a196;
   wire signed [15:0] a204;
   wire signed [15:0] a206;
   wire signed [15:0] a207;
   wire signed [15:0] a208;
   reg signed [15:0] tm1734;
   reg signed [15:0] tm1741;
   reg signed [15:0] tm1748;
   reg signed [15:0] tm1755;
   reg signed [15:0] tm1762;
   reg signed [15:0] tm1769;
   reg signed [15:0] tm1776;
   reg signed [15:0] tm1783;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1735;
   reg signed [15:0] tm1742;
   reg signed [15:0] tm1749;
   reg signed [15:0] tm1756;
   reg signed [15:0] tm1763;
   reg signed [15:0] tm1770;
   reg signed [15:0] tm1777;
   reg signed [15:0] tm1784;


   assign a209 = X0;
   assign a162 = a209;
   assign a212 = X1;
   assign a166 = a212;
   assign a213 = X2;
   assign a214 = X3;
   assign a217 = X4;
   assign a174 = a217;
   assign a220 = X5;
   assign a178 = a220;
   assign a221 = X6;
   assign a222 = X7;
   assign a225 = X8;
   assign a186 = a225;
   assign a228 = X9;
   assign a190 = a228;
   assign a229 = X10;
   assign a230 = X11;
   assign a233 = X12;
   assign a198 = a233;
   assign a236 = X13;
   assign a202 = a236;
   assign a237 = X14;
   assign a238 = X15;
   assign a167 = tm102;
   assign a169 = tm103;
   assign a179 = tm106;
   assign a181 = tm107;
   assign a191 = tm110;
   assign a193 = tm111;
   assign a203 = tm114;
   assign a205 = tm115;
   assign Y0 = tm1735;
   assign Y1 = tm1742;
   assign Y4 = tm1749;
   assign Y5 = tm1756;
   assign Y8 = tm1763;
   assign Y9 = tm1770;
   assign Y12 = tm1777;
   assign Y13 = tm1784;

   D10_82668 instD10inst0_82668(.addr(i1[6:0]), .out(tm103), .clk(clk));

   D2_82928 instD2inst0_82928(.addr(i1[6:0]), .out(tm102), .clk(clk));

   D8_83188 instD8inst0_83188(.addr(i1[6:0]), .out(tm114), .clk(clk));

   D16_83318 instD16inst0_83318(.addr(i1[6:0]), .out(tm115), .clk(clk));

   D12_83578 instD12inst0_83578(.addr(i1[6:0]), .out(tm107), .clk(clk));

   D4_83968 instD4inst0_83968(.addr(i1[6:0]), .out(tm106), .clk(clk));

   D6_84228 instD6inst0_84228(.addr(i1[6:0]), .out(tm110), .clk(clk));

   D14_84358 instD14inst0_84358(.addr(i1[6:0]), .out(tm111), .clk(clk));

    multfix #(16, 2) m81867(.a(tm312), .b(tm1668), .clk(clk), .q_sc(a168), .q_unsc(), .rst(reset));
    multfix #(16, 2) m81889(.a(tm313), .b(tm1672), .clk(clk), .q_sc(a170), .q_unsc(), .rst(reset));
    multfix #(16, 2) m81907(.a(tm313), .b(tm1668), .clk(clk), .q_sc(a171), .q_unsc(), .rst(reset));
    multfix #(16, 2) m81918(.a(tm312), .b(tm1672), .clk(clk), .q_sc(a172), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82027(.a(tm320), .b(tm1684), .clk(clk), .q_sc(a180), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82049(.a(tm321), .b(tm1688), .clk(clk), .q_sc(a182), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82067(.a(tm321), .b(tm1684), .clk(clk), .q_sc(a183), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82078(.a(tm320), .b(tm1688), .clk(clk), .q_sc(a184), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82187(.a(tm328), .b(tm1700), .clk(clk), .q_sc(a192), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82209(.a(tm329), .b(tm1704), .clk(clk), .q_sc(a194), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82227(.a(tm329), .b(tm1700), .clk(clk), .q_sc(a195), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82238(.a(tm328), .b(tm1704), .clk(clk), .q_sc(a196), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82347(.a(tm336), .b(tm1716), .clk(clk), .q_sc(a204), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82369(.a(tm337), .b(tm1720), .clk(clk), .q_sc(a206), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82387(.a(tm337), .b(tm1716), .clk(clk), .q_sc(a207), .q_unsc(), .rst(reset));
    multfix #(16, 2) m82398(.a(tm336), .b(tm1720), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub81896(.a(a168), .b(a170), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add81925(.a(a171), .b(a172), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub82056(.a(a180), .b(a182), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add82085(.a(a183), .b(a184), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub82216(.a(a192), .b(a194), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add82245(.a(a195), .b(a196), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub82376(.a(a204), .b(a206), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add82405(.a(a207), .b(a208), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm312 <= 0;
         tm1668 <= 0;
         tm313 <= 0;
         tm1672 <= 0;
         tm313 <= 0;
         tm1668 <= 0;
         tm312 <= 0;
         tm1672 <= 0;
         tm320 <= 0;
         tm1684 <= 0;
         tm321 <= 0;
         tm1688 <= 0;
         tm321 <= 0;
         tm1684 <= 0;
         tm320 <= 0;
         tm1688 <= 0;
         tm328 <= 0;
         tm1700 <= 0;
         tm329 <= 0;
         tm1704 <= 0;
         tm329 <= 0;
         tm1700 <= 0;
         tm328 <= 0;
         tm1704 <= 0;
         tm336 <= 0;
         tm1716 <= 0;
         tm337 <= 0;
         tm1720 <= 0;
         tm337 <= 0;
         tm1716 <= 0;
         tm336 <= 0;
         tm1720 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1665 <= a213;
         tm1669 <= a214;
         tm1681 <= a221;
         tm1685 <= a222;
         tm1697 <= a229;
         tm1701 <= a230;
         tm1713 <= a237;
         tm1717 <= a238;
         tm1729 <= a162;
         tm1736 <= a166;
         tm1743 <= a174;
         tm1750 <= a178;
         tm1757 <= a186;
         tm1764 <= a190;
         tm1771 <= a198;
         tm1778 <= a202;
         tm1666 <= tm1665;
         tm1670 <= tm1669;
         tm1682 <= tm1681;
         tm1686 <= tm1685;
         tm1698 <= tm1697;
         tm1702 <= tm1701;
         tm1714 <= tm1713;
         tm1718 <= tm1717;
         tm1730 <= tm1729;
         tm1737 <= tm1736;
         tm1744 <= tm1743;
         tm1751 <= tm1750;
         tm1758 <= tm1757;
         tm1765 <= tm1764;
         tm1772 <= tm1771;
         tm1779 <= tm1778;
         tm1667 <= tm1666;
         tm1671 <= tm1670;
         tm1683 <= tm1682;
         tm1687 <= tm1686;
         tm1699 <= tm1698;
         tm1703 <= tm1702;
         tm1715 <= tm1714;
         tm1719 <= tm1718;
         tm1731 <= tm1730;
         tm1738 <= tm1737;
         tm1745 <= tm1744;
         tm1752 <= tm1751;
         tm1759 <= tm1758;
         tm1766 <= tm1765;
         tm1773 <= tm1772;
         tm1780 <= tm1779;
         tm312 <= a167;
         tm313 <= a169;
         tm320 <= a179;
         tm321 <= a181;
         tm328 <= a191;
         tm329 <= a193;
         tm336 <= a203;
         tm337 <= a205;
         tm1668 <= tm1667;
         tm1672 <= tm1671;
         tm1684 <= tm1683;
         tm1688 <= tm1687;
         tm1700 <= tm1699;
         tm1704 <= tm1703;
         tm1716 <= tm1715;
         tm1720 <= tm1719;
         tm1732 <= tm1731;
         tm1739 <= tm1738;
         tm1746 <= tm1745;
         tm1753 <= tm1752;
         tm1760 <= tm1759;
         tm1767 <= tm1766;
         tm1774 <= tm1773;
         tm1781 <= tm1780;
         tm1733 <= tm1732;
         tm1740 <= tm1739;
         tm1747 <= tm1746;
         tm1754 <= tm1753;
         tm1761 <= tm1760;
         tm1768 <= tm1767;
         tm1775 <= tm1774;
         tm1782 <= tm1781;
         tm1734 <= tm1733;
         tm1741 <= tm1740;
         tm1748 <= tm1747;
         tm1755 <= tm1754;
         tm1762 <= tm1761;
         tm1769 <= tm1768;
         tm1776 <= tm1775;
         tm1783 <= tm1782;
         tm1735 <= tm1734;
         tm1742 <= tm1741;
         tm1749 <= tm1748;
         tm1756 <= tm1755;
         tm1763 <= tm1762;
         tm1770 <= tm1769;
         tm1777 <= tm1776;
         tm1784 <= tm1783;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock84493(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_90467(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a33;
   wire signed [15:0] a34;
   wire signed [15:0] a35;
   wire signed [15:0] a36;
   wire signed [15:0] a41;
   wire signed [15:0] a42;
   wire signed [15:0] a43;
   wire signed [15:0] a44;
   wire signed [15:0] a49;
   wire signed [15:0] a50;
   wire signed [15:0] a51;
   wire signed [15:0] a52;
   wire signed [15:0] a57;
   wire signed [15:0] a58;
   wire signed [15:0] a59;
   wire signed [15:0] a60;
   wire signed [16:0] tm881;
   wire signed [16:0] tm882;
   wire signed [16:0] tm883;
   wire signed [16:0] tm884;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm885;
   wire signed [16:0] tm886;
   wire signed [16:0] tm887;
   wire signed [16:0] tm888;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm889;
   wire signed [16:0] tm890;
   wire signed [16:0] tm891;
   wire signed [16:0] tm892;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm893;
   wire signed [16:0] tm894;
   wire signed [16:0] tm895;
   wire signed [16:0] tm896;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t89;
   wire signed [15:0] t90;
   wire signed [15:0] t91;
   wire signed [15:0] t92;
   wire signed [15:0] t93;
   wire signed [15:0] t94;
   wire signed [15:0] t95;
   wire signed [15:0] t96;
   wire signed [15:0] t97;
   wire signed [15:0] t98;
   wire signed [15:0] t99;
   wire signed [15:0] t100;
   wire signed [15:0] t101;
   wire signed [15:0] t102;
   wire signed [15:0] t103;
   wire signed [15:0] t104;


   assign a33 = X0;
   assign a34 = X2;
   assign a35 = X1;
   assign a36 = X3;
   assign a41 = X4;
   assign a42 = X6;
   assign a43 = X5;
   assign a44 = X7;
   assign a49 = X8;
   assign a50 = X10;
   assign a51 = X9;
   assign a52 = X11;
   assign a57 = X12;
   assign a58 = X14;
   assign a59 = X13;
   assign a60 = X15;
   assign Y0 = t89;
   assign Y1 = t90;
   assign Y2 = t91;
   assign Y3 = t92;
   assign Y4 = t93;
   assign Y5 = t94;
   assign Y6 = t95;
   assign Y7 = t96;
   assign Y8 = t97;
   assign Y9 = t98;
   assign Y10 = t99;
   assign Y11 = t100;
   assign Y12 = t101;
   assign Y13 = t102;
   assign Y14 = t103;
   assign Y15 = t104;
   assign t89 = tm881[16:1];
   assign t90 = tm882[16:1];
   assign t91 = tm883[16:1];
   assign t92 = tm884[16:1];
   assign t93 = tm885[16:1];
   assign t94 = tm886[16:1];
   assign t95 = tm887[16:1];
   assign t96 = tm888[16:1];
   assign t97 = tm889[16:1];
   assign t98 = tm890[16:1];
   assign t99 = tm891[16:1];
   assign t100 = tm892[16:1];
   assign t101 = tm893[16:1];
   assign t102 = tm894[16:1];
   assign t103 = tm895[16:1];
   assign t104 = tm896[16:1];

    addfxp #(17, 1) add84505(.a({{1{a33[15]}}, a33}), .b({{1{a34[15]}}, a34}), .clk(clk), .q(tm881));    // 0
    addfxp #(17, 1) add84520(.a({{1{a35[15]}}, a35}), .b({{1{a36[15]}}, a36}), .clk(clk), .q(tm882));    // 0
    subfxp #(17, 1) sub84535(.a({{1{a33[15]}}, a33}), .b({{1{a34[15]}}, a34}), .clk(clk), .q(tm883));    // 0
    subfxp #(17, 1) sub84550(.a({{1{a35[15]}}, a35}), .b({{1{a36[15]}}, a36}), .clk(clk), .q(tm884));    // 0
    addfxp #(17, 1) add84581(.a({{1{a41[15]}}, a41}), .b({{1{a42[15]}}, a42}), .clk(clk), .q(tm885));    // 0
    addfxp #(17, 1) add84596(.a({{1{a43[15]}}, a43}), .b({{1{a44[15]}}, a44}), .clk(clk), .q(tm886));    // 0
    subfxp #(17, 1) sub84611(.a({{1{a41[15]}}, a41}), .b({{1{a42[15]}}, a42}), .clk(clk), .q(tm887));    // 0
    subfxp #(17, 1) sub84626(.a({{1{a43[15]}}, a43}), .b({{1{a44[15]}}, a44}), .clk(clk), .q(tm888));    // 0
    addfxp #(17, 1) add84657(.a({{1{a49[15]}}, a49}), .b({{1{a50[15]}}, a50}), .clk(clk), .q(tm889));    // 0
    addfxp #(17, 1) add84672(.a({{1{a51[15]}}, a51}), .b({{1{a52[15]}}, a52}), .clk(clk), .q(tm890));    // 0
    subfxp #(17, 1) sub84687(.a({{1{a49[15]}}, a49}), .b({{1{a50[15]}}, a50}), .clk(clk), .q(tm891));    // 0
    subfxp #(17, 1) sub84702(.a({{1{a51[15]}}, a51}), .b({{1{a52[15]}}, a52}), .clk(clk), .q(tm892));    // 0
    addfxp #(17, 1) add84733(.a({{1{a57[15]}}, a57}), .b({{1{a58[15]}}, a58}), .clk(clk), .q(tm893));    // 0
    addfxp #(17, 1) add84748(.a({{1{a59[15]}}, a59}), .b({{1{a60[15]}}, a60}), .clk(clk), .q(tm894));    // 0
    subfxp #(17, 1) sub84763(.a({{1{a57[15]}}, a57}), .b({{1{a58[15]}}, a58}), .clk(clk), .q(tm895));    // 0
    subfxp #(17, 1) sub84778(.a({{1{a59[15]}}, a59}), .b({{1{a60[15]}}, a60}), .clk(clk), .q(tm896));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 67
// Gap: 128
module rc84802(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm84800 instPerm90468(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 67
// Gap: 128
module perm84800(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1];
   assign inBank0[1] = addr0[2];
   assign inBank0[2] = addr0[3] ^ addr0[0];
   assign inAddr0[0] = addr0[4];
   assign inAddr0[1] = addr0[5];
   assign inAddr0[2] = addr0[6];
   assign inAddr0[3] = addr0[7];
   assign inAddr0[4] = addr0[8];
   assign inAddr0[5] = addr0[9];
   assign inAddr0[6] = addr0[0];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[9] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[9] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[1];
   assign inBank1[1] = addr1[2];
   assign inBank1[2] = addr1[3] ^ addr1[0];
   assign inAddr1[0] = addr1[4];
   assign inAddr1[1] = addr1[5];
   assign inAddr1[2] = addr1[6];
   assign inAddr1[3] = addr1[7];
   assign inAddr1[4] = addr1[8];
   assign inAddr1[5] = addr1[9];
   assign inAddr1[6] = addr1[0];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[9] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[9] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[1];
   assign inBank2[1] = addr2[2];
   assign inBank2[2] = addr2[3] ^ addr2[0];
   assign inAddr2[0] = addr2[4];
   assign inAddr2[1] = addr2[5];
   assign inAddr2[2] = addr2[6];
   assign inAddr2[3] = addr2[7];
   assign inAddr2[4] = addr2[8];
   assign inAddr2[5] = addr2[9];
   assign inAddr2[6] = addr2[0];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[9] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[9] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[1];
   assign inBank3[1] = addr3[2];
   assign inBank3[2] = addr3[3] ^ addr3[0];
   assign inAddr3[0] = addr3[4];
   assign inAddr3[1] = addr3[5];
   assign inAddr3[2] = addr3[6];
   assign inAddr3[3] = addr3[7];
   assign inAddr3[4] = addr3[8];
   assign inAddr3[5] = addr3[9];
   assign inAddr3[6] = addr3[0];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[9] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[9] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[1];
   assign inBank4[1] = addr4[2];
   assign inBank4[2] = addr4[3] ^ addr4[0];
   assign inAddr4[0] = addr4[4];
   assign inAddr4[1] = addr4[5];
   assign inAddr4[2] = addr4[6];
   assign inAddr4[3] = addr4[7];
   assign inAddr4[4] = addr4[8];
   assign inAddr4[5] = addr4[9];
   assign inAddr4[6] = addr4[0];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[9] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[9] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[1];
   assign inBank5[1] = addr5[2];
   assign inBank5[2] = addr5[3] ^ addr5[0];
   assign inAddr5[0] = addr5[4];
   assign inAddr5[1] = addr5[5];
   assign inAddr5[2] = addr5[6];
   assign inAddr5[3] = addr5[7];
   assign inAddr5[4] = addr5[8];
   assign inAddr5[5] = addr5[9];
   assign inAddr5[6] = addr5[0];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[9] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[9] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[1];
   assign inBank6[1] = addr6[2];
   assign inBank6[2] = addr6[3] ^ addr6[0];
   assign inAddr6[0] = addr6[4];
   assign inAddr6[1] = addr6[5];
   assign inAddr6[2] = addr6[6];
   assign inAddr6[3] = addr6[7];
   assign inAddr6[4] = addr6[8];
   assign inAddr6[5] = addr6[9];
   assign inAddr6[6] = addr6[0];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[9] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[9] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[1];
   assign inBank7[1] = addr7[2];
   assign inBank7[2] = addr7[3] ^ addr7[0];
   assign inAddr7[0] = addr7[4];
   assign inAddr7[1] = addr7[5];
   assign inAddr7[2] = addr7[6];
   assign inAddr7[3] = addr7[7];
   assign inAddr7[4] = addr7[8];
   assign inAddr7[5] = addr7[9];
   assign inAddr7[6] = addr7[0];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[9] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[9] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(65, 7) nextReg_90473(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_90476(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_84800 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 64)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 66)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 64) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 64)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_4 = {x1, inAddr1};
    assign w_0_1 = {x2, inAddr2};
    assign w_0_5 = {x3, inAddr3};
    assign w_0_2 = {x4, inAddr4};
    assign w_0_6 = {x5, inAddr5};
    assign w_0_3 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray1024_84800(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_90481(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule


						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule

