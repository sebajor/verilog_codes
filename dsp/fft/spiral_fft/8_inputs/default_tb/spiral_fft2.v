/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 128 cycles
//   Latency: 419 cycles

//   Resources required:
//     96 multipliers (16 x 16 bit)
//     208 adders (16 x 16 bit)
//     8 RAMs (16 words, 32 bits per word)
//     8 RAMs (64 words, 32 bits per word)
//     24 RAMs (256 words, 32 bits per word)
//     12 ROMs (128 words, 16 bits per word)
//     12 ROMs (8 words, 16 bits per word)
//     12 ROMs (32 words, 16 bits per word)

// Generated on Fri Jun 10 14:24:58 EDT 2022

// Latency: 419 clock cycles
// Throughput: 1 transform every 128 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 128 cycles.  This means that
// 128 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 419 cycles.  This means that
// the 'next_out' will be asserted 419 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [15:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 1024 complex data points enter the system over 128 cycles
      for (j=0; j < 127; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 127;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 126)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 127; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 2048 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 127;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 2048 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule

// Latency: 419
// Gap: 128
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire [15:0] t6_8;
   wire [15:0] t6_9;
   wire [15:0] t6_10;
   wire [15:0] t6_11;
   wire [15:0] t6_12;
   wire [15:0] t6_13;
   wire [15:0] t6_14;
   wire [15:0] t6_15;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire [15:0] t7_8;
   wire [15:0] t7_9;
   wire [15:0] t7_10;
   wire [15:0] t7_11;
   wire [15:0] t7_12;
   wire [15:0] t7_13;
   wire [15:0] t7_14;
   wire [15:0] t7_15;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire [15:0] t8_8;
   wire [15:0] t8_9;
   wire [15:0] t8_10;
   wire [15:0] t8_11;
   wire [15:0] t8_12;
   wire [15:0] t8_13;
   wire [15:0] t8_14;
   wire [15:0] t8_15;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire [15:0] t9_8;
   wire [15:0] t9_9;
   wire [15:0] t9_10;
   wire [15:0] t9_11;
   wire [15:0] t9_12;
   wire [15:0] t9_13;
   wire [15:0] t9_14;
   wire [15:0] t9_15;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire [15:0] t10_8;
   wire [15:0] t10_9;
   wire [15:0] t10_10;
   wire [15:0] t10_11;
   wire [15:0] t10_12;
   wire [15:0] t10_13;
   wire [15:0] t10_14;
   wire [15:0] t10_15;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire [15:0] t11_8;
   wire [15:0] t11_9;
   wire [15:0] t11_10;
   wire [15:0] t11_11;
   wire [15:0] t11_12;
   wire [15:0] t11_13;
   wire [15:0] t11_14;
   wire [15:0] t11_15;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire [15:0] t12_8;
   wire [15:0] t12_9;
   wire [15:0] t12_10;
   wire [15:0] t12_11;
   wire [15:0] t12_12;
   wire [15:0] t12_13;
   wire [15:0] t12_14;
   wire [15:0] t12_15;
   wire next_12;
   wire [15:0] t13_0;
   wire [15:0] t13_1;
   wire [15:0] t13_2;
   wire [15:0] t13_3;
   wire [15:0] t13_4;
   wire [15:0] t13_5;
   wire [15:0] t13_6;
   wire [15:0] t13_7;
   wire [15:0] t13_8;
   wire [15:0] t13_9;
   wire [15:0] t13_10;
   wire [15:0] t13_11;
   wire [15:0] t13_12;
   wire [15:0] t13_13;
   wire [15:0] t13_14;
   wire [15:0] t13_15;
   wire next_13;
   wire [15:0] t14_0;
   wire [15:0] t14_1;
   wire [15:0] t14_2;
   wire [15:0] t14_3;
   wire [15:0] t14_4;
   wire [15:0] t14_5;
   wire [15:0] t14_6;
   wire [15:0] t14_7;
   wire [15:0] t14_8;
   wire [15:0] t14_9;
   wire [15:0] t14_10;
   wire [15:0] t14_11;
   wire [15:0] t14_12;
   wire [15:0] t14_13;
   wire [15:0] t14_14;
   wire [15:0] t14_15;
   wire next_14;
   wire [15:0] t15_0;
   wire [15:0] t15_1;
   wire [15:0] t15_2;
   wire [15:0] t15_3;
   wire [15:0] t15_4;
   wire [15:0] t15_5;
   wire [15:0] t15_6;
   wire [15:0] t15_7;
   wire [15:0] t15_8;
   wire [15:0] t15_9;
   wire [15:0] t15_10;
   wire [15:0] t15_11;
   wire [15:0] t15_12;
   wire [15:0] t15_13;
   wire [15:0] t15_14;
   wire [15:0] t15_15;
   wire next_15;
   assign t0_0 = X0;
   assign Y0 = t15_0;
   assign t0_1 = X1;
   assign Y1 = t15_1;
   assign t0_2 = X2;
   assign Y2 = t15_2;
   assign t0_3 = X3;
   assign Y3 = t15_3;
   assign t0_4 = X4;
   assign Y4 = t15_4;
   assign t0_5 = X5;
   assign Y5 = t15_5;
   assign t0_6 = X6;
   assign Y6 = t15_6;
   assign t0_7 = X7;
   assign Y7 = t15_7;
   assign t0_8 = X8;
   assign Y8 = t15_8;
   assign t0_9 = X9;
   assign Y9 = t15_9;
   assign t0_10 = X10;
   assign Y10 = t15_10;
   assign t0_11 = X11;
   assign Y11 = t15_11;
   assign t0_12 = X12;
   assign Y12 = t15_12;
   assign t0_13 = X13;
   assign Y13 = t15_13;
   assign t0_14 = X14;
   assign Y14 = t15_14;
   assign t0_15 = X15;
   assign Y15 = t15_15;
   assign next_0 = next;
   assign next_out = next_15;

// latency=126, gap=128
   rc97532 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=3, gap=128
   codeBlock97534 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=4, gap=128
   rc97955 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15));


// latency=8, gap=128
   DirSum_98664 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7),
       .X8(t3_8), .Y8(t4_8),
       .X9(t3_9), .Y9(t4_9),
       .X10(t3_10), .Y10(t4_10),
       .X11(t3_11), .Y11(t4_11),
       .X12(t3_12), .Y12(t4_12),
       .X13(t3_13), .Y13(t4_13),
       .X14(t3_14), .Y14(t4_14),
       .X15(t3_15), .Y15(t4_15));


// latency=3, gap=128
   codeBlock98667 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7),
       .X8_in(t4_8), .Y8(t5_8),
       .X9_in(t4_9), .Y9(t5_9),
       .X10_in(t4_10), .Y10(t5_10),
       .X11_in(t4_11), .Y11(t5_11),
       .X12_in(t4_12), .Y12(t5_12),
       .X13_in(t4_13), .Y13(t5_13),
       .X14_in(t4_14), .Y14(t5_14),
       .X15_in(t4_15), .Y15(t5_15));


// latency=11, gap=128
   rc99088 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7),
    .X8(t5_8), .Y8(t6_8),
    .X9(t5_9), .Y9(t6_9),
    .X10(t5_10), .Y10(t6_10),
    .X11(t5_11), .Y11(t6_11),
    .X12(t5_12), .Y12(t6_12),
    .X13(t5_13), .Y13(t6_13),
    .X14(t5_14), .Y14(t6_14),
    .X15(t5_15), .Y15(t6_15));


// latency=8, gap=128
   DirSum_99893 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7),
       .X8(t6_8), .Y8(t7_8),
       .X9(t6_9), .Y9(t7_9),
       .X10(t6_10), .Y10(t7_10),
       .X11(t6_11), .Y11(t7_11),
       .X12(t6_12), .Y12(t7_12),
       .X13(t6_13), .Y13(t7_13),
       .X14(t6_14), .Y14(t7_14),
       .X15(t6_15), .Y15(t7_15));


// latency=3, gap=128
   codeBlock99896 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7),
       .X8_in(t7_8), .Y8(t8_8),
       .X9_in(t7_9), .Y9(t8_9),
       .X10_in(t7_10), .Y10(t8_10),
       .X11_in(t7_11), .Y11(t8_11),
       .X12_in(t7_12), .Y12(t8_12),
       .X13_in(t7_13), .Y13(t8_13),
       .X14_in(t7_14), .Y14(t8_14),
       .X15_in(t7_15), .Y15(t8_15));


// latency=29, gap=128
   rc100317 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7),
    .X8(t8_8), .Y8(t9_8),
    .X9(t8_9), .Y9(t9_9),
    .X10(t8_10), .Y10(t9_10),
    .X11(t8_11), .Y11(t9_11),
    .X12(t8_12), .Y12(t9_12),
    .X13(t8_13), .Y13(t9_13),
    .X14(t8_14), .Y14(t9_14),
    .X15(t8_15), .Y15(t9_15));


// latency=8, gap=128
   DirSum_101506 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3),
       .X4(t9_4), .Y4(t10_4),
       .X5(t9_5), .Y5(t10_5),
       .X6(t9_6), .Y6(t10_6),
       .X7(t9_7), .Y7(t10_7),
       .X8(t9_8), .Y8(t10_8),
       .X9(t9_9), .Y9(t10_9),
       .X10(t9_10), .Y10(t10_10),
       .X11(t9_11), .Y11(t10_11),
       .X12(t9_12), .Y12(t10_12),
       .X13(t9_13), .Y13(t10_13),
       .X14(t9_14), .Y14(t10_14),
       .X15(t9_15), .Y15(t10_15));


// latency=3, gap=128
   codeBlock101509 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3),
       .X4_in(t10_4), .Y4(t11_4),
       .X5_in(t10_5), .Y5(t11_5),
       .X6_in(t10_6), .Y6(t11_6),
       .X7_in(t10_7), .Y7(t11_7),
       .X8_in(t10_8), .Y8(t11_8),
       .X9_in(t10_9), .Y9(t11_9),
       .X10_in(t10_10), .Y10(t11_10),
       .X11_in(t10_11), .Y11(t11_11),
       .X12_in(t10_12), .Y12(t11_12),
       .X13_in(t10_13), .Y13(t11_13),
       .X14_in(t10_14), .Y14(t11_14),
       .X15_in(t10_15), .Y15(t11_15));


// latency=101, gap=128
   rc101930 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3),
    .X4(t11_4), .Y4(t12_4),
    .X5(t11_5), .Y5(t12_5),
    .X6(t11_6), .Y6(t12_6),
    .X7(t11_7), .Y7(t12_7),
    .X8(t11_8), .Y8(t12_8),
    .X9(t11_9), .Y9(t12_9),
    .X10(t11_10), .Y10(t12_10),
    .X11(t11_11), .Y11(t12_11),
    .X12(t11_12), .Y12(t12_12),
    .X13(t11_13), .Y13(t12_13),
    .X14(t11_14), .Y14(t12_14),
    .X15(t11_15), .Y15(t12_15));


// latency=8, gap=128
   DirSum_104654 stage12(.next(next_12), .clk(clk), .reset(reset), .next_out(next_13),
       .X0(t12_0), .Y0(t13_0),
       .X1(t12_1), .Y1(t13_1),
       .X2(t12_2), .Y2(t13_2),
       .X3(t12_3), .Y3(t13_3),
       .X4(t12_4), .Y4(t13_4),
       .X5(t12_5), .Y5(t13_5),
       .X6(t12_6), .Y6(t13_6),
       .X7(t12_7), .Y7(t13_7),
       .X8(t12_8), .Y8(t13_8),
       .X9(t12_9), .Y9(t13_9),
       .X10(t12_10), .Y10(t13_10),
       .X11(t12_11), .Y11(t13_11),
       .X12(t12_12), .Y12(t13_12),
       .X13(t12_13), .Y13(t13_13),
       .X14(t12_14), .Y14(t13_14),
       .X15(t12_15), .Y15(t13_15));


// latency=3, gap=128
   codeBlock104657 stage13(.clk(clk), .reset(reset), .next_in(next_13), .next_out(next_14),
       .X0_in(t13_0), .Y0(t14_0),
       .X1_in(t13_1), .Y1(t14_1),
       .X2_in(t13_2), .Y2(t14_2),
       .X3_in(t13_3), .Y3(t14_3),
       .X4_in(t13_4), .Y4(t14_4),
       .X5_in(t13_5), .Y5(t14_5),
       .X6_in(t13_6), .Y6(t14_6),
       .X7_in(t13_7), .Y7(t14_7),
       .X8_in(t13_8), .Y8(t14_8),
       .X9_in(t13_9), .Y9(t14_9),
       .X10_in(t13_10), .Y10(t14_10),
       .X11_in(t13_11), .Y11(t14_11),
       .X12_in(t13_12), .Y12(t14_12),
       .X13_in(t13_13), .Y13(t14_13),
       .X14_in(t13_14), .Y14(t14_14),
       .X15_in(t13_15), .Y15(t14_15));


// latency=101, gap=128
   rc105078 stage14(.clk(clk), .reset(reset), .next(next_14), .next_out(next_15),
    .X0(t14_0), .Y0(t15_0),
    .X1(t14_1), .Y1(t15_1),
    .X2(t14_2), .Y2(t15_2),
    .X3(t14_3), .Y3(t15_3),
    .X4(t14_4), .Y4(t15_4),
    .X5(t14_5), .Y5(t15_5),
    .X6(t14_6), .Y6(t15_6),
    .X7(t14_7), .Y7(t15_7),
    .X8(t14_8), .Y8(t15_8),
    .X9(t14_9), .Y9(t15_9),
    .X10(t14_10), .Y10(t15_10),
    .X11(t14_11), .Y11(t15_11),
    .X12(t14_12), .Y12(t15_12),
    .X13(t14_13), .Y13(t15_13),
    .X14(t14_14), .Y14(t15_14),
    .X15(t14_15), .Y15(t15_15));


endmodule

// Latency: 126
// Gap: 128
module rc97532(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm97530 instPerm107631(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 126
// Gap: 128
module perm97530(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[8] ^ addr0[2];
   assign inBank0[1] = addr0[9] ^ addr0[0];
   assign inBank0[2] = addr0[6] ^ addr0[1];
   assign inAddr0[0] = addr0[7];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[2];
   assign inAddr0[4] = addr0[3];
   assign inAddr0[5] = addr0[0];
   assign inAddr0[6] = addr0[1];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[8] ^ addr0b[1];
   assign outBank0[2] = addr0b[9] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[8] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[9] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[8] ^ addr1[2];
   assign inBank1[1] = addr1[9] ^ addr1[0];
   assign inBank1[2] = addr1[6] ^ addr1[1];
   assign inAddr1[0] = addr1[7];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[2];
   assign inAddr1[4] = addr1[3];
   assign inAddr1[5] = addr1[0];
   assign inAddr1[6] = addr1[1];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[8] ^ addr1b[1];
   assign outBank1[2] = addr1b[9] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[8] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[9] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[8] ^ addr2[2];
   assign inBank2[1] = addr2[9] ^ addr2[0];
   assign inBank2[2] = addr2[6] ^ addr2[1];
   assign inAddr2[0] = addr2[7];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[2];
   assign inAddr2[4] = addr2[3];
   assign inAddr2[5] = addr2[0];
   assign inAddr2[6] = addr2[1];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[8] ^ addr2b[1];
   assign outBank2[2] = addr2b[9] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[8] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[9] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[8] ^ addr3[2];
   assign inBank3[1] = addr3[9] ^ addr3[0];
   assign inBank3[2] = addr3[6] ^ addr3[1];
   assign inAddr3[0] = addr3[7];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[2];
   assign inAddr3[4] = addr3[3];
   assign inAddr3[5] = addr3[0];
   assign inAddr3[6] = addr3[1];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[8] ^ addr3b[1];
   assign outBank3[2] = addr3b[9] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[8] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[9] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[8] ^ addr4[2];
   assign inBank4[1] = addr4[9] ^ addr4[0];
   assign inBank4[2] = addr4[6] ^ addr4[1];
   assign inAddr4[0] = addr4[7];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[2];
   assign inAddr4[4] = addr4[3];
   assign inAddr4[5] = addr4[0];
   assign inAddr4[6] = addr4[1];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[8] ^ addr4b[1];
   assign outBank4[2] = addr4b[9] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[8] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[9] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[8] ^ addr5[2];
   assign inBank5[1] = addr5[9] ^ addr5[0];
   assign inBank5[2] = addr5[6] ^ addr5[1];
   assign inAddr5[0] = addr5[7];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[2];
   assign inAddr5[4] = addr5[3];
   assign inAddr5[5] = addr5[0];
   assign inAddr5[6] = addr5[1];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[8] ^ addr5b[1];
   assign outBank5[2] = addr5b[9] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[8] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[9] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[8] ^ addr6[2];
   assign inBank6[1] = addr6[9] ^ addr6[0];
   assign inBank6[2] = addr6[6] ^ addr6[1];
   assign inAddr6[0] = addr6[7];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[2];
   assign inAddr6[4] = addr6[3];
   assign inAddr6[5] = addr6[0];
   assign inAddr6[6] = addr6[1];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[8] ^ addr6b[1];
   assign outBank6[2] = addr6b[9] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[8] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[9] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[8] ^ addr7[2];
   assign inBank7[1] = addr7[9] ^ addr7[0];
   assign inBank7[2] = addr7[6] ^ addr7[1];
   assign inAddr7[0] = addr7[7];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[2];
   assign inAddr7[4] = addr7[3];
   assign inAddr7[5] = addr7[0];
   assign inAddr7[6] = addr7[1];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[8] ^ addr7b[1];
   assign outBank7[2] = addr7b[9] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[8] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[9] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(120, 7) nextReg_107636(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_107639(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_97530 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 119)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 123)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 119) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 119)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_3 = {x5, inAddr5};
    assign w_0_5 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[5];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[3];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_4_pipe), .y0(w_3_0), .y1(w_3_4), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_1_pipe), .x1(w_2_5_pipe), .y0(w_3_1), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_2_pipe), .x1(w_2_6_pipe), .y0(w_3_2), .y1(w_3_6), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_3_pipe), .x1(w_2_7_pipe), .y0(w_3_3), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray1024_97530(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_107644(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock97534(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_107651(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a994;
   wire signed [15:0] a995;
   wire signed [15:0] a996;
   wire signed [15:0] a997;
   wire signed [15:0] a1002;
   wire signed [15:0] a1003;
   wire signed [15:0] a1004;
   wire signed [15:0] a1005;
   wire signed [15:0] a1010;
   wire signed [15:0] a1011;
   wire signed [15:0] a1012;
   wire signed [15:0] a1013;
   wire signed [15:0] a1018;
   wire signed [15:0] a1019;
   wire signed [15:0] a1020;
   wire signed [15:0] a1021;
   wire signed [15:0] t1170;
   wire signed [15:0] t1171;
   wire signed [15:0] t1172;
   wire signed [15:0] t1173;
   wire signed [15:0] t1174;
   wire signed [15:0] t1175;
   wire signed [15:0] t1176;
   wire signed [15:0] t1177;
   wire signed [15:0] t1186;
   wire signed [15:0] t1187;
   wire signed [15:0] t1188;
   wire signed [15:0] t1189;
   wire signed [15:0] t1190;
   wire signed [15:0] t1191;
   wire signed [15:0] t1192;
   wire signed [15:0] t1193;
   wire signed [15:0] t1178;
   wire signed [15:0] t1179;
   wire signed [15:0] t1180;
   wire signed [15:0] t1181;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] t1182;
   wire signed [15:0] t1183;
   wire signed [15:0] t1184;
   wire signed [15:0] t1185;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t1194;
   wire signed [15:0] t1195;
   wire signed [15:0] t1196;
   wire signed [15:0] t1197;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] t1198;
   wire signed [15:0] t1199;
   wire signed [15:0] t1200;
   wire signed [15:0] t1201;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a994 = X0;
   assign a995 = X4;
   assign a996 = X1;
   assign a997 = X5;
   assign a1002 = X2;
   assign a1003 = X6;
   assign a1004 = X3;
   assign a1005 = X7;
   assign a1010 = X8;
   assign a1011 = X12;
   assign a1012 = X9;
   assign a1013 = X13;
   assign a1018 = X10;
   assign a1019 = X14;
   assign a1020 = X11;
   assign a1021 = X15;
   assign Y0 = t1178;
   assign Y1 = t1179;
   assign Y4 = t1180;
   assign Y5 = t1181;
   assign Y2 = t1182;
   assign Y3 = t1183;
   assign Y6 = t1184;
   assign Y7 = t1185;
   assign Y8 = t1194;
   assign Y9 = t1195;
   assign Y12 = t1196;
   assign Y13 = t1197;
   assign Y10 = t1198;
   assign Y11 = t1199;
   assign Y14 = t1200;
   assign Y15 = t1201;

    addfxp #(16, 1) add97546(.a(a994), .b(a995), .clk(clk), .q(t1170));    // 0
    addfxp #(16, 1) add97561(.a(a996), .b(a997), .clk(clk), .q(t1171));    // 0
    subfxp #(16, 1) sub97576(.a(a994), .b(a995), .clk(clk), .q(t1172));    // 0
    subfxp #(16, 1) sub97591(.a(a996), .b(a997), .clk(clk), .q(t1173));    // 0
    addfxp #(16, 1) add97606(.a(a1002), .b(a1003), .clk(clk), .q(t1174));    // 0
    addfxp #(16, 1) add97621(.a(a1004), .b(a1005), .clk(clk), .q(t1175));    // 0
    subfxp #(16, 1) sub97636(.a(a1002), .b(a1003), .clk(clk), .q(t1176));    // 0
    subfxp #(16, 1) sub97651(.a(a1004), .b(a1005), .clk(clk), .q(t1177));    // 0
    addfxp #(16, 1) add97754(.a(a1010), .b(a1011), .clk(clk), .q(t1186));    // 0
    addfxp #(16, 1) add97769(.a(a1012), .b(a1013), .clk(clk), .q(t1187));    // 0
    subfxp #(16, 1) sub97784(.a(a1010), .b(a1011), .clk(clk), .q(t1188));    // 0
    subfxp #(16, 1) sub97799(.a(a1012), .b(a1013), .clk(clk), .q(t1189));    // 0
    addfxp #(16, 1) add97814(.a(a1018), .b(a1019), .clk(clk), .q(t1190));    // 0
    addfxp #(16, 1) add97829(.a(a1020), .b(a1021), .clk(clk), .q(t1191));    // 0
    subfxp #(16, 1) sub97844(.a(a1018), .b(a1019), .clk(clk), .q(t1192));    // 0
    subfxp #(16, 1) sub97859(.a(a1020), .b(a1021), .clk(clk), .q(t1193));    // 0
    addfxp #(16, 1) add97658(.a(t1170), .b(t1174), .clk(clk), .q(t1178));    // 1
    addfxp #(16, 1) add97665(.a(t1171), .b(t1175), .clk(clk), .q(t1179));    // 1
    subfxp #(16, 1) sub97672(.a(t1170), .b(t1174), .clk(clk), .q(t1180));    // 1
    subfxp #(16, 1) sub97679(.a(t1171), .b(t1175), .clk(clk), .q(t1181));    // 1
    addfxp #(16, 1) add97702(.a(t1172), .b(t1177), .clk(clk), .q(t1182));    // 1
    subfxp #(16, 1) sub97709(.a(t1173), .b(t1176), .clk(clk), .q(t1183));    // 1
    subfxp #(16, 1) sub97716(.a(t1172), .b(t1177), .clk(clk), .q(t1184));    // 1
    addfxp #(16, 1) add97723(.a(t1173), .b(t1176), .clk(clk), .q(t1185));    // 1
    addfxp #(16, 1) add97866(.a(t1186), .b(t1190), .clk(clk), .q(t1194));    // 1
    addfxp #(16, 1) add97873(.a(t1187), .b(t1191), .clk(clk), .q(t1195));    // 1
    subfxp #(16, 1) sub97880(.a(t1186), .b(t1190), .clk(clk), .q(t1196));    // 1
    subfxp #(16, 1) sub97887(.a(t1187), .b(t1191), .clk(clk), .q(t1197));    // 1
    addfxp #(16, 1) add97910(.a(t1188), .b(t1193), .clk(clk), .q(t1198));    // 1
    subfxp #(16, 1) sub97917(.a(t1189), .b(t1192), .clk(clk), .q(t1199));    // 1
    subfxp #(16, 1) sub97924(.a(t1188), .b(t1193), .clk(clk), .q(t1200));    // 1
    addfxp #(16, 1) add97931(.a(t1189), .b(t1192), .clk(clk), .q(t1201));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 4
// Gap: 2
module rc97955(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm97953 instPerm107652(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm97953(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[2];
   assign inBank0[1] = addr0[3] ^ addr0[1];
   assign inBank0[2] = addr0[0];
   assign inAddr0[0] = addr0[1];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[3] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[3] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];

   assign inBank1[0] = addr1[2];
   assign inBank1[1] = addr1[3] ^ addr1[1];
   assign inBank1[2] = addr1[0];
   assign inAddr1[0] = addr1[1];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[3] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[3] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];

   assign inBank2[0] = addr2[2];
   assign inBank2[1] = addr2[3] ^ addr2[1];
   assign inBank2[2] = addr2[0];
   assign inAddr2[0] = addr2[1];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[3] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[3] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];

   assign inBank3[0] = addr3[2];
   assign inBank3[1] = addr3[3] ^ addr3[1];
   assign inBank3[2] = addr3[0];
   assign inAddr3[0] = addr3[1];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[3] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[3] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];

   assign inBank4[0] = addr4[2];
   assign inBank4[1] = addr4[3] ^ addr4[1];
   assign inBank4[2] = addr4[0];
   assign inAddr4[0] = addr4[1];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[3] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[3] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];

   assign inBank5[0] = addr5[2];
   assign inBank5[1] = addr5[3] ^ addr5[1];
   assign inBank5[2] = addr5[0];
   assign inAddr5[0] = addr5[1];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[3] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[3] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];

   assign inBank6[0] = addr6[2];
   assign inBank6[1] = addr6[3] ^ addr6[1];
   assign inBank6[2] = addr6[0];
   assign inAddr6[0] = addr6[1];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[3] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[3] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];

   assign inBank7[0] = addr7[2];
   assign inBank7[1] = addr7[3] ^ addr7[1];
   assign inBank7[2] = addr7[0];
   assign inAddr7[0] = addr7[1];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[3] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[3] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];

   shiftRegFIFO #(2, 1) shiftFIFO_107655(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_107658(.X(next0), .Y(next_out), .clk(clk));


   memArray16_97953 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_4 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_3 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_97953(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(2, 1) shiftFIFO_107661(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 2
module DirSum_98664(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [0:0] i4;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 1)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock97958 codeBlockIsnt107662(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D72_98602(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hc4df;
      1: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D70_98610(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D68_98618(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D67_98622(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D64_98634(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h187e;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D63_98638(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h2d41;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D62_98642(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D60_98654(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D58_98658(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D59_98662(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock97958(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i4_in;
   reg [0:0] i4;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_107665(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a920;
   reg signed [15:0] tm13;
   reg signed [15:0] tm89;
   wire signed [15:0] a930;
   wire signed [15:0] a883;
   wire signed [15:0] a933;
   wire signed [15:0] a887;
   wire signed [15:0] a934;
   wire signed [15:0] a935;
   wire signed [15:0] a938;
   wire signed [15:0] a939;
   wire signed [15:0] a942;
   wire signed [15:0] a943;
   wire signed [15:0] a946;
   wire signed [15:0] a907;
   wire signed [15:0] a949;
   wire signed [15:0] a911;
   wire signed [15:0] a950;
   wire signed [15:0] a951;
   wire signed [15:0] a954;
   wire signed [15:0] a955;
   wire signed [15:0] a958;
   wire signed [15:0] a959;
   reg signed [15:0] tm309;
   reg signed [15:0] tm313;
   reg signed [15:0] tm325;
   reg signed [15:0] tm329;
   reg signed [15:0] tm341;
   reg signed [15:0] tm345;
   reg signed [15:0] tm357;
   reg signed [15:0] tm361;
   reg signed [15:0] tm373;
   reg signed [15:0] tm381;
   reg signed [15:0] tm389;
   reg signed [15:0] tm393;
   reg signed [15:0] tm405;
   reg signed [15:0] tm412;
   reg signed [15:0] tm419;
   reg signed [15:0] tm426;
   wire signed [15:0] a921;
   wire signed [15:0] a922;
   reg signed [15:0] tm310;
   reg signed [15:0] tm314;
   reg signed [15:0] tm326;
   reg signed [15:0] tm330;
   reg signed [15:0] tm342;
   reg signed [15:0] tm346;
   reg signed [15:0] tm358;
   reg signed [15:0] tm362;
   reg signed [15:0] tm374;
   reg signed [15:0] tm382;
   reg signed [15:0] tm390;
   reg signed [15:0] tm394;
   reg signed [15:0] tm406;
   reg signed [15:0] tm413;
   reg signed [15:0] tm420;
   reg signed [15:0] tm427;
   wire signed [15:0] tm2;
   wire signed [15:0] a888;
   wire signed [15:0] tm3;
   wire signed [15:0] a890;
   wire signed [15:0] tm4;
   wire signed [15:0] a894;
   wire signed [15:0] tm5;
   wire signed [15:0] a896;
   wire signed [15:0] tm6;
   wire signed [15:0] a900;
   wire signed [15:0] tm10;
   wire signed [15:0] a912;
   wire signed [15:0] tm11;
   wire signed [15:0] a914;
   wire signed [15:0] tm12;
   wire signed [15:0] a918;
   wire signed [15:0] tm14;
   wire signed [15:0] a924;
   wire signed [15:0] tm15;
   wire signed [15:0] a926;
   reg signed [15:0] tm311;
   reg signed [15:0] tm315;
   reg signed [15:0] tm327;
   reg signed [15:0] tm331;
   reg signed [15:0] tm343;
   reg signed [15:0] tm347;
   reg signed [15:0] tm359;
   reg signed [15:0] tm363;
   reg signed [15:0] tm375;
   reg signed [15:0] tm377;
   reg signed [15:0] tm383;
   reg signed [15:0] tm385;
   reg signed [15:0] tm391;
   reg signed [15:0] tm395;
   reg signed [15:0] tm407;
   reg signed [15:0] tm414;
   reg signed [15:0] tm421;
   reg signed [15:0] tm428;
   reg signed [15:0] tm68;
   reg signed [15:0] tm69;
   reg signed [15:0] tm72;
   reg signed [15:0] tm73;
   reg signed [15:0] tm76;
   reg signed [15:0] tm84;
   reg signed [15:0] tm85;
   reg signed [15:0] tm88;
   reg signed [15:0] tm92;
   reg signed [15:0] tm93;
   reg signed [15:0] tm312;
   reg signed [15:0] tm316;
   reg signed [15:0] tm328;
   reg signed [15:0] tm332;
   reg signed [15:0] tm344;
   reg signed [15:0] tm348;
   reg signed [15:0] tm360;
   reg signed [15:0] tm364;
   reg signed [15:0] tm376;
   reg signed [15:0] tm378;
   reg signed [15:0] tm384;
   reg signed [15:0] tm386;
   reg signed [15:0] tm392;
   reg signed [15:0] tm396;
   reg signed [15:0] tm408;
   reg signed [15:0] tm415;
   reg signed [15:0] tm422;
   reg signed [15:0] tm429;
   reg signed [15:0] tm379;
   reg signed [15:0] tm387;
   reg signed [15:0] tm409;
   reg signed [15:0] tm416;
   reg signed [15:0] tm423;
   reg signed [15:0] tm430;
   wire signed [15:0] a889;
   wire signed [15:0] a891;
   wire signed [15:0] a892;
   wire signed [15:0] a893;
   wire signed [15:0] a895;
   wire signed [15:0] a897;
   wire signed [15:0] a898;
   wire signed [15:0] a899;
   wire signed [15:0] a901;
   wire signed [15:0] a903;
   wire signed [15:0] a904;
   wire signed [15:0] a905;
   wire signed [15:0] a913;
   wire signed [15:0] a915;
   wire signed [15:0] a916;
   wire signed [15:0] a917;
   wire signed [15:0] a919;
   wire signed [15:0] a923;
   wire signed [15:0] a925;
   wire signed [15:0] a927;
   wire signed [15:0] a928;
   wire signed [15:0] a929;
   reg signed [15:0] tm380;
   reg signed [15:0] tm388;
   reg signed [15:0] tm410;
   reg signed [15:0] tm417;
   reg signed [15:0] tm424;
   reg signed [15:0] tm431;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm411;
   reg signed [15:0] tm418;
   reg signed [15:0] tm425;
   reg signed [15:0] tm432;

   wire signed [15:0] tm220;
   assign tm220 = 16'hd2bf;

   assign a920 = tm13;
   assign a930 = X0;
   assign a883 = a930;
   assign a933 = X1;
   assign a887 = a933;
   assign a934 = X2;
   assign a935 = X3;
   assign a938 = X4;
   assign a939 = X5;
   assign a942 = X6;
   assign a943 = X7;
   assign a946 = X8;
   assign a907 = a946;
   assign a949 = X9;
   assign a911 = a949;
   assign a950 = X10;
   assign a951 = X11;
   assign a954 = X12;
   assign a955 = X13;
   assign a958 = X14;
   assign a959 = X15;
   assign a888 = tm2;
   assign a890 = tm3;
   assign a894 = tm4;
   assign a896 = tm5;
   assign a900 = tm6;
   assign a912 = tm10;
   assign a914 = tm11;
   assign a918 = tm12;
   assign a924 = tm14;
   assign a926 = tm15;
   assign Y0 = tm411;
   assign Y1 = tm418;
   assign Y8 = tm425;
   assign Y9 = tm432;

   D72_98602 instD72inst0_98602(.addr(i4[0:0]), .out(tm15), .clk(clk));

   D70_98610 instD70inst0_98610(.addr(i4[0:0]), .out(tm11), .clk(clk));

   D68_98618 instD68inst0_98618(.addr(i4[0:0]), .out(tm3), .clk(clk));

   D67_98622 instD67inst0_98622(.addr(i4[0:0]), .out(tm5), .clk(clk));

   D64_98634 instD64inst0_98634(.addr(i4[0:0]), .out(tm14), .clk(clk));

   D63_98638 instD63inst0_98638(.addr(i4[0:0]), .out(tm12), .clk(clk));

   D62_98642 instD62inst0_98642(.addr(i4[0:0]), .out(tm10), .clk(clk));

   D60_98654 instD60inst0_98654(.addr(i4[0:0]), .out(tm6), .clk(clk));

   D58_98658 instD58inst0_98658(.addr(i4[0:0]), .out(tm2), .clk(clk));

   D59_98662 instD59inst0_98662(.addr(i4[0:0]), .out(tm4), .clk(clk));

    multfix #(16, 2) m98479(.a(tm89), .b(a955), .clk(clk), .q_sc(a921), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98497(.a(tm89), .b(a954), .clk(clk), .q_sc(a922), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98057(.a(tm68), .b(tm312), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98079(.a(tm69), .b(tm316), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98097(.a(tm69), .b(tm312), .clk(clk), .q_sc(a892), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98108(.a(tm68), .b(tm316), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98137(.a(tm72), .b(tm328), .clk(clk), .q_sc(a895), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98159(.a(tm73), .b(tm332), .clk(clk), .q_sc(a897), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98177(.a(tm73), .b(tm328), .clk(clk), .q_sc(a898), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98188(.a(tm72), .b(tm332), .clk(clk), .q_sc(a899), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98217(.a(tm76), .b(tm344), .clk(clk), .q_sc(a901), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98239(.a(tm69), .b(tm348), .clk(clk), .q_sc(a903), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98257(.a(tm69), .b(tm344), .clk(clk), .q_sc(a904), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98268(.a(tm76), .b(tm348), .clk(clk), .q_sc(a905), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98377(.a(tm84), .b(tm360), .clk(clk), .q_sc(a913), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98399(.a(tm85), .b(tm364), .clk(clk), .q_sc(a915), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98417(.a(tm85), .b(tm360), .clk(clk), .q_sc(a916), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98428(.a(tm84), .b(tm364), .clk(clk), .q_sc(a917), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98457(.a(tm88), .b(tm376), .clk(clk), .q_sc(a919), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98508(.a(tm88), .b(tm384), .clk(clk), .q_sc(a923), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98537(.a(tm92), .b(tm392), .clk(clk), .q_sc(a925), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98559(.a(tm93), .b(tm396), .clk(clk), .q_sc(a927), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98577(.a(tm93), .b(tm392), .clk(clk), .q_sc(a928), .q_unsc(), .rst(reset));
    multfix #(16, 2) m98588(.a(tm92), .b(tm396), .clk(clk), .q_sc(a929), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub98086(.a(a889), .b(a891), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add98115(.a(a892), .b(a893), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub98166(.a(a895), .b(a897), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add98195(.a(a898), .b(a899), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub98246(.a(a901), .b(a903), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add98275(.a(a904), .b(a905), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub98406(.a(a913), .b(a915), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add98435(.a(a916), .b(a917), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub98486(.a(a919), .b(tm380), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add98515(.a(tm388), .b(a923), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub98566(.a(a925), .b(a927), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add98595(.a(a928), .b(a929), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm89 <= 0;
         tm89 <= 0;
         tm68 <= 0;
         tm312 <= 0;
         tm69 <= 0;
         tm316 <= 0;
         tm69 <= 0;
         tm312 <= 0;
         tm68 <= 0;
         tm316 <= 0;
         tm72 <= 0;
         tm328 <= 0;
         tm73 <= 0;
         tm332 <= 0;
         tm73 <= 0;
         tm328 <= 0;
         tm72 <= 0;
         tm332 <= 0;
         tm76 <= 0;
         tm344 <= 0;
         tm69 <= 0;
         tm348 <= 0;
         tm69 <= 0;
         tm344 <= 0;
         tm76 <= 0;
         tm348 <= 0;
         tm84 <= 0;
         tm360 <= 0;
         tm85 <= 0;
         tm364 <= 0;
         tm85 <= 0;
         tm360 <= 0;
         tm84 <= 0;
         tm364 <= 0;
         tm88 <= 0;
         tm376 <= 0;
         tm88 <= 0;
         tm384 <= 0;
         tm92 <= 0;
         tm392 <= 0;
         tm93 <= 0;
         tm396 <= 0;
         tm93 <= 0;
         tm392 <= 0;
         tm92 <= 0;
         tm396 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm13 <= tm220;
         tm89 <= a920;
         tm309 <= a934;
         tm313 <= a935;
         tm325 <= a938;
         tm329 <= a939;
         tm341 <= a942;
         tm345 <= a943;
         tm357 <= a950;
         tm361 <= a951;
         tm373 <= a954;
         tm381 <= a955;
         tm389 <= a958;
         tm393 <= a959;
         tm405 <= a883;
         tm412 <= a887;
         tm419 <= a907;
         tm426 <= a911;
         tm310 <= tm309;
         tm314 <= tm313;
         tm326 <= tm325;
         tm330 <= tm329;
         tm342 <= tm341;
         tm346 <= tm345;
         tm358 <= tm357;
         tm362 <= tm361;
         tm374 <= tm373;
         tm382 <= tm381;
         tm390 <= tm389;
         tm394 <= tm393;
         tm406 <= tm405;
         tm413 <= tm412;
         tm420 <= tm419;
         tm427 <= tm426;
         tm311 <= tm310;
         tm315 <= tm314;
         tm327 <= tm326;
         tm331 <= tm330;
         tm343 <= tm342;
         tm347 <= tm346;
         tm359 <= tm358;
         tm363 <= tm362;
         tm375 <= tm374;
         tm377 <= a921;
         tm383 <= tm382;
         tm385 <= a922;
         tm391 <= tm390;
         tm395 <= tm394;
         tm407 <= tm406;
         tm414 <= tm413;
         tm421 <= tm420;
         tm428 <= tm427;
         tm68 <= a888;
         tm69 <= a890;
         tm72 <= a894;
         tm73 <= a896;
         tm76 <= a900;
         tm84 <= a912;
         tm85 <= a914;
         tm88 <= a918;
         tm92 <= a924;
         tm93 <= a926;
         tm312 <= tm311;
         tm316 <= tm315;
         tm328 <= tm327;
         tm332 <= tm331;
         tm344 <= tm343;
         tm348 <= tm347;
         tm360 <= tm359;
         tm364 <= tm363;
         tm376 <= tm375;
         tm378 <= tm377;
         tm384 <= tm383;
         tm386 <= tm385;
         tm392 <= tm391;
         tm396 <= tm395;
         tm408 <= tm407;
         tm415 <= tm414;
         tm422 <= tm421;
         tm429 <= tm428;
         tm379 <= tm378;
         tm387 <= tm386;
         tm409 <= tm408;
         tm416 <= tm415;
         tm423 <= tm422;
         tm430 <= tm429;
         tm380 <= tm379;
         tm388 <= tm387;
         tm410 <= tm409;
         tm417 <= tm416;
         tm424 <= tm423;
         tm431 <= tm430;
         tm411 <= tm410;
         tm418 <= tm417;
         tm425 <= tm424;
         tm432 <= tm431;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock98667(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_107668(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a754;
   wire signed [15:0] a755;
   wire signed [15:0] a756;
   wire signed [15:0] a757;
   wire signed [15:0] a762;
   wire signed [15:0] a763;
   wire signed [15:0] a764;
   wire signed [15:0] a765;
   wire signed [15:0] a770;
   wire signed [15:0] a771;
   wire signed [15:0] a772;
   wire signed [15:0] a773;
   wire signed [15:0] a778;
   wire signed [15:0] a779;
   wire signed [15:0] a780;
   wire signed [15:0] a781;
   wire signed [15:0] t930;
   wire signed [15:0] t931;
   wire signed [15:0] t932;
   wire signed [15:0] t933;
   wire signed [15:0] t934;
   wire signed [15:0] t935;
   wire signed [15:0] t936;
   wire signed [15:0] t937;
   wire signed [15:0] t946;
   wire signed [15:0] t947;
   wire signed [15:0] t948;
   wire signed [15:0] t949;
   wire signed [15:0] t950;
   wire signed [15:0] t951;
   wire signed [15:0] t952;
   wire signed [15:0] t953;
   wire signed [15:0] t938;
   wire signed [15:0] t939;
   wire signed [15:0] t940;
   wire signed [15:0] t941;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] t942;
   wire signed [15:0] t943;
   wire signed [15:0] t944;
   wire signed [15:0] t945;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t954;
   wire signed [15:0] t955;
   wire signed [15:0] t956;
   wire signed [15:0] t957;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] t958;
   wire signed [15:0] t959;
   wire signed [15:0] t960;
   wire signed [15:0] t961;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a754 = X0;
   assign a755 = X4;
   assign a756 = X1;
   assign a757 = X5;
   assign a762 = X2;
   assign a763 = X6;
   assign a764 = X3;
   assign a765 = X7;
   assign a770 = X8;
   assign a771 = X12;
   assign a772 = X9;
   assign a773 = X13;
   assign a778 = X10;
   assign a779 = X14;
   assign a780 = X11;
   assign a781 = X15;
   assign Y0 = t938;
   assign Y1 = t939;
   assign Y4 = t940;
   assign Y5 = t941;
   assign Y2 = t942;
   assign Y3 = t943;
   assign Y6 = t944;
   assign Y7 = t945;
   assign Y8 = t954;
   assign Y9 = t955;
   assign Y12 = t956;
   assign Y13 = t957;
   assign Y10 = t958;
   assign Y11 = t959;
   assign Y14 = t960;
   assign Y15 = t961;

    addfxp #(16, 1) add98679(.a(a754), .b(a755), .clk(clk), .q(t930));    // 0
    addfxp #(16, 1) add98694(.a(a756), .b(a757), .clk(clk), .q(t931));    // 0
    subfxp #(16, 1) sub98709(.a(a754), .b(a755), .clk(clk), .q(t932));    // 0
    subfxp #(16, 1) sub98724(.a(a756), .b(a757), .clk(clk), .q(t933));    // 0
    addfxp #(16, 1) add98739(.a(a762), .b(a763), .clk(clk), .q(t934));    // 0
    addfxp #(16, 1) add98754(.a(a764), .b(a765), .clk(clk), .q(t935));    // 0
    subfxp #(16, 1) sub98769(.a(a762), .b(a763), .clk(clk), .q(t936));    // 0
    subfxp #(16, 1) sub98784(.a(a764), .b(a765), .clk(clk), .q(t937));    // 0
    addfxp #(16, 1) add98887(.a(a770), .b(a771), .clk(clk), .q(t946));    // 0
    addfxp #(16, 1) add98902(.a(a772), .b(a773), .clk(clk), .q(t947));    // 0
    subfxp #(16, 1) sub98917(.a(a770), .b(a771), .clk(clk), .q(t948));    // 0
    subfxp #(16, 1) sub98932(.a(a772), .b(a773), .clk(clk), .q(t949));    // 0
    addfxp #(16, 1) add98947(.a(a778), .b(a779), .clk(clk), .q(t950));    // 0
    addfxp #(16, 1) add98962(.a(a780), .b(a781), .clk(clk), .q(t951));    // 0
    subfxp #(16, 1) sub98977(.a(a778), .b(a779), .clk(clk), .q(t952));    // 0
    subfxp #(16, 1) sub98992(.a(a780), .b(a781), .clk(clk), .q(t953));    // 0
    addfxp #(16, 1) add98791(.a(t930), .b(t934), .clk(clk), .q(t938));    // 1
    addfxp #(16, 1) add98798(.a(t931), .b(t935), .clk(clk), .q(t939));    // 1
    subfxp #(16, 1) sub98805(.a(t930), .b(t934), .clk(clk), .q(t940));    // 1
    subfxp #(16, 1) sub98812(.a(t931), .b(t935), .clk(clk), .q(t941));    // 1
    addfxp #(16, 1) add98835(.a(t932), .b(t937), .clk(clk), .q(t942));    // 1
    subfxp #(16, 1) sub98842(.a(t933), .b(t936), .clk(clk), .q(t943));    // 1
    subfxp #(16, 1) sub98849(.a(t932), .b(t937), .clk(clk), .q(t944));    // 1
    addfxp #(16, 1) add98856(.a(t933), .b(t936), .clk(clk), .q(t945));    // 1
    addfxp #(16, 1) add98999(.a(t946), .b(t950), .clk(clk), .q(t954));    // 1
    addfxp #(16, 1) add99006(.a(t947), .b(t951), .clk(clk), .q(t955));    // 1
    subfxp #(16, 1) sub99013(.a(t946), .b(t950), .clk(clk), .q(t956));    // 1
    subfxp #(16, 1) sub99020(.a(t947), .b(t951), .clk(clk), .q(t957));    // 1
    addfxp #(16, 1) add99043(.a(t948), .b(t953), .clk(clk), .q(t958));    // 1
    subfxp #(16, 1) sub99050(.a(t949), .b(t952), .clk(clk), .q(t959));    // 1
    subfxp #(16, 1) sub99057(.a(t948), .b(t953), .clk(clk), .q(t960));    // 1
    addfxp #(16, 1) add99064(.a(t949), .b(t952), .clk(clk), .q(t961));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 11
// Gap: 8
module rc99088(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm99086 instPerm107669(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 11
// Gap: 8
module perm99086(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[4] ^ addr0[0];
   assign inBank0[1] = addr0[5] ^ addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[0];
   assign inAddr0[2] = addr0[1];
   assign outBank0[0] = addr0b[4] ^ addr0b[0];
   assign outBank0[1] = addr0b[5] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outBank_a0[0] = addr0c[4] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[5] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];

   assign inBank1[0] = addr1[4] ^ addr1[0];
   assign inBank1[1] = addr1[5] ^ addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[0];
   assign inAddr1[2] = addr1[1];
   assign outBank1[0] = addr1b[4] ^ addr1b[0];
   assign outBank1[1] = addr1b[5] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outBank_a1[0] = addr1c[4] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[5] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];

   assign inBank2[0] = addr2[4] ^ addr2[0];
   assign inBank2[1] = addr2[5] ^ addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[0];
   assign inAddr2[2] = addr2[1];
   assign outBank2[0] = addr2b[4] ^ addr2b[0];
   assign outBank2[1] = addr2b[5] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outBank_a2[0] = addr2c[4] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[5] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];

   assign inBank3[0] = addr3[4] ^ addr3[0];
   assign inBank3[1] = addr3[5] ^ addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[0];
   assign inAddr3[2] = addr3[1];
   assign outBank3[0] = addr3b[4] ^ addr3b[0];
   assign outBank3[1] = addr3b[5] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outBank_a3[0] = addr3c[4] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[5] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];

   assign inBank4[0] = addr4[4] ^ addr4[0];
   assign inBank4[1] = addr4[5] ^ addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[0];
   assign inAddr4[2] = addr4[1];
   assign outBank4[0] = addr4b[4] ^ addr4b[0];
   assign outBank4[1] = addr4b[5] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outBank_a4[0] = addr4c[4] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[5] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];

   assign inBank5[0] = addr5[4] ^ addr5[0];
   assign inBank5[1] = addr5[5] ^ addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[0];
   assign inAddr5[2] = addr5[1];
   assign outBank5[0] = addr5b[4] ^ addr5b[0];
   assign outBank5[1] = addr5b[5] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outBank_a5[0] = addr5c[4] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[5] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];

   assign inBank6[0] = addr6[4] ^ addr6[0];
   assign inBank6[1] = addr6[5] ^ addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[0];
   assign inAddr6[2] = addr6[1];
   assign outBank6[0] = addr6b[4] ^ addr6b[0];
   assign outBank6[1] = addr6b[5] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outBank_a6[0] = addr6c[4] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[5] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];

   assign inBank7[0] = addr7[4] ^ addr7[0];
   assign inBank7[1] = addr7[5] ^ addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[0];
   assign inAddr7[2] = addr7[1];
   assign outBank7[0] = addr7b[4] ^ addr7b[0];
   assign outBank7[1] = addr7b[5] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outBank_a7[0] = addr7c[4] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[5] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];

   shiftRegFIFO #(7, 1) shiftFIFO_107672(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_107675(.X(next0), .Y(next_out), .clk(clk));


   memArray64_99086 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

    reg resetOutCountRd2_8;
    reg resetOutCountRd2_9;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_8 <= 0;
            resetOutCountRd2_9 <= 0;
        end
        else begin
            resetOutCountRd2_8 <= (inCount == 7) ? 1'b1 : 1'b0;
            resetOutCountRd2_9 <= resetOutCountRd2_8;
            if (resetOutCountRd2_9 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 6)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 6) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 7) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 6)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[1];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[2];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[1];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_5_pipe), .y0(z_2_4), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_6_pipe), .x1(z_1_7_pipe), .y0(z_2_6), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[2];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[1];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_5_pipe), .y0(u_2_4), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_6_pipe), .x1(u_1_7_pipe), .y0(u_2_6), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray64_99086(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(8, 1) shiftFIFO_107678(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 8
module DirSum_99893(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [2:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 7)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock99091 codeBlockIsnt107679(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D40_99751(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D41_99761(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      4: out3 <= 16'h0;
      5: out3 <= 16'he782;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D42_99771(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h187e;
      3: out3 <= 16'hf384;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hc13b;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hdc72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D44_99791(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3871;
      3: out3 <= 16'h3179;
      4: out3 <= 16'h289a;
      5: out3 <= 16'h1e2b;
      6: out3 <= 16'h1294;
      7: out3 <= 16'h646;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D45_99801(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h238e;
      3: out3 <= 16'hc7c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hdc72;
      6: out3 <= 16'hcac9;
      7: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D46_99811(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3d3f;
      1: out3 <= 16'h289a;
      2: out3 <= 16'h646;
      3: out3 <= 16'he1d5;
      4: out3 <= 16'hc78f;
      5: out3 <= 16'hc04f;
      6: out3 <= 16'hce87;
      7: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D48_99831(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D49_99841(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      4: out3 <= 16'hc000;
      5: out3 <= 16'hc4df;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D50_99851(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hc4df;
      3: out3 <= 16'hc13b;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hf384;
      6: out3 <= 16'h187e;
      7: out3 <= 16'h3537;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D52_99871(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'he1d5;
      3: out3 <= 16'hd766;
      4: out3 <= 16'hce87;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hc2c1;
      7: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D53_99881(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hc13b;
      4: out3 <= 16'hc13b;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D54_99891(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hed6c;
      1: out3 <= 16'hce87;
      2: out3 <= 16'hc04f;
      3: out3 <= 16'hc78f;
      4: out3 <= 16'he1d5;
      5: out3 <= 16'h646;
      6: out3 <= 16'h289a;
      7: out3 <= 16'h3d3f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock99091(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i3_in;
   reg [2:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_107682(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a690;
   wire signed [15:0] a643;
   wire signed [15:0] a693;
   wire signed [15:0] a647;
   wire signed [15:0] a694;
   wire signed [15:0] a695;
   wire signed [15:0] a698;
   wire signed [15:0] a699;
   wire signed [15:0] a702;
   wire signed [15:0] a703;
   wire signed [15:0] a706;
   wire signed [15:0] a667;
   wire signed [15:0] a709;
   wire signed [15:0] a671;
   wire signed [15:0] a710;
   wire signed [15:0] a711;
   wire signed [15:0] a714;
   wire signed [15:0] a715;
   wire signed [15:0] a718;
   wire signed [15:0] a719;
   reg signed [15:0] tm433;
   reg signed [15:0] tm437;
   reg signed [15:0] tm449;
   reg signed [15:0] tm453;
   reg signed [15:0] tm465;
   reg signed [15:0] tm469;
   reg signed [15:0] tm481;
   reg signed [15:0] tm485;
   reg signed [15:0] tm497;
   reg signed [15:0] tm501;
   reg signed [15:0] tm513;
   reg signed [15:0] tm517;
   reg signed [15:0] tm529;
   reg signed [15:0] tm536;
   reg signed [15:0] tm543;
   reg signed [15:0] tm550;
   reg signed [15:0] tm434;
   reg signed [15:0] tm438;
   reg signed [15:0] tm450;
   reg signed [15:0] tm454;
   reg signed [15:0] tm466;
   reg signed [15:0] tm470;
   reg signed [15:0] tm482;
   reg signed [15:0] tm486;
   reg signed [15:0] tm498;
   reg signed [15:0] tm502;
   reg signed [15:0] tm514;
   reg signed [15:0] tm518;
   reg signed [15:0] tm530;
   reg signed [15:0] tm537;
   reg signed [15:0] tm544;
   reg signed [15:0] tm551;
   wire signed [15:0] tm18;
   wire signed [15:0] a648;
   wire signed [15:0] tm19;
   wire signed [15:0] a650;
   wire signed [15:0] tm20;
   wire signed [15:0] a654;
   wire signed [15:0] tm21;
   wire signed [15:0] a656;
   wire signed [15:0] tm22;
   wire signed [15:0] a660;
   wire signed [15:0] tm23;
   wire signed [15:0] a662;
   wire signed [15:0] tm26;
   wire signed [15:0] a672;
   wire signed [15:0] tm27;
   wire signed [15:0] a674;
   wire signed [15:0] tm28;
   wire signed [15:0] a678;
   wire signed [15:0] tm29;
   wire signed [15:0] a680;
   wire signed [15:0] tm30;
   wire signed [15:0] a684;
   wire signed [15:0] tm31;
   wire signed [15:0] a686;
   reg signed [15:0] tm435;
   reg signed [15:0] tm439;
   reg signed [15:0] tm451;
   reg signed [15:0] tm455;
   reg signed [15:0] tm467;
   reg signed [15:0] tm471;
   reg signed [15:0] tm483;
   reg signed [15:0] tm487;
   reg signed [15:0] tm499;
   reg signed [15:0] tm503;
   reg signed [15:0] tm515;
   reg signed [15:0] tm519;
   reg signed [15:0] tm531;
   reg signed [15:0] tm538;
   reg signed [15:0] tm545;
   reg signed [15:0] tm552;
   reg signed [15:0] tm100;
   reg signed [15:0] tm101;
   reg signed [15:0] tm104;
   reg signed [15:0] tm105;
   reg signed [15:0] tm108;
   reg signed [15:0] tm109;
   reg signed [15:0] tm116;
   reg signed [15:0] tm117;
   reg signed [15:0] tm120;
   reg signed [15:0] tm121;
   reg signed [15:0] tm124;
   reg signed [15:0] tm125;
   reg signed [15:0] tm436;
   reg signed [15:0] tm440;
   reg signed [15:0] tm452;
   reg signed [15:0] tm456;
   reg signed [15:0] tm468;
   reg signed [15:0] tm472;
   reg signed [15:0] tm484;
   reg signed [15:0] tm488;
   reg signed [15:0] tm500;
   reg signed [15:0] tm504;
   reg signed [15:0] tm516;
   reg signed [15:0] tm520;
   reg signed [15:0] tm532;
   reg signed [15:0] tm539;
   reg signed [15:0] tm546;
   reg signed [15:0] tm553;
   reg signed [15:0] tm533;
   reg signed [15:0] tm540;
   reg signed [15:0] tm547;
   reg signed [15:0] tm554;
   wire signed [15:0] a649;
   wire signed [15:0] a651;
   wire signed [15:0] a652;
   wire signed [15:0] a653;
   wire signed [15:0] a655;
   wire signed [15:0] a657;
   wire signed [15:0] a658;
   wire signed [15:0] a659;
   wire signed [15:0] a661;
   wire signed [15:0] a663;
   wire signed [15:0] a664;
   wire signed [15:0] a665;
   wire signed [15:0] a673;
   wire signed [15:0] a675;
   wire signed [15:0] a676;
   wire signed [15:0] a677;
   wire signed [15:0] a679;
   wire signed [15:0] a681;
   wire signed [15:0] a682;
   wire signed [15:0] a683;
   wire signed [15:0] a685;
   wire signed [15:0] a687;
   wire signed [15:0] a688;
   wire signed [15:0] a689;
   reg signed [15:0] tm534;
   reg signed [15:0] tm541;
   reg signed [15:0] tm548;
   reg signed [15:0] tm555;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm535;
   reg signed [15:0] tm542;
   reg signed [15:0] tm549;
   reg signed [15:0] tm556;


   assign a690 = X0;
   assign a643 = a690;
   assign a693 = X1;
   assign a647 = a693;
   assign a694 = X2;
   assign a695 = X3;
   assign a698 = X4;
   assign a699 = X5;
   assign a702 = X6;
   assign a703 = X7;
   assign a706 = X8;
   assign a667 = a706;
   assign a709 = X9;
   assign a671 = a709;
   assign a710 = X10;
   assign a711 = X11;
   assign a714 = X12;
   assign a715 = X13;
   assign a718 = X14;
   assign a719 = X15;
   assign a648 = tm18;
   assign a650 = tm19;
   assign a654 = tm20;
   assign a656 = tm21;
   assign a660 = tm22;
   assign a662 = tm23;
   assign a672 = tm26;
   assign a674 = tm27;
   assign a678 = tm28;
   assign a680 = tm29;
   assign a684 = tm30;
   assign a686 = tm31;
   assign Y0 = tm535;
   assign Y1 = tm542;
   assign Y8 = tm549;
   assign Y9 = tm556;

   D40_99751 instD40inst0_99751(.addr(i3[2:0]), .out(tm18), .clk(clk));

   D41_99761 instD41inst0_99761(.addr(i3[2:0]), .out(tm20), .clk(clk));

   D42_99771 instD42inst0_99771(.addr(i3[2:0]), .out(tm22), .clk(clk));

   D44_99791 instD44inst0_99791(.addr(i3[2:0]), .out(tm26), .clk(clk));

   D45_99801 instD45inst0_99801(.addr(i3[2:0]), .out(tm28), .clk(clk));

   D46_99811 instD46inst0_99811(.addr(i3[2:0]), .out(tm30), .clk(clk));

   D48_99831 instD48inst0_99831(.addr(i3[2:0]), .out(tm19), .clk(clk));

   D49_99841 instD49inst0_99841(.addr(i3[2:0]), .out(tm21), .clk(clk));

   D50_99851 instD50inst0_99851(.addr(i3[2:0]), .out(tm23), .clk(clk));

   D52_99871 instD52inst0_99871(.addr(i3[2:0]), .out(tm27), .clk(clk));

   D53_99881 instD53inst0_99881(.addr(i3[2:0]), .out(tm29), .clk(clk));

   D54_99891 instD54inst0_99891(.addr(i3[2:0]), .out(tm31), .clk(clk));

    multfix #(16, 2) m99190(.a(tm100), .b(tm436), .clk(clk), .q_sc(a649), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99212(.a(tm101), .b(tm440), .clk(clk), .q_sc(a651), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99230(.a(tm101), .b(tm436), .clk(clk), .q_sc(a652), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99241(.a(tm100), .b(tm440), .clk(clk), .q_sc(a653), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99270(.a(tm104), .b(tm452), .clk(clk), .q_sc(a655), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99292(.a(tm105), .b(tm456), .clk(clk), .q_sc(a657), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99310(.a(tm105), .b(tm452), .clk(clk), .q_sc(a658), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99321(.a(tm104), .b(tm456), .clk(clk), .q_sc(a659), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99350(.a(tm108), .b(tm468), .clk(clk), .q_sc(a661), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99372(.a(tm109), .b(tm472), .clk(clk), .q_sc(a663), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99390(.a(tm109), .b(tm468), .clk(clk), .q_sc(a664), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99401(.a(tm108), .b(tm472), .clk(clk), .q_sc(a665), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99510(.a(tm116), .b(tm484), .clk(clk), .q_sc(a673), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99532(.a(tm117), .b(tm488), .clk(clk), .q_sc(a675), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99550(.a(tm117), .b(tm484), .clk(clk), .q_sc(a676), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99561(.a(tm116), .b(tm488), .clk(clk), .q_sc(a677), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99590(.a(tm120), .b(tm500), .clk(clk), .q_sc(a679), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99612(.a(tm121), .b(tm504), .clk(clk), .q_sc(a681), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99630(.a(tm121), .b(tm500), .clk(clk), .q_sc(a682), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99641(.a(tm120), .b(tm504), .clk(clk), .q_sc(a683), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99670(.a(tm124), .b(tm516), .clk(clk), .q_sc(a685), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99692(.a(tm125), .b(tm520), .clk(clk), .q_sc(a687), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99710(.a(tm125), .b(tm516), .clk(clk), .q_sc(a688), .q_unsc(), .rst(reset));
    multfix #(16, 2) m99721(.a(tm124), .b(tm520), .clk(clk), .q_sc(a689), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub99219(.a(a649), .b(a651), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add99248(.a(a652), .b(a653), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub99299(.a(a655), .b(a657), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add99328(.a(a658), .b(a659), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub99379(.a(a661), .b(a663), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add99408(.a(a664), .b(a665), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub99539(.a(a673), .b(a675), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add99568(.a(a676), .b(a677), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub99619(.a(a679), .b(a681), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add99648(.a(a682), .b(a683), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub99699(.a(a685), .b(a687), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add99728(.a(a688), .b(a689), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm100 <= 0;
         tm436 <= 0;
         tm101 <= 0;
         tm440 <= 0;
         tm101 <= 0;
         tm436 <= 0;
         tm100 <= 0;
         tm440 <= 0;
         tm104 <= 0;
         tm452 <= 0;
         tm105 <= 0;
         tm456 <= 0;
         tm105 <= 0;
         tm452 <= 0;
         tm104 <= 0;
         tm456 <= 0;
         tm108 <= 0;
         tm468 <= 0;
         tm109 <= 0;
         tm472 <= 0;
         tm109 <= 0;
         tm468 <= 0;
         tm108 <= 0;
         tm472 <= 0;
         tm116 <= 0;
         tm484 <= 0;
         tm117 <= 0;
         tm488 <= 0;
         tm117 <= 0;
         tm484 <= 0;
         tm116 <= 0;
         tm488 <= 0;
         tm120 <= 0;
         tm500 <= 0;
         tm121 <= 0;
         tm504 <= 0;
         tm121 <= 0;
         tm500 <= 0;
         tm120 <= 0;
         tm504 <= 0;
         tm124 <= 0;
         tm516 <= 0;
         tm125 <= 0;
         tm520 <= 0;
         tm125 <= 0;
         tm516 <= 0;
         tm124 <= 0;
         tm520 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm433 <= a694;
         tm437 <= a695;
         tm449 <= a698;
         tm453 <= a699;
         tm465 <= a702;
         tm469 <= a703;
         tm481 <= a710;
         tm485 <= a711;
         tm497 <= a714;
         tm501 <= a715;
         tm513 <= a718;
         tm517 <= a719;
         tm529 <= a643;
         tm536 <= a647;
         tm543 <= a667;
         tm550 <= a671;
         tm434 <= tm433;
         tm438 <= tm437;
         tm450 <= tm449;
         tm454 <= tm453;
         tm466 <= tm465;
         tm470 <= tm469;
         tm482 <= tm481;
         tm486 <= tm485;
         tm498 <= tm497;
         tm502 <= tm501;
         tm514 <= tm513;
         tm518 <= tm517;
         tm530 <= tm529;
         tm537 <= tm536;
         tm544 <= tm543;
         tm551 <= tm550;
         tm435 <= tm434;
         tm439 <= tm438;
         tm451 <= tm450;
         tm455 <= tm454;
         tm467 <= tm466;
         tm471 <= tm470;
         tm483 <= tm482;
         tm487 <= tm486;
         tm499 <= tm498;
         tm503 <= tm502;
         tm515 <= tm514;
         tm519 <= tm518;
         tm531 <= tm530;
         tm538 <= tm537;
         tm545 <= tm544;
         tm552 <= tm551;
         tm100 <= a648;
         tm101 <= a650;
         tm104 <= a654;
         tm105 <= a656;
         tm108 <= a660;
         tm109 <= a662;
         tm116 <= a672;
         tm117 <= a674;
         tm120 <= a678;
         tm121 <= a680;
         tm124 <= a684;
         tm125 <= a686;
         tm436 <= tm435;
         tm440 <= tm439;
         tm452 <= tm451;
         tm456 <= tm455;
         tm468 <= tm467;
         tm472 <= tm471;
         tm484 <= tm483;
         tm488 <= tm487;
         tm500 <= tm499;
         tm504 <= tm503;
         tm516 <= tm515;
         tm520 <= tm519;
         tm532 <= tm531;
         tm539 <= tm538;
         tm546 <= tm545;
         tm553 <= tm552;
         tm533 <= tm532;
         tm540 <= tm539;
         tm547 <= tm546;
         tm554 <= tm553;
         tm534 <= tm533;
         tm541 <= tm540;
         tm548 <= tm547;
         tm555 <= tm554;
         tm535 <= tm534;
         tm542 <= tm541;
         tm549 <= tm548;
         tm556 <= tm555;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock99896(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_107685(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a514;
   wire signed [15:0] a515;
   wire signed [15:0] a516;
   wire signed [15:0] a517;
   wire signed [15:0] a522;
   wire signed [15:0] a523;
   wire signed [15:0] a524;
   wire signed [15:0] a525;
   wire signed [15:0] a530;
   wire signed [15:0] a531;
   wire signed [15:0] a532;
   wire signed [15:0] a533;
   wire signed [15:0] a538;
   wire signed [15:0] a539;
   wire signed [15:0] a540;
   wire signed [15:0] a541;
   wire signed [15:0] t690;
   wire signed [15:0] t691;
   wire signed [15:0] t692;
   wire signed [15:0] t693;
   wire signed [15:0] t694;
   wire signed [15:0] t695;
   wire signed [15:0] t696;
   wire signed [15:0] t697;
   wire signed [15:0] t706;
   wire signed [15:0] t707;
   wire signed [15:0] t708;
   wire signed [15:0] t709;
   wire signed [15:0] t710;
   wire signed [15:0] t711;
   wire signed [15:0] t712;
   wire signed [15:0] t713;
   wire signed [15:0] t698;
   wire signed [15:0] t699;
   wire signed [15:0] t700;
   wire signed [15:0] t701;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] t702;
   wire signed [15:0] t703;
   wire signed [15:0] t704;
   wire signed [15:0] t705;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t714;
   wire signed [15:0] t715;
   wire signed [15:0] t716;
   wire signed [15:0] t717;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] t718;
   wire signed [15:0] t719;
   wire signed [15:0] t720;
   wire signed [15:0] t721;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a514 = X0;
   assign a515 = X4;
   assign a516 = X1;
   assign a517 = X5;
   assign a522 = X2;
   assign a523 = X6;
   assign a524 = X3;
   assign a525 = X7;
   assign a530 = X8;
   assign a531 = X12;
   assign a532 = X9;
   assign a533 = X13;
   assign a538 = X10;
   assign a539 = X14;
   assign a540 = X11;
   assign a541 = X15;
   assign Y0 = t698;
   assign Y1 = t699;
   assign Y4 = t700;
   assign Y5 = t701;
   assign Y2 = t702;
   assign Y3 = t703;
   assign Y6 = t704;
   assign Y7 = t705;
   assign Y8 = t714;
   assign Y9 = t715;
   assign Y12 = t716;
   assign Y13 = t717;
   assign Y10 = t718;
   assign Y11 = t719;
   assign Y14 = t720;
   assign Y15 = t721;

    addfxp #(16, 1) add99908(.a(a514), .b(a515), .clk(clk), .q(t690));    // 0
    addfxp #(16, 1) add99923(.a(a516), .b(a517), .clk(clk), .q(t691));    // 0
    subfxp #(16, 1) sub99938(.a(a514), .b(a515), .clk(clk), .q(t692));    // 0
    subfxp #(16, 1) sub99953(.a(a516), .b(a517), .clk(clk), .q(t693));    // 0
    addfxp #(16, 1) add99968(.a(a522), .b(a523), .clk(clk), .q(t694));    // 0
    addfxp #(16, 1) add99983(.a(a524), .b(a525), .clk(clk), .q(t695));    // 0
    subfxp #(16, 1) sub99998(.a(a522), .b(a523), .clk(clk), .q(t696));    // 0
    subfxp #(16, 1) sub100013(.a(a524), .b(a525), .clk(clk), .q(t697));    // 0
    addfxp #(16, 1) add100116(.a(a530), .b(a531), .clk(clk), .q(t706));    // 0
    addfxp #(16, 1) add100131(.a(a532), .b(a533), .clk(clk), .q(t707));    // 0
    subfxp #(16, 1) sub100146(.a(a530), .b(a531), .clk(clk), .q(t708));    // 0
    subfxp #(16, 1) sub100161(.a(a532), .b(a533), .clk(clk), .q(t709));    // 0
    addfxp #(16, 1) add100176(.a(a538), .b(a539), .clk(clk), .q(t710));    // 0
    addfxp #(16, 1) add100191(.a(a540), .b(a541), .clk(clk), .q(t711));    // 0
    subfxp #(16, 1) sub100206(.a(a538), .b(a539), .clk(clk), .q(t712));    // 0
    subfxp #(16, 1) sub100221(.a(a540), .b(a541), .clk(clk), .q(t713));    // 0
    addfxp #(16, 1) add100020(.a(t690), .b(t694), .clk(clk), .q(t698));    // 1
    addfxp #(16, 1) add100027(.a(t691), .b(t695), .clk(clk), .q(t699));    // 1
    subfxp #(16, 1) sub100034(.a(t690), .b(t694), .clk(clk), .q(t700));    // 1
    subfxp #(16, 1) sub100041(.a(t691), .b(t695), .clk(clk), .q(t701));    // 1
    addfxp #(16, 1) add100064(.a(t692), .b(t697), .clk(clk), .q(t702));    // 1
    subfxp #(16, 1) sub100071(.a(t693), .b(t696), .clk(clk), .q(t703));    // 1
    subfxp #(16, 1) sub100078(.a(t692), .b(t697), .clk(clk), .q(t704));    // 1
    addfxp #(16, 1) add100085(.a(t693), .b(t696), .clk(clk), .q(t705));    // 1
    addfxp #(16, 1) add100228(.a(t706), .b(t710), .clk(clk), .q(t714));    // 1
    addfxp #(16, 1) add100235(.a(t707), .b(t711), .clk(clk), .q(t715));    // 1
    subfxp #(16, 1) sub100242(.a(t706), .b(t710), .clk(clk), .q(t716));    // 1
    subfxp #(16, 1) sub100249(.a(t707), .b(t711), .clk(clk), .q(t717));    // 1
    addfxp #(16, 1) add100272(.a(t708), .b(t713), .clk(clk), .q(t718));    // 1
    subfxp #(16, 1) sub100279(.a(t709), .b(t712), .clk(clk), .q(t719));    // 1
    subfxp #(16, 1) sub100286(.a(t708), .b(t713), .clk(clk), .q(t720));    // 1
    addfxp #(16, 1) add100293(.a(t709), .b(t712), .clk(clk), .q(t721));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 29
// Gap: 32
module rc100317(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm100315 instPerm107686(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 29
// Gap: 32
module perm100315(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[7] ^ addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[7] ^ addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[7] ^ addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[7] ^ addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];

   nextReg #(25, 5) nextReg_107691(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_107694(.X(next0), .Y(next_out), .clk(clk));


   memArray256_100315 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 24)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 27)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 24) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 31) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 24)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[4];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[3];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[4];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[3];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_5_pipe), .y0(z_2_4), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_6_pipe), .x1(z_1_7_pipe), .y0(z_2_6), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[4];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[3];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_5_pipe), .y0(u_2_4), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_6_pipe), .x1(u_1_7_pipe), .y0(u_2_6), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray256_100315(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(32, 5) nextReg_107699(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 32
module DirSum_101506(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [4:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 31)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock100320 codeBlockIsnt107704(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D27_101028(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3e15;
      3: out3 <= 16'h3c42;
      4: out3 <= 16'h39db;
      5: out3 <= 16'h36e5;
      6: out3 <= 16'h3368;
      7: out3 <= 16'h2f6c;
      8: out3 <= 16'h2afb;
      9: out3 <= 16'h2620;
      10: out3 <= 16'h20e7;
      11: out3 <= 16'h1b5d;
      12: out3 <= 16'h1590;
      13: out3 <= 16'hf8d;
      14: out3 <= 16'h964;
      15: out3 <= 16'h324;
      16: out3 <= 16'hfcdc;
      17: out3 <= 16'hf69c;
      18: out3 <= 16'hf073;
      19: out3 <= 16'hea70;
      20: out3 <= 16'he4a3;
      21: out3 <= 16'hdf19;
      22: out3 <= 16'hd9e0;
      23: out3 <= 16'hd505;
      24: out3 <= 16'hd094;
      25: out3 <= 16'hcc98;
      26: out3 <= 16'hc91b;
      27: out3 <= 16'hc625;
      28: out3 <= 16'hc3be;
      29: out3 <= 16'hc1eb;
      30: out3 <= 16'hc0b1;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D31_101096(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      16: out3 <= 16'hc000;
      17: out3 <= 16'hc04f;
      18: out3 <= 16'hc13b;
      19: out3 <= 16'hc2c1;
      20: out3 <= 16'hc4df;
      21: out3 <= 16'hc78f;
      22: out3 <= 16'hcac9;
      23: out3 <= 16'hce87;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hd766;
      26: out3 <= 16'hdc72;
      27: out3 <= 16'he1d5;
      28: out3 <= 16'he782;
      29: out3 <= 16'hed6c;
      30: out3 <= 16'hf384;
      31: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D24_101130(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3d3f;
      3: out3 <= 16'h39db;
      4: out3 <= 16'h3537;
      5: out3 <= 16'h2f6c;
      6: out3 <= 16'h289a;
      7: out3 <= 16'h20e7;
      8: out3 <= 16'h187e;
      9: out3 <= 16'hf8d;
      10: out3 <= 16'h646;
      11: out3 <= 16'hfcdc;
      12: out3 <= 16'hf384;
      13: out3 <= 16'hea70;
      14: out3 <= 16'he1d5;
      15: out3 <= 16'hd9e0;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hcc98;
      18: out3 <= 16'hc78f;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc13b;
      21: out3 <= 16'hc014;
      22: out3 <= 16'hc04f;
      23: out3 <= 16'hc1eb;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc91b;
      26: out3 <= 16'hce87;
      27: out3 <= 16'hd505;
      28: out3 <= 16'hdc72;
      29: out3 <= 16'he4a3;
      30: out3 <= 16'hed6c;
      31: out3 <= 16'hf69c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D32_101164(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hed6c;
      3: out3 <= 16'he4a3;
      4: out3 <= 16'hdc72;
      5: out3 <= 16'hd505;
      6: out3 <= 16'hce87;
      7: out3 <= 16'hc91b;
      8: out3 <= 16'hc4df;
      9: out3 <= 16'hc1eb;
      10: out3 <= 16'hc04f;
      11: out3 <= 16'hc014;
      12: out3 <= 16'hc13b;
      13: out3 <= 16'hc3be;
      14: out3 <= 16'hc78f;
      15: out3 <= 16'hcc98;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd9e0;
      18: out3 <= 16'he1d5;
      19: out3 <= 16'hea70;
      20: out3 <= 16'hf384;
      21: out3 <= 16'hfcdc;
      22: out3 <= 16'h646;
      23: out3 <= 16'hf8d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h20e7;
      26: out3 <= 16'h289a;
      27: out3 <= 16'h2f6c;
      28: out3 <= 16'h3537;
      29: out3 <= 16'h39db;
      30: out3 <= 16'h3d3f;
      31: out3 <= 16'h3f4f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D23_101198(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      16: out3 <= 16'h0;
      17: out3 <= 16'hf9ba;
      18: out3 <= 16'hf384;
      19: out3 <= 16'hed6c;
      20: out3 <= 16'he782;
      21: out3 <= 16'he1d5;
      22: out3 <= 16'hdc72;
      23: out3 <= 16'hd766;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hce87;
      26: out3 <= 16'hcac9;
      27: out3 <= 16'hc78f;
      28: out3 <= 16'hc4df;
      29: out3 <= 16'hc2c1;
      30: out3 <= 16'hc13b;
      31: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D22_101266(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fec;
      2: out3 <= 16'h3fb1;
      3: out3 <= 16'h3f4f;
      4: out3 <= 16'h3ec5;
      5: out3 <= 16'h3e15;
      6: out3 <= 16'h3d3f;
      7: out3 <= 16'h3c42;
      8: out3 <= 16'h3b21;
      9: out3 <= 16'h39db;
      10: out3 <= 16'h3871;
      11: out3 <= 16'h36e5;
      12: out3 <= 16'h3537;
      13: out3 <= 16'h3368;
      14: out3 <= 16'h3179;
      15: out3 <= 16'h2f6c;
      16: out3 <= 16'h2d41;
      17: out3 <= 16'h2afb;
      18: out3 <= 16'h289a;
      19: out3 <= 16'h2620;
      20: out3 <= 16'h238e;
      21: out3 <= 16'h20e7;
      22: out3 <= 16'h1e2b;
      23: out3 <= 16'h1b5d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h1590;
      26: out3 <= 16'h1294;
      27: out3 <= 16'hf8d;
      28: out3 <= 16'hc7c;
      29: out3 <= 16'h964;
      30: out3 <= 16'h646;
      31: out3 <= 16'h324;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D34_101300(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf82a;
      3: out3 <= 16'hf50f;
      4: out3 <= 16'hf1fa;
      5: out3 <= 16'heeee;
      6: out3 <= 16'hebed;
      7: out3 <= 16'he8f7;
      8: out3 <= 16'he611;
      9: out3 <= 16'he33a;
      10: out3 <= 16'he074;
      11: out3 <= 16'hddc3;
      12: out3 <= 16'hdb26;
      13: out3 <= 16'hd8a0;
      14: out3 <= 16'hd632;
      15: out3 <= 16'hd3df;
      16: out3 <= 16'hd1a6;
      17: out3 <= 16'hcf8a;
      18: out3 <= 16'hcd8c;
      19: out3 <= 16'hcbad;
      20: out3 <= 16'hc9ee;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hc6d5;
      23: out3 <= 16'hc57e;
      24: out3 <= 16'hc44a;
      25: out3 <= 16'hc33b;
      26: out3 <= 16'hc251;
      27: out3 <= 16'hc18e;
      28: out3 <= 16'hc0f1;
      29: out3 <= 16'hc07b;
      30: out3 <= 16'hc02c;
      31: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D35_101368(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hf073;
      3: out3 <= 16'hea70;
      4: out3 <= 16'he4a3;
      5: out3 <= 16'hdf19;
      6: out3 <= 16'hd9e0;
      7: out3 <= 16'hd505;
      8: out3 <= 16'hd094;
      9: out3 <= 16'hcc98;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hc625;
      12: out3 <= 16'hc3be;
      13: out3 <= 16'hc1eb;
      14: out3 <= 16'hc0b1;
      15: out3 <= 16'hc014;
      16: out3 <= 16'hc014;
      17: out3 <= 16'hc0b1;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc625;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hcc98;
      23: out3 <= 16'hd094;
      24: out3 <= 16'hd505;
      25: out3 <= 16'hd9e0;
      26: out3 <= 16'hdf19;
      27: out3 <= 16'he4a3;
      28: out3 <= 16'hea70;
      29: out3 <= 16'hf073;
      30: out3 <= 16'hf69c;
      31: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D36_101402(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfb4b;
      1: out3 <= 16'hf1fa;
      2: out3 <= 16'he8f7;
      3: out3 <= 16'he074;
      4: out3 <= 16'hd8a0;
      5: out3 <= 16'hd1a6;
      6: out3 <= 16'hcbad;
      7: out3 <= 16'hc6d5;
      8: out3 <= 16'hc33b;
      9: out3 <= 16'hc0f1;
      10: out3 <= 16'hc005;
      11: out3 <= 16'hc07b;
      12: out3 <= 16'hc251;
      13: out3 <= 16'hc57e;
      14: out3 <= 16'hc9ee;
      15: out3 <= 16'hcf8a;
      16: out3 <= 16'hd632;
      17: out3 <= 16'hddc3;
      18: out3 <= 16'he611;
      19: out3 <= 16'heeee;
      20: out3 <= 16'hf82a;
      21: out3 <= 16'h192;
      22: out3 <= 16'haf1;
      23: out3 <= 16'h1413;
      24: out3 <= 16'h1cc6;
      25: out3 <= 16'h24da;
      26: out3 <= 16'h2c21;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h37b0;
      29: out3 <= 16'h3bb6;
      30: out3 <= 16'h3e72;
      31: out3 <= 16'h3fd4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D28_101436(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fd4;
      1: out3 <= 16'h3e72;
      2: out3 <= 16'h3bb6;
      3: out3 <= 16'h37b0;
      4: out3 <= 16'h3274;
      5: out3 <= 16'h2c21;
      6: out3 <= 16'h24da;
      7: out3 <= 16'h1cc6;
      8: out3 <= 16'h1413;
      9: out3 <= 16'haf1;
      10: out3 <= 16'h192;
      11: out3 <= 16'hf82a;
      12: out3 <= 16'heeee;
      13: out3 <= 16'he611;
      14: out3 <= 16'hddc3;
      15: out3 <= 16'hd632;
      16: out3 <= 16'hcf8a;
      17: out3 <= 16'hc9ee;
      18: out3 <= 16'hc57e;
      19: out3 <= 16'hc251;
      20: out3 <= 16'hc07b;
      21: out3 <= 16'hc005;
      22: out3 <= 16'hc0f1;
      23: out3 <= 16'hc33b;
      24: out3 <= 16'hc6d5;
      25: out3 <= 16'hcbad;
      26: out3 <= 16'hd1a6;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'he074;
      29: out3 <= 16'he8f7;
      30: out3 <= 16'hf1fa;
      31: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D30_101470(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfcdc;
      2: out3 <= 16'hf9ba;
      3: out3 <= 16'hf69c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hf073;
      6: out3 <= 16'hed6c;
      7: out3 <= 16'hea70;
      8: out3 <= 16'he782;
      9: out3 <= 16'he4a3;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hdf19;
      12: out3 <= 16'hdc72;
      13: out3 <= 16'hd9e0;
      14: out3 <= 16'hd766;
      15: out3 <= 16'hd505;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd094;
      18: out3 <= 16'hce87;
      19: out3 <= 16'hcc98;
      20: out3 <= 16'hcac9;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hc78f;
      23: out3 <= 16'hc625;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc3be;
      26: out3 <= 16'hc2c1;
      27: out3 <= 16'hc1eb;
      28: out3 <= 16'hc13b;
      29: out3 <= 16'hc0b1;
      30: out3 <= 16'hc04f;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D26_101504(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f85;
      3: out3 <= 16'h3f0f;
      4: out3 <= 16'h3e72;
      5: out3 <= 16'h3daf;
      6: out3 <= 16'h3cc5;
      7: out3 <= 16'h3bb6;
      8: out3 <= 16'h3a82;
      9: out3 <= 16'h392b;
      10: out3 <= 16'h37b0;
      11: out3 <= 16'h3612;
      12: out3 <= 16'h3453;
      13: out3 <= 16'h3274;
      14: out3 <= 16'h3076;
      15: out3 <= 16'h2e5a;
      16: out3 <= 16'h2c21;
      17: out3 <= 16'h29ce;
      18: out3 <= 16'h2760;
      19: out3 <= 16'h24da;
      20: out3 <= 16'h223d;
      21: out3 <= 16'h1f8c;
      22: out3 <= 16'h1cc6;
      23: out3 <= 16'h19ef;
      24: out3 <= 16'h1709;
      25: out3 <= 16'h1413;
      26: out3 <= 16'h1112;
      27: out3 <= 16'he06;
      28: out3 <= 16'haf1;
      29: out3 <= 16'h7d6;
      30: out3 <= 16'h4b5;
      31: out3 <= 16'h192;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock100320(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i2_in;
   reg [4:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_107707(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a450;
   wire signed [15:0] a403;
   wire signed [15:0] a453;
   wire signed [15:0] a407;
   wire signed [15:0] a454;
   wire signed [15:0] a455;
   wire signed [15:0] a458;
   wire signed [15:0] a459;
   wire signed [15:0] a462;
   wire signed [15:0] a463;
   wire signed [15:0] a466;
   wire signed [15:0] a427;
   wire signed [15:0] a469;
   wire signed [15:0] a431;
   wire signed [15:0] a470;
   wire signed [15:0] a471;
   wire signed [15:0] a474;
   wire signed [15:0] a475;
   wire signed [15:0] a478;
   wire signed [15:0] a479;
   reg signed [15:0] tm557;
   reg signed [15:0] tm561;
   reg signed [15:0] tm573;
   reg signed [15:0] tm577;
   reg signed [15:0] tm589;
   reg signed [15:0] tm593;
   reg signed [15:0] tm605;
   reg signed [15:0] tm609;
   reg signed [15:0] tm621;
   reg signed [15:0] tm625;
   reg signed [15:0] tm637;
   reg signed [15:0] tm641;
   reg signed [15:0] tm653;
   reg signed [15:0] tm660;
   reg signed [15:0] tm667;
   reg signed [15:0] tm674;
   reg signed [15:0] tm558;
   reg signed [15:0] tm562;
   reg signed [15:0] tm574;
   reg signed [15:0] tm578;
   reg signed [15:0] tm590;
   reg signed [15:0] tm594;
   reg signed [15:0] tm606;
   reg signed [15:0] tm610;
   reg signed [15:0] tm622;
   reg signed [15:0] tm626;
   reg signed [15:0] tm638;
   reg signed [15:0] tm642;
   reg signed [15:0] tm654;
   reg signed [15:0] tm661;
   reg signed [15:0] tm668;
   reg signed [15:0] tm675;
   wire signed [15:0] tm34;
   wire signed [15:0] a408;
   wire signed [15:0] tm35;
   wire signed [15:0] a410;
   wire signed [15:0] tm36;
   wire signed [15:0] a414;
   wire signed [15:0] tm37;
   wire signed [15:0] a416;
   wire signed [15:0] tm38;
   wire signed [15:0] a420;
   wire signed [15:0] tm39;
   wire signed [15:0] a422;
   wire signed [15:0] tm42;
   wire signed [15:0] a432;
   wire signed [15:0] tm43;
   wire signed [15:0] a434;
   wire signed [15:0] tm44;
   wire signed [15:0] a438;
   wire signed [15:0] tm45;
   wire signed [15:0] a440;
   wire signed [15:0] tm46;
   wire signed [15:0] a444;
   wire signed [15:0] tm47;
   wire signed [15:0] a446;
   reg signed [15:0] tm559;
   reg signed [15:0] tm563;
   reg signed [15:0] tm575;
   reg signed [15:0] tm579;
   reg signed [15:0] tm591;
   reg signed [15:0] tm595;
   reg signed [15:0] tm607;
   reg signed [15:0] tm611;
   reg signed [15:0] tm623;
   reg signed [15:0] tm627;
   reg signed [15:0] tm639;
   reg signed [15:0] tm643;
   reg signed [15:0] tm655;
   reg signed [15:0] tm662;
   reg signed [15:0] tm669;
   reg signed [15:0] tm676;
   reg signed [15:0] tm132;
   reg signed [15:0] tm133;
   reg signed [15:0] tm136;
   reg signed [15:0] tm137;
   reg signed [15:0] tm140;
   reg signed [15:0] tm141;
   reg signed [15:0] tm148;
   reg signed [15:0] tm149;
   reg signed [15:0] tm152;
   reg signed [15:0] tm153;
   reg signed [15:0] tm156;
   reg signed [15:0] tm157;
   reg signed [15:0] tm560;
   reg signed [15:0] tm564;
   reg signed [15:0] tm576;
   reg signed [15:0] tm580;
   reg signed [15:0] tm592;
   reg signed [15:0] tm596;
   reg signed [15:0] tm608;
   reg signed [15:0] tm612;
   reg signed [15:0] tm624;
   reg signed [15:0] tm628;
   reg signed [15:0] tm640;
   reg signed [15:0] tm644;
   reg signed [15:0] tm656;
   reg signed [15:0] tm663;
   reg signed [15:0] tm670;
   reg signed [15:0] tm677;
   reg signed [15:0] tm657;
   reg signed [15:0] tm664;
   reg signed [15:0] tm671;
   reg signed [15:0] tm678;
   wire signed [15:0] a409;
   wire signed [15:0] a411;
   wire signed [15:0] a412;
   wire signed [15:0] a413;
   wire signed [15:0] a415;
   wire signed [15:0] a417;
   wire signed [15:0] a418;
   wire signed [15:0] a419;
   wire signed [15:0] a421;
   wire signed [15:0] a423;
   wire signed [15:0] a424;
   wire signed [15:0] a425;
   wire signed [15:0] a433;
   wire signed [15:0] a435;
   wire signed [15:0] a436;
   wire signed [15:0] a437;
   wire signed [15:0] a439;
   wire signed [15:0] a441;
   wire signed [15:0] a442;
   wire signed [15:0] a443;
   wire signed [15:0] a445;
   wire signed [15:0] a447;
   wire signed [15:0] a448;
   wire signed [15:0] a449;
   reg signed [15:0] tm658;
   reg signed [15:0] tm665;
   reg signed [15:0] tm672;
   reg signed [15:0] tm679;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm659;
   reg signed [15:0] tm666;
   reg signed [15:0] tm673;
   reg signed [15:0] tm680;


   assign a450 = X0;
   assign a403 = a450;
   assign a453 = X1;
   assign a407 = a453;
   assign a454 = X2;
   assign a455 = X3;
   assign a458 = X4;
   assign a459 = X5;
   assign a462 = X6;
   assign a463 = X7;
   assign a466 = X8;
   assign a427 = a466;
   assign a469 = X9;
   assign a431 = a469;
   assign a470 = X10;
   assign a471 = X11;
   assign a474 = X12;
   assign a475 = X13;
   assign a478 = X14;
   assign a479 = X15;
   assign a408 = tm34;
   assign a410 = tm35;
   assign a414 = tm36;
   assign a416 = tm37;
   assign a420 = tm38;
   assign a422 = tm39;
   assign a432 = tm42;
   assign a434 = tm43;
   assign a438 = tm44;
   assign a440 = tm45;
   assign a444 = tm46;
   assign a446 = tm47;
   assign Y0 = tm659;
   assign Y1 = tm666;
   assign Y8 = tm673;
   assign Y9 = tm680;

   D27_101028 instD27inst0_101028(.addr(i2[4:0]), .out(tm44), .clk(clk));

   D31_101096 instD31inst0_101096(.addr(i2[4:0]), .out(tm37), .clk(clk));

   D24_101130 instD24inst0_101130(.addr(i2[4:0]), .out(tm38), .clk(clk));

   D32_101164 instD32inst0_101164(.addr(i2[4:0]), .out(tm39), .clk(clk));

   D23_101198 instD23inst0_101198(.addr(i2[4:0]), .out(tm36), .clk(clk));

   D22_101266 instD22inst0_101266(.addr(i2[4:0]), .out(tm34), .clk(clk));

   D34_101300 instD34inst0_101300(.addr(i2[4:0]), .out(tm43), .clk(clk));

   D35_101368 instD35inst0_101368(.addr(i2[4:0]), .out(tm45), .clk(clk));

   D36_101402 instD36inst0_101402(.addr(i2[4:0]), .out(tm47), .clk(clk));

   D28_101436 instD28inst0_101436(.addr(i2[4:0]), .out(tm46), .clk(clk));

   D30_101470 instD30inst0_101470(.addr(i2[4:0]), .out(tm35), .clk(clk));

   D26_101504 instD26inst0_101504(.addr(i2[4:0]), .out(tm42), .clk(clk));

    multfix #(16, 2) m100419(.a(tm132), .b(tm560), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100441(.a(tm133), .b(tm564), .clk(clk), .q_sc(a411), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100459(.a(tm133), .b(tm560), .clk(clk), .q_sc(a412), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100470(.a(tm132), .b(tm564), .clk(clk), .q_sc(a413), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100499(.a(tm136), .b(tm576), .clk(clk), .q_sc(a415), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100521(.a(tm137), .b(tm580), .clk(clk), .q_sc(a417), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100539(.a(tm137), .b(tm576), .clk(clk), .q_sc(a418), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100550(.a(tm136), .b(tm580), .clk(clk), .q_sc(a419), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100579(.a(tm140), .b(tm592), .clk(clk), .q_sc(a421), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100601(.a(tm141), .b(tm596), .clk(clk), .q_sc(a423), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100619(.a(tm141), .b(tm592), .clk(clk), .q_sc(a424), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100630(.a(tm140), .b(tm596), .clk(clk), .q_sc(a425), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100739(.a(tm148), .b(tm608), .clk(clk), .q_sc(a433), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100761(.a(tm149), .b(tm612), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100779(.a(tm149), .b(tm608), .clk(clk), .q_sc(a436), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100790(.a(tm148), .b(tm612), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100819(.a(tm152), .b(tm624), .clk(clk), .q_sc(a439), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100841(.a(tm153), .b(tm628), .clk(clk), .q_sc(a441), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100859(.a(tm153), .b(tm624), .clk(clk), .q_sc(a442), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100870(.a(tm152), .b(tm628), .clk(clk), .q_sc(a443), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100899(.a(tm156), .b(tm640), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100921(.a(tm157), .b(tm644), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100939(.a(tm157), .b(tm640), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(16, 2) m100950(.a(tm156), .b(tm644), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub100448(.a(a409), .b(a411), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add100477(.a(a412), .b(a413), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub100528(.a(a415), .b(a417), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add100557(.a(a418), .b(a419), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub100608(.a(a421), .b(a423), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add100637(.a(a424), .b(a425), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub100768(.a(a433), .b(a435), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add100797(.a(a436), .b(a437), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub100848(.a(a439), .b(a441), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add100877(.a(a442), .b(a443), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub100928(.a(a445), .b(a447), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add100957(.a(a448), .b(a449), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm132 <= 0;
         tm560 <= 0;
         tm133 <= 0;
         tm564 <= 0;
         tm133 <= 0;
         tm560 <= 0;
         tm132 <= 0;
         tm564 <= 0;
         tm136 <= 0;
         tm576 <= 0;
         tm137 <= 0;
         tm580 <= 0;
         tm137 <= 0;
         tm576 <= 0;
         tm136 <= 0;
         tm580 <= 0;
         tm140 <= 0;
         tm592 <= 0;
         tm141 <= 0;
         tm596 <= 0;
         tm141 <= 0;
         tm592 <= 0;
         tm140 <= 0;
         tm596 <= 0;
         tm148 <= 0;
         tm608 <= 0;
         tm149 <= 0;
         tm612 <= 0;
         tm149 <= 0;
         tm608 <= 0;
         tm148 <= 0;
         tm612 <= 0;
         tm152 <= 0;
         tm624 <= 0;
         tm153 <= 0;
         tm628 <= 0;
         tm153 <= 0;
         tm624 <= 0;
         tm152 <= 0;
         tm628 <= 0;
         tm156 <= 0;
         tm640 <= 0;
         tm157 <= 0;
         tm644 <= 0;
         tm157 <= 0;
         tm640 <= 0;
         tm156 <= 0;
         tm644 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm557 <= a454;
         tm561 <= a455;
         tm573 <= a458;
         tm577 <= a459;
         tm589 <= a462;
         tm593 <= a463;
         tm605 <= a470;
         tm609 <= a471;
         tm621 <= a474;
         tm625 <= a475;
         tm637 <= a478;
         tm641 <= a479;
         tm653 <= a403;
         tm660 <= a407;
         tm667 <= a427;
         tm674 <= a431;
         tm558 <= tm557;
         tm562 <= tm561;
         tm574 <= tm573;
         tm578 <= tm577;
         tm590 <= tm589;
         tm594 <= tm593;
         tm606 <= tm605;
         tm610 <= tm609;
         tm622 <= tm621;
         tm626 <= tm625;
         tm638 <= tm637;
         tm642 <= tm641;
         tm654 <= tm653;
         tm661 <= tm660;
         tm668 <= tm667;
         tm675 <= tm674;
         tm559 <= tm558;
         tm563 <= tm562;
         tm575 <= tm574;
         tm579 <= tm578;
         tm591 <= tm590;
         tm595 <= tm594;
         tm607 <= tm606;
         tm611 <= tm610;
         tm623 <= tm622;
         tm627 <= tm626;
         tm639 <= tm638;
         tm643 <= tm642;
         tm655 <= tm654;
         tm662 <= tm661;
         tm669 <= tm668;
         tm676 <= tm675;
         tm132 <= a408;
         tm133 <= a410;
         tm136 <= a414;
         tm137 <= a416;
         tm140 <= a420;
         tm141 <= a422;
         tm148 <= a432;
         tm149 <= a434;
         tm152 <= a438;
         tm153 <= a440;
         tm156 <= a444;
         tm157 <= a446;
         tm560 <= tm559;
         tm564 <= tm563;
         tm576 <= tm575;
         tm580 <= tm579;
         tm592 <= tm591;
         tm596 <= tm595;
         tm608 <= tm607;
         tm612 <= tm611;
         tm624 <= tm623;
         tm628 <= tm627;
         tm640 <= tm639;
         tm644 <= tm643;
         tm656 <= tm655;
         tm663 <= tm662;
         tm670 <= tm669;
         tm677 <= tm676;
         tm657 <= tm656;
         tm664 <= tm663;
         tm671 <= tm670;
         tm678 <= tm677;
         tm658 <= tm657;
         tm665 <= tm664;
         tm672 <= tm671;
         tm679 <= tm678;
         tm659 <= tm658;
         tm666 <= tm665;
         tm673 <= tm672;
         tm680 <= tm679;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock101509(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_107710(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a273;
   wire signed [15:0] a274;
   wire signed [15:0] a275;
   wire signed [15:0] a276;
   wire signed [15:0] a281;
   wire signed [15:0] a282;
   wire signed [15:0] a283;
   wire signed [15:0] a284;
   wire signed [15:0] a289;
   wire signed [15:0] a290;
   wire signed [15:0] a291;
   wire signed [15:0] a292;
   wire signed [15:0] a297;
   wire signed [15:0] a298;
   wire signed [15:0] a299;
   wire signed [15:0] a300;
   wire signed [15:0] t450;
   wire signed [15:0] t451;
   wire signed [15:0] t452;
   wire signed [15:0] t453;
   wire signed [15:0] t454;
   wire signed [15:0] t455;
   wire signed [15:0] t456;
   wire signed [15:0] t457;
   wire signed [15:0] t466;
   wire signed [15:0] t467;
   wire signed [15:0] t468;
   wire signed [15:0] t469;
   wire signed [15:0] t470;
   wire signed [15:0] t471;
   wire signed [15:0] t472;
   wire signed [15:0] t473;
   wire signed [15:0] t458;
   wire signed [15:0] t459;
   wire signed [15:0] t460;
   wire signed [15:0] t461;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] t462;
   wire signed [15:0] t463;
   wire signed [15:0] t464;
   wire signed [15:0] t465;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t474;
   wire signed [15:0] t475;
   wire signed [15:0] t476;
   wire signed [15:0] t477;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] t478;
   wire signed [15:0] t479;
   wire signed [15:0] t480;
   wire signed [15:0] t481;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a273 = X0;
   assign a274 = X4;
   assign a275 = X1;
   assign a276 = X5;
   assign a281 = X2;
   assign a282 = X6;
   assign a283 = X3;
   assign a284 = X7;
   assign a289 = X8;
   assign a290 = X12;
   assign a291 = X9;
   assign a292 = X13;
   assign a297 = X10;
   assign a298 = X14;
   assign a299 = X11;
   assign a300 = X15;
   assign Y0 = t458;
   assign Y1 = t459;
   assign Y4 = t460;
   assign Y5 = t461;
   assign Y2 = t462;
   assign Y3 = t463;
   assign Y6 = t464;
   assign Y7 = t465;
   assign Y8 = t474;
   assign Y9 = t475;
   assign Y12 = t476;
   assign Y13 = t477;
   assign Y10 = t478;
   assign Y11 = t479;
   assign Y14 = t480;
   assign Y15 = t481;

    addfxp #(16, 1) add101521(.a(a273), .b(a274), .clk(clk), .q(t450));    // 0
    addfxp #(16, 1) add101536(.a(a275), .b(a276), .clk(clk), .q(t451));    // 0
    subfxp #(16, 1) sub101551(.a(a273), .b(a274), .clk(clk), .q(t452));    // 0
    subfxp #(16, 1) sub101566(.a(a275), .b(a276), .clk(clk), .q(t453));    // 0
    addfxp #(16, 1) add101581(.a(a281), .b(a282), .clk(clk), .q(t454));    // 0
    addfxp #(16, 1) add101596(.a(a283), .b(a284), .clk(clk), .q(t455));    // 0
    subfxp #(16, 1) sub101611(.a(a281), .b(a282), .clk(clk), .q(t456));    // 0
    subfxp #(16, 1) sub101626(.a(a283), .b(a284), .clk(clk), .q(t457));    // 0
    addfxp #(16, 1) add101729(.a(a289), .b(a290), .clk(clk), .q(t466));    // 0
    addfxp #(16, 1) add101744(.a(a291), .b(a292), .clk(clk), .q(t467));    // 0
    subfxp #(16, 1) sub101759(.a(a289), .b(a290), .clk(clk), .q(t468));    // 0
    subfxp #(16, 1) sub101774(.a(a291), .b(a292), .clk(clk), .q(t469));    // 0
    addfxp #(16, 1) add101789(.a(a297), .b(a298), .clk(clk), .q(t470));    // 0
    addfxp #(16, 1) add101804(.a(a299), .b(a300), .clk(clk), .q(t471));    // 0
    subfxp #(16, 1) sub101819(.a(a297), .b(a298), .clk(clk), .q(t472));    // 0
    subfxp #(16, 1) sub101834(.a(a299), .b(a300), .clk(clk), .q(t473));    // 0
    addfxp #(16, 1) add101633(.a(t450), .b(t454), .clk(clk), .q(t458));    // 1
    addfxp #(16, 1) add101640(.a(t451), .b(t455), .clk(clk), .q(t459));    // 1
    subfxp #(16, 1) sub101647(.a(t450), .b(t454), .clk(clk), .q(t460));    // 1
    subfxp #(16, 1) sub101654(.a(t451), .b(t455), .clk(clk), .q(t461));    // 1
    addfxp #(16, 1) add101677(.a(t452), .b(t457), .clk(clk), .q(t462));    // 1
    subfxp #(16, 1) sub101684(.a(t453), .b(t456), .clk(clk), .q(t463));    // 1
    subfxp #(16, 1) sub101691(.a(t452), .b(t457), .clk(clk), .q(t464));    // 1
    addfxp #(16, 1) add101698(.a(t453), .b(t456), .clk(clk), .q(t465));    // 1
    addfxp #(16, 1) add101841(.a(t466), .b(t470), .clk(clk), .q(t474));    // 1
    addfxp #(16, 1) add101848(.a(t467), .b(t471), .clk(clk), .q(t475));    // 1
    subfxp #(16, 1) sub101855(.a(t466), .b(t470), .clk(clk), .q(t476));    // 1
    subfxp #(16, 1) sub101862(.a(t467), .b(t471), .clk(clk), .q(t477));    // 1
    addfxp #(16, 1) add101885(.a(t468), .b(t473), .clk(clk), .q(t478));    // 1
    subfxp #(16, 1) sub101892(.a(t469), .b(t472), .clk(clk), .q(t479));    // 1
    subfxp #(16, 1) sub101899(.a(t468), .b(t473), .clk(clk), .q(t480));    // 1
    addfxp #(16, 1) add101906(.a(t469), .b(t472), .clk(clk), .q(t481));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 101
// Gap: 128
module rc101930(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm101928 instPerm107711(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 101
// Gap: 128
module perm101928(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[8] ^ addr0[0];
   assign inBank0[1] = addr0[9] ^ addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[7];
   assign inAddr0[5] = addr0[0];
   assign inAddr0[6] = addr0[1];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outBank0[1] = addr0b[9] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[9] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[8] ^ addr1[0];
   assign inBank1[1] = addr1[9] ^ addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[7];
   assign inAddr1[5] = addr1[0];
   assign inAddr1[6] = addr1[1];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outBank1[1] = addr1b[9] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[9] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[8] ^ addr2[0];
   assign inBank2[1] = addr2[9] ^ addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[7];
   assign inAddr2[5] = addr2[0];
   assign inAddr2[6] = addr2[1];
   assign outBank2[0] = addr2b[8] ^ addr2b[0];
   assign outBank2[1] = addr2b[9] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[8] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[9] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[8] ^ addr3[0];
   assign inBank3[1] = addr3[9] ^ addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[7];
   assign inAddr3[5] = addr3[0];
   assign inAddr3[6] = addr3[1];
   assign outBank3[0] = addr3b[8] ^ addr3b[0];
   assign outBank3[1] = addr3b[9] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[8] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[9] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[8] ^ addr4[0];
   assign inBank4[1] = addr4[9] ^ addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[6];
   assign inAddr4[4] = addr4[7];
   assign inAddr4[5] = addr4[0];
   assign inAddr4[6] = addr4[1];
   assign outBank4[0] = addr4b[8] ^ addr4b[0];
   assign outBank4[1] = addr4b[9] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[8] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[9] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[8] ^ addr5[0];
   assign inBank5[1] = addr5[9] ^ addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[6];
   assign inAddr5[4] = addr5[7];
   assign inAddr5[5] = addr5[0];
   assign inAddr5[6] = addr5[1];
   assign outBank5[0] = addr5b[8] ^ addr5b[0];
   assign outBank5[1] = addr5b[9] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[8] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[9] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[8] ^ addr6[0];
   assign inBank6[1] = addr6[9] ^ addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[6];
   assign inAddr6[4] = addr6[7];
   assign inAddr6[5] = addr6[0];
   assign inAddr6[6] = addr6[1];
   assign outBank6[0] = addr6b[8] ^ addr6b[0];
   assign outBank6[1] = addr6b[9] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[8] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[9] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[8] ^ addr7[0];
   assign inBank7[1] = addr7[9] ^ addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[6];
   assign inAddr7[4] = addr7[7];
   assign inAddr7[5] = addr7[0];
   assign inAddr7[6] = addr7[1];
   assign outBank7[0] = addr7b[8] ^ addr7b[0];
   assign outBank7[1] = addr7b[9] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[8] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[9] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(97, 7) nextReg_107716(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_107719(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_101928 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 96)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 99)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 96) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 96)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[5];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_5_pipe), .y0(z_2_4), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_6_pipe), .x1(z_1_7_pipe), .y0(z_2_6), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_5_pipe), .y0(u_2_4), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_6_pipe), .x1(u_1_7_pipe), .y0(u_2_6), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray1024_101928(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_107724(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 128
module DirSum_104654(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [6:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 127)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock101932 codeBlockIsnt107729(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D13_102832(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfe6e;
      2: out3 <= 16'hfcdc;
      3: out3 <= 16'hfb4b;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'hf69c;
      7: out3 <= 16'hf50f;
      8: out3 <= 16'hf384;
      9: out3 <= 16'hf1fa;
      10: out3 <= 16'hf073;
      11: out3 <= 16'heeee;
      12: out3 <= 16'hed6c;
      13: out3 <= 16'hebed;
      14: out3 <= 16'hea70;
      15: out3 <= 16'he8f7;
      16: out3 <= 16'he782;
      17: out3 <= 16'he611;
      18: out3 <= 16'he4a3;
      19: out3 <= 16'he33a;
      20: out3 <= 16'he1d5;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdf19;
      23: out3 <= 16'hddc3;
      24: out3 <= 16'hdc72;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'hd9e0;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'hd766;
      29: out3 <= 16'hd632;
      30: out3 <= 16'hd505;
      31: out3 <= 16'hd3df;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd1a6;
      34: out3 <= 16'hd094;
      35: out3 <= 16'hcf8a;
      36: out3 <= 16'hce87;
      37: out3 <= 16'hcd8c;
      38: out3 <= 16'hcc98;
      39: out3 <= 16'hcbad;
      40: out3 <= 16'hcac9;
      41: out3 <= 16'hc9ee;
      42: out3 <= 16'hc91b;
      43: out3 <= 16'hc850;
      44: out3 <= 16'hc78f;
      45: out3 <= 16'hc6d5;
      46: out3 <= 16'hc625;
      47: out3 <= 16'hc57e;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc44a;
      50: out3 <= 16'hc3be;
      51: out3 <= 16'hc33b;
      52: out3 <= 16'hc2c1;
      53: out3 <= 16'hc251;
      54: out3 <= 16'hc1eb;
      55: out3 <= 16'hc18e;
      56: out3 <= 16'hc13b;
      57: out3 <= 16'hc0f1;
      58: out3 <= 16'hc0b1;
      59: out3 <= 16'hc07b;
      60: out3 <= 16'hc04f;
      61: out3 <= 16'hc02c;
      62: out3 <= 16'hc014;
      63: out3 <= 16'hc005;
      64: out3 <= 16'hc000;
      65: out3 <= 16'hc005;
      66: out3 <= 16'hc014;
      67: out3 <= 16'hc02c;
      68: out3 <= 16'hc04f;
      69: out3 <= 16'hc07b;
      70: out3 <= 16'hc0b1;
      71: out3 <= 16'hc0f1;
      72: out3 <= 16'hc13b;
      73: out3 <= 16'hc18e;
      74: out3 <= 16'hc1eb;
      75: out3 <= 16'hc251;
      76: out3 <= 16'hc2c1;
      77: out3 <= 16'hc33b;
      78: out3 <= 16'hc3be;
      79: out3 <= 16'hc44a;
      80: out3 <= 16'hc4df;
      81: out3 <= 16'hc57e;
      82: out3 <= 16'hc625;
      83: out3 <= 16'hc6d5;
      84: out3 <= 16'hc78f;
      85: out3 <= 16'hc850;
      86: out3 <= 16'hc91b;
      87: out3 <= 16'hc9ee;
      88: out3 <= 16'hcac9;
      89: out3 <= 16'hcbad;
      90: out3 <= 16'hcc98;
      91: out3 <= 16'hcd8c;
      92: out3 <= 16'hce87;
      93: out3 <= 16'hcf8a;
      94: out3 <= 16'hd094;
      95: out3 <= 16'hd1a6;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd3df;
      98: out3 <= 16'hd505;
      99: out3 <= 16'hd632;
      100: out3 <= 16'hd766;
      101: out3 <= 16'hd8a0;
      102: out3 <= 16'hd9e0;
      103: out3 <= 16'hdb26;
      104: out3 <= 16'hdc72;
      105: out3 <= 16'hddc3;
      106: out3 <= 16'hdf19;
      107: out3 <= 16'he074;
      108: out3 <= 16'he1d5;
      109: out3 <= 16'he33a;
      110: out3 <= 16'he4a3;
      111: out3 <= 16'he611;
      112: out3 <= 16'he782;
      113: out3 <= 16'he8f7;
      114: out3 <= 16'hea70;
      115: out3 <= 16'hebed;
      116: out3 <= 16'hed6c;
      117: out3 <= 16'heeee;
      118: out3 <= 16'hf073;
      119: out3 <= 16'hf1fa;
      120: out3 <= 16'hf384;
      121: out3 <= 16'hf50f;
      122: out3 <= 16'hf69c;
      123: out3 <= 16'hf82a;
      124: out3 <= 16'hf9ba;
      125: out3 <= 16'hfb4b;
      126: out3 <= 16'hfcdc;
      127: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D10_102962(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffd;
      1: out3 <= 16'h3fe7;
      2: out3 <= 16'h3fbb;
      3: out3 <= 16'h3f78;
      4: out3 <= 16'h3f20;
      5: out3 <= 16'h3eb1;
      6: out3 <= 16'h3e2d;
      7: out3 <= 16'h3d93;
      8: out3 <= 16'h3ce4;
      9: out3 <= 16'h3c20;
      10: out3 <= 16'h3b47;
      11: out3 <= 16'h3a59;
      12: out3 <= 16'h3958;
      13: out3 <= 16'h3842;
      14: out3 <= 16'h3718;
      15: out3 <= 16'h35dc;
      16: out3 <= 16'h348d;
      17: out3 <= 16'h332c;
      18: out3 <= 16'h31b9;
      19: out3 <= 16'h3034;
      20: out3 <= 16'h2e9f;
      21: out3 <= 16'h2cfa;
      22: out3 <= 16'h2b45;
      23: out3 <= 16'h2981;
      24: out3 <= 16'h27af;
      25: out3 <= 16'h25cf;
      26: out3 <= 16'h23e2;
      27: out3 <= 16'h21e8;
      28: out3 <= 16'h1fe3;
      29: out3 <= 16'h1dd3;
      30: out3 <= 16'h1bb8;
      31: out3 <= 16'h1993;
      32: out3 <= 16'h1766;
      33: out3 <= 16'h1531;
      34: out3 <= 16'h12f4;
      35: out3 <= 16'h10b1;
      36: out3 <= 16'he68;
      37: out3 <= 16'hc1a;
      38: out3 <= 16'h9c7;
      39: out3 <= 16'h772;
      40: out3 <= 16'h51a;
      41: out3 <= 16'h2c0;
      42: out3 <= 16'h65;
      43: out3 <= 16'hfe09;
      44: out3 <= 16'hfbaf;
      45: out3 <= 16'hf956;
      46: out3 <= 16'hf6ff;
      47: out3 <= 16'hf4ac;
      48: out3 <= 16'hf25c;
      49: out3 <= 16'hf012;
      50: out3 <= 16'hedcc;
      51: out3 <= 16'heb8d;
      52: out3 <= 16'he955;
      53: out3 <= 16'he725;
      54: out3 <= 16'he4fe;
      55: out3 <= 16'he2e0;
      56: out3 <= 16'he0cc;
      57: out3 <= 16'hdec3;
      58: out3 <= 16'hdcc5;
      59: out3 <= 16'hdad4;
      60: out3 <= 16'hd8ef;
      61: out3 <= 16'hd719;
      62: out3 <= 16'hd550;
      63: out3 <= 16'hd396;
      64: out3 <= 16'hd1eb;
      65: out3 <= 16'hd051;
      66: out3 <= 16'hcec7;
      67: out3 <= 16'hcd4e;
      68: out3 <= 16'hcbe7;
      69: out3 <= 16'hca92;
      70: out3 <= 16'hc94f;
      71: out3 <= 16'hc81f;
      72: out3 <= 16'hc703;
      73: out3 <= 16'hc5fa;
      74: out3 <= 16'hc506;
      75: out3 <= 16'hc426;
      76: out3 <= 16'hc35b;
      77: out3 <= 16'hc2a5;
      78: out3 <= 16'hc204;
      79: out3 <= 16'hc178;
      80: out3 <= 16'hc103;
      81: out3 <= 16'hc0a3;
      82: out3 <= 16'hc059;
      83: out3 <= 16'hc025;
      84: out3 <= 16'hc008;
      85: out3 <= 16'hc000;
      86: out3 <= 16'hc00f;
      87: out3 <= 16'hc034;
      88: out3 <= 16'hc06f;
      89: out3 <= 16'hc0c0;
      90: out3 <= 16'hc128;
      91: out3 <= 16'hc1a4;
      92: out3 <= 16'hc237;
      93: out3 <= 16'hc2df;
      94: out3 <= 16'hc39c;
      95: out3 <= 16'hc46e;
      96: out3 <= 16'hc555;
      97: out3 <= 16'hc650;
      98: out3 <= 16'hc75f;
      99: out3 <= 16'hc882;
      100: out3 <= 16'hc9b8;
      101: out3 <= 16'hcb01;
      102: out3 <= 16'hcc5d;
      103: out3 <= 16'hcdca;
      104: out3 <= 16'hcf48;
      105: out3 <= 16'hd0d8;
      106: out3 <= 16'hd278;
      107: out3 <= 16'hd428;
      108: out3 <= 16'hd5e6;
      109: out3 <= 16'hd7b4;
      110: out3 <= 16'hd98f;
      111: out3 <= 16'hdb78;
      112: out3 <= 16'hdd6e;
      113: out3 <= 16'hdf6f;
      114: out3 <= 16'he17c;
      115: out3 <= 16'he394;
      116: out3 <= 16'he5b5;
      117: out3 <= 16'he7df;
      118: out3 <= 16'hea12;
      119: out3 <= 16'hec4c;
      120: out3 <= 16'hee8d;
      121: out3 <= 16'hf0d5;
      122: out3 <= 16'hf321;
      123: out3 <= 16'hf572;
      124: out3 <= 16'hf7c7;
      125: out3 <= 16'hfa1e;
      126: out3 <= 16'hfc78;
      127: out3 <= 16'hfed2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D4_103092(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fff;
      2: out3 <= 16'h3ffb;
      3: out3 <= 16'h3ff5;
      4: out3 <= 16'h3fec;
      5: out3 <= 16'h3fe1;
      6: out3 <= 16'h3fd4;
      7: out3 <= 16'h3fc4;
      8: out3 <= 16'h3fb1;
      9: out3 <= 16'h3f9c;
      10: out3 <= 16'h3f85;
      11: out3 <= 16'h3f6b;
      12: out3 <= 16'h3f4f;
      13: out3 <= 16'h3f30;
      14: out3 <= 16'h3f0f;
      15: out3 <= 16'h3eeb;
      16: out3 <= 16'h3ec5;
      17: out3 <= 16'h3e9d;
      18: out3 <= 16'h3e72;
      19: out3 <= 16'h3e45;
      20: out3 <= 16'h3e15;
      21: out3 <= 16'h3de3;
      22: out3 <= 16'h3daf;
      23: out3 <= 16'h3d78;
      24: out3 <= 16'h3d3f;
      25: out3 <= 16'h3d03;
      26: out3 <= 16'h3cc5;
      27: out3 <= 16'h3c85;
      28: out3 <= 16'h3c42;
      29: out3 <= 16'h3bfd;
      30: out3 <= 16'h3bb6;
      31: out3 <= 16'h3b6d;
      32: out3 <= 16'h3b21;
      33: out3 <= 16'h3ad3;
      34: out3 <= 16'h3a82;
      35: out3 <= 16'h3a30;
      36: out3 <= 16'h39db;
      37: out3 <= 16'h3984;
      38: out3 <= 16'h392b;
      39: out3 <= 16'h38cf;
      40: out3 <= 16'h3871;
      41: out3 <= 16'h3812;
      42: out3 <= 16'h37b0;
      43: out3 <= 16'h374b;
      44: out3 <= 16'h36e5;
      45: out3 <= 16'h367d;
      46: out3 <= 16'h3612;
      47: out3 <= 16'h35a5;
      48: out3 <= 16'h3537;
      49: out3 <= 16'h34c6;
      50: out3 <= 16'h3453;
      51: out3 <= 16'h33df;
      52: out3 <= 16'h3368;
      53: out3 <= 16'h32ef;
      54: out3 <= 16'h3274;
      55: out3 <= 16'h31f8;
      56: out3 <= 16'h3179;
      57: out3 <= 16'h30f9;
      58: out3 <= 16'h3076;
      59: out3 <= 16'h2ff2;
      60: out3 <= 16'h2f6c;
      61: out3 <= 16'h2ee4;
      62: out3 <= 16'h2e5a;
      63: out3 <= 16'h2dcf;
      64: out3 <= 16'h2d41;
      65: out3 <= 16'h2cb2;
      66: out3 <= 16'h2c21;
      67: out3 <= 16'h2b8f;
      68: out3 <= 16'h2afb;
      69: out3 <= 16'h2a65;
      70: out3 <= 16'h29ce;
      71: out3 <= 16'h2935;
      72: out3 <= 16'h289a;
      73: out3 <= 16'h27fe;
      74: out3 <= 16'h2760;
      75: out3 <= 16'h26c1;
      76: out3 <= 16'h2620;
      77: out3 <= 16'h257e;
      78: out3 <= 16'h24da;
      79: out3 <= 16'h2435;
      80: out3 <= 16'h238e;
      81: out3 <= 16'h22e7;
      82: out3 <= 16'h223d;
      83: out3 <= 16'h2193;
      84: out3 <= 16'h20e7;
      85: out3 <= 16'h203a;
      86: out3 <= 16'h1f8c;
      87: out3 <= 16'h1edc;
      88: out3 <= 16'h1e2b;
      89: out3 <= 16'h1d79;
      90: out3 <= 16'h1cc6;
      91: out3 <= 16'h1c12;
      92: out3 <= 16'h1b5d;
      93: out3 <= 16'h1aa7;
      94: out3 <= 16'h19ef;
      95: out3 <= 16'h1937;
      96: out3 <= 16'h187e;
      97: out3 <= 16'h17c4;
      98: out3 <= 16'h1709;
      99: out3 <= 16'h164c;
      100: out3 <= 16'h1590;
      101: out3 <= 16'h14d2;
      102: out3 <= 16'h1413;
      103: out3 <= 16'h1354;
      104: out3 <= 16'h1294;
      105: out3 <= 16'h11d3;
      106: out3 <= 16'h1112;
      107: out3 <= 16'h1050;
      108: out3 <= 16'hf8d;
      109: out3 <= 16'heca;
      110: out3 <= 16'he06;
      111: out3 <= 16'hd41;
      112: out3 <= 16'hc7c;
      113: out3 <= 16'hbb7;
      114: out3 <= 16'haf1;
      115: out3 <= 16'ha2b;
      116: out3 <= 16'h964;
      117: out3 <= 16'h89d;
      118: out3 <= 16'h7d6;
      119: out3 <= 16'h70e;
      120: out3 <= 16'h646;
      121: out3 <= 16'h57e;
      122: out3 <= 16'h4b5;
      123: out3 <= 16'h3ed;
      124: out3 <= 16'h324;
      125: out3 <= 16'h25b;
      126: out3 <= 16'h192;
      127: out3 <= 16'hc9;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D18_103222(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfed2;
      1: out3 <= 16'hfc78;
      2: out3 <= 16'hfa1e;
      3: out3 <= 16'hf7c7;
      4: out3 <= 16'hf572;
      5: out3 <= 16'hf321;
      6: out3 <= 16'hf0d5;
      7: out3 <= 16'hee8d;
      8: out3 <= 16'hec4c;
      9: out3 <= 16'hea12;
      10: out3 <= 16'he7df;
      11: out3 <= 16'he5b5;
      12: out3 <= 16'he394;
      13: out3 <= 16'he17c;
      14: out3 <= 16'hdf6f;
      15: out3 <= 16'hdd6e;
      16: out3 <= 16'hdb78;
      17: out3 <= 16'hd98f;
      18: out3 <= 16'hd7b4;
      19: out3 <= 16'hd5e6;
      20: out3 <= 16'hd428;
      21: out3 <= 16'hd278;
      22: out3 <= 16'hd0d8;
      23: out3 <= 16'hcf48;
      24: out3 <= 16'hcdca;
      25: out3 <= 16'hcc5d;
      26: out3 <= 16'hcb01;
      27: out3 <= 16'hc9b8;
      28: out3 <= 16'hc882;
      29: out3 <= 16'hc75f;
      30: out3 <= 16'hc650;
      31: out3 <= 16'hc555;
      32: out3 <= 16'hc46e;
      33: out3 <= 16'hc39c;
      34: out3 <= 16'hc2df;
      35: out3 <= 16'hc237;
      36: out3 <= 16'hc1a4;
      37: out3 <= 16'hc128;
      38: out3 <= 16'hc0c0;
      39: out3 <= 16'hc06f;
      40: out3 <= 16'hc034;
      41: out3 <= 16'hc00f;
      42: out3 <= 16'hc000;
      43: out3 <= 16'hc008;
      44: out3 <= 16'hc025;
      45: out3 <= 16'hc059;
      46: out3 <= 16'hc0a3;
      47: out3 <= 16'hc103;
      48: out3 <= 16'hc178;
      49: out3 <= 16'hc204;
      50: out3 <= 16'hc2a5;
      51: out3 <= 16'hc35b;
      52: out3 <= 16'hc426;
      53: out3 <= 16'hc506;
      54: out3 <= 16'hc5fa;
      55: out3 <= 16'hc703;
      56: out3 <= 16'hc81f;
      57: out3 <= 16'hc94f;
      58: out3 <= 16'hca92;
      59: out3 <= 16'hcbe7;
      60: out3 <= 16'hcd4e;
      61: out3 <= 16'hcec7;
      62: out3 <= 16'hd051;
      63: out3 <= 16'hd1eb;
      64: out3 <= 16'hd396;
      65: out3 <= 16'hd550;
      66: out3 <= 16'hd719;
      67: out3 <= 16'hd8ef;
      68: out3 <= 16'hdad4;
      69: out3 <= 16'hdcc5;
      70: out3 <= 16'hdec3;
      71: out3 <= 16'he0cc;
      72: out3 <= 16'he2e0;
      73: out3 <= 16'he4fe;
      74: out3 <= 16'he725;
      75: out3 <= 16'he955;
      76: out3 <= 16'heb8d;
      77: out3 <= 16'hedcc;
      78: out3 <= 16'hf012;
      79: out3 <= 16'hf25c;
      80: out3 <= 16'hf4ac;
      81: out3 <= 16'hf6ff;
      82: out3 <= 16'hf956;
      83: out3 <= 16'hfbaf;
      84: out3 <= 16'hfe09;
      85: out3 <= 16'h65;
      86: out3 <= 16'h2c0;
      87: out3 <= 16'h51a;
      88: out3 <= 16'h772;
      89: out3 <= 16'h9c7;
      90: out3 <= 16'hc1a;
      91: out3 <= 16'he68;
      92: out3 <= 16'h10b1;
      93: out3 <= 16'h12f4;
      94: out3 <= 16'h1531;
      95: out3 <= 16'h1766;
      96: out3 <= 16'h1993;
      97: out3 <= 16'h1bb8;
      98: out3 <= 16'h1dd3;
      99: out3 <= 16'h1fe3;
      100: out3 <= 16'h21e8;
      101: out3 <= 16'h23e2;
      102: out3 <= 16'h25cf;
      103: out3 <= 16'h27af;
      104: out3 <= 16'h2981;
      105: out3 <= 16'h2b45;
      106: out3 <= 16'h2cfa;
      107: out3 <= 16'h2e9f;
      108: out3 <= 16'h3034;
      109: out3 <= 16'h31b9;
      110: out3 <= 16'h332c;
      111: out3 <= 16'h348d;
      112: out3 <= 16'h35dc;
      113: out3 <= 16'h3718;
      114: out3 <= 16'h3842;
      115: out3 <= 16'h3958;
      116: out3 <= 16'h3a59;
      117: out3 <= 16'h3b47;
      118: out3 <= 16'h3c20;
      119: out3 <= 16'h3ce4;
      120: out3 <= 16'h3d93;
      121: out3 <= 16'h3e2d;
      122: out3 <= 16'h3eb1;
      123: out3 <= 16'h3f20;
      124: out3 <= 16'h3f78;
      125: out3 <= 16'h3fbb;
      126: out3 <= 16'h3fe7;
      127: out3 <= 16'h3ffd;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D14_103352(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfb4b;
      3: out3 <= 16'hf8f2;
      4: out3 <= 16'hf69c;
      5: out3 <= 16'hf449;
      6: out3 <= 16'hf1fa;
      7: out3 <= 16'hefb0;
      8: out3 <= 16'hed6c;
      9: out3 <= 16'heb2e;
      10: out3 <= 16'he8f7;
      11: out3 <= 16'he6c9;
      12: out3 <= 16'he4a3;
      13: out3 <= 16'he287;
      14: out3 <= 16'he074;
      15: out3 <= 16'hde6d;
      16: out3 <= 16'hdc72;
      17: out3 <= 16'hda82;
      18: out3 <= 16'hd8a0;
      19: out3 <= 16'hd6cb;
      20: out3 <= 16'hd505;
      21: out3 <= 16'hd34e;
      22: out3 <= 16'hd1a6;
      23: out3 <= 16'hd00e;
      24: out3 <= 16'hce87;
      25: out3 <= 16'hcd11;
      26: out3 <= 16'hcbad;
      27: out3 <= 16'hca5b;
      28: out3 <= 16'hc91b;
      29: out3 <= 16'hc7ee;
      30: out3 <= 16'hc6d5;
      31: out3 <= 16'hc5d0;
      32: out3 <= 16'hc4df;
      33: out3 <= 16'hc403;
      34: out3 <= 16'hc33b;
      35: out3 <= 16'hc288;
      36: out3 <= 16'hc1eb;
      37: out3 <= 16'hc163;
      38: out3 <= 16'hc0f1;
      39: out3 <= 16'hc095;
      40: out3 <= 16'hc04f;
      41: out3 <= 16'hc01f;
      42: out3 <= 16'hc005;
      43: out3 <= 16'hc001;
      44: out3 <= 16'hc014;
      45: out3 <= 16'hc03c;
      46: out3 <= 16'hc07b;
      47: out3 <= 16'hc0d0;
      48: out3 <= 16'hc13b;
      49: out3 <= 16'hc1bb;
      50: out3 <= 16'hc251;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc3be;
      53: out3 <= 16'hc493;
      54: out3 <= 16'hc57e;
      55: out3 <= 16'hc67c;
      56: out3 <= 16'hc78f;
      57: out3 <= 16'hc8b5;
      58: out3 <= 16'hc9ee;
      59: out3 <= 16'hcb3a;
      60: out3 <= 16'hcc98;
      61: out3 <= 16'hce08;
      62: out3 <= 16'hcf8a;
      63: out3 <= 16'hd11c;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd471;
      66: out3 <= 16'hd632;
      67: out3 <= 16'hd802;
      68: out3 <= 16'hd9e0;
      69: out3 <= 16'hdbcb;
      70: out3 <= 16'hddc3;
      71: out3 <= 16'hdfc6;
      72: out3 <= 16'he1d5;
      73: out3 <= 16'he3ee;
      74: out3 <= 16'he611;
      75: out3 <= 16'he83c;
      76: out3 <= 16'hea70;
      77: out3 <= 16'hecac;
      78: out3 <= 16'heeee;
      79: out3 <= 16'hf136;
      80: out3 <= 16'hf384;
      81: out3 <= 16'hf5d5;
      82: out3 <= 16'hf82a;
      83: out3 <= 16'hfa82;
      84: out3 <= 16'hfcdc;
      85: out3 <= 16'hff37;
      86: out3 <= 16'h192;
      87: out3 <= 16'h3ed;
      88: out3 <= 16'h646;
      89: out3 <= 16'h89d;
      90: out3 <= 16'haf1;
      91: out3 <= 16'hd41;
      92: out3 <= 16'hf8d;
      93: out3 <= 16'h11d3;
      94: out3 <= 16'h1413;
      95: out3 <= 16'h164c;
      96: out3 <= 16'h187e;
      97: out3 <= 16'h1aa7;
      98: out3 <= 16'h1cc6;
      99: out3 <= 16'h1edc;
      100: out3 <= 16'h20e7;
      101: out3 <= 16'h22e7;
      102: out3 <= 16'h24da;
      103: out3 <= 16'h26c1;
      104: out3 <= 16'h289a;
      105: out3 <= 16'h2a65;
      106: out3 <= 16'h2c21;
      107: out3 <= 16'h2dcf;
      108: out3 <= 16'h2f6c;
      109: out3 <= 16'h30f9;
      110: out3 <= 16'h3274;
      111: out3 <= 16'h33df;
      112: out3 <= 16'h3537;
      113: out3 <= 16'h367d;
      114: out3 <= 16'h37b0;
      115: out3 <= 16'h38cf;
      116: out3 <= 16'h39db;
      117: out3 <= 16'h3ad3;
      118: out3 <= 16'h3bb6;
      119: out3 <= 16'h3c85;
      120: out3 <= 16'h3d3f;
      121: out3 <= 16'h3de3;
      122: out3 <= 16'h3e72;
      123: out3 <= 16'h3eeb;
      124: out3 <= 16'h3f4f;
      125: out3 <= 16'h3f9c;
      126: out3 <= 16'h3fd4;
      127: out3 <= 16'h3ff5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D9_103482(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fe1;
      3: out3 <= 16'h3fc4;
      4: out3 <= 16'h3f9c;
      5: out3 <= 16'h3f6b;
      6: out3 <= 16'h3f30;
      7: out3 <= 16'h3eeb;
      8: out3 <= 16'h3e9d;
      9: out3 <= 16'h3e45;
      10: out3 <= 16'h3de3;
      11: out3 <= 16'h3d78;
      12: out3 <= 16'h3d03;
      13: out3 <= 16'h3c85;
      14: out3 <= 16'h3bfd;
      15: out3 <= 16'h3b6d;
      16: out3 <= 16'h3ad3;
      17: out3 <= 16'h3a30;
      18: out3 <= 16'h3984;
      19: out3 <= 16'h38cf;
      20: out3 <= 16'h3812;
      21: out3 <= 16'h374b;
      22: out3 <= 16'h367d;
      23: out3 <= 16'h35a5;
      24: out3 <= 16'h34c6;
      25: out3 <= 16'h33df;
      26: out3 <= 16'h32ef;
      27: out3 <= 16'h31f8;
      28: out3 <= 16'h30f9;
      29: out3 <= 16'h2ff2;
      30: out3 <= 16'h2ee4;
      31: out3 <= 16'h2dcf;
      32: out3 <= 16'h2cb2;
      33: out3 <= 16'h2b8f;
      34: out3 <= 16'h2a65;
      35: out3 <= 16'h2935;
      36: out3 <= 16'h27fe;
      37: out3 <= 16'h26c1;
      38: out3 <= 16'h257e;
      39: out3 <= 16'h2435;
      40: out3 <= 16'h22e7;
      41: out3 <= 16'h2193;
      42: out3 <= 16'h203a;
      43: out3 <= 16'h1edc;
      44: out3 <= 16'h1d79;
      45: out3 <= 16'h1c12;
      46: out3 <= 16'h1aa7;
      47: out3 <= 16'h1937;
      48: out3 <= 16'h17c4;
      49: out3 <= 16'h164c;
      50: out3 <= 16'h14d2;
      51: out3 <= 16'h1354;
      52: out3 <= 16'h11d3;
      53: out3 <= 16'h1050;
      54: out3 <= 16'heca;
      55: out3 <= 16'hd41;
      56: out3 <= 16'hbb7;
      57: out3 <= 16'ha2b;
      58: out3 <= 16'h89d;
      59: out3 <= 16'h70e;
      60: out3 <= 16'h57e;
      61: out3 <= 16'h3ed;
      62: out3 <= 16'h25b;
      63: out3 <= 16'hc9;
      64: out3 <= 16'hff37;
      65: out3 <= 16'hfda5;
      66: out3 <= 16'hfc13;
      67: out3 <= 16'hfa82;
      68: out3 <= 16'hf8f2;
      69: out3 <= 16'hf763;
      70: out3 <= 16'hf5d5;
      71: out3 <= 16'hf449;
      72: out3 <= 16'hf2bf;
      73: out3 <= 16'hf136;
      74: out3 <= 16'hefb0;
      75: out3 <= 16'hee2d;
      76: out3 <= 16'hecac;
      77: out3 <= 16'heb2e;
      78: out3 <= 16'he9b4;
      79: out3 <= 16'he83c;
      80: out3 <= 16'he6c9;
      81: out3 <= 16'he559;
      82: out3 <= 16'he3ee;
      83: out3 <= 16'he287;
      84: out3 <= 16'he124;
      85: out3 <= 16'hdfc6;
      86: out3 <= 16'hde6d;
      87: out3 <= 16'hdd19;
      88: out3 <= 16'hdbcb;
      89: out3 <= 16'hda82;
      90: out3 <= 16'hd93f;
      91: out3 <= 16'hd802;
      92: out3 <= 16'hd6cb;
      93: out3 <= 16'hd59b;
      94: out3 <= 16'hd471;
      95: out3 <= 16'hd34e;
      96: out3 <= 16'hd231;
      97: out3 <= 16'hd11c;
      98: out3 <= 16'hd00e;
      99: out3 <= 16'hcf07;
      100: out3 <= 16'hce08;
      101: out3 <= 16'hcd11;
      102: out3 <= 16'hcc21;
      103: out3 <= 16'hcb3a;
      104: out3 <= 16'hca5b;
      105: out3 <= 16'hc983;
      106: out3 <= 16'hc8b5;
      107: out3 <= 16'hc7ee;
      108: out3 <= 16'hc731;
      109: out3 <= 16'hc67c;
      110: out3 <= 16'hc5d0;
      111: out3 <= 16'hc52d;
      112: out3 <= 16'hc493;
      113: out3 <= 16'hc403;
      114: out3 <= 16'hc37b;
      115: out3 <= 16'hc2fd;
      116: out3 <= 16'hc288;
      117: out3 <= 16'hc21d;
      118: out3 <= 16'hc1bb;
      119: out3 <= 16'hc163;
      120: out3 <= 16'hc115;
      121: out3 <= 16'hc0d0;
      122: out3 <= 16'hc095;
      123: out3 <= 16'hc064;
      124: out3 <= 16'hc03c;
      125: out3 <= 16'hc01f;
      126: out3 <= 16'hc00b;
      127: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D5_103612(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffb;
      2: out3 <= 16'h3fec;
      3: out3 <= 16'h3fd4;
      4: out3 <= 16'h3fb1;
      5: out3 <= 16'h3f85;
      6: out3 <= 16'h3f4f;
      7: out3 <= 16'h3f0f;
      8: out3 <= 16'h3ec5;
      9: out3 <= 16'h3e72;
      10: out3 <= 16'h3e15;
      11: out3 <= 16'h3daf;
      12: out3 <= 16'h3d3f;
      13: out3 <= 16'h3cc5;
      14: out3 <= 16'h3c42;
      15: out3 <= 16'h3bb6;
      16: out3 <= 16'h3b21;
      17: out3 <= 16'h3a82;
      18: out3 <= 16'h39db;
      19: out3 <= 16'h392b;
      20: out3 <= 16'h3871;
      21: out3 <= 16'h37b0;
      22: out3 <= 16'h36e5;
      23: out3 <= 16'h3612;
      24: out3 <= 16'h3537;
      25: out3 <= 16'h3453;
      26: out3 <= 16'h3368;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h3179;
      29: out3 <= 16'h3076;
      30: out3 <= 16'h2f6c;
      31: out3 <= 16'h2e5a;
      32: out3 <= 16'h2d41;
      33: out3 <= 16'h2c21;
      34: out3 <= 16'h2afb;
      35: out3 <= 16'h29ce;
      36: out3 <= 16'h289a;
      37: out3 <= 16'h2760;
      38: out3 <= 16'h2620;
      39: out3 <= 16'h24da;
      40: out3 <= 16'h238e;
      41: out3 <= 16'h223d;
      42: out3 <= 16'h20e7;
      43: out3 <= 16'h1f8c;
      44: out3 <= 16'h1e2b;
      45: out3 <= 16'h1cc6;
      46: out3 <= 16'h1b5d;
      47: out3 <= 16'h19ef;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1709;
      50: out3 <= 16'h1590;
      51: out3 <= 16'h1413;
      52: out3 <= 16'h1294;
      53: out3 <= 16'h1112;
      54: out3 <= 16'hf8d;
      55: out3 <= 16'he06;
      56: out3 <= 16'hc7c;
      57: out3 <= 16'haf1;
      58: out3 <= 16'h964;
      59: out3 <= 16'h7d6;
      60: out3 <= 16'h646;
      61: out3 <= 16'h4b5;
      62: out3 <= 16'h324;
      63: out3 <= 16'h192;
      64: out3 <= 16'h0;
      65: out3 <= 16'hfe6e;
      66: out3 <= 16'hfcdc;
      67: out3 <= 16'hfb4b;
      68: out3 <= 16'hf9ba;
      69: out3 <= 16'hf82a;
      70: out3 <= 16'hf69c;
      71: out3 <= 16'hf50f;
      72: out3 <= 16'hf384;
      73: out3 <= 16'hf1fa;
      74: out3 <= 16'hf073;
      75: out3 <= 16'heeee;
      76: out3 <= 16'hed6c;
      77: out3 <= 16'hebed;
      78: out3 <= 16'hea70;
      79: out3 <= 16'he8f7;
      80: out3 <= 16'he782;
      81: out3 <= 16'he611;
      82: out3 <= 16'he4a3;
      83: out3 <= 16'he33a;
      84: out3 <= 16'he1d5;
      85: out3 <= 16'he074;
      86: out3 <= 16'hdf19;
      87: out3 <= 16'hddc3;
      88: out3 <= 16'hdc72;
      89: out3 <= 16'hdb26;
      90: out3 <= 16'hd9e0;
      91: out3 <= 16'hd8a0;
      92: out3 <= 16'hd766;
      93: out3 <= 16'hd632;
      94: out3 <= 16'hd505;
      95: out3 <= 16'hd3df;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd1a6;
      98: out3 <= 16'hd094;
      99: out3 <= 16'hcf8a;
      100: out3 <= 16'hce87;
      101: out3 <= 16'hcd8c;
      102: out3 <= 16'hcc98;
      103: out3 <= 16'hcbad;
      104: out3 <= 16'hcac9;
      105: out3 <= 16'hc9ee;
      106: out3 <= 16'hc91b;
      107: out3 <= 16'hc850;
      108: out3 <= 16'hc78f;
      109: out3 <= 16'hc6d5;
      110: out3 <= 16'hc625;
      111: out3 <= 16'hc57e;
      112: out3 <= 16'hc4df;
      113: out3 <= 16'hc44a;
      114: out3 <= 16'hc3be;
      115: out3 <= 16'hc33b;
      116: out3 <= 16'hc2c1;
      117: out3 <= 16'hc251;
      118: out3 <= 16'hc1eb;
      119: out3 <= 16'hc18e;
      120: out3 <= 16'hc13b;
      121: out3 <= 16'hc0f1;
      122: out3 <= 16'hc0b1;
      123: out3 <= 16'hc07b;
      124: out3 <= 16'hc04f;
      125: out3 <= 16'hc02c;
      126: out3 <= 16'hc014;
      127: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D17_103742(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfc13;
      3: out3 <= 16'hfa82;
      4: out3 <= 16'hf8f2;
      5: out3 <= 16'hf763;
      6: out3 <= 16'hf5d5;
      7: out3 <= 16'hf449;
      8: out3 <= 16'hf2bf;
      9: out3 <= 16'hf136;
      10: out3 <= 16'hefb0;
      11: out3 <= 16'hee2d;
      12: out3 <= 16'hecac;
      13: out3 <= 16'heb2e;
      14: out3 <= 16'he9b4;
      15: out3 <= 16'he83c;
      16: out3 <= 16'he6c9;
      17: out3 <= 16'he559;
      18: out3 <= 16'he3ee;
      19: out3 <= 16'he287;
      20: out3 <= 16'he124;
      21: out3 <= 16'hdfc6;
      22: out3 <= 16'hde6d;
      23: out3 <= 16'hdd19;
      24: out3 <= 16'hdbcb;
      25: out3 <= 16'hda82;
      26: out3 <= 16'hd93f;
      27: out3 <= 16'hd802;
      28: out3 <= 16'hd6cb;
      29: out3 <= 16'hd59b;
      30: out3 <= 16'hd471;
      31: out3 <= 16'hd34e;
      32: out3 <= 16'hd231;
      33: out3 <= 16'hd11c;
      34: out3 <= 16'hd00e;
      35: out3 <= 16'hcf07;
      36: out3 <= 16'hce08;
      37: out3 <= 16'hcd11;
      38: out3 <= 16'hcc21;
      39: out3 <= 16'hcb3a;
      40: out3 <= 16'hca5b;
      41: out3 <= 16'hc983;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hc7ee;
      44: out3 <= 16'hc731;
      45: out3 <= 16'hc67c;
      46: out3 <= 16'hc5d0;
      47: out3 <= 16'hc52d;
      48: out3 <= 16'hc493;
      49: out3 <= 16'hc403;
      50: out3 <= 16'hc37b;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc288;
      53: out3 <= 16'hc21d;
      54: out3 <= 16'hc1bb;
      55: out3 <= 16'hc163;
      56: out3 <= 16'hc115;
      57: out3 <= 16'hc0d0;
      58: out3 <= 16'hc095;
      59: out3 <= 16'hc064;
      60: out3 <= 16'hc03c;
      61: out3 <= 16'hc01f;
      62: out3 <= 16'hc00b;
      63: out3 <= 16'hc001;
      64: out3 <= 16'hc001;
      65: out3 <= 16'hc00b;
      66: out3 <= 16'hc01f;
      67: out3 <= 16'hc03c;
      68: out3 <= 16'hc064;
      69: out3 <= 16'hc095;
      70: out3 <= 16'hc0d0;
      71: out3 <= 16'hc115;
      72: out3 <= 16'hc163;
      73: out3 <= 16'hc1bb;
      74: out3 <= 16'hc21d;
      75: out3 <= 16'hc288;
      76: out3 <= 16'hc2fd;
      77: out3 <= 16'hc37b;
      78: out3 <= 16'hc403;
      79: out3 <= 16'hc493;
      80: out3 <= 16'hc52d;
      81: out3 <= 16'hc5d0;
      82: out3 <= 16'hc67c;
      83: out3 <= 16'hc731;
      84: out3 <= 16'hc7ee;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc983;
      87: out3 <= 16'hca5b;
      88: out3 <= 16'hcb3a;
      89: out3 <= 16'hcc21;
      90: out3 <= 16'hcd11;
      91: out3 <= 16'hce08;
      92: out3 <= 16'hcf07;
      93: out3 <= 16'hd00e;
      94: out3 <= 16'hd11c;
      95: out3 <= 16'hd231;
      96: out3 <= 16'hd34e;
      97: out3 <= 16'hd471;
      98: out3 <= 16'hd59b;
      99: out3 <= 16'hd6cb;
      100: out3 <= 16'hd802;
      101: out3 <= 16'hd93f;
      102: out3 <= 16'hda82;
      103: out3 <= 16'hdbcb;
      104: out3 <= 16'hdd19;
      105: out3 <= 16'hde6d;
      106: out3 <= 16'hdfc6;
      107: out3 <= 16'he124;
      108: out3 <= 16'he287;
      109: out3 <= 16'he3ee;
      110: out3 <= 16'he559;
      111: out3 <= 16'he6c9;
      112: out3 <= 16'he83c;
      113: out3 <= 16'he9b4;
      114: out3 <= 16'heb2e;
      115: out3 <= 16'hecac;
      116: out3 <= 16'hee2d;
      117: out3 <= 16'hefb0;
      118: out3 <= 16'hf136;
      119: out3 <= 16'hf2bf;
      120: out3 <= 16'hf449;
      121: out3 <= 16'hf5d5;
      122: out3 <= 16'hf763;
      123: out3 <= 16'hf8f2;
      124: out3 <= 16'hfa82;
      125: out3 <= 16'hfc13;
      126: out3 <= 16'hfda5;
      127: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D8_103872(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffd;
      2: out3 <= 16'h3ff8;
      3: out3 <= 16'h3ff1;
      4: out3 <= 16'h3fe7;
      5: out3 <= 16'h3fdb;
      6: out3 <= 16'h3fcc;
      7: out3 <= 16'h3fbb;
      8: out3 <= 16'h3fa7;
      9: out3 <= 16'h3f91;
      10: out3 <= 16'h3f78;
      11: out3 <= 16'h3f5d;
      12: out3 <= 16'h3f40;
      13: out3 <= 16'h3f20;
      14: out3 <= 16'h3efd;
      15: out3 <= 16'h3ed8;
      16: out3 <= 16'h3eb1;
      17: out3 <= 16'h3e88;
      18: out3 <= 16'h3e5c;
      19: out3 <= 16'h3e2d;
      20: out3 <= 16'h3dfc;
      21: out3 <= 16'h3dc9;
      22: out3 <= 16'h3d93;
      23: out3 <= 16'h3d5b;
      24: out3 <= 16'h3d21;
      25: out3 <= 16'h3ce4;
      26: out3 <= 16'h3ca5;
      27: out3 <= 16'h3c64;
      28: out3 <= 16'h3c20;
      29: out3 <= 16'h3bda;
      30: out3 <= 16'h3b92;
      31: out3 <= 16'h3b47;
      32: out3 <= 16'h3afa;
      33: out3 <= 16'h3aab;
      34: out3 <= 16'h3a59;
      35: out3 <= 16'h3a06;
      36: out3 <= 16'h39b0;
      37: out3 <= 16'h3958;
      38: out3 <= 16'h38fd;
      39: out3 <= 16'h38a1;
      40: out3 <= 16'h3842;
      41: out3 <= 16'h37e1;
      42: out3 <= 16'h377e;
      43: out3 <= 16'h3718;
      44: out3 <= 16'h36b1;
      45: out3 <= 16'h3648;
      46: out3 <= 16'h35dc;
      47: out3 <= 16'h356e;
      48: out3 <= 16'h34ff;
      49: out3 <= 16'h348d;
      50: out3 <= 16'h3419;
      51: out3 <= 16'h33a3;
      52: out3 <= 16'h332c;
      53: out3 <= 16'h32b2;
      54: out3 <= 16'h3236;
      55: out3 <= 16'h31b9;
      56: out3 <= 16'h3139;
      57: out3 <= 16'h30b8;
      58: out3 <= 16'h3034;
      59: out3 <= 16'h2faf;
      60: out3 <= 16'h2f28;
      61: out3 <= 16'h2e9f;
      62: out3 <= 16'h2e15;
      63: out3 <= 16'h2d88;
      64: out3 <= 16'h2cfa;
      65: out3 <= 16'h2c6a;
      66: out3 <= 16'h2bd8;
      67: out3 <= 16'h2b45;
      68: out3 <= 16'h2ab0;
      69: out3 <= 16'h2a1a;
      70: out3 <= 16'h2981;
      71: out3 <= 16'h28e7;
      72: out3 <= 16'h284c;
      73: out3 <= 16'h27af;
      74: out3 <= 16'h2711;
      75: out3 <= 16'h2671;
      76: out3 <= 16'h25cf;
      77: out3 <= 16'h252c;
      78: out3 <= 16'h2488;
      79: out3 <= 16'h23e2;
      80: out3 <= 16'h233b;
      81: out3 <= 16'h2292;
      82: out3 <= 16'h21e8;
      83: out3 <= 16'h213d;
      84: out3 <= 16'h2091;
      85: out3 <= 16'h1fe3;
      86: out3 <= 16'h1f34;
      87: out3 <= 16'h1e84;
      88: out3 <= 16'h1dd3;
      89: out3 <= 16'h1d20;
      90: out3 <= 16'h1c6c;
      91: out3 <= 16'h1bb8;
      92: out3 <= 16'h1b02;
      93: out3 <= 16'h1a4b;
      94: out3 <= 16'h1993;
      95: out3 <= 16'h18db;
      96: out3 <= 16'h1821;
      97: out3 <= 16'h1766;
      98: out3 <= 16'h16ab;
      99: out3 <= 16'h15ee;
      100: out3 <= 16'h1531;
      101: out3 <= 16'h1473;
      102: out3 <= 16'h13b4;
      103: out3 <= 16'h12f4;
      104: out3 <= 16'h1234;
      105: out3 <= 16'h1173;
      106: out3 <= 16'h10b1;
      107: out3 <= 16'hfee;
      108: out3 <= 16'hf2b;
      109: out3 <= 16'he68;
      110: out3 <= 16'hda4;
      111: out3 <= 16'hcdf;
      112: out3 <= 16'hc1a;
      113: out3 <= 16'hb54;
      114: out3 <= 16'ha8e;
      115: out3 <= 16'h9c7;
      116: out3 <= 16'h901;
      117: out3 <= 16'h839;
      118: out3 <= 16'h772;
      119: out3 <= 16'h6aa;
      120: out3 <= 16'h5e2;
      121: out3 <= 16'h51a;
      122: out3 <= 16'h451;
      123: out3 <= 16'h388;
      124: out3 <= 16'h2c0;
      125: out3 <= 16'h1f7;
      126: out3 <= 16'h12e;
      127: out3 <= 16'h65;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D6_104132(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fd4;
      3: out3 <= 16'h3f9c;
      4: out3 <= 16'h3f4f;
      5: out3 <= 16'h3eeb;
      6: out3 <= 16'h3e72;
      7: out3 <= 16'h3de3;
      8: out3 <= 16'h3d3f;
      9: out3 <= 16'h3c85;
      10: out3 <= 16'h3bb6;
      11: out3 <= 16'h3ad3;
      12: out3 <= 16'h39db;
      13: out3 <= 16'h38cf;
      14: out3 <= 16'h37b0;
      15: out3 <= 16'h367d;
      16: out3 <= 16'h3537;
      17: out3 <= 16'h33df;
      18: out3 <= 16'h3274;
      19: out3 <= 16'h30f9;
      20: out3 <= 16'h2f6c;
      21: out3 <= 16'h2dcf;
      22: out3 <= 16'h2c21;
      23: out3 <= 16'h2a65;
      24: out3 <= 16'h289a;
      25: out3 <= 16'h26c1;
      26: out3 <= 16'h24da;
      27: out3 <= 16'h22e7;
      28: out3 <= 16'h20e7;
      29: out3 <= 16'h1edc;
      30: out3 <= 16'h1cc6;
      31: out3 <= 16'h1aa7;
      32: out3 <= 16'h187e;
      33: out3 <= 16'h164c;
      34: out3 <= 16'h1413;
      35: out3 <= 16'h11d3;
      36: out3 <= 16'hf8d;
      37: out3 <= 16'hd41;
      38: out3 <= 16'haf1;
      39: out3 <= 16'h89d;
      40: out3 <= 16'h646;
      41: out3 <= 16'h3ed;
      42: out3 <= 16'h192;
      43: out3 <= 16'hff37;
      44: out3 <= 16'hfcdc;
      45: out3 <= 16'hfa82;
      46: out3 <= 16'hf82a;
      47: out3 <= 16'hf5d5;
      48: out3 <= 16'hf384;
      49: out3 <= 16'hf136;
      50: out3 <= 16'heeee;
      51: out3 <= 16'hecac;
      52: out3 <= 16'hea70;
      53: out3 <= 16'he83c;
      54: out3 <= 16'he611;
      55: out3 <= 16'he3ee;
      56: out3 <= 16'he1d5;
      57: out3 <= 16'hdfc6;
      58: out3 <= 16'hddc3;
      59: out3 <= 16'hdbcb;
      60: out3 <= 16'hd9e0;
      61: out3 <= 16'hd802;
      62: out3 <= 16'hd632;
      63: out3 <= 16'hd471;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd11c;
      66: out3 <= 16'hcf8a;
      67: out3 <= 16'hce08;
      68: out3 <= 16'hcc98;
      69: out3 <= 16'hcb3a;
      70: out3 <= 16'hc9ee;
      71: out3 <= 16'hc8b5;
      72: out3 <= 16'hc78f;
      73: out3 <= 16'hc67c;
      74: out3 <= 16'hc57e;
      75: out3 <= 16'hc493;
      76: out3 <= 16'hc3be;
      77: out3 <= 16'hc2fd;
      78: out3 <= 16'hc251;
      79: out3 <= 16'hc1bb;
      80: out3 <= 16'hc13b;
      81: out3 <= 16'hc0d0;
      82: out3 <= 16'hc07b;
      83: out3 <= 16'hc03c;
      84: out3 <= 16'hc014;
      85: out3 <= 16'hc001;
      86: out3 <= 16'hc005;
      87: out3 <= 16'hc01f;
      88: out3 <= 16'hc04f;
      89: out3 <= 16'hc095;
      90: out3 <= 16'hc0f1;
      91: out3 <= 16'hc163;
      92: out3 <= 16'hc1eb;
      93: out3 <= 16'hc288;
      94: out3 <= 16'hc33b;
      95: out3 <= 16'hc403;
      96: out3 <= 16'hc4df;
      97: out3 <= 16'hc5d0;
      98: out3 <= 16'hc6d5;
      99: out3 <= 16'hc7ee;
      100: out3 <= 16'hc91b;
      101: out3 <= 16'hca5b;
      102: out3 <= 16'hcbad;
      103: out3 <= 16'hcd11;
      104: out3 <= 16'hce87;
      105: out3 <= 16'hd00e;
      106: out3 <= 16'hd1a6;
      107: out3 <= 16'hd34e;
      108: out3 <= 16'hd505;
      109: out3 <= 16'hd6cb;
      110: out3 <= 16'hd8a0;
      111: out3 <= 16'hda82;
      112: out3 <= 16'hdc72;
      113: out3 <= 16'hde6d;
      114: out3 <= 16'he074;
      115: out3 <= 16'he287;
      116: out3 <= 16'he4a3;
      117: out3 <= 16'he6c9;
      118: out3 <= 16'he8f7;
      119: out3 <= 16'heb2e;
      120: out3 <= 16'hed6c;
      121: out3 <= 16'hefb0;
      122: out3 <= 16'hf1fa;
      123: out3 <= 16'hf449;
      124: out3 <= 16'hf69c;
      125: out3 <= 16'hf8f2;
      126: out3 <= 16'hfb4b;
      127: out3 <= 16'hfda5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D16_104262(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff9b;
      1: out3 <= 16'hfed2;
      2: out3 <= 16'hfe09;
      3: out3 <= 16'hfd40;
      4: out3 <= 16'hfc78;
      5: out3 <= 16'hfbaf;
      6: out3 <= 16'hfae6;
      7: out3 <= 16'hfa1e;
      8: out3 <= 16'hf956;
      9: out3 <= 16'hf88e;
      10: out3 <= 16'hf7c7;
      11: out3 <= 16'hf6ff;
      12: out3 <= 16'hf639;
      13: out3 <= 16'hf572;
      14: out3 <= 16'hf4ac;
      15: out3 <= 16'hf3e6;
      16: out3 <= 16'hf321;
      17: out3 <= 16'hf25c;
      18: out3 <= 16'hf198;
      19: out3 <= 16'hf0d5;
      20: out3 <= 16'hf012;
      21: out3 <= 16'hef4f;
      22: out3 <= 16'hee8d;
      23: out3 <= 16'hedcc;
      24: out3 <= 16'hed0c;
      25: out3 <= 16'hec4c;
      26: out3 <= 16'heb8d;
      27: out3 <= 16'heacf;
      28: out3 <= 16'hea12;
      29: out3 <= 16'he955;
      30: out3 <= 16'he89a;
      31: out3 <= 16'he7df;
      32: out3 <= 16'he725;
      33: out3 <= 16'he66d;
      34: out3 <= 16'he5b5;
      35: out3 <= 16'he4fe;
      36: out3 <= 16'he448;
      37: out3 <= 16'he394;
      38: out3 <= 16'he2e0;
      39: out3 <= 16'he22d;
      40: out3 <= 16'he17c;
      41: out3 <= 16'he0cc;
      42: out3 <= 16'he01d;
      43: out3 <= 16'hdf6f;
      44: out3 <= 16'hdec3;
      45: out3 <= 16'hde18;
      46: out3 <= 16'hdd6e;
      47: out3 <= 16'hdcc5;
      48: out3 <= 16'hdc1e;
      49: out3 <= 16'hdb78;
      50: out3 <= 16'hdad4;
      51: out3 <= 16'hda31;
      52: out3 <= 16'hd98f;
      53: out3 <= 16'hd8ef;
      54: out3 <= 16'hd851;
      55: out3 <= 16'hd7b4;
      56: out3 <= 16'hd719;
      57: out3 <= 16'hd67f;
      58: out3 <= 16'hd5e6;
      59: out3 <= 16'hd550;
      60: out3 <= 16'hd4bb;
      61: out3 <= 16'hd428;
      62: out3 <= 16'hd396;
      63: out3 <= 16'hd306;
      64: out3 <= 16'hd278;
      65: out3 <= 16'hd1eb;
      66: out3 <= 16'hd161;
      67: out3 <= 16'hd0d8;
      68: out3 <= 16'hd051;
      69: out3 <= 16'hcfcc;
      70: out3 <= 16'hcf48;
      71: out3 <= 16'hcec7;
      72: out3 <= 16'hce47;
      73: out3 <= 16'hcdca;
      74: out3 <= 16'hcd4e;
      75: out3 <= 16'hccd4;
      76: out3 <= 16'hcc5d;
      77: out3 <= 16'hcbe7;
      78: out3 <= 16'hcb73;
      79: out3 <= 16'hcb01;
      80: out3 <= 16'hca92;
      81: out3 <= 16'hca24;
      82: out3 <= 16'hc9b8;
      83: out3 <= 16'hc94f;
      84: out3 <= 16'hc8e8;
      85: out3 <= 16'hc882;
      86: out3 <= 16'hc81f;
      87: out3 <= 16'hc7be;
      88: out3 <= 16'hc75f;
      89: out3 <= 16'hc703;
      90: out3 <= 16'hc6a8;
      91: out3 <= 16'hc650;
      92: out3 <= 16'hc5fa;
      93: out3 <= 16'hc5a7;
      94: out3 <= 16'hc555;
      95: out3 <= 16'hc506;
      96: out3 <= 16'hc4b9;
      97: out3 <= 16'hc46e;
      98: out3 <= 16'hc426;
      99: out3 <= 16'hc3e0;
      100: out3 <= 16'hc39c;
      101: out3 <= 16'hc35b;
      102: out3 <= 16'hc31c;
      103: out3 <= 16'hc2df;
      104: out3 <= 16'hc2a5;
      105: out3 <= 16'hc26d;
      106: out3 <= 16'hc237;
      107: out3 <= 16'hc204;
      108: out3 <= 16'hc1d3;
      109: out3 <= 16'hc1a4;
      110: out3 <= 16'hc178;
      111: out3 <= 16'hc14f;
      112: out3 <= 16'hc128;
      113: out3 <= 16'hc103;
      114: out3 <= 16'hc0e0;
      115: out3 <= 16'hc0c0;
      116: out3 <= 16'hc0a3;
      117: out3 <= 16'hc088;
      118: out3 <= 16'hc06f;
      119: out3 <= 16'hc059;
      120: out3 <= 16'hc045;
      121: out3 <= 16'hc034;
      122: out3 <= 16'hc025;
      123: out3 <= 16'hc019;
      124: out3 <= 16'hc00f;
      125: out3 <= 16'hc008;
      126: out3 <= 16'hc003;
      127: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D12_104652(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hff37;
      2: out3 <= 16'hfe6e;
      3: out3 <= 16'hfda5;
      4: out3 <= 16'hfcdc;
      5: out3 <= 16'hfc13;
      6: out3 <= 16'hfb4b;
      7: out3 <= 16'hfa82;
      8: out3 <= 16'hf9ba;
      9: out3 <= 16'hf8f2;
      10: out3 <= 16'hf82a;
      11: out3 <= 16'hf763;
      12: out3 <= 16'hf69c;
      13: out3 <= 16'hf5d5;
      14: out3 <= 16'hf50f;
      15: out3 <= 16'hf449;
      16: out3 <= 16'hf384;
      17: out3 <= 16'hf2bf;
      18: out3 <= 16'hf1fa;
      19: out3 <= 16'hf136;
      20: out3 <= 16'hf073;
      21: out3 <= 16'hefb0;
      22: out3 <= 16'heeee;
      23: out3 <= 16'hee2d;
      24: out3 <= 16'hed6c;
      25: out3 <= 16'hecac;
      26: out3 <= 16'hebed;
      27: out3 <= 16'heb2e;
      28: out3 <= 16'hea70;
      29: out3 <= 16'he9b4;
      30: out3 <= 16'he8f7;
      31: out3 <= 16'he83c;
      32: out3 <= 16'he782;
      33: out3 <= 16'he6c9;
      34: out3 <= 16'he611;
      35: out3 <= 16'he559;
      36: out3 <= 16'he4a3;
      37: out3 <= 16'he3ee;
      38: out3 <= 16'he33a;
      39: out3 <= 16'he287;
      40: out3 <= 16'he1d5;
      41: out3 <= 16'he124;
      42: out3 <= 16'he074;
      43: out3 <= 16'hdfc6;
      44: out3 <= 16'hdf19;
      45: out3 <= 16'hde6d;
      46: out3 <= 16'hddc3;
      47: out3 <= 16'hdd19;
      48: out3 <= 16'hdc72;
      49: out3 <= 16'hdbcb;
      50: out3 <= 16'hdb26;
      51: out3 <= 16'hda82;
      52: out3 <= 16'hd9e0;
      53: out3 <= 16'hd93f;
      54: out3 <= 16'hd8a0;
      55: out3 <= 16'hd802;
      56: out3 <= 16'hd766;
      57: out3 <= 16'hd6cb;
      58: out3 <= 16'hd632;
      59: out3 <= 16'hd59b;
      60: out3 <= 16'hd505;
      61: out3 <= 16'hd471;
      62: out3 <= 16'hd3df;
      63: out3 <= 16'hd34e;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd231;
      66: out3 <= 16'hd1a6;
      67: out3 <= 16'hd11c;
      68: out3 <= 16'hd094;
      69: out3 <= 16'hd00e;
      70: out3 <= 16'hcf8a;
      71: out3 <= 16'hcf07;
      72: out3 <= 16'hce87;
      73: out3 <= 16'hce08;
      74: out3 <= 16'hcd8c;
      75: out3 <= 16'hcd11;
      76: out3 <= 16'hcc98;
      77: out3 <= 16'hcc21;
      78: out3 <= 16'hcbad;
      79: out3 <= 16'hcb3a;
      80: out3 <= 16'hcac9;
      81: out3 <= 16'hca5b;
      82: out3 <= 16'hc9ee;
      83: out3 <= 16'hc983;
      84: out3 <= 16'hc91b;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc850;
      87: out3 <= 16'hc7ee;
      88: out3 <= 16'hc78f;
      89: out3 <= 16'hc731;
      90: out3 <= 16'hc6d5;
      91: out3 <= 16'hc67c;
      92: out3 <= 16'hc625;
      93: out3 <= 16'hc5d0;
      94: out3 <= 16'hc57e;
      95: out3 <= 16'hc52d;
      96: out3 <= 16'hc4df;
      97: out3 <= 16'hc493;
      98: out3 <= 16'hc44a;
      99: out3 <= 16'hc403;
      100: out3 <= 16'hc3be;
      101: out3 <= 16'hc37b;
      102: out3 <= 16'hc33b;
      103: out3 <= 16'hc2fd;
      104: out3 <= 16'hc2c1;
      105: out3 <= 16'hc288;
      106: out3 <= 16'hc251;
      107: out3 <= 16'hc21d;
      108: out3 <= 16'hc1eb;
      109: out3 <= 16'hc1bb;
      110: out3 <= 16'hc18e;
      111: out3 <= 16'hc163;
      112: out3 <= 16'hc13b;
      113: out3 <= 16'hc115;
      114: out3 <= 16'hc0f1;
      115: out3 <= 16'hc0d0;
      116: out3 <= 16'hc0b1;
      117: out3 <= 16'hc095;
      118: out3 <= 16'hc07b;
      119: out3 <= 16'hc064;
      120: out3 <= 16'hc04f;
      121: out3 <= 16'hc03c;
      122: out3 <= 16'hc02c;
      123: out3 <= 16'hc01f;
      124: out3 <= 16'hc014;
      125: out3 <= 16'hc00b;
      126: out3 <= 16'hc005;
      127: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock101932(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i1_in;
   reg [6:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_107732(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a209;
   wire signed [15:0] a162;
   wire signed [15:0] a212;
   wire signed [15:0] a166;
   wire signed [15:0] a213;
   wire signed [15:0] a214;
   wire signed [15:0] a217;
   wire signed [15:0] a218;
   wire signed [15:0] a221;
   wire signed [15:0] a222;
   wire signed [15:0] a225;
   wire signed [15:0] a186;
   wire signed [15:0] a228;
   wire signed [15:0] a190;
   wire signed [15:0] a229;
   wire signed [15:0] a230;
   wire signed [15:0] a233;
   wire signed [15:0] a234;
   wire signed [15:0] a237;
   wire signed [15:0] a238;
   reg signed [15:0] tm681;
   reg signed [15:0] tm685;
   reg signed [15:0] tm697;
   reg signed [15:0] tm701;
   reg signed [15:0] tm713;
   reg signed [15:0] tm717;
   reg signed [15:0] tm729;
   reg signed [15:0] tm733;
   reg signed [15:0] tm745;
   reg signed [15:0] tm749;
   reg signed [15:0] tm761;
   reg signed [15:0] tm765;
   reg signed [15:0] tm777;
   reg signed [15:0] tm784;
   reg signed [15:0] tm791;
   reg signed [15:0] tm798;
   reg signed [15:0] tm682;
   reg signed [15:0] tm686;
   reg signed [15:0] tm698;
   reg signed [15:0] tm702;
   reg signed [15:0] tm714;
   reg signed [15:0] tm718;
   reg signed [15:0] tm730;
   reg signed [15:0] tm734;
   reg signed [15:0] tm746;
   reg signed [15:0] tm750;
   reg signed [15:0] tm762;
   reg signed [15:0] tm766;
   reg signed [15:0] tm778;
   reg signed [15:0] tm785;
   reg signed [15:0] tm792;
   reg signed [15:0] tm799;
   wire signed [15:0] tm50;
   wire signed [15:0] a167;
   wire signed [15:0] tm51;
   wire signed [15:0] a169;
   wire signed [15:0] tm52;
   wire signed [15:0] a173;
   wire signed [15:0] tm53;
   wire signed [15:0] a175;
   wire signed [15:0] tm54;
   wire signed [15:0] a179;
   wire signed [15:0] tm55;
   wire signed [15:0] a181;
   wire signed [15:0] tm58;
   wire signed [15:0] a191;
   wire signed [15:0] tm59;
   wire signed [15:0] a193;
   wire signed [15:0] tm60;
   wire signed [15:0] a197;
   wire signed [15:0] tm61;
   wire signed [15:0] a199;
   wire signed [15:0] tm62;
   wire signed [15:0] a203;
   wire signed [15:0] tm63;
   wire signed [15:0] a205;
   reg signed [15:0] tm683;
   reg signed [15:0] tm687;
   reg signed [15:0] tm699;
   reg signed [15:0] tm703;
   reg signed [15:0] tm715;
   reg signed [15:0] tm719;
   reg signed [15:0] tm731;
   reg signed [15:0] tm735;
   reg signed [15:0] tm747;
   reg signed [15:0] tm751;
   reg signed [15:0] tm763;
   reg signed [15:0] tm767;
   reg signed [15:0] tm779;
   reg signed [15:0] tm786;
   reg signed [15:0] tm793;
   reg signed [15:0] tm800;
   reg signed [15:0] tm164;
   reg signed [15:0] tm165;
   reg signed [15:0] tm168;
   reg signed [15:0] tm169;
   reg signed [15:0] tm172;
   reg signed [15:0] tm173;
   reg signed [15:0] tm180;
   reg signed [15:0] tm181;
   reg signed [15:0] tm184;
   reg signed [15:0] tm185;
   reg signed [15:0] tm188;
   reg signed [15:0] tm189;
   reg signed [15:0] tm684;
   reg signed [15:0] tm688;
   reg signed [15:0] tm700;
   reg signed [15:0] tm704;
   reg signed [15:0] tm716;
   reg signed [15:0] tm720;
   reg signed [15:0] tm732;
   reg signed [15:0] tm736;
   reg signed [15:0] tm748;
   reg signed [15:0] tm752;
   reg signed [15:0] tm764;
   reg signed [15:0] tm768;
   reg signed [15:0] tm780;
   reg signed [15:0] tm787;
   reg signed [15:0] tm794;
   reg signed [15:0] tm801;
   reg signed [15:0] tm781;
   reg signed [15:0] tm788;
   reg signed [15:0] tm795;
   reg signed [15:0] tm802;
   wire signed [15:0] a168;
   wire signed [15:0] a170;
   wire signed [15:0] a171;
   wire signed [15:0] a172;
   wire signed [15:0] a174;
   wire signed [15:0] a176;
   wire signed [15:0] a177;
   wire signed [15:0] a178;
   wire signed [15:0] a180;
   wire signed [15:0] a182;
   wire signed [15:0] a183;
   wire signed [15:0] a184;
   wire signed [15:0] a192;
   wire signed [15:0] a194;
   wire signed [15:0] a195;
   wire signed [15:0] a196;
   wire signed [15:0] a198;
   wire signed [15:0] a200;
   wire signed [15:0] a201;
   wire signed [15:0] a202;
   wire signed [15:0] a204;
   wire signed [15:0] a206;
   wire signed [15:0] a207;
   wire signed [15:0] a208;
   reg signed [15:0] tm782;
   reg signed [15:0] tm789;
   reg signed [15:0] tm796;
   reg signed [15:0] tm803;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm783;
   reg signed [15:0] tm790;
   reg signed [15:0] tm797;
   reg signed [15:0] tm804;


   assign a209 = X0;
   assign a162 = a209;
   assign a212 = X1;
   assign a166 = a212;
   assign a213 = X2;
   assign a214 = X3;
   assign a217 = X4;
   assign a218 = X5;
   assign a221 = X6;
   assign a222 = X7;
   assign a225 = X8;
   assign a186 = a225;
   assign a228 = X9;
   assign a190 = a228;
   assign a229 = X10;
   assign a230 = X11;
   assign a233 = X12;
   assign a234 = X13;
   assign a237 = X14;
   assign a238 = X15;
   assign a167 = tm50;
   assign a169 = tm51;
   assign a173 = tm52;
   assign a175 = tm53;
   assign a179 = tm54;
   assign a181 = tm55;
   assign a191 = tm58;
   assign a193 = tm59;
   assign a197 = tm60;
   assign a199 = tm61;
   assign a203 = tm62;
   assign a205 = tm63;
   assign Y0 = tm783;
   assign Y1 = tm790;
   assign Y8 = tm797;
   assign Y9 = tm804;

   D13_102832 instD13inst0_102832(.addr(i1[6:0]), .out(tm53), .clk(clk));

   D10_102962 instD10inst0_102962(.addr(i1[6:0]), .out(tm62), .clk(clk));

   D4_103092 instD4inst0_103092(.addr(i1[6:0]), .out(tm50), .clk(clk));

   D18_103222 instD18inst0_103222(.addr(i1[6:0]), .out(tm63), .clk(clk));

   D14_103352 instD14inst0_103352(.addr(i1[6:0]), .out(tm55), .clk(clk));

   D9_103482 instD9inst0_103482(.addr(i1[6:0]), .out(tm60), .clk(clk));

   D5_103612 instD5inst0_103612(.addr(i1[6:0]), .out(tm52), .clk(clk));

   D17_103742 instD17inst0_103742(.addr(i1[6:0]), .out(tm61), .clk(clk));

   D8_103872 instD8inst0_103872(.addr(i1[6:0]), .out(tm58), .clk(clk));

   D6_104132 instD6inst0_104132(.addr(i1[6:0]), .out(tm54), .clk(clk));

   D16_104262 instD16inst0_104262(.addr(i1[6:0]), .out(tm59), .clk(clk));

   D12_104652 instD12inst0_104652(.addr(i1[6:0]), .out(tm51), .clk(clk));

    multfix #(16, 2) m102031(.a(tm164), .b(tm684), .clk(clk), .q_sc(a168), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102053(.a(tm165), .b(tm688), .clk(clk), .q_sc(a170), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102071(.a(tm165), .b(tm684), .clk(clk), .q_sc(a171), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102082(.a(tm164), .b(tm688), .clk(clk), .q_sc(a172), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102111(.a(tm168), .b(tm700), .clk(clk), .q_sc(a174), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102133(.a(tm169), .b(tm704), .clk(clk), .q_sc(a176), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102151(.a(tm169), .b(tm700), .clk(clk), .q_sc(a177), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102162(.a(tm168), .b(tm704), .clk(clk), .q_sc(a178), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102191(.a(tm172), .b(tm716), .clk(clk), .q_sc(a180), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102213(.a(tm173), .b(tm720), .clk(clk), .q_sc(a182), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102231(.a(tm173), .b(tm716), .clk(clk), .q_sc(a183), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102242(.a(tm172), .b(tm720), .clk(clk), .q_sc(a184), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102351(.a(tm180), .b(tm732), .clk(clk), .q_sc(a192), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102373(.a(tm181), .b(tm736), .clk(clk), .q_sc(a194), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102391(.a(tm181), .b(tm732), .clk(clk), .q_sc(a195), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102402(.a(tm180), .b(tm736), .clk(clk), .q_sc(a196), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102431(.a(tm184), .b(tm748), .clk(clk), .q_sc(a198), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102453(.a(tm185), .b(tm752), .clk(clk), .q_sc(a200), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102471(.a(tm185), .b(tm748), .clk(clk), .q_sc(a201), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102482(.a(tm184), .b(tm752), .clk(clk), .q_sc(a202), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102511(.a(tm188), .b(tm764), .clk(clk), .q_sc(a204), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102533(.a(tm189), .b(tm768), .clk(clk), .q_sc(a206), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102551(.a(tm189), .b(tm764), .clk(clk), .q_sc(a207), .q_unsc(), .rst(reset));
    multfix #(16, 2) m102562(.a(tm188), .b(tm768), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub102060(.a(a168), .b(a170), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add102089(.a(a171), .b(a172), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub102140(.a(a174), .b(a176), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add102169(.a(a177), .b(a178), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub102220(.a(a180), .b(a182), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add102249(.a(a183), .b(a184), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub102380(.a(a192), .b(a194), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add102409(.a(a195), .b(a196), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub102460(.a(a198), .b(a200), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add102489(.a(a201), .b(a202), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub102540(.a(a204), .b(a206), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add102569(.a(a207), .b(a208), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm164 <= 0;
         tm684 <= 0;
         tm165 <= 0;
         tm688 <= 0;
         tm165 <= 0;
         tm684 <= 0;
         tm164 <= 0;
         tm688 <= 0;
         tm168 <= 0;
         tm700 <= 0;
         tm169 <= 0;
         tm704 <= 0;
         tm169 <= 0;
         tm700 <= 0;
         tm168 <= 0;
         tm704 <= 0;
         tm172 <= 0;
         tm716 <= 0;
         tm173 <= 0;
         tm720 <= 0;
         tm173 <= 0;
         tm716 <= 0;
         tm172 <= 0;
         tm720 <= 0;
         tm180 <= 0;
         tm732 <= 0;
         tm181 <= 0;
         tm736 <= 0;
         tm181 <= 0;
         tm732 <= 0;
         tm180 <= 0;
         tm736 <= 0;
         tm184 <= 0;
         tm748 <= 0;
         tm185 <= 0;
         tm752 <= 0;
         tm185 <= 0;
         tm748 <= 0;
         tm184 <= 0;
         tm752 <= 0;
         tm188 <= 0;
         tm764 <= 0;
         tm189 <= 0;
         tm768 <= 0;
         tm189 <= 0;
         tm764 <= 0;
         tm188 <= 0;
         tm768 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm681 <= a213;
         tm685 <= a214;
         tm697 <= a217;
         tm701 <= a218;
         tm713 <= a221;
         tm717 <= a222;
         tm729 <= a229;
         tm733 <= a230;
         tm745 <= a233;
         tm749 <= a234;
         tm761 <= a237;
         tm765 <= a238;
         tm777 <= a162;
         tm784 <= a166;
         tm791 <= a186;
         tm798 <= a190;
         tm682 <= tm681;
         tm686 <= tm685;
         tm698 <= tm697;
         tm702 <= tm701;
         tm714 <= tm713;
         tm718 <= tm717;
         tm730 <= tm729;
         tm734 <= tm733;
         tm746 <= tm745;
         tm750 <= tm749;
         tm762 <= tm761;
         tm766 <= tm765;
         tm778 <= tm777;
         tm785 <= tm784;
         tm792 <= tm791;
         tm799 <= tm798;
         tm683 <= tm682;
         tm687 <= tm686;
         tm699 <= tm698;
         tm703 <= tm702;
         tm715 <= tm714;
         tm719 <= tm718;
         tm731 <= tm730;
         tm735 <= tm734;
         tm747 <= tm746;
         tm751 <= tm750;
         tm763 <= tm762;
         tm767 <= tm766;
         tm779 <= tm778;
         tm786 <= tm785;
         tm793 <= tm792;
         tm800 <= tm799;
         tm164 <= a167;
         tm165 <= a169;
         tm168 <= a173;
         tm169 <= a175;
         tm172 <= a179;
         tm173 <= a181;
         tm180 <= a191;
         tm181 <= a193;
         tm184 <= a197;
         tm185 <= a199;
         tm188 <= a203;
         tm189 <= a205;
         tm684 <= tm683;
         tm688 <= tm687;
         tm700 <= tm699;
         tm704 <= tm703;
         tm716 <= tm715;
         tm720 <= tm719;
         tm732 <= tm731;
         tm736 <= tm735;
         tm748 <= tm747;
         tm752 <= tm751;
         tm764 <= tm763;
         tm768 <= tm767;
         tm780 <= tm779;
         tm787 <= tm786;
         tm794 <= tm793;
         tm801 <= tm800;
         tm781 <= tm780;
         tm788 <= tm787;
         tm795 <= tm794;
         tm802 <= tm801;
         tm782 <= tm781;
         tm789 <= tm788;
         tm796 <= tm795;
         tm803 <= tm802;
         tm783 <= tm782;
         tm790 <= tm789;
         tm797 <= tm796;
         tm804 <= tm803;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock104657(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_107735(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a33;
   wire signed [15:0] a34;
   wire signed [15:0] a35;
   wire signed [15:0] a36;
   wire signed [15:0] a41;
   wire signed [15:0] a42;
   wire signed [15:0] a43;
   wire signed [15:0] a44;
   wire signed [15:0] a49;
   wire signed [15:0] a50;
   wire signed [15:0] a51;
   wire signed [15:0] a52;
   wire signed [15:0] a57;
   wire signed [15:0] a58;
   wire signed [15:0] a59;
   wire signed [15:0] a60;
   wire signed [15:0] t209;
   wire signed [15:0] t210;
   wire signed [15:0] t211;
   wire signed [15:0] t212;
   wire signed [15:0] t213;
   wire signed [15:0] t214;
   wire signed [15:0] t215;
   wire signed [15:0] t216;
   wire signed [15:0] t225;
   wire signed [15:0] t226;
   wire signed [15:0] t227;
   wire signed [15:0] t228;
   wire signed [15:0] t229;
   wire signed [15:0] t230;
   wire signed [15:0] t231;
   wire signed [15:0] t232;
   wire signed [15:0] t217;
   wire signed [15:0] t218;
   wire signed [15:0] t219;
   wire signed [15:0] t220;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] t221;
   wire signed [15:0] t222;
   wire signed [15:0] t223;
   wire signed [15:0] t224;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t233;
   wire signed [15:0] t234;
   wire signed [15:0] t235;
   wire signed [15:0] t236;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] t237;
   wire signed [15:0] t238;
   wire signed [15:0] t239;
   wire signed [15:0] t240;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a33 = X0;
   assign a34 = X4;
   assign a35 = X1;
   assign a36 = X5;
   assign a41 = X2;
   assign a42 = X6;
   assign a43 = X3;
   assign a44 = X7;
   assign a49 = X8;
   assign a50 = X12;
   assign a51 = X9;
   assign a52 = X13;
   assign a57 = X10;
   assign a58 = X14;
   assign a59 = X11;
   assign a60 = X15;
   assign Y0 = t217;
   assign Y1 = t218;
   assign Y4 = t219;
   assign Y5 = t220;
   assign Y2 = t221;
   assign Y3 = t222;
   assign Y6 = t223;
   assign Y7 = t224;
   assign Y8 = t233;
   assign Y9 = t234;
   assign Y12 = t235;
   assign Y13 = t236;
   assign Y10 = t237;
   assign Y11 = t238;
   assign Y14 = t239;
   assign Y15 = t240;

    addfxp #(16, 1) add104669(.a(a33), .b(a34), .clk(clk), .q(t209));    // 0
    addfxp #(16, 1) add104684(.a(a35), .b(a36), .clk(clk), .q(t210));    // 0
    subfxp #(16, 1) sub104699(.a(a33), .b(a34), .clk(clk), .q(t211));    // 0
    subfxp #(16, 1) sub104714(.a(a35), .b(a36), .clk(clk), .q(t212));    // 0
    addfxp #(16, 1) add104729(.a(a41), .b(a42), .clk(clk), .q(t213));    // 0
    addfxp #(16, 1) add104744(.a(a43), .b(a44), .clk(clk), .q(t214));    // 0
    subfxp #(16, 1) sub104759(.a(a41), .b(a42), .clk(clk), .q(t215));    // 0
    subfxp #(16, 1) sub104774(.a(a43), .b(a44), .clk(clk), .q(t216));    // 0
    addfxp #(16, 1) add104877(.a(a49), .b(a50), .clk(clk), .q(t225));    // 0
    addfxp #(16, 1) add104892(.a(a51), .b(a52), .clk(clk), .q(t226));    // 0
    subfxp #(16, 1) sub104907(.a(a49), .b(a50), .clk(clk), .q(t227));    // 0
    subfxp #(16, 1) sub104922(.a(a51), .b(a52), .clk(clk), .q(t228));    // 0
    addfxp #(16, 1) add104937(.a(a57), .b(a58), .clk(clk), .q(t229));    // 0
    addfxp #(16, 1) add104952(.a(a59), .b(a60), .clk(clk), .q(t230));    // 0
    subfxp #(16, 1) sub104967(.a(a57), .b(a58), .clk(clk), .q(t231));    // 0
    subfxp #(16, 1) sub104982(.a(a59), .b(a60), .clk(clk), .q(t232));    // 0
    addfxp #(16, 1) add104781(.a(t209), .b(t213), .clk(clk), .q(t217));    // 1
    addfxp #(16, 1) add104788(.a(t210), .b(t214), .clk(clk), .q(t218));    // 1
    subfxp #(16, 1) sub104795(.a(t209), .b(t213), .clk(clk), .q(t219));    // 1
    subfxp #(16, 1) sub104802(.a(t210), .b(t214), .clk(clk), .q(t220));    // 1
    addfxp #(16, 1) add104825(.a(t211), .b(t216), .clk(clk), .q(t221));    // 1
    subfxp #(16, 1) sub104832(.a(t212), .b(t215), .clk(clk), .q(t222));    // 1
    subfxp #(16, 1) sub104839(.a(t211), .b(t216), .clk(clk), .q(t223));    // 1
    addfxp #(16, 1) add104846(.a(t212), .b(t215), .clk(clk), .q(t224));    // 1
    addfxp #(16, 1) add104989(.a(t225), .b(t229), .clk(clk), .q(t233));    // 1
    addfxp #(16, 1) add104996(.a(t226), .b(t230), .clk(clk), .q(t234));    // 1
    subfxp #(16, 1) sub105003(.a(t225), .b(t229), .clk(clk), .q(t235));    // 1
    subfxp #(16, 1) sub105010(.a(t226), .b(t230), .clk(clk), .q(t236));    // 1
    addfxp #(16, 1) add105033(.a(t227), .b(t232), .clk(clk), .q(t237));    // 1
    subfxp #(16, 1) sub105040(.a(t228), .b(t231), .clk(clk), .q(t238));    // 1
    subfxp #(16, 1) sub105047(.a(t227), .b(t232), .clk(clk), .q(t239));    // 1
    addfxp #(16, 1) add105054(.a(t228), .b(t231), .clk(clk), .q(t240));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 101
// Gap: 128
module rc105078(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm105076 instPerm107736(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 101
// Gap: 128
module perm105076(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[2];
   assign inBank0[1] = addr0[3] ^ addr0[0];
   assign inBank0[2] = addr0[4] ^ addr0[1];
   assign inAddr0[0] = addr0[5];
   assign inAddr0[1] = addr0[6];
   assign inAddr0[2] = addr0[7];
   assign inAddr0[3] = addr0[8];
   assign inAddr0[4] = addr0[9];
   assign inAddr0[5] = addr0[0];
   assign inAddr0[6] = addr0[1];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[8] ^ addr0b[1];
   assign outBank0[2] = addr0b[9] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[8] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[9] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[2];
   assign inBank1[1] = addr1[3] ^ addr1[0];
   assign inBank1[2] = addr1[4] ^ addr1[1];
   assign inAddr1[0] = addr1[5];
   assign inAddr1[1] = addr1[6];
   assign inAddr1[2] = addr1[7];
   assign inAddr1[3] = addr1[8];
   assign inAddr1[4] = addr1[9];
   assign inAddr1[5] = addr1[0];
   assign inAddr1[6] = addr1[1];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[8] ^ addr1b[1];
   assign outBank1[2] = addr1b[9] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[8] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[9] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[2];
   assign inBank2[1] = addr2[3] ^ addr2[0];
   assign inBank2[2] = addr2[4] ^ addr2[1];
   assign inAddr2[0] = addr2[5];
   assign inAddr2[1] = addr2[6];
   assign inAddr2[2] = addr2[7];
   assign inAddr2[3] = addr2[8];
   assign inAddr2[4] = addr2[9];
   assign inAddr2[5] = addr2[0];
   assign inAddr2[6] = addr2[1];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[8] ^ addr2b[1];
   assign outBank2[2] = addr2b[9] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[8] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[9] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[2];
   assign inBank3[1] = addr3[3] ^ addr3[0];
   assign inBank3[2] = addr3[4] ^ addr3[1];
   assign inAddr3[0] = addr3[5];
   assign inAddr3[1] = addr3[6];
   assign inAddr3[2] = addr3[7];
   assign inAddr3[3] = addr3[8];
   assign inAddr3[4] = addr3[9];
   assign inAddr3[5] = addr3[0];
   assign inAddr3[6] = addr3[1];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[8] ^ addr3b[1];
   assign outBank3[2] = addr3b[9] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[8] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[9] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[2];
   assign inBank4[1] = addr4[3] ^ addr4[0];
   assign inBank4[2] = addr4[4] ^ addr4[1];
   assign inAddr4[0] = addr4[5];
   assign inAddr4[1] = addr4[6];
   assign inAddr4[2] = addr4[7];
   assign inAddr4[3] = addr4[8];
   assign inAddr4[4] = addr4[9];
   assign inAddr4[5] = addr4[0];
   assign inAddr4[6] = addr4[1];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[8] ^ addr4b[1];
   assign outBank4[2] = addr4b[9] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[8] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[9] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[2];
   assign inBank5[1] = addr5[3] ^ addr5[0];
   assign inBank5[2] = addr5[4] ^ addr5[1];
   assign inAddr5[0] = addr5[5];
   assign inAddr5[1] = addr5[6];
   assign inAddr5[2] = addr5[7];
   assign inAddr5[3] = addr5[8];
   assign inAddr5[4] = addr5[9];
   assign inAddr5[5] = addr5[0];
   assign inAddr5[6] = addr5[1];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[8] ^ addr5b[1];
   assign outBank5[2] = addr5b[9] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[8] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[9] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[2];
   assign inBank6[1] = addr6[3] ^ addr6[0];
   assign inBank6[2] = addr6[4] ^ addr6[1];
   assign inAddr6[0] = addr6[5];
   assign inAddr6[1] = addr6[6];
   assign inAddr6[2] = addr6[7];
   assign inAddr6[3] = addr6[8];
   assign inAddr6[4] = addr6[9];
   assign inAddr6[5] = addr6[0];
   assign inAddr6[6] = addr6[1];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[8] ^ addr6b[1];
   assign outBank6[2] = addr6b[9] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[8] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[9] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[2];
   assign inBank7[1] = addr7[3] ^ addr7[0];
   assign inBank7[2] = addr7[4] ^ addr7[1];
   assign inAddr7[0] = addr7[5];
   assign inAddr7[1] = addr7[6];
   assign inAddr7[2] = addr7[7];
   assign inAddr7[3] = addr7[8];
   assign inAddr7[4] = addr7[9];
   assign inAddr7[5] = addr7[0];
   assign inAddr7[6] = addr7[1];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[8] ^ addr7b[1];
   assign outBank7[2] = addr7b[9] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[8] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[9] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(97, 7) nextReg_107741(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_107744(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_105076 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 96)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 99)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 96) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 96)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_3 = {x5, inAddr5};
    assign w_0_5 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[1];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[0];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray1024_105076(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_107749(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule


						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule

