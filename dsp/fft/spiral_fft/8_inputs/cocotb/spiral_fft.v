/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 128 cycles
//   Latency: 935 cycles

//   Resources required:
//     96 multipliers (16 x 16 bit)
//     208 adders (16 x 16 bit)
//     3 RAMs (5 words, 7 bits per word)
//     1 RAMs (5 words, 5 bits per word)
//     16 RAMs (16 words, 32 bits per word)
//     16 RAMs (64 words, 32 bits per word)
//     48 RAMs (256 words, 32 bits per word)
//     48 ROMs (128 words, 7 bits per word)
//     12 ROMs (32 words, 16 bits per word)
//     12 ROMs (8 words, 16 bits per word)
//     16 ROMs (32 words, 5 bits per word)
//     12 ROMs (128 words, 16 bits per word)

// Generated on Mon Jun 13 10:10:41 EDT 2022

// Latency: 935 clock cycles
// Throughput: 1 transform every 128 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 128 cycles.  This means that
// 128 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 935 cycles.  This means that
// the 'next_out' will be asserted 935 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [15:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 1024 complex data points enter the system over 128 cycles
      for (j=0; j < 127; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 127;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 126)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 127; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 2048 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 127;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 2048 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule

// Latency: 935
// Gap: 128
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire [15:0] t6_8;
   wire [15:0] t6_9;
   wire [15:0] t6_10;
   wire [15:0] t6_11;
   wire [15:0] t6_12;
   wire [15:0] t6_13;
   wire [15:0] t6_14;
   wire [15:0] t6_15;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire [15:0] t7_8;
   wire [15:0] t7_9;
   wire [15:0] t7_10;
   wire [15:0] t7_11;
   wire [15:0] t7_12;
   wire [15:0] t7_13;
   wire [15:0] t7_14;
   wire [15:0] t7_15;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire [15:0] t8_8;
   wire [15:0] t8_9;
   wire [15:0] t8_10;
   wire [15:0] t8_11;
   wire [15:0] t8_12;
   wire [15:0] t8_13;
   wire [15:0] t8_14;
   wire [15:0] t8_15;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire [15:0] t9_8;
   wire [15:0] t9_9;
   wire [15:0] t9_10;
   wire [15:0] t9_11;
   wire [15:0] t9_12;
   wire [15:0] t9_13;
   wire [15:0] t9_14;
   wire [15:0] t9_15;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire [15:0] t10_8;
   wire [15:0] t10_9;
   wire [15:0] t10_10;
   wire [15:0] t10_11;
   wire [15:0] t10_12;
   wire [15:0] t10_13;
   wire [15:0] t10_14;
   wire [15:0] t10_15;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire [15:0] t11_8;
   wire [15:0] t11_9;
   wire [15:0] t11_10;
   wire [15:0] t11_11;
   wire [15:0] t11_12;
   wire [15:0] t11_13;
   wire [15:0] t11_14;
   wire [15:0] t11_15;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire [15:0] t12_8;
   wire [15:0] t12_9;
   wire [15:0] t12_10;
   wire [15:0] t12_11;
   wire [15:0] t12_12;
   wire [15:0] t12_13;
   wire [15:0] t12_14;
   wire [15:0] t12_15;
   wire next_12;
   wire [15:0] t13_0;
   wire [15:0] t13_1;
   wire [15:0] t13_2;
   wire [15:0] t13_3;
   wire [15:0] t13_4;
   wire [15:0] t13_5;
   wire [15:0] t13_6;
   wire [15:0] t13_7;
   wire [15:0] t13_8;
   wire [15:0] t13_9;
   wire [15:0] t13_10;
   wire [15:0] t13_11;
   wire [15:0] t13_12;
   wire [15:0] t13_13;
   wire [15:0] t13_14;
   wire [15:0] t13_15;
   wire next_13;
   wire [15:0] t14_0;
   wire [15:0] t14_1;
   wire [15:0] t14_2;
   wire [15:0] t14_3;
   wire [15:0] t14_4;
   wire [15:0] t14_5;
   wire [15:0] t14_6;
   wire [15:0] t14_7;
   wire [15:0] t14_8;
   wire [15:0] t14_9;
   wire [15:0] t14_10;
   wire [15:0] t14_11;
   wire [15:0] t14_12;
   wire [15:0] t14_13;
   wire [15:0] t14_14;
   wire [15:0] t14_15;
   wire next_14;
   wire [15:0] t15_0;
   wire [15:0] t15_1;
   wire [15:0] t15_2;
   wire [15:0] t15_3;
   wire [15:0] t15_4;
   wire [15:0] t15_5;
   wire [15:0] t15_6;
   wire [15:0] t15_7;
   wire [15:0] t15_8;
   wire [15:0] t15_9;
   wire [15:0] t15_10;
   wire [15:0] t15_11;
   wire [15:0] t15_12;
   wire [15:0] t15_13;
   wire [15:0] t15_14;
   wire [15:0] t15_15;
   wire next_15;
   assign t0_0 = X0;
   assign Y0 = t15_0;
   assign t0_1 = X1;
   assign Y1 = t15_1;
   assign t0_2 = X2;
   assign Y2 = t15_2;
   assign t0_3 = X3;
   assign Y3 = t15_3;
   assign t0_4 = X4;
   assign Y4 = t15_4;
   assign t0_5 = X5;
   assign Y5 = t15_5;
   assign t0_6 = X6;
   assign Y6 = t15_6;
   assign t0_7 = X7;
   assign Y7 = t15_7;
   assign t0_8 = X8;
   assign Y8 = t15_8;
   assign t0_9 = X9;
   assign Y9 = t15_9;
   assign t0_10 = X10;
   assign Y10 = t15_10;
   assign t0_11 = X11;
   assign Y11 = t15_11;
   assign t0_12 = X12;
   assign Y12 = t15_12;
   assign t0_13 = X13;
   assign Y13 = t15_13;
   assign t0_14 = X14;
   assign Y14 = t15_14;
   assign t0_15 = X15;
   assign Y15 = t15_15;
   assign next_0 = next;
   assign next_out = next_15;

// latency=262, gap=128
   rc40205 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=3, gap=128
   codeBlock40207 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=10, gap=128
   rc40629 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15));


// latency=8, gap=128
   DirSum_41338 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7),
       .X8(t3_8), .Y8(t4_8),
       .X9(t3_9), .Y9(t4_9),
       .X10(t3_10), .Y10(t4_10),
       .X11(t3_11), .Y11(t4_11),
       .X12(t3_12), .Y12(t4_12),
       .X13(t3_13), .Y13(t4_13),
       .X14(t3_14), .Y14(t4_14),
       .X15(t3_15), .Y15(t4_15));


// latency=3, gap=128
   codeBlock41341 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7),
       .X8_in(t4_8), .Y8(t5_8),
       .X9_in(t4_9), .Y9(t5_9),
       .X10_in(t4_10), .Y10(t5_10),
       .X11_in(t4_11), .Y11(t5_11),
       .X12_in(t4_12), .Y12(t5_12),
       .X13_in(t4_13), .Y13(t5_13),
       .X14_in(t4_14), .Y14(t5_14),
       .X15_in(t4_15), .Y15(t5_15));


// latency=22, gap=128
   rc41763 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7),
    .X8(t5_8), .Y8(t6_8),
    .X9(t5_9), .Y9(t6_9),
    .X10(t5_10), .Y10(t6_10),
    .X11(t5_11), .Y11(t6_11),
    .X12(t5_12), .Y12(t6_12),
    .X13(t5_13), .Y13(t6_13),
    .X14(t5_14), .Y14(t6_14),
    .X15(t5_15), .Y15(t6_15));


// latency=8, gap=128
   DirSum_42568 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7),
       .X8(t6_8), .Y8(t7_8),
       .X9(t6_9), .Y9(t7_9),
       .X10(t6_10), .Y10(t7_10),
       .X11(t6_11), .Y11(t7_11),
       .X12(t6_12), .Y12(t7_12),
       .X13(t6_13), .Y13(t7_13),
       .X14(t6_14), .Y14(t7_14),
       .X15(t6_15), .Y15(t7_15));


// latency=3, gap=128
   codeBlock42571 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7),
       .X8_in(t7_8), .Y8(t8_8),
       .X9_in(t7_9), .Y9(t8_9),
       .X10_in(t7_10), .Y10(t8_10),
       .X11_in(t7_11), .Y11(t8_11),
       .X12_in(t7_12), .Y12(t8_12),
       .X13_in(t7_13), .Y13(t8_13),
       .X14_in(t7_14), .Y14(t8_14),
       .X15_in(t7_15), .Y15(t8_15));


// latency=70, gap=128
   rc42993 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7),
    .X8(t8_8), .Y8(t9_8),
    .X9(t8_9), .Y9(t9_9),
    .X10(t8_10), .Y10(t9_10),
    .X11(t8_11), .Y11(t9_11),
    .X12(t8_12), .Y12(t9_12),
    .X13(t8_13), .Y13(t9_13),
    .X14(t8_14), .Y14(t9_14),
    .X15(t8_15), .Y15(t9_15));


// latency=8, gap=128
   DirSum_44182 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3),
       .X4(t9_4), .Y4(t10_4),
       .X5(t9_5), .Y5(t10_5),
       .X6(t9_6), .Y6(t10_6),
       .X7(t9_7), .Y7(t10_7),
       .X8(t9_8), .Y8(t10_8),
       .X9(t9_9), .Y9(t10_9),
       .X10(t9_10), .Y10(t10_10),
       .X11(t9_11), .Y11(t10_11),
       .X12(t9_12), .Y12(t10_12),
       .X13(t9_13), .Y13(t10_13),
       .X14(t9_14), .Y14(t10_14),
       .X15(t9_15), .Y15(t10_15));


// latency=3, gap=128
   codeBlock44185 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3),
       .X4_in(t10_4), .Y4(t11_4),
       .X5_in(t10_5), .Y5(t11_5),
       .X6_in(t10_6), .Y6(t11_6),
       .X7_in(t10_7), .Y7(t11_7),
       .X8_in(t10_8), .Y8(t11_8),
       .X9_in(t10_9), .Y9(t11_9),
       .X10_in(t10_10), .Y10(t11_10),
       .X11_in(t10_11), .Y11(t11_11),
       .X12_in(t10_12), .Y12(t11_12),
       .X13_in(t10_13), .Y13(t11_13),
       .X14_in(t10_14), .Y14(t11_14),
       .X15_in(t10_15), .Y15(t11_15));


// latency=262, gap=128
   rc44607 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3),
    .X4(t11_4), .Y4(t12_4),
    .X5(t11_5), .Y5(t12_5),
    .X6(t11_6), .Y6(t12_6),
    .X7(t11_7), .Y7(t12_7),
    .X8(t11_8), .Y8(t12_8),
    .X9(t11_9), .Y9(t12_9),
    .X10(t11_10), .Y10(t12_10),
    .X11(t11_11), .Y11(t12_11),
    .X12(t11_12), .Y12(t12_12),
    .X13(t11_13), .Y13(t12_13),
    .X14(t11_14), .Y14(t12_14),
    .X15(t11_15), .Y15(t12_15));


// latency=8, gap=128
   DirSum_47331 stage12(.next(next_12), .clk(clk), .reset(reset), .next_out(next_13),
       .X0(t12_0), .Y0(t13_0),
       .X1(t12_1), .Y1(t13_1),
       .X2(t12_2), .Y2(t13_2),
       .X3(t12_3), .Y3(t13_3),
       .X4(t12_4), .Y4(t13_4),
       .X5(t12_5), .Y5(t13_5),
       .X6(t12_6), .Y6(t13_6),
       .X7(t12_7), .Y7(t13_7),
       .X8(t12_8), .Y8(t13_8),
       .X9(t12_9), .Y9(t13_9),
       .X10(t12_10), .Y10(t13_10),
       .X11(t12_11), .Y11(t13_11),
       .X12(t12_12), .Y12(t13_12),
       .X13(t12_13), .Y13(t13_13),
       .X14(t12_14), .Y14(t13_14),
       .X15(t12_15), .Y15(t13_15));


// latency=3, gap=128
   codeBlock47334 stage13(.clk(clk), .reset(reset), .next_in(next_13), .next_out(next_14),
       .X0_in(t13_0), .Y0(t14_0),
       .X1_in(t13_1), .Y1(t14_1),
       .X2_in(t13_2), .Y2(t14_2),
       .X3_in(t13_3), .Y3(t14_3),
       .X4_in(t13_4), .Y4(t14_4),
       .X5_in(t13_5), .Y5(t14_5),
       .X6_in(t13_6), .Y6(t14_6),
       .X7_in(t13_7), .Y7(t14_7),
       .X8_in(t13_8), .Y8(t14_8),
       .X9_in(t13_9), .Y9(t14_9),
       .X10_in(t13_10), .Y10(t14_10),
       .X11_in(t13_11), .Y11(t14_11),
       .X12_in(t13_12), .Y12(t14_12),
       .X13_in(t13_13), .Y13(t14_13),
       .X14_in(t13_14), .Y14(t14_14),
       .X15_in(t13_15), .Y15(t14_15));


// latency=262, gap=128
   rc47756 stage14(.clk(clk), .reset(reset), .next(next_14), .next_out(next_15),
    .X0(t14_0), .Y0(t15_0),
    .X1(t14_1), .Y1(t15_1),
    .X2(t14_2), .Y2(t15_2),
    .X3(t14_3), .Y3(t15_3),
    .X4(t14_4), .Y4(t15_4),
    .X5(t14_5), .Y5(t15_5),
    .X6(t14_6), .Y6(t15_6),
    .X7(t14_7), .Y7(t15_7),
    .X8(t14_8), .Y8(t15_8),
    .X9(t14_9), .Y9(t15_9),
    .X10(t14_10), .Y10(t15_10),
    .X11(t14_11), .Y11(t15_11),
    .X12(t14_12), .Y12(t15_12),
    .X13(t14_13), .Y13(t15_13),
    .X14(t14_14), .Y14(t15_14),
    .X15(t14_15), .Y15(t15_15));


endmodule

// Latency: 262
// Gap: 128
module rc40205(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm40203 instPerm51045(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet40203(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [11:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 12'b111111111111;
        7'd1: control <= 12'b111111111111;
        7'd2: control <= 12'b111111111111;
        7'd3: control <= 12'b111111111111;
        7'd4: control <= 12'b111111111111;
        7'd5: control <= 12'b111111111111;
        7'd6: control <= 12'b111111111111;
        7'd7: control <= 12'b111111111111;
        7'd8: control <= 12'b111111111111;
        7'd9: control <= 12'b111111111111;
        7'd10: control <= 12'b111111111111;
        7'd11: control <= 12'b111111111111;
        7'd12: control <= 12'b111111111111;
        7'd13: control <= 12'b111111111111;
        7'd14: control <= 12'b111111111111;
        7'd15: control <= 12'b111111111111;
        7'd16: control <= 12'b000011111111;
        7'd17: control <= 12'b000011111111;
        7'd18: control <= 12'b000011111111;
        7'd19: control <= 12'b000011111111;
        7'd20: control <= 12'b000011111111;
        7'd21: control <= 12'b000011111111;
        7'd22: control <= 12'b000011111111;
        7'd23: control <= 12'b000011111111;
        7'd24: control <= 12'b000011111111;
        7'd25: control <= 12'b000011111111;
        7'd26: control <= 12'b000011111111;
        7'd27: control <= 12'b000011111111;
        7'd28: control <= 12'b000011111111;
        7'd29: control <= 12'b000011111111;
        7'd30: control <= 12'b000011111111;
        7'd31: control <= 12'b000011111111;
        7'd32: control <= 12'b111100001111;
        7'd33: control <= 12'b111100001111;
        7'd34: control <= 12'b111100001111;
        7'd35: control <= 12'b111100001111;
        7'd36: control <= 12'b111100001111;
        7'd37: control <= 12'b111100001111;
        7'd38: control <= 12'b111100001111;
        7'd39: control <= 12'b111100001111;
        7'd40: control <= 12'b111100001111;
        7'd41: control <= 12'b111100001111;
        7'd42: control <= 12'b111100001111;
        7'd43: control <= 12'b111100001111;
        7'd44: control <= 12'b111100001111;
        7'd45: control <= 12'b111100001111;
        7'd46: control <= 12'b111100001111;
        7'd47: control <= 12'b111100001111;
        7'd48: control <= 12'b000000001111;
        7'd49: control <= 12'b000000001111;
        7'd50: control <= 12'b000000001111;
        7'd51: control <= 12'b000000001111;
        7'd52: control <= 12'b000000001111;
        7'd53: control <= 12'b000000001111;
        7'd54: control <= 12'b000000001111;
        7'd55: control <= 12'b000000001111;
        7'd56: control <= 12'b000000001111;
        7'd57: control <= 12'b000000001111;
        7'd58: control <= 12'b000000001111;
        7'd59: control <= 12'b000000001111;
        7'd60: control <= 12'b000000001111;
        7'd61: control <= 12'b000000001111;
        7'd62: control <= 12'b000000001111;
        7'd63: control <= 12'b000000001111;
        7'd64: control <= 12'b111111110000;
        7'd65: control <= 12'b111111110000;
        7'd66: control <= 12'b111111110000;
        7'd67: control <= 12'b111111110000;
        7'd68: control <= 12'b111111110000;
        7'd69: control <= 12'b111111110000;
        7'd70: control <= 12'b111111110000;
        7'd71: control <= 12'b111111110000;
        7'd72: control <= 12'b111111110000;
        7'd73: control <= 12'b111111110000;
        7'd74: control <= 12'b111111110000;
        7'd75: control <= 12'b111111110000;
        7'd76: control <= 12'b111111110000;
        7'd77: control <= 12'b111111110000;
        7'd78: control <= 12'b111111110000;
        7'd79: control <= 12'b111111110000;
        7'd80: control <= 12'b000011110000;
        7'd81: control <= 12'b000011110000;
        7'd82: control <= 12'b000011110000;
        7'd83: control <= 12'b000011110000;
        7'd84: control <= 12'b000011110000;
        7'd85: control <= 12'b000011110000;
        7'd86: control <= 12'b000011110000;
        7'd87: control <= 12'b000011110000;
        7'd88: control <= 12'b000011110000;
        7'd89: control <= 12'b000011110000;
        7'd90: control <= 12'b000011110000;
        7'd91: control <= 12'b000011110000;
        7'd92: control <= 12'b000011110000;
        7'd93: control <= 12'b000011110000;
        7'd94: control <= 12'b000011110000;
        7'd95: control <= 12'b000011110000;
        7'd96: control <= 12'b111100000000;
        7'd97: control <= 12'b111100000000;
        7'd98: control <= 12'b111100000000;
        7'd99: control <= 12'b111100000000;
        7'd100: control <= 12'b111100000000;
        7'd101: control <= 12'b111100000000;
        7'd102: control <= 12'b111100000000;
        7'd103: control <= 12'b111100000000;
        7'd104: control <= 12'b111100000000;
        7'd105: control <= 12'b111100000000;
        7'd106: control <= 12'b111100000000;
        7'd107: control <= 12'b111100000000;
        7'd108: control <= 12'b111100000000;
        7'd109: control <= 12'b111100000000;
        7'd110: control <= 12'b111100000000;
        7'd111: control <= 12'b111100000000;
        7'd112: control <= 12'b000000000000;
        7'd113: control <= 12'b000000000000;
        7'd114: control <= 12'b000000000000;
        7'd115: control <= 12'b000000000000;
        7'd116: control <= 12'b000000000000;
        7'd117: control <= 12'b000000000000;
        7'd118: control <= 12'b000000000000;
        7'd119: control <= 12'b000000000000;
        7'd120: control <= 12'b000000000000;
        7'd121: control <= 12'b000000000000;
        7'd122: control <= 12'b000000000000;
        7'd123: control <= 12'b000000000000;
        7'd124: control <= 12'b000000000000;
        7'd125: control <= 12'b000000000000;
        7'd126: control <= 12'b000000000000;
        7'd127: control <= 12'b000000000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [11:0] control0;
   reg [11:0] control1;
   reg [11:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[11] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[11] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[10] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[10] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[9] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[9] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[8] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[8] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[7] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[7] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[6] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[6] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[5] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[5] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[4] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[4] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= (control2[3] == 0) ? t8_0 : t8_1;
         t9_1 <= (control2[3] == 0) ? t8_1 : t8_0;
         t9_2 <= (control2[2] == 0) ? t8_2 : t8_3;
         t9_3 <= (control2[2] == 0) ? t8_3 : t8_2;
         t9_4 <= (control2[1] == 0) ? t8_4 : t8_5;
         t9_5 <= (control2[1] == 0) ? t8_5 : t8_4;
         t9_6 <= (control2[0] == 0) ? t8_6 : t8_7;
         t9_7 <= (control2[0] == 0) ? t8_7 : t8_6;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 262
// Gap: 128
module perm40203(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm0;
   assign tm0 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_51050(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51051(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(127, 7) nextReg_51062(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_51063(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_51066(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51067(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_51070(.X(tm0), .Y(tm0_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_51073(.X(tm0_d), .Y(tm0_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 7) shiftFIFO_51078(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 104;
	     {1'd0,  7'd1}: s1rd0 <= 120;
	     {1'd0,  7'd2}: s1rd0 <= 106;
	     {1'd0,  7'd3}: s1rd0 <= 122;
	     {1'd0,  7'd4}: s1rd0 <= 108;
	     {1'd0,  7'd5}: s1rd0 <= 124;
	     {1'd0,  7'd6}: s1rd0 <= 110;
	     {1'd0,  7'd7}: s1rd0 <= 126;
	     {1'd0,  7'd8}: s1rd0 <= 105;
	     {1'd0,  7'd9}: s1rd0 <= 121;
	     {1'd0,  7'd10}: s1rd0 <= 107;
	     {1'd0,  7'd11}: s1rd0 <= 123;
	     {1'd0,  7'd12}: s1rd0 <= 109;
	     {1'd0,  7'd13}: s1rd0 <= 125;
	     {1'd0,  7'd14}: s1rd0 <= 111;
	     {1'd0,  7'd15}: s1rd0 <= 127;
	     {1'd0,  7'd16}: s1rd0 <= 72;
	     {1'd0,  7'd17}: s1rd0 <= 88;
	     {1'd0,  7'd18}: s1rd0 <= 74;
	     {1'd0,  7'd19}: s1rd0 <= 90;
	     {1'd0,  7'd20}: s1rd0 <= 76;
	     {1'd0,  7'd21}: s1rd0 <= 92;
	     {1'd0,  7'd22}: s1rd0 <= 78;
	     {1'd0,  7'd23}: s1rd0 <= 94;
	     {1'd0,  7'd24}: s1rd0 <= 73;
	     {1'd0,  7'd25}: s1rd0 <= 89;
	     {1'd0,  7'd26}: s1rd0 <= 75;
	     {1'd0,  7'd27}: s1rd0 <= 91;
	     {1'd0,  7'd28}: s1rd0 <= 77;
	     {1'd0,  7'd29}: s1rd0 <= 93;
	     {1'd0,  7'd30}: s1rd0 <= 79;
	     {1'd0,  7'd31}: s1rd0 <= 95;
	     {1'd0,  7'd32}: s1rd0 <= 40;
	     {1'd0,  7'd33}: s1rd0 <= 56;
	     {1'd0,  7'd34}: s1rd0 <= 42;
	     {1'd0,  7'd35}: s1rd0 <= 58;
	     {1'd0,  7'd36}: s1rd0 <= 44;
	     {1'd0,  7'd37}: s1rd0 <= 60;
	     {1'd0,  7'd38}: s1rd0 <= 46;
	     {1'd0,  7'd39}: s1rd0 <= 62;
	     {1'd0,  7'd40}: s1rd0 <= 41;
	     {1'd0,  7'd41}: s1rd0 <= 57;
	     {1'd0,  7'd42}: s1rd0 <= 43;
	     {1'd0,  7'd43}: s1rd0 <= 59;
	     {1'd0,  7'd44}: s1rd0 <= 45;
	     {1'd0,  7'd45}: s1rd0 <= 61;
	     {1'd0,  7'd46}: s1rd0 <= 47;
	     {1'd0,  7'd47}: s1rd0 <= 63;
	     {1'd0,  7'd48}: s1rd0 <= 8;
	     {1'd0,  7'd49}: s1rd0 <= 24;
	     {1'd0,  7'd50}: s1rd0 <= 10;
	     {1'd0,  7'd51}: s1rd0 <= 26;
	     {1'd0,  7'd52}: s1rd0 <= 12;
	     {1'd0,  7'd53}: s1rd0 <= 28;
	     {1'd0,  7'd54}: s1rd0 <= 14;
	     {1'd0,  7'd55}: s1rd0 <= 30;
	     {1'd0,  7'd56}: s1rd0 <= 9;
	     {1'd0,  7'd57}: s1rd0 <= 25;
	     {1'd0,  7'd58}: s1rd0 <= 11;
	     {1'd0,  7'd59}: s1rd0 <= 27;
	     {1'd0,  7'd60}: s1rd0 <= 13;
	     {1'd0,  7'd61}: s1rd0 <= 29;
	     {1'd0,  7'd62}: s1rd0 <= 15;
	     {1'd0,  7'd63}: s1rd0 <= 31;
	     {1'd0,  7'd64}: s1rd0 <= 96;
	     {1'd0,  7'd65}: s1rd0 <= 112;
	     {1'd0,  7'd66}: s1rd0 <= 98;
	     {1'd0,  7'd67}: s1rd0 <= 114;
	     {1'd0,  7'd68}: s1rd0 <= 100;
	     {1'd0,  7'd69}: s1rd0 <= 116;
	     {1'd0,  7'd70}: s1rd0 <= 102;
	     {1'd0,  7'd71}: s1rd0 <= 118;
	     {1'd0,  7'd72}: s1rd0 <= 97;
	     {1'd0,  7'd73}: s1rd0 <= 113;
	     {1'd0,  7'd74}: s1rd0 <= 99;
	     {1'd0,  7'd75}: s1rd0 <= 115;
	     {1'd0,  7'd76}: s1rd0 <= 101;
	     {1'd0,  7'd77}: s1rd0 <= 117;
	     {1'd0,  7'd78}: s1rd0 <= 103;
	     {1'd0,  7'd79}: s1rd0 <= 119;
	     {1'd0,  7'd80}: s1rd0 <= 64;
	     {1'd0,  7'd81}: s1rd0 <= 80;
	     {1'd0,  7'd82}: s1rd0 <= 66;
	     {1'd0,  7'd83}: s1rd0 <= 82;
	     {1'd0,  7'd84}: s1rd0 <= 68;
	     {1'd0,  7'd85}: s1rd0 <= 84;
	     {1'd0,  7'd86}: s1rd0 <= 70;
	     {1'd0,  7'd87}: s1rd0 <= 86;
	     {1'd0,  7'd88}: s1rd0 <= 65;
	     {1'd0,  7'd89}: s1rd0 <= 81;
	     {1'd0,  7'd90}: s1rd0 <= 67;
	     {1'd0,  7'd91}: s1rd0 <= 83;
	     {1'd0,  7'd92}: s1rd0 <= 69;
	     {1'd0,  7'd93}: s1rd0 <= 85;
	     {1'd0,  7'd94}: s1rd0 <= 71;
	     {1'd0,  7'd95}: s1rd0 <= 87;
	     {1'd0,  7'd96}: s1rd0 <= 32;
	     {1'd0,  7'd97}: s1rd0 <= 48;
	     {1'd0,  7'd98}: s1rd0 <= 34;
	     {1'd0,  7'd99}: s1rd0 <= 50;
	     {1'd0,  7'd100}: s1rd0 <= 36;
	     {1'd0,  7'd101}: s1rd0 <= 52;
	     {1'd0,  7'd102}: s1rd0 <= 38;
	     {1'd0,  7'd103}: s1rd0 <= 54;
	     {1'd0,  7'd104}: s1rd0 <= 33;
	     {1'd0,  7'd105}: s1rd0 <= 49;
	     {1'd0,  7'd106}: s1rd0 <= 35;
	     {1'd0,  7'd107}: s1rd0 <= 51;
	     {1'd0,  7'd108}: s1rd0 <= 37;
	     {1'd0,  7'd109}: s1rd0 <= 53;
	     {1'd0,  7'd110}: s1rd0 <= 39;
	     {1'd0,  7'd111}: s1rd0 <= 55;
	     {1'd0,  7'd112}: s1rd0 <= 0;
	     {1'd0,  7'd113}: s1rd0 <= 16;
	     {1'd0,  7'd114}: s1rd0 <= 2;
	     {1'd0,  7'd115}: s1rd0 <= 18;
	     {1'd0,  7'd116}: s1rd0 <= 4;
	     {1'd0,  7'd117}: s1rd0 <= 20;
	     {1'd0,  7'd118}: s1rd0 <= 6;
	     {1'd0,  7'd119}: s1rd0 <= 22;
	     {1'd0,  7'd120}: s1rd0 <= 1;
	     {1'd0,  7'd121}: s1rd0 <= 17;
	     {1'd0,  7'd122}: s1rd0 <= 3;
	     {1'd0,  7'd123}: s1rd0 <= 19;
	     {1'd0,  7'd124}: s1rd0 <= 5;
	     {1'd0,  7'd125}: s1rd0 <= 21;
	     {1'd0,  7'd126}: s1rd0 <= 7;
	     {1'd0,  7'd127}: s1rd0 <= 23;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 72;
	     {1'd0,  7'd1}: s1rd1 <= 88;
	     {1'd0,  7'd2}: s1rd1 <= 74;
	     {1'd0,  7'd3}: s1rd1 <= 90;
	     {1'd0,  7'd4}: s1rd1 <= 76;
	     {1'd0,  7'd5}: s1rd1 <= 92;
	     {1'd0,  7'd6}: s1rd1 <= 78;
	     {1'd0,  7'd7}: s1rd1 <= 94;
	     {1'd0,  7'd8}: s1rd1 <= 73;
	     {1'd0,  7'd9}: s1rd1 <= 89;
	     {1'd0,  7'd10}: s1rd1 <= 75;
	     {1'd0,  7'd11}: s1rd1 <= 91;
	     {1'd0,  7'd12}: s1rd1 <= 77;
	     {1'd0,  7'd13}: s1rd1 <= 93;
	     {1'd0,  7'd14}: s1rd1 <= 79;
	     {1'd0,  7'd15}: s1rd1 <= 95;
	     {1'd0,  7'd16}: s1rd1 <= 104;
	     {1'd0,  7'd17}: s1rd1 <= 120;
	     {1'd0,  7'd18}: s1rd1 <= 106;
	     {1'd0,  7'd19}: s1rd1 <= 122;
	     {1'd0,  7'd20}: s1rd1 <= 108;
	     {1'd0,  7'd21}: s1rd1 <= 124;
	     {1'd0,  7'd22}: s1rd1 <= 110;
	     {1'd0,  7'd23}: s1rd1 <= 126;
	     {1'd0,  7'd24}: s1rd1 <= 105;
	     {1'd0,  7'd25}: s1rd1 <= 121;
	     {1'd0,  7'd26}: s1rd1 <= 107;
	     {1'd0,  7'd27}: s1rd1 <= 123;
	     {1'd0,  7'd28}: s1rd1 <= 109;
	     {1'd0,  7'd29}: s1rd1 <= 125;
	     {1'd0,  7'd30}: s1rd1 <= 111;
	     {1'd0,  7'd31}: s1rd1 <= 127;
	     {1'd0,  7'd32}: s1rd1 <= 8;
	     {1'd0,  7'd33}: s1rd1 <= 24;
	     {1'd0,  7'd34}: s1rd1 <= 10;
	     {1'd0,  7'd35}: s1rd1 <= 26;
	     {1'd0,  7'd36}: s1rd1 <= 12;
	     {1'd0,  7'd37}: s1rd1 <= 28;
	     {1'd0,  7'd38}: s1rd1 <= 14;
	     {1'd0,  7'd39}: s1rd1 <= 30;
	     {1'd0,  7'd40}: s1rd1 <= 9;
	     {1'd0,  7'd41}: s1rd1 <= 25;
	     {1'd0,  7'd42}: s1rd1 <= 11;
	     {1'd0,  7'd43}: s1rd1 <= 27;
	     {1'd0,  7'd44}: s1rd1 <= 13;
	     {1'd0,  7'd45}: s1rd1 <= 29;
	     {1'd0,  7'd46}: s1rd1 <= 15;
	     {1'd0,  7'd47}: s1rd1 <= 31;
	     {1'd0,  7'd48}: s1rd1 <= 40;
	     {1'd0,  7'd49}: s1rd1 <= 56;
	     {1'd0,  7'd50}: s1rd1 <= 42;
	     {1'd0,  7'd51}: s1rd1 <= 58;
	     {1'd0,  7'd52}: s1rd1 <= 44;
	     {1'd0,  7'd53}: s1rd1 <= 60;
	     {1'd0,  7'd54}: s1rd1 <= 46;
	     {1'd0,  7'd55}: s1rd1 <= 62;
	     {1'd0,  7'd56}: s1rd1 <= 41;
	     {1'd0,  7'd57}: s1rd1 <= 57;
	     {1'd0,  7'd58}: s1rd1 <= 43;
	     {1'd0,  7'd59}: s1rd1 <= 59;
	     {1'd0,  7'd60}: s1rd1 <= 45;
	     {1'd0,  7'd61}: s1rd1 <= 61;
	     {1'd0,  7'd62}: s1rd1 <= 47;
	     {1'd0,  7'd63}: s1rd1 <= 63;
	     {1'd0,  7'd64}: s1rd1 <= 64;
	     {1'd0,  7'd65}: s1rd1 <= 80;
	     {1'd0,  7'd66}: s1rd1 <= 66;
	     {1'd0,  7'd67}: s1rd1 <= 82;
	     {1'd0,  7'd68}: s1rd1 <= 68;
	     {1'd0,  7'd69}: s1rd1 <= 84;
	     {1'd0,  7'd70}: s1rd1 <= 70;
	     {1'd0,  7'd71}: s1rd1 <= 86;
	     {1'd0,  7'd72}: s1rd1 <= 65;
	     {1'd0,  7'd73}: s1rd1 <= 81;
	     {1'd0,  7'd74}: s1rd1 <= 67;
	     {1'd0,  7'd75}: s1rd1 <= 83;
	     {1'd0,  7'd76}: s1rd1 <= 69;
	     {1'd0,  7'd77}: s1rd1 <= 85;
	     {1'd0,  7'd78}: s1rd1 <= 71;
	     {1'd0,  7'd79}: s1rd1 <= 87;
	     {1'd0,  7'd80}: s1rd1 <= 96;
	     {1'd0,  7'd81}: s1rd1 <= 112;
	     {1'd0,  7'd82}: s1rd1 <= 98;
	     {1'd0,  7'd83}: s1rd1 <= 114;
	     {1'd0,  7'd84}: s1rd1 <= 100;
	     {1'd0,  7'd85}: s1rd1 <= 116;
	     {1'd0,  7'd86}: s1rd1 <= 102;
	     {1'd0,  7'd87}: s1rd1 <= 118;
	     {1'd0,  7'd88}: s1rd1 <= 97;
	     {1'd0,  7'd89}: s1rd1 <= 113;
	     {1'd0,  7'd90}: s1rd1 <= 99;
	     {1'd0,  7'd91}: s1rd1 <= 115;
	     {1'd0,  7'd92}: s1rd1 <= 101;
	     {1'd0,  7'd93}: s1rd1 <= 117;
	     {1'd0,  7'd94}: s1rd1 <= 103;
	     {1'd0,  7'd95}: s1rd1 <= 119;
	     {1'd0,  7'd96}: s1rd1 <= 0;
	     {1'd0,  7'd97}: s1rd1 <= 16;
	     {1'd0,  7'd98}: s1rd1 <= 2;
	     {1'd0,  7'd99}: s1rd1 <= 18;
	     {1'd0,  7'd100}: s1rd1 <= 4;
	     {1'd0,  7'd101}: s1rd1 <= 20;
	     {1'd0,  7'd102}: s1rd1 <= 6;
	     {1'd0,  7'd103}: s1rd1 <= 22;
	     {1'd0,  7'd104}: s1rd1 <= 1;
	     {1'd0,  7'd105}: s1rd1 <= 17;
	     {1'd0,  7'd106}: s1rd1 <= 3;
	     {1'd0,  7'd107}: s1rd1 <= 19;
	     {1'd0,  7'd108}: s1rd1 <= 5;
	     {1'd0,  7'd109}: s1rd1 <= 21;
	     {1'd0,  7'd110}: s1rd1 <= 7;
	     {1'd0,  7'd111}: s1rd1 <= 23;
	     {1'd0,  7'd112}: s1rd1 <= 32;
	     {1'd0,  7'd113}: s1rd1 <= 48;
	     {1'd0,  7'd114}: s1rd1 <= 34;
	     {1'd0,  7'd115}: s1rd1 <= 50;
	     {1'd0,  7'd116}: s1rd1 <= 36;
	     {1'd0,  7'd117}: s1rd1 <= 52;
	     {1'd0,  7'd118}: s1rd1 <= 38;
	     {1'd0,  7'd119}: s1rd1 <= 54;
	     {1'd0,  7'd120}: s1rd1 <= 33;
	     {1'd0,  7'd121}: s1rd1 <= 49;
	     {1'd0,  7'd122}: s1rd1 <= 35;
	     {1'd0,  7'd123}: s1rd1 <= 51;
	     {1'd0,  7'd124}: s1rd1 <= 37;
	     {1'd0,  7'd125}: s1rd1 <= 53;
	     {1'd0,  7'd126}: s1rd1 <= 39;
	     {1'd0,  7'd127}: s1rd1 <= 55;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 40;
	     {1'd0,  7'd1}: s1rd2 <= 56;
	     {1'd0,  7'd2}: s1rd2 <= 42;
	     {1'd0,  7'd3}: s1rd2 <= 58;
	     {1'd0,  7'd4}: s1rd2 <= 44;
	     {1'd0,  7'd5}: s1rd2 <= 60;
	     {1'd0,  7'd6}: s1rd2 <= 46;
	     {1'd0,  7'd7}: s1rd2 <= 62;
	     {1'd0,  7'd8}: s1rd2 <= 41;
	     {1'd0,  7'd9}: s1rd2 <= 57;
	     {1'd0,  7'd10}: s1rd2 <= 43;
	     {1'd0,  7'd11}: s1rd2 <= 59;
	     {1'd0,  7'd12}: s1rd2 <= 45;
	     {1'd0,  7'd13}: s1rd2 <= 61;
	     {1'd0,  7'd14}: s1rd2 <= 47;
	     {1'd0,  7'd15}: s1rd2 <= 63;
	     {1'd0,  7'd16}: s1rd2 <= 8;
	     {1'd0,  7'd17}: s1rd2 <= 24;
	     {1'd0,  7'd18}: s1rd2 <= 10;
	     {1'd0,  7'd19}: s1rd2 <= 26;
	     {1'd0,  7'd20}: s1rd2 <= 12;
	     {1'd0,  7'd21}: s1rd2 <= 28;
	     {1'd0,  7'd22}: s1rd2 <= 14;
	     {1'd0,  7'd23}: s1rd2 <= 30;
	     {1'd0,  7'd24}: s1rd2 <= 9;
	     {1'd0,  7'd25}: s1rd2 <= 25;
	     {1'd0,  7'd26}: s1rd2 <= 11;
	     {1'd0,  7'd27}: s1rd2 <= 27;
	     {1'd0,  7'd28}: s1rd2 <= 13;
	     {1'd0,  7'd29}: s1rd2 <= 29;
	     {1'd0,  7'd30}: s1rd2 <= 15;
	     {1'd0,  7'd31}: s1rd2 <= 31;
	     {1'd0,  7'd32}: s1rd2 <= 104;
	     {1'd0,  7'd33}: s1rd2 <= 120;
	     {1'd0,  7'd34}: s1rd2 <= 106;
	     {1'd0,  7'd35}: s1rd2 <= 122;
	     {1'd0,  7'd36}: s1rd2 <= 108;
	     {1'd0,  7'd37}: s1rd2 <= 124;
	     {1'd0,  7'd38}: s1rd2 <= 110;
	     {1'd0,  7'd39}: s1rd2 <= 126;
	     {1'd0,  7'd40}: s1rd2 <= 105;
	     {1'd0,  7'd41}: s1rd2 <= 121;
	     {1'd0,  7'd42}: s1rd2 <= 107;
	     {1'd0,  7'd43}: s1rd2 <= 123;
	     {1'd0,  7'd44}: s1rd2 <= 109;
	     {1'd0,  7'd45}: s1rd2 <= 125;
	     {1'd0,  7'd46}: s1rd2 <= 111;
	     {1'd0,  7'd47}: s1rd2 <= 127;
	     {1'd0,  7'd48}: s1rd2 <= 72;
	     {1'd0,  7'd49}: s1rd2 <= 88;
	     {1'd0,  7'd50}: s1rd2 <= 74;
	     {1'd0,  7'd51}: s1rd2 <= 90;
	     {1'd0,  7'd52}: s1rd2 <= 76;
	     {1'd0,  7'd53}: s1rd2 <= 92;
	     {1'd0,  7'd54}: s1rd2 <= 78;
	     {1'd0,  7'd55}: s1rd2 <= 94;
	     {1'd0,  7'd56}: s1rd2 <= 73;
	     {1'd0,  7'd57}: s1rd2 <= 89;
	     {1'd0,  7'd58}: s1rd2 <= 75;
	     {1'd0,  7'd59}: s1rd2 <= 91;
	     {1'd0,  7'd60}: s1rd2 <= 77;
	     {1'd0,  7'd61}: s1rd2 <= 93;
	     {1'd0,  7'd62}: s1rd2 <= 79;
	     {1'd0,  7'd63}: s1rd2 <= 95;
	     {1'd0,  7'd64}: s1rd2 <= 32;
	     {1'd0,  7'd65}: s1rd2 <= 48;
	     {1'd0,  7'd66}: s1rd2 <= 34;
	     {1'd0,  7'd67}: s1rd2 <= 50;
	     {1'd0,  7'd68}: s1rd2 <= 36;
	     {1'd0,  7'd69}: s1rd2 <= 52;
	     {1'd0,  7'd70}: s1rd2 <= 38;
	     {1'd0,  7'd71}: s1rd2 <= 54;
	     {1'd0,  7'd72}: s1rd2 <= 33;
	     {1'd0,  7'd73}: s1rd2 <= 49;
	     {1'd0,  7'd74}: s1rd2 <= 35;
	     {1'd0,  7'd75}: s1rd2 <= 51;
	     {1'd0,  7'd76}: s1rd2 <= 37;
	     {1'd0,  7'd77}: s1rd2 <= 53;
	     {1'd0,  7'd78}: s1rd2 <= 39;
	     {1'd0,  7'd79}: s1rd2 <= 55;
	     {1'd0,  7'd80}: s1rd2 <= 0;
	     {1'd0,  7'd81}: s1rd2 <= 16;
	     {1'd0,  7'd82}: s1rd2 <= 2;
	     {1'd0,  7'd83}: s1rd2 <= 18;
	     {1'd0,  7'd84}: s1rd2 <= 4;
	     {1'd0,  7'd85}: s1rd2 <= 20;
	     {1'd0,  7'd86}: s1rd2 <= 6;
	     {1'd0,  7'd87}: s1rd2 <= 22;
	     {1'd0,  7'd88}: s1rd2 <= 1;
	     {1'd0,  7'd89}: s1rd2 <= 17;
	     {1'd0,  7'd90}: s1rd2 <= 3;
	     {1'd0,  7'd91}: s1rd2 <= 19;
	     {1'd0,  7'd92}: s1rd2 <= 5;
	     {1'd0,  7'd93}: s1rd2 <= 21;
	     {1'd0,  7'd94}: s1rd2 <= 7;
	     {1'd0,  7'd95}: s1rd2 <= 23;
	     {1'd0,  7'd96}: s1rd2 <= 96;
	     {1'd0,  7'd97}: s1rd2 <= 112;
	     {1'd0,  7'd98}: s1rd2 <= 98;
	     {1'd0,  7'd99}: s1rd2 <= 114;
	     {1'd0,  7'd100}: s1rd2 <= 100;
	     {1'd0,  7'd101}: s1rd2 <= 116;
	     {1'd0,  7'd102}: s1rd2 <= 102;
	     {1'd0,  7'd103}: s1rd2 <= 118;
	     {1'd0,  7'd104}: s1rd2 <= 97;
	     {1'd0,  7'd105}: s1rd2 <= 113;
	     {1'd0,  7'd106}: s1rd2 <= 99;
	     {1'd0,  7'd107}: s1rd2 <= 115;
	     {1'd0,  7'd108}: s1rd2 <= 101;
	     {1'd0,  7'd109}: s1rd2 <= 117;
	     {1'd0,  7'd110}: s1rd2 <= 103;
	     {1'd0,  7'd111}: s1rd2 <= 119;
	     {1'd0,  7'd112}: s1rd2 <= 64;
	     {1'd0,  7'd113}: s1rd2 <= 80;
	     {1'd0,  7'd114}: s1rd2 <= 66;
	     {1'd0,  7'd115}: s1rd2 <= 82;
	     {1'd0,  7'd116}: s1rd2 <= 68;
	     {1'd0,  7'd117}: s1rd2 <= 84;
	     {1'd0,  7'd118}: s1rd2 <= 70;
	     {1'd0,  7'd119}: s1rd2 <= 86;
	     {1'd0,  7'd120}: s1rd2 <= 65;
	     {1'd0,  7'd121}: s1rd2 <= 81;
	     {1'd0,  7'd122}: s1rd2 <= 67;
	     {1'd0,  7'd123}: s1rd2 <= 83;
	     {1'd0,  7'd124}: s1rd2 <= 69;
	     {1'd0,  7'd125}: s1rd2 <= 85;
	     {1'd0,  7'd126}: s1rd2 <= 71;
	     {1'd0,  7'd127}: s1rd2 <= 87;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 8;
	     {1'd0,  7'd1}: s1rd3 <= 24;
	     {1'd0,  7'd2}: s1rd3 <= 10;
	     {1'd0,  7'd3}: s1rd3 <= 26;
	     {1'd0,  7'd4}: s1rd3 <= 12;
	     {1'd0,  7'd5}: s1rd3 <= 28;
	     {1'd0,  7'd6}: s1rd3 <= 14;
	     {1'd0,  7'd7}: s1rd3 <= 30;
	     {1'd0,  7'd8}: s1rd3 <= 9;
	     {1'd0,  7'd9}: s1rd3 <= 25;
	     {1'd0,  7'd10}: s1rd3 <= 11;
	     {1'd0,  7'd11}: s1rd3 <= 27;
	     {1'd0,  7'd12}: s1rd3 <= 13;
	     {1'd0,  7'd13}: s1rd3 <= 29;
	     {1'd0,  7'd14}: s1rd3 <= 15;
	     {1'd0,  7'd15}: s1rd3 <= 31;
	     {1'd0,  7'd16}: s1rd3 <= 40;
	     {1'd0,  7'd17}: s1rd3 <= 56;
	     {1'd0,  7'd18}: s1rd3 <= 42;
	     {1'd0,  7'd19}: s1rd3 <= 58;
	     {1'd0,  7'd20}: s1rd3 <= 44;
	     {1'd0,  7'd21}: s1rd3 <= 60;
	     {1'd0,  7'd22}: s1rd3 <= 46;
	     {1'd0,  7'd23}: s1rd3 <= 62;
	     {1'd0,  7'd24}: s1rd3 <= 41;
	     {1'd0,  7'd25}: s1rd3 <= 57;
	     {1'd0,  7'd26}: s1rd3 <= 43;
	     {1'd0,  7'd27}: s1rd3 <= 59;
	     {1'd0,  7'd28}: s1rd3 <= 45;
	     {1'd0,  7'd29}: s1rd3 <= 61;
	     {1'd0,  7'd30}: s1rd3 <= 47;
	     {1'd0,  7'd31}: s1rd3 <= 63;
	     {1'd0,  7'd32}: s1rd3 <= 72;
	     {1'd0,  7'd33}: s1rd3 <= 88;
	     {1'd0,  7'd34}: s1rd3 <= 74;
	     {1'd0,  7'd35}: s1rd3 <= 90;
	     {1'd0,  7'd36}: s1rd3 <= 76;
	     {1'd0,  7'd37}: s1rd3 <= 92;
	     {1'd0,  7'd38}: s1rd3 <= 78;
	     {1'd0,  7'd39}: s1rd3 <= 94;
	     {1'd0,  7'd40}: s1rd3 <= 73;
	     {1'd0,  7'd41}: s1rd3 <= 89;
	     {1'd0,  7'd42}: s1rd3 <= 75;
	     {1'd0,  7'd43}: s1rd3 <= 91;
	     {1'd0,  7'd44}: s1rd3 <= 77;
	     {1'd0,  7'd45}: s1rd3 <= 93;
	     {1'd0,  7'd46}: s1rd3 <= 79;
	     {1'd0,  7'd47}: s1rd3 <= 95;
	     {1'd0,  7'd48}: s1rd3 <= 104;
	     {1'd0,  7'd49}: s1rd3 <= 120;
	     {1'd0,  7'd50}: s1rd3 <= 106;
	     {1'd0,  7'd51}: s1rd3 <= 122;
	     {1'd0,  7'd52}: s1rd3 <= 108;
	     {1'd0,  7'd53}: s1rd3 <= 124;
	     {1'd0,  7'd54}: s1rd3 <= 110;
	     {1'd0,  7'd55}: s1rd3 <= 126;
	     {1'd0,  7'd56}: s1rd3 <= 105;
	     {1'd0,  7'd57}: s1rd3 <= 121;
	     {1'd0,  7'd58}: s1rd3 <= 107;
	     {1'd0,  7'd59}: s1rd3 <= 123;
	     {1'd0,  7'd60}: s1rd3 <= 109;
	     {1'd0,  7'd61}: s1rd3 <= 125;
	     {1'd0,  7'd62}: s1rd3 <= 111;
	     {1'd0,  7'd63}: s1rd3 <= 127;
	     {1'd0,  7'd64}: s1rd3 <= 0;
	     {1'd0,  7'd65}: s1rd3 <= 16;
	     {1'd0,  7'd66}: s1rd3 <= 2;
	     {1'd0,  7'd67}: s1rd3 <= 18;
	     {1'd0,  7'd68}: s1rd3 <= 4;
	     {1'd0,  7'd69}: s1rd3 <= 20;
	     {1'd0,  7'd70}: s1rd3 <= 6;
	     {1'd0,  7'd71}: s1rd3 <= 22;
	     {1'd0,  7'd72}: s1rd3 <= 1;
	     {1'd0,  7'd73}: s1rd3 <= 17;
	     {1'd0,  7'd74}: s1rd3 <= 3;
	     {1'd0,  7'd75}: s1rd3 <= 19;
	     {1'd0,  7'd76}: s1rd3 <= 5;
	     {1'd0,  7'd77}: s1rd3 <= 21;
	     {1'd0,  7'd78}: s1rd3 <= 7;
	     {1'd0,  7'd79}: s1rd3 <= 23;
	     {1'd0,  7'd80}: s1rd3 <= 32;
	     {1'd0,  7'd81}: s1rd3 <= 48;
	     {1'd0,  7'd82}: s1rd3 <= 34;
	     {1'd0,  7'd83}: s1rd3 <= 50;
	     {1'd0,  7'd84}: s1rd3 <= 36;
	     {1'd0,  7'd85}: s1rd3 <= 52;
	     {1'd0,  7'd86}: s1rd3 <= 38;
	     {1'd0,  7'd87}: s1rd3 <= 54;
	     {1'd0,  7'd88}: s1rd3 <= 33;
	     {1'd0,  7'd89}: s1rd3 <= 49;
	     {1'd0,  7'd90}: s1rd3 <= 35;
	     {1'd0,  7'd91}: s1rd3 <= 51;
	     {1'd0,  7'd92}: s1rd3 <= 37;
	     {1'd0,  7'd93}: s1rd3 <= 53;
	     {1'd0,  7'd94}: s1rd3 <= 39;
	     {1'd0,  7'd95}: s1rd3 <= 55;
	     {1'd0,  7'd96}: s1rd3 <= 64;
	     {1'd0,  7'd97}: s1rd3 <= 80;
	     {1'd0,  7'd98}: s1rd3 <= 66;
	     {1'd0,  7'd99}: s1rd3 <= 82;
	     {1'd0,  7'd100}: s1rd3 <= 68;
	     {1'd0,  7'd101}: s1rd3 <= 84;
	     {1'd0,  7'd102}: s1rd3 <= 70;
	     {1'd0,  7'd103}: s1rd3 <= 86;
	     {1'd0,  7'd104}: s1rd3 <= 65;
	     {1'd0,  7'd105}: s1rd3 <= 81;
	     {1'd0,  7'd106}: s1rd3 <= 67;
	     {1'd0,  7'd107}: s1rd3 <= 83;
	     {1'd0,  7'd108}: s1rd3 <= 69;
	     {1'd0,  7'd109}: s1rd3 <= 85;
	     {1'd0,  7'd110}: s1rd3 <= 71;
	     {1'd0,  7'd111}: s1rd3 <= 87;
	     {1'd0,  7'd112}: s1rd3 <= 96;
	     {1'd0,  7'd113}: s1rd3 <= 112;
	     {1'd0,  7'd114}: s1rd3 <= 98;
	     {1'd0,  7'd115}: s1rd3 <= 114;
	     {1'd0,  7'd116}: s1rd3 <= 100;
	     {1'd0,  7'd117}: s1rd3 <= 116;
	     {1'd0,  7'd118}: s1rd3 <= 102;
	     {1'd0,  7'd119}: s1rd3 <= 118;
	     {1'd0,  7'd120}: s1rd3 <= 97;
	     {1'd0,  7'd121}: s1rd3 <= 113;
	     {1'd0,  7'd122}: s1rd3 <= 99;
	     {1'd0,  7'd123}: s1rd3 <= 115;
	     {1'd0,  7'd124}: s1rd3 <= 101;
	     {1'd0,  7'd125}: s1rd3 <= 117;
	     {1'd0,  7'd126}: s1rd3 <= 103;
	     {1'd0,  7'd127}: s1rd3 <= 119;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd4 <= 96;
	     {1'd0,  7'd1}: s1rd4 <= 112;
	     {1'd0,  7'd2}: s1rd4 <= 98;
	     {1'd0,  7'd3}: s1rd4 <= 114;
	     {1'd0,  7'd4}: s1rd4 <= 100;
	     {1'd0,  7'd5}: s1rd4 <= 116;
	     {1'd0,  7'd6}: s1rd4 <= 102;
	     {1'd0,  7'd7}: s1rd4 <= 118;
	     {1'd0,  7'd8}: s1rd4 <= 97;
	     {1'd0,  7'd9}: s1rd4 <= 113;
	     {1'd0,  7'd10}: s1rd4 <= 99;
	     {1'd0,  7'd11}: s1rd4 <= 115;
	     {1'd0,  7'd12}: s1rd4 <= 101;
	     {1'd0,  7'd13}: s1rd4 <= 117;
	     {1'd0,  7'd14}: s1rd4 <= 103;
	     {1'd0,  7'd15}: s1rd4 <= 119;
	     {1'd0,  7'd16}: s1rd4 <= 64;
	     {1'd0,  7'd17}: s1rd4 <= 80;
	     {1'd0,  7'd18}: s1rd4 <= 66;
	     {1'd0,  7'd19}: s1rd4 <= 82;
	     {1'd0,  7'd20}: s1rd4 <= 68;
	     {1'd0,  7'd21}: s1rd4 <= 84;
	     {1'd0,  7'd22}: s1rd4 <= 70;
	     {1'd0,  7'd23}: s1rd4 <= 86;
	     {1'd0,  7'd24}: s1rd4 <= 65;
	     {1'd0,  7'd25}: s1rd4 <= 81;
	     {1'd0,  7'd26}: s1rd4 <= 67;
	     {1'd0,  7'd27}: s1rd4 <= 83;
	     {1'd0,  7'd28}: s1rd4 <= 69;
	     {1'd0,  7'd29}: s1rd4 <= 85;
	     {1'd0,  7'd30}: s1rd4 <= 71;
	     {1'd0,  7'd31}: s1rd4 <= 87;
	     {1'd0,  7'd32}: s1rd4 <= 32;
	     {1'd0,  7'd33}: s1rd4 <= 48;
	     {1'd0,  7'd34}: s1rd4 <= 34;
	     {1'd0,  7'd35}: s1rd4 <= 50;
	     {1'd0,  7'd36}: s1rd4 <= 36;
	     {1'd0,  7'd37}: s1rd4 <= 52;
	     {1'd0,  7'd38}: s1rd4 <= 38;
	     {1'd0,  7'd39}: s1rd4 <= 54;
	     {1'd0,  7'd40}: s1rd4 <= 33;
	     {1'd0,  7'd41}: s1rd4 <= 49;
	     {1'd0,  7'd42}: s1rd4 <= 35;
	     {1'd0,  7'd43}: s1rd4 <= 51;
	     {1'd0,  7'd44}: s1rd4 <= 37;
	     {1'd0,  7'd45}: s1rd4 <= 53;
	     {1'd0,  7'd46}: s1rd4 <= 39;
	     {1'd0,  7'd47}: s1rd4 <= 55;
	     {1'd0,  7'd48}: s1rd4 <= 0;
	     {1'd0,  7'd49}: s1rd4 <= 16;
	     {1'd0,  7'd50}: s1rd4 <= 2;
	     {1'd0,  7'd51}: s1rd4 <= 18;
	     {1'd0,  7'd52}: s1rd4 <= 4;
	     {1'd0,  7'd53}: s1rd4 <= 20;
	     {1'd0,  7'd54}: s1rd4 <= 6;
	     {1'd0,  7'd55}: s1rd4 <= 22;
	     {1'd0,  7'd56}: s1rd4 <= 1;
	     {1'd0,  7'd57}: s1rd4 <= 17;
	     {1'd0,  7'd58}: s1rd4 <= 3;
	     {1'd0,  7'd59}: s1rd4 <= 19;
	     {1'd0,  7'd60}: s1rd4 <= 5;
	     {1'd0,  7'd61}: s1rd4 <= 21;
	     {1'd0,  7'd62}: s1rd4 <= 7;
	     {1'd0,  7'd63}: s1rd4 <= 23;
	     {1'd0,  7'd64}: s1rd4 <= 104;
	     {1'd0,  7'd65}: s1rd4 <= 120;
	     {1'd0,  7'd66}: s1rd4 <= 106;
	     {1'd0,  7'd67}: s1rd4 <= 122;
	     {1'd0,  7'd68}: s1rd4 <= 108;
	     {1'd0,  7'd69}: s1rd4 <= 124;
	     {1'd0,  7'd70}: s1rd4 <= 110;
	     {1'd0,  7'd71}: s1rd4 <= 126;
	     {1'd0,  7'd72}: s1rd4 <= 105;
	     {1'd0,  7'd73}: s1rd4 <= 121;
	     {1'd0,  7'd74}: s1rd4 <= 107;
	     {1'd0,  7'd75}: s1rd4 <= 123;
	     {1'd0,  7'd76}: s1rd4 <= 109;
	     {1'd0,  7'd77}: s1rd4 <= 125;
	     {1'd0,  7'd78}: s1rd4 <= 111;
	     {1'd0,  7'd79}: s1rd4 <= 127;
	     {1'd0,  7'd80}: s1rd4 <= 72;
	     {1'd0,  7'd81}: s1rd4 <= 88;
	     {1'd0,  7'd82}: s1rd4 <= 74;
	     {1'd0,  7'd83}: s1rd4 <= 90;
	     {1'd0,  7'd84}: s1rd4 <= 76;
	     {1'd0,  7'd85}: s1rd4 <= 92;
	     {1'd0,  7'd86}: s1rd4 <= 78;
	     {1'd0,  7'd87}: s1rd4 <= 94;
	     {1'd0,  7'd88}: s1rd4 <= 73;
	     {1'd0,  7'd89}: s1rd4 <= 89;
	     {1'd0,  7'd90}: s1rd4 <= 75;
	     {1'd0,  7'd91}: s1rd4 <= 91;
	     {1'd0,  7'd92}: s1rd4 <= 77;
	     {1'd0,  7'd93}: s1rd4 <= 93;
	     {1'd0,  7'd94}: s1rd4 <= 79;
	     {1'd0,  7'd95}: s1rd4 <= 95;
	     {1'd0,  7'd96}: s1rd4 <= 40;
	     {1'd0,  7'd97}: s1rd4 <= 56;
	     {1'd0,  7'd98}: s1rd4 <= 42;
	     {1'd0,  7'd99}: s1rd4 <= 58;
	     {1'd0,  7'd100}: s1rd4 <= 44;
	     {1'd0,  7'd101}: s1rd4 <= 60;
	     {1'd0,  7'd102}: s1rd4 <= 46;
	     {1'd0,  7'd103}: s1rd4 <= 62;
	     {1'd0,  7'd104}: s1rd4 <= 41;
	     {1'd0,  7'd105}: s1rd4 <= 57;
	     {1'd0,  7'd106}: s1rd4 <= 43;
	     {1'd0,  7'd107}: s1rd4 <= 59;
	     {1'd0,  7'd108}: s1rd4 <= 45;
	     {1'd0,  7'd109}: s1rd4 <= 61;
	     {1'd0,  7'd110}: s1rd4 <= 47;
	     {1'd0,  7'd111}: s1rd4 <= 63;
	     {1'd0,  7'd112}: s1rd4 <= 8;
	     {1'd0,  7'd113}: s1rd4 <= 24;
	     {1'd0,  7'd114}: s1rd4 <= 10;
	     {1'd0,  7'd115}: s1rd4 <= 26;
	     {1'd0,  7'd116}: s1rd4 <= 12;
	     {1'd0,  7'd117}: s1rd4 <= 28;
	     {1'd0,  7'd118}: s1rd4 <= 14;
	     {1'd0,  7'd119}: s1rd4 <= 30;
	     {1'd0,  7'd120}: s1rd4 <= 9;
	     {1'd0,  7'd121}: s1rd4 <= 25;
	     {1'd0,  7'd122}: s1rd4 <= 11;
	     {1'd0,  7'd123}: s1rd4 <= 27;
	     {1'd0,  7'd124}: s1rd4 <= 13;
	     {1'd0,  7'd125}: s1rd4 <= 29;
	     {1'd0,  7'd126}: s1rd4 <= 15;
	     {1'd0,  7'd127}: s1rd4 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd5 <= 64;
	     {1'd0,  7'd1}: s1rd5 <= 80;
	     {1'd0,  7'd2}: s1rd5 <= 66;
	     {1'd0,  7'd3}: s1rd5 <= 82;
	     {1'd0,  7'd4}: s1rd5 <= 68;
	     {1'd0,  7'd5}: s1rd5 <= 84;
	     {1'd0,  7'd6}: s1rd5 <= 70;
	     {1'd0,  7'd7}: s1rd5 <= 86;
	     {1'd0,  7'd8}: s1rd5 <= 65;
	     {1'd0,  7'd9}: s1rd5 <= 81;
	     {1'd0,  7'd10}: s1rd5 <= 67;
	     {1'd0,  7'd11}: s1rd5 <= 83;
	     {1'd0,  7'd12}: s1rd5 <= 69;
	     {1'd0,  7'd13}: s1rd5 <= 85;
	     {1'd0,  7'd14}: s1rd5 <= 71;
	     {1'd0,  7'd15}: s1rd5 <= 87;
	     {1'd0,  7'd16}: s1rd5 <= 96;
	     {1'd0,  7'd17}: s1rd5 <= 112;
	     {1'd0,  7'd18}: s1rd5 <= 98;
	     {1'd0,  7'd19}: s1rd5 <= 114;
	     {1'd0,  7'd20}: s1rd5 <= 100;
	     {1'd0,  7'd21}: s1rd5 <= 116;
	     {1'd0,  7'd22}: s1rd5 <= 102;
	     {1'd0,  7'd23}: s1rd5 <= 118;
	     {1'd0,  7'd24}: s1rd5 <= 97;
	     {1'd0,  7'd25}: s1rd5 <= 113;
	     {1'd0,  7'd26}: s1rd5 <= 99;
	     {1'd0,  7'd27}: s1rd5 <= 115;
	     {1'd0,  7'd28}: s1rd5 <= 101;
	     {1'd0,  7'd29}: s1rd5 <= 117;
	     {1'd0,  7'd30}: s1rd5 <= 103;
	     {1'd0,  7'd31}: s1rd5 <= 119;
	     {1'd0,  7'd32}: s1rd5 <= 0;
	     {1'd0,  7'd33}: s1rd5 <= 16;
	     {1'd0,  7'd34}: s1rd5 <= 2;
	     {1'd0,  7'd35}: s1rd5 <= 18;
	     {1'd0,  7'd36}: s1rd5 <= 4;
	     {1'd0,  7'd37}: s1rd5 <= 20;
	     {1'd0,  7'd38}: s1rd5 <= 6;
	     {1'd0,  7'd39}: s1rd5 <= 22;
	     {1'd0,  7'd40}: s1rd5 <= 1;
	     {1'd0,  7'd41}: s1rd5 <= 17;
	     {1'd0,  7'd42}: s1rd5 <= 3;
	     {1'd0,  7'd43}: s1rd5 <= 19;
	     {1'd0,  7'd44}: s1rd5 <= 5;
	     {1'd0,  7'd45}: s1rd5 <= 21;
	     {1'd0,  7'd46}: s1rd5 <= 7;
	     {1'd0,  7'd47}: s1rd5 <= 23;
	     {1'd0,  7'd48}: s1rd5 <= 32;
	     {1'd0,  7'd49}: s1rd5 <= 48;
	     {1'd0,  7'd50}: s1rd5 <= 34;
	     {1'd0,  7'd51}: s1rd5 <= 50;
	     {1'd0,  7'd52}: s1rd5 <= 36;
	     {1'd0,  7'd53}: s1rd5 <= 52;
	     {1'd0,  7'd54}: s1rd5 <= 38;
	     {1'd0,  7'd55}: s1rd5 <= 54;
	     {1'd0,  7'd56}: s1rd5 <= 33;
	     {1'd0,  7'd57}: s1rd5 <= 49;
	     {1'd0,  7'd58}: s1rd5 <= 35;
	     {1'd0,  7'd59}: s1rd5 <= 51;
	     {1'd0,  7'd60}: s1rd5 <= 37;
	     {1'd0,  7'd61}: s1rd5 <= 53;
	     {1'd0,  7'd62}: s1rd5 <= 39;
	     {1'd0,  7'd63}: s1rd5 <= 55;
	     {1'd0,  7'd64}: s1rd5 <= 72;
	     {1'd0,  7'd65}: s1rd5 <= 88;
	     {1'd0,  7'd66}: s1rd5 <= 74;
	     {1'd0,  7'd67}: s1rd5 <= 90;
	     {1'd0,  7'd68}: s1rd5 <= 76;
	     {1'd0,  7'd69}: s1rd5 <= 92;
	     {1'd0,  7'd70}: s1rd5 <= 78;
	     {1'd0,  7'd71}: s1rd5 <= 94;
	     {1'd0,  7'd72}: s1rd5 <= 73;
	     {1'd0,  7'd73}: s1rd5 <= 89;
	     {1'd0,  7'd74}: s1rd5 <= 75;
	     {1'd0,  7'd75}: s1rd5 <= 91;
	     {1'd0,  7'd76}: s1rd5 <= 77;
	     {1'd0,  7'd77}: s1rd5 <= 93;
	     {1'd0,  7'd78}: s1rd5 <= 79;
	     {1'd0,  7'd79}: s1rd5 <= 95;
	     {1'd0,  7'd80}: s1rd5 <= 104;
	     {1'd0,  7'd81}: s1rd5 <= 120;
	     {1'd0,  7'd82}: s1rd5 <= 106;
	     {1'd0,  7'd83}: s1rd5 <= 122;
	     {1'd0,  7'd84}: s1rd5 <= 108;
	     {1'd0,  7'd85}: s1rd5 <= 124;
	     {1'd0,  7'd86}: s1rd5 <= 110;
	     {1'd0,  7'd87}: s1rd5 <= 126;
	     {1'd0,  7'd88}: s1rd5 <= 105;
	     {1'd0,  7'd89}: s1rd5 <= 121;
	     {1'd0,  7'd90}: s1rd5 <= 107;
	     {1'd0,  7'd91}: s1rd5 <= 123;
	     {1'd0,  7'd92}: s1rd5 <= 109;
	     {1'd0,  7'd93}: s1rd5 <= 125;
	     {1'd0,  7'd94}: s1rd5 <= 111;
	     {1'd0,  7'd95}: s1rd5 <= 127;
	     {1'd0,  7'd96}: s1rd5 <= 8;
	     {1'd0,  7'd97}: s1rd5 <= 24;
	     {1'd0,  7'd98}: s1rd5 <= 10;
	     {1'd0,  7'd99}: s1rd5 <= 26;
	     {1'd0,  7'd100}: s1rd5 <= 12;
	     {1'd0,  7'd101}: s1rd5 <= 28;
	     {1'd0,  7'd102}: s1rd5 <= 14;
	     {1'd0,  7'd103}: s1rd5 <= 30;
	     {1'd0,  7'd104}: s1rd5 <= 9;
	     {1'd0,  7'd105}: s1rd5 <= 25;
	     {1'd0,  7'd106}: s1rd5 <= 11;
	     {1'd0,  7'd107}: s1rd5 <= 27;
	     {1'd0,  7'd108}: s1rd5 <= 13;
	     {1'd0,  7'd109}: s1rd5 <= 29;
	     {1'd0,  7'd110}: s1rd5 <= 15;
	     {1'd0,  7'd111}: s1rd5 <= 31;
	     {1'd0,  7'd112}: s1rd5 <= 40;
	     {1'd0,  7'd113}: s1rd5 <= 56;
	     {1'd0,  7'd114}: s1rd5 <= 42;
	     {1'd0,  7'd115}: s1rd5 <= 58;
	     {1'd0,  7'd116}: s1rd5 <= 44;
	     {1'd0,  7'd117}: s1rd5 <= 60;
	     {1'd0,  7'd118}: s1rd5 <= 46;
	     {1'd0,  7'd119}: s1rd5 <= 62;
	     {1'd0,  7'd120}: s1rd5 <= 41;
	     {1'd0,  7'd121}: s1rd5 <= 57;
	     {1'd0,  7'd122}: s1rd5 <= 43;
	     {1'd0,  7'd123}: s1rd5 <= 59;
	     {1'd0,  7'd124}: s1rd5 <= 45;
	     {1'd0,  7'd125}: s1rd5 <= 61;
	     {1'd0,  7'd126}: s1rd5 <= 47;
	     {1'd0,  7'd127}: s1rd5 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd6 <= 32;
	     {1'd0,  7'd1}: s1rd6 <= 48;
	     {1'd0,  7'd2}: s1rd6 <= 34;
	     {1'd0,  7'd3}: s1rd6 <= 50;
	     {1'd0,  7'd4}: s1rd6 <= 36;
	     {1'd0,  7'd5}: s1rd6 <= 52;
	     {1'd0,  7'd6}: s1rd6 <= 38;
	     {1'd0,  7'd7}: s1rd6 <= 54;
	     {1'd0,  7'd8}: s1rd6 <= 33;
	     {1'd0,  7'd9}: s1rd6 <= 49;
	     {1'd0,  7'd10}: s1rd6 <= 35;
	     {1'd0,  7'd11}: s1rd6 <= 51;
	     {1'd0,  7'd12}: s1rd6 <= 37;
	     {1'd0,  7'd13}: s1rd6 <= 53;
	     {1'd0,  7'd14}: s1rd6 <= 39;
	     {1'd0,  7'd15}: s1rd6 <= 55;
	     {1'd0,  7'd16}: s1rd6 <= 0;
	     {1'd0,  7'd17}: s1rd6 <= 16;
	     {1'd0,  7'd18}: s1rd6 <= 2;
	     {1'd0,  7'd19}: s1rd6 <= 18;
	     {1'd0,  7'd20}: s1rd6 <= 4;
	     {1'd0,  7'd21}: s1rd6 <= 20;
	     {1'd0,  7'd22}: s1rd6 <= 6;
	     {1'd0,  7'd23}: s1rd6 <= 22;
	     {1'd0,  7'd24}: s1rd6 <= 1;
	     {1'd0,  7'd25}: s1rd6 <= 17;
	     {1'd0,  7'd26}: s1rd6 <= 3;
	     {1'd0,  7'd27}: s1rd6 <= 19;
	     {1'd0,  7'd28}: s1rd6 <= 5;
	     {1'd0,  7'd29}: s1rd6 <= 21;
	     {1'd0,  7'd30}: s1rd6 <= 7;
	     {1'd0,  7'd31}: s1rd6 <= 23;
	     {1'd0,  7'd32}: s1rd6 <= 96;
	     {1'd0,  7'd33}: s1rd6 <= 112;
	     {1'd0,  7'd34}: s1rd6 <= 98;
	     {1'd0,  7'd35}: s1rd6 <= 114;
	     {1'd0,  7'd36}: s1rd6 <= 100;
	     {1'd0,  7'd37}: s1rd6 <= 116;
	     {1'd0,  7'd38}: s1rd6 <= 102;
	     {1'd0,  7'd39}: s1rd6 <= 118;
	     {1'd0,  7'd40}: s1rd6 <= 97;
	     {1'd0,  7'd41}: s1rd6 <= 113;
	     {1'd0,  7'd42}: s1rd6 <= 99;
	     {1'd0,  7'd43}: s1rd6 <= 115;
	     {1'd0,  7'd44}: s1rd6 <= 101;
	     {1'd0,  7'd45}: s1rd6 <= 117;
	     {1'd0,  7'd46}: s1rd6 <= 103;
	     {1'd0,  7'd47}: s1rd6 <= 119;
	     {1'd0,  7'd48}: s1rd6 <= 64;
	     {1'd0,  7'd49}: s1rd6 <= 80;
	     {1'd0,  7'd50}: s1rd6 <= 66;
	     {1'd0,  7'd51}: s1rd6 <= 82;
	     {1'd0,  7'd52}: s1rd6 <= 68;
	     {1'd0,  7'd53}: s1rd6 <= 84;
	     {1'd0,  7'd54}: s1rd6 <= 70;
	     {1'd0,  7'd55}: s1rd6 <= 86;
	     {1'd0,  7'd56}: s1rd6 <= 65;
	     {1'd0,  7'd57}: s1rd6 <= 81;
	     {1'd0,  7'd58}: s1rd6 <= 67;
	     {1'd0,  7'd59}: s1rd6 <= 83;
	     {1'd0,  7'd60}: s1rd6 <= 69;
	     {1'd0,  7'd61}: s1rd6 <= 85;
	     {1'd0,  7'd62}: s1rd6 <= 71;
	     {1'd0,  7'd63}: s1rd6 <= 87;
	     {1'd0,  7'd64}: s1rd6 <= 40;
	     {1'd0,  7'd65}: s1rd6 <= 56;
	     {1'd0,  7'd66}: s1rd6 <= 42;
	     {1'd0,  7'd67}: s1rd6 <= 58;
	     {1'd0,  7'd68}: s1rd6 <= 44;
	     {1'd0,  7'd69}: s1rd6 <= 60;
	     {1'd0,  7'd70}: s1rd6 <= 46;
	     {1'd0,  7'd71}: s1rd6 <= 62;
	     {1'd0,  7'd72}: s1rd6 <= 41;
	     {1'd0,  7'd73}: s1rd6 <= 57;
	     {1'd0,  7'd74}: s1rd6 <= 43;
	     {1'd0,  7'd75}: s1rd6 <= 59;
	     {1'd0,  7'd76}: s1rd6 <= 45;
	     {1'd0,  7'd77}: s1rd6 <= 61;
	     {1'd0,  7'd78}: s1rd6 <= 47;
	     {1'd0,  7'd79}: s1rd6 <= 63;
	     {1'd0,  7'd80}: s1rd6 <= 8;
	     {1'd0,  7'd81}: s1rd6 <= 24;
	     {1'd0,  7'd82}: s1rd6 <= 10;
	     {1'd0,  7'd83}: s1rd6 <= 26;
	     {1'd0,  7'd84}: s1rd6 <= 12;
	     {1'd0,  7'd85}: s1rd6 <= 28;
	     {1'd0,  7'd86}: s1rd6 <= 14;
	     {1'd0,  7'd87}: s1rd6 <= 30;
	     {1'd0,  7'd88}: s1rd6 <= 9;
	     {1'd0,  7'd89}: s1rd6 <= 25;
	     {1'd0,  7'd90}: s1rd6 <= 11;
	     {1'd0,  7'd91}: s1rd6 <= 27;
	     {1'd0,  7'd92}: s1rd6 <= 13;
	     {1'd0,  7'd93}: s1rd6 <= 29;
	     {1'd0,  7'd94}: s1rd6 <= 15;
	     {1'd0,  7'd95}: s1rd6 <= 31;
	     {1'd0,  7'd96}: s1rd6 <= 104;
	     {1'd0,  7'd97}: s1rd6 <= 120;
	     {1'd0,  7'd98}: s1rd6 <= 106;
	     {1'd0,  7'd99}: s1rd6 <= 122;
	     {1'd0,  7'd100}: s1rd6 <= 108;
	     {1'd0,  7'd101}: s1rd6 <= 124;
	     {1'd0,  7'd102}: s1rd6 <= 110;
	     {1'd0,  7'd103}: s1rd6 <= 126;
	     {1'd0,  7'd104}: s1rd6 <= 105;
	     {1'd0,  7'd105}: s1rd6 <= 121;
	     {1'd0,  7'd106}: s1rd6 <= 107;
	     {1'd0,  7'd107}: s1rd6 <= 123;
	     {1'd0,  7'd108}: s1rd6 <= 109;
	     {1'd0,  7'd109}: s1rd6 <= 125;
	     {1'd0,  7'd110}: s1rd6 <= 111;
	     {1'd0,  7'd111}: s1rd6 <= 127;
	     {1'd0,  7'd112}: s1rd6 <= 72;
	     {1'd0,  7'd113}: s1rd6 <= 88;
	     {1'd0,  7'd114}: s1rd6 <= 74;
	     {1'd0,  7'd115}: s1rd6 <= 90;
	     {1'd0,  7'd116}: s1rd6 <= 76;
	     {1'd0,  7'd117}: s1rd6 <= 92;
	     {1'd0,  7'd118}: s1rd6 <= 78;
	     {1'd0,  7'd119}: s1rd6 <= 94;
	     {1'd0,  7'd120}: s1rd6 <= 73;
	     {1'd0,  7'd121}: s1rd6 <= 89;
	     {1'd0,  7'd122}: s1rd6 <= 75;
	     {1'd0,  7'd123}: s1rd6 <= 91;
	     {1'd0,  7'd124}: s1rd6 <= 77;
	     {1'd0,  7'd125}: s1rd6 <= 93;
	     {1'd0,  7'd126}: s1rd6 <= 79;
	     {1'd0,  7'd127}: s1rd6 <= 95;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd7 <= 0;
	     {1'd0,  7'd1}: s1rd7 <= 16;
	     {1'd0,  7'd2}: s1rd7 <= 2;
	     {1'd0,  7'd3}: s1rd7 <= 18;
	     {1'd0,  7'd4}: s1rd7 <= 4;
	     {1'd0,  7'd5}: s1rd7 <= 20;
	     {1'd0,  7'd6}: s1rd7 <= 6;
	     {1'd0,  7'd7}: s1rd7 <= 22;
	     {1'd0,  7'd8}: s1rd7 <= 1;
	     {1'd0,  7'd9}: s1rd7 <= 17;
	     {1'd0,  7'd10}: s1rd7 <= 3;
	     {1'd0,  7'd11}: s1rd7 <= 19;
	     {1'd0,  7'd12}: s1rd7 <= 5;
	     {1'd0,  7'd13}: s1rd7 <= 21;
	     {1'd0,  7'd14}: s1rd7 <= 7;
	     {1'd0,  7'd15}: s1rd7 <= 23;
	     {1'd0,  7'd16}: s1rd7 <= 32;
	     {1'd0,  7'd17}: s1rd7 <= 48;
	     {1'd0,  7'd18}: s1rd7 <= 34;
	     {1'd0,  7'd19}: s1rd7 <= 50;
	     {1'd0,  7'd20}: s1rd7 <= 36;
	     {1'd0,  7'd21}: s1rd7 <= 52;
	     {1'd0,  7'd22}: s1rd7 <= 38;
	     {1'd0,  7'd23}: s1rd7 <= 54;
	     {1'd0,  7'd24}: s1rd7 <= 33;
	     {1'd0,  7'd25}: s1rd7 <= 49;
	     {1'd0,  7'd26}: s1rd7 <= 35;
	     {1'd0,  7'd27}: s1rd7 <= 51;
	     {1'd0,  7'd28}: s1rd7 <= 37;
	     {1'd0,  7'd29}: s1rd7 <= 53;
	     {1'd0,  7'd30}: s1rd7 <= 39;
	     {1'd0,  7'd31}: s1rd7 <= 55;
	     {1'd0,  7'd32}: s1rd7 <= 64;
	     {1'd0,  7'd33}: s1rd7 <= 80;
	     {1'd0,  7'd34}: s1rd7 <= 66;
	     {1'd0,  7'd35}: s1rd7 <= 82;
	     {1'd0,  7'd36}: s1rd7 <= 68;
	     {1'd0,  7'd37}: s1rd7 <= 84;
	     {1'd0,  7'd38}: s1rd7 <= 70;
	     {1'd0,  7'd39}: s1rd7 <= 86;
	     {1'd0,  7'd40}: s1rd7 <= 65;
	     {1'd0,  7'd41}: s1rd7 <= 81;
	     {1'd0,  7'd42}: s1rd7 <= 67;
	     {1'd0,  7'd43}: s1rd7 <= 83;
	     {1'd0,  7'd44}: s1rd7 <= 69;
	     {1'd0,  7'd45}: s1rd7 <= 85;
	     {1'd0,  7'd46}: s1rd7 <= 71;
	     {1'd0,  7'd47}: s1rd7 <= 87;
	     {1'd0,  7'd48}: s1rd7 <= 96;
	     {1'd0,  7'd49}: s1rd7 <= 112;
	     {1'd0,  7'd50}: s1rd7 <= 98;
	     {1'd0,  7'd51}: s1rd7 <= 114;
	     {1'd0,  7'd52}: s1rd7 <= 100;
	     {1'd0,  7'd53}: s1rd7 <= 116;
	     {1'd0,  7'd54}: s1rd7 <= 102;
	     {1'd0,  7'd55}: s1rd7 <= 118;
	     {1'd0,  7'd56}: s1rd7 <= 97;
	     {1'd0,  7'd57}: s1rd7 <= 113;
	     {1'd0,  7'd58}: s1rd7 <= 99;
	     {1'd0,  7'd59}: s1rd7 <= 115;
	     {1'd0,  7'd60}: s1rd7 <= 101;
	     {1'd0,  7'd61}: s1rd7 <= 117;
	     {1'd0,  7'd62}: s1rd7 <= 103;
	     {1'd0,  7'd63}: s1rd7 <= 119;
	     {1'd0,  7'd64}: s1rd7 <= 8;
	     {1'd0,  7'd65}: s1rd7 <= 24;
	     {1'd0,  7'd66}: s1rd7 <= 10;
	     {1'd0,  7'd67}: s1rd7 <= 26;
	     {1'd0,  7'd68}: s1rd7 <= 12;
	     {1'd0,  7'd69}: s1rd7 <= 28;
	     {1'd0,  7'd70}: s1rd7 <= 14;
	     {1'd0,  7'd71}: s1rd7 <= 30;
	     {1'd0,  7'd72}: s1rd7 <= 9;
	     {1'd0,  7'd73}: s1rd7 <= 25;
	     {1'd0,  7'd74}: s1rd7 <= 11;
	     {1'd0,  7'd75}: s1rd7 <= 27;
	     {1'd0,  7'd76}: s1rd7 <= 13;
	     {1'd0,  7'd77}: s1rd7 <= 29;
	     {1'd0,  7'd78}: s1rd7 <= 15;
	     {1'd0,  7'd79}: s1rd7 <= 31;
	     {1'd0,  7'd80}: s1rd7 <= 40;
	     {1'd0,  7'd81}: s1rd7 <= 56;
	     {1'd0,  7'd82}: s1rd7 <= 42;
	     {1'd0,  7'd83}: s1rd7 <= 58;
	     {1'd0,  7'd84}: s1rd7 <= 44;
	     {1'd0,  7'd85}: s1rd7 <= 60;
	     {1'd0,  7'd86}: s1rd7 <= 46;
	     {1'd0,  7'd87}: s1rd7 <= 62;
	     {1'd0,  7'd88}: s1rd7 <= 41;
	     {1'd0,  7'd89}: s1rd7 <= 57;
	     {1'd0,  7'd90}: s1rd7 <= 43;
	     {1'd0,  7'd91}: s1rd7 <= 59;
	     {1'd0,  7'd92}: s1rd7 <= 45;
	     {1'd0,  7'd93}: s1rd7 <= 61;
	     {1'd0,  7'd94}: s1rd7 <= 47;
	     {1'd0,  7'd95}: s1rd7 <= 63;
	     {1'd0,  7'd96}: s1rd7 <= 72;
	     {1'd0,  7'd97}: s1rd7 <= 88;
	     {1'd0,  7'd98}: s1rd7 <= 74;
	     {1'd0,  7'd99}: s1rd7 <= 90;
	     {1'd0,  7'd100}: s1rd7 <= 76;
	     {1'd0,  7'd101}: s1rd7 <= 92;
	     {1'd0,  7'd102}: s1rd7 <= 78;
	     {1'd0,  7'd103}: s1rd7 <= 94;
	     {1'd0,  7'd104}: s1rd7 <= 73;
	     {1'd0,  7'd105}: s1rd7 <= 89;
	     {1'd0,  7'd106}: s1rd7 <= 75;
	     {1'd0,  7'd107}: s1rd7 <= 91;
	     {1'd0,  7'd108}: s1rd7 <= 77;
	     {1'd0,  7'd109}: s1rd7 <= 93;
	     {1'd0,  7'd110}: s1rd7 <= 79;
	     {1'd0,  7'd111}: s1rd7 <= 95;
	     {1'd0,  7'd112}: s1rd7 <= 104;
	     {1'd0,  7'd113}: s1rd7 <= 120;
	     {1'd0,  7'd114}: s1rd7 <= 106;
	     {1'd0,  7'd115}: s1rd7 <= 122;
	     {1'd0,  7'd116}: s1rd7 <= 108;
	     {1'd0,  7'd117}: s1rd7 <= 124;
	     {1'd0,  7'd118}: s1rd7 <= 110;
	     {1'd0,  7'd119}: s1rd7 <= 126;
	     {1'd0,  7'd120}: s1rd7 <= 105;
	     {1'd0,  7'd121}: s1rd7 <= 121;
	     {1'd0,  7'd122}: s1rd7 <= 107;
	     {1'd0,  7'd123}: s1rd7 <= 123;
	     {1'd0,  7'd124}: s1rd7 <= 109;
	     {1'd0,  7'd125}: s1rd7 <= 125;
	     {1'd0,  7'd126}: s1rd7 <= 111;
	     {1'd0,  7'd127}: s1rd7 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet40203 sw(tm0_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 104;
	      {1'd0, 7'd1}: s2wr0 <= 105;
	      {1'd0, 7'd2}: s2wr0 <= 106;
	      {1'd0, 7'd3}: s2wr0 <= 107;
	      {1'd0, 7'd4}: s2wr0 <= 108;
	      {1'd0, 7'd5}: s2wr0 <= 109;
	      {1'd0, 7'd6}: s2wr0 <= 110;
	      {1'd0, 7'd7}: s2wr0 <= 111;
	      {1'd0, 7'd8}: s2wr0 <= 120;
	      {1'd0, 7'd9}: s2wr0 <= 121;
	      {1'd0, 7'd10}: s2wr0 <= 122;
	      {1'd0, 7'd11}: s2wr0 <= 123;
	      {1'd0, 7'd12}: s2wr0 <= 124;
	      {1'd0, 7'd13}: s2wr0 <= 125;
	      {1'd0, 7'd14}: s2wr0 <= 126;
	      {1'd0, 7'd15}: s2wr0 <= 127;
	      {1'd0, 7'd16}: s2wr0 <= 72;
	      {1'd0, 7'd17}: s2wr0 <= 73;
	      {1'd0, 7'd18}: s2wr0 <= 74;
	      {1'd0, 7'd19}: s2wr0 <= 75;
	      {1'd0, 7'd20}: s2wr0 <= 76;
	      {1'd0, 7'd21}: s2wr0 <= 77;
	      {1'd0, 7'd22}: s2wr0 <= 78;
	      {1'd0, 7'd23}: s2wr0 <= 79;
	      {1'd0, 7'd24}: s2wr0 <= 88;
	      {1'd0, 7'd25}: s2wr0 <= 89;
	      {1'd0, 7'd26}: s2wr0 <= 90;
	      {1'd0, 7'd27}: s2wr0 <= 91;
	      {1'd0, 7'd28}: s2wr0 <= 92;
	      {1'd0, 7'd29}: s2wr0 <= 93;
	      {1'd0, 7'd30}: s2wr0 <= 94;
	      {1'd0, 7'd31}: s2wr0 <= 95;
	      {1'd0, 7'd32}: s2wr0 <= 40;
	      {1'd0, 7'd33}: s2wr0 <= 41;
	      {1'd0, 7'd34}: s2wr0 <= 42;
	      {1'd0, 7'd35}: s2wr0 <= 43;
	      {1'd0, 7'd36}: s2wr0 <= 44;
	      {1'd0, 7'd37}: s2wr0 <= 45;
	      {1'd0, 7'd38}: s2wr0 <= 46;
	      {1'd0, 7'd39}: s2wr0 <= 47;
	      {1'd0, 7'd40}: s2wr0 <= 56;
	      {1'd0, 7'd41}: s2wr0 <= 57;
	      {1'd0, 7'd42}: s2wr0 <= 58;
	      {1'd0, 7'd43}: s2wr0 <= 59;
	      {1'd0, 7'd44}: s2wr0 <= 60;
	      {1'd0, 7'd45}: s2wr0 <= 61;
	      {1'd0, 7'd46}: s2wr0 <= 62;
	      {1'd0, 7'd47}: s2wr0 <= 63;
	      {1'd0, 7'd48}: s2wr0 <= 8;
	      {1'd0, 7'd49}: s2wr0 <= 9;
	      {1'd0, 7'd50}: s2wr0 <= 10;
	      {1'd0, 7'd51}: s2wr0 <= 11;
	      {1'd0, 7'd52}: s2wr0 <= 12;
	      {1'd0, 7'd53}: s2wr0 <= 13;
	      {1'd0, 7'd54}: s2wr0 <= 14;
	      {1'd0, 7'd55}: s2wr0 <= 15;
	      {1'd0, 7'd56}: s2wr0 <= 24;
	      {1'd0, 7'd57}: s2wr0 <= 25;
	      {1'd0, 7'd58}: s2wr0 <= 26;
	      {1'd0, 7'd59}: s2wr0 <= 27;
	      {1'd0, 7'd60}: s2wr0 <= 28;
	      {1'd0, 7'd61}: s2wr0 <= 29;
	      {1'd0, 7'd62}: s2wr0 <= 30;
	      {1'd0, 7'd63}: s2wr0 <= 31;
	      {1'd0, 7'd64}: s2wr0 <= 96;
	      {1'd0, 7'd65}: s2wr0 <= 97;
	      {1'd0, 7'd66}: s2wr0 <= 98;
	      {1'd0, 7'd67}: s2wr0 <= 99;
	      {1'd0, 7'd68}: s2wr0 <= 100;
	      {1'd0, 7'd69}: s2wr0 <= 101;
	      {1'd0, 7'd70}: s2wr0 <= 102;
	      {1'd0, 7'd71}: s2wr0 <= 103;
	      {1'd0, 7'd72}: s2wr0 <= 112;
	      {1'd0, 7'd73}: s2wr0 <= 113;
	      {1'd0, 7'd74}: s2wr0 <= 114;
	      {1'd0, 7'd75}: s2wr0 <= 115;
	      {1'd0, 7'd76}: s2wr0 <= 116;
	      {1'd0, 7'd77}: s2wr0 <= 117;
	      {1'd0, 7'd78}: s2wr0 <= 118;
	      {1'd0, 7'd79}: s2wr0 <= 119;
	      {1'd0, 7'd80}: s2wr0 <= 64;
	      {1'd0, 7'd81}: s2wr0 <= 65;
	      {1'd0, 7'd82}: s2wr0 <= 66;
	      {1'd0, 7'd83}: s2wr0 <= 67;
	      {1'd0, 7'd84}: s2wr0 <= 68;
	      {1'd0, 7'd85}: s2wr0 <= 69;
	      {1'd0, 7'd86}: s2wr0 <= 70;
	      {1'd0, 7'd87}: s2wr0 <= 71;
	      {1'd0, 7'd88}: s2wr0 <= 80;
	      {1'd0, 7'd89}: s2wr0 <= 81;
	      {1'd0, 7'd90}: s2wr0 <= 82;
	      {1'd0, 7'd91}: s2wr0 <= 83;
	      {1'd0, 7'd92}: s2wr0 <= 84;
	      {1'd0, 7'd93}: s2wr0 <= 85;
	      {1'd0, 7'd94}: s2wr0 <= 86;
	      {1'd0, 7'd95}: s2wr0 <= 87;
	      {1'd0, 7'd96}: s2wr0 <= 32;
	      {1'd0, 7'd97}: s2wr0 <= 33;
	      {1'd0, 7'd98}: s2wr0 <= 34;
	      {1'd0, 7'd99}: s2wr0 <= 35;
	      {1'd0, 7'd100}: s2wr0 <= 36;
	      {1'd0, 7'd101}: s2wr0 <= 37;
	      {1'd0, 7'd102}: s2wr0 <= 38;
	      {1'd0, 7'd103}: s2wr0 <= 39;
	      {1'd0, 7'd104}: s2wr0 <= 48;
	      {1'd0, 7'd105}: s2wr0 <= 49;
	      {1'd0, 7'd106}: s2wr0 <= 50;
	      {1'd0, 7'd107}: s2wr0 <= 51;
	      {1'd0, 7'd108}: s2wr0 <= 52;
	      {1'd0, 7'd109}: s2wr0 <= 53;
	      {1'd0, 7'd110}: s2wr0 <= 54;
	      {1'd0, 7'd111}: s2wr0 <= 55;
	      {1'd0, 7'd112}: s2wr0 <= 0;
	      {1'd0, 7'd113}: s2wr0 <= 1;
	      {1'd0, 7'd114}: s2wr0 <= 2;
	      {1'd0, 7'd115}: s2wr0 <= 3;
	      {1'd0, 7'd116}: s2wr0 <= 4;
	      {1'd0, 7'd117}: s2wr0 <= 5;
	      {1'd0, 7'd118}: s2wr0 <= 6;
	      {1'd0, 7'd119}: s2wr0 <= 7;
	      {1'd0, 7'd120}: s2wr0 <= 16;
	      {1'd0, 7'd121}: s2wr0 <= 17;
	      {1'd0, 7'd122}: s2wr0 <= 18;
	      {1'd0, 7'd123}: s2wr0 <= 19;
	      {1'd0, 7'd124}: s2wr0 <= 20;
	      {1'd0, 7'd125}: s2wr0 <= 21;
	      {1'd0, 7'd126}: s2wr0 <= 22;
	      {1'd0, 7'd127}: s2wr0 <= 23;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 72;
	      {1'd0, 7'd1}: s2wr1 <= 73;
	      {1'd0, 7'd2}: s2wr1 <= 74;
	      {1'd0, 7'd3}: s2wr1 <= 75;
	      {1'd0, 7'd4}: s2wr1 <= 76;
	      {1'd0, 7'd5}: s2wr1 <= 77;
	      {1'd0, 7'd6}: s2wr1 <= 78;
	      {1'd0, 7'd7}: s2wr1 <= 79;
	      {1'd0, 7'd8}: s2wr1 <= 88;
	      {1'd0, 7'd9}: s2wr1 <= 89;
	      {1'd0, 7'd10}: s2wr1 <= 90;
	      {1'd0, 7'd11}: s2wr1 <= 91;
	      {1'd0, 7'd12}: s2wr1 <= 92;
	      {1'd0, 7'd13}: s2wr1 <= 93;
	      {1'd0, 7'd14}: s2wr1 <= 94;
	      {1'd0, 7'd15}: s2wr1 <= 95;
	      {1'd0, 7'd16}: s2wr1 <= 104;
	      {1'd0, 7'd17}: s2wr1 <= 105;
	      {1'd0, 7'd18}: s2wr1 <= 106;
	      {1'd0, 7'd19}: s2wr1 <= 107;
	      {1'd0, 7'd20}: s2wr1 <= 108;
	      {1'd0, 7'd21}: s2wr1 <= 109;
	      {1'd0, 7'd22}: s2wr1 <= 110;
	      {1'd0, 7'd23}: s2wr1 <= 111;
	      {1'd0, 7'd24}: s2wr1 <= 120;
	      {1'd0, 7'd25}: s2wr1 <= 121;
	      {1'd0, 7'd26}: s2wr1 <= 122;
	      {1'd0, 7'd27}: s2wr1 <= 123;
	      {1'd0, 7'd28}: s2wr1 <= 124;
	      {1'd0, 7'd29}: s2wr1 <= 125;
	      {1'd0, 7'd30}: s2wr1 <= 126;
	      {1'd0, 7'd31}: s2wr1 <= 127;
	      {1'd0, 7'd32}: s2wr1 <= 8;
	      {1'd0, 7'd33}: s2wr1 <= 9;
	      {1'd0, 7'd34}: s2wr1 <= 10;
	      {1'd0, 7'd35}: s2wr1 <= 11;
	      {1'd0, 7'd36}: s2wr1 <= 12;
	      {1'd0, 7'd37}: s2wr1 <= 13;
	      {1'd0, 7'd38}: s2wr1 <= 14;
	      {1'd0, 7'd39}: s2wr1 <= 15;
	      {1'd0, 7'd40}: s2wr1 <= 24;
	      {1'd0, 7'd41}: s2wr1 <= 25;
	      {1'd0, 7'd42}: s2wr1 <= 26;
	      {1'd0, 7'd43}: s2wr1 <= 27;
	      {1'd0, 7'd44}: s2wr1 <= 28;
	      {1'd0, 7'd45}: s2wr1 <= 29;
	      {1'd0, 7'd46}: s2wr1 <= 30;
	      {1'd0, 7'd47}: s2wr1 <= 31;
	      {1'd0, 7'd48}: s2wr1 <= 40;
	      {1'd0, 7'd49}: s2wr1 <= 41;
	      {1'd0, 7'd50}: s2wr1 <= 42;
	      {1'd0, 7'd51}: s2wr1 <= 43;
	      {1'd0, 7'd52}: s2wr1 <= 44;
	      {1'd0, 7'd53}: s2wr1 <= 45;
	      {1'd0, 7'd54}: s2wr1 <= 46;
	      {1'd0, 7'd55}: s2wr1 <= 47;
	      {1'd0, 7'd56}: s2wr1 <= 56;
	      {1'd0, 7'd57}: s2wr1 <= 57;
	      {1'd0, 7'd58}: s2wr1 <= 58;
	      {1'd0, 7'd59}: s2wr1 <= 59;
	      {1'd0, 7'd60}: s2wr1 <= 60;
	      {1'd0, 7'd61}: s2wr1 <= 61;
	      {1'd0, 7'd62}: s2wr1 <= 62;
	      {1'd0, 7'd63}: s2wr1 <= 63;
	      {1'd0, 7'd64}: s2wr1 <= 64;
	      {1'd0, 7'd65}: s2wr1 <= 65;
	      {1'd0, 7'd66}: s2wr1 <= 66;
	      {1'd0, 7'd67}: s2wr1 <= 67;
	      {1'd0, 7'd68}: s2wr1 <= 68;
	      {1'd0, 7'd69}: s2wr1 <= 69;
	      {1'd0, 7'd70}: s2wr1 <= 70;
	      {1'd0, 7'd71}: s2wr1 <= 71;
	      {1'd0, 7'd72}: s2wr1 <= 80;
	      {1'd0, 7'd73}: s2wr1 <= 81;
	      {1'd0, 7'd74}: s2wr1 <= 82;
	      {1'd0, 7'd75}: s2wr1 <= 83;
	      {1'd0, 7'd76}: s2wr1 <= 84;
	      {1'd0, 7'd77}: s2wr1 <= 85;
	      {1'd0, 7'd78}: s2wr1 <= 86;
	      {1'd0, 7'd79}: s2wr1 <= 87;
	      {1'd0, 7'd80}: s2wr1 <= 96;
	      {1'd0, 7'd81}: s2wr1 <= 97;
	      {1'd0, 7'd82}: s2wr1 <= 98;
	      {1'd0, 7'd83}: s2wr1 <= 99;
	      {1'd0, 7'd84}: s2wr1 <= 100;
	      {1'd0, 7'd85}: s2wr1 <= 101;
	      {1'd0, 7'd86}: s2wr1 <= 102;
	      {1'd0, 7'd87}: s2wr1 <= 103;
	      {1'd0, 7'd88}: s2wr1 <= 112;
	      {1'd0, 7'd89}: s2wr1 <= 113;
	      {1'd0, 7'd90}: s2wr1 <= 114;
	      {1'd0, 7'd91}: s2wr1 <= 115;
	      {1'd0, 7'd92}: s2wr1 <= 116;
	      {1'd0, 7'd93}: s2wr1 <= 117;
	      {1'd0, 7'd94}: s2wr1 <= 118;
	      {1'd0, 7'd95}: s2wr1 <= 119;
	      {1'd0, 7'd96}: s2wr1 <= 0;
	      {1'd0, 7'd97}: s2wr1 <= 1;
	      {1'd0, 7'd98}: s2wr1 <= 2;
	      {1'd0, 7'd99}: s2wr1 <= 3;
	      {1'd0, 7'd100}: s2wr1 <= 4;
	      {1'd0, 7'd101}: s2wr1 <= 5;
	      {1'd0, 7'd102}: s2wr1 <= 6;
	      {1'd0, 7'd103}: s2wr1 <= 7;
	      {1'd0, 7'd104}: s2wr1 <= 16;
	      {1'd0, 7'd105}: s2wr1 <= 17;
	      {1'd0, 7'd106}: s2wr1 <= 18;
	      {1'd0, 7'd107}: s2wr1 <= 19;
	      {1'd0, 7'd108}: s2wr1 <= 20;
	      {1'd0, 7'd109}: s2wr1 <= 21;
	      {1'd0, 7'd110}: s2wr1 <= 22;
	      {1'd0, 7'd111}: s2wr1 <= 23;
	      {1'd0, 7'd112}: s2wr1 <= 32;
	      {1'd0, 7'd113}: s2wr1 <= 33;
	      {1'd0, 7'd114}: s2wr1 <= 34;
	      {1'd0, 7'd115}: s2wr1 <= 35;
	      {1'd0, 7'd116}: s2wr1 <= 36;
	      {1'd0, 7'd117}: s2wr1 <= 37;
	      {1'd0, 7'd118}: s2wr1 <= 38;
	      {1'd0, 7'd119}: s2wr1 <= 39;
	      {1'd0, 7'd120}: s2wr1 <= 48;
	      {1'd0, 7'd121}: s2wr1 <= 49;
	      {1'd0, 7'd122}: s2wr1 <= 50;
	      {1'd0, 7'd123}: s2wr1 <= 51;
	      {1'd0, 7'd124}: s2wr1 <= 52;
	      {1'd0, 7'd125}: s2wr1 <= 53;
	      {1'd0, 7'd126}: s2wr1 <= 54;
	      {1'd0, 7'd127}: s2wr1 <= 55;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 40;
	      {1'd0, 7'd1}: s2wr2 <= 41;
	      {1'd0, 7'd2}: s2wr2 <= 42;
	      {1'd0, 7'd3}: s2wr2 <= 43;
	      {1'd0, 7'd4}: s2wr2 <= 44;
	      {1'd0, 7'd5}: s2wr2 <= 45;
	      {1'd0, 7'd6}: s2wr2 <= 46;
	      {1'd0, 7'd7}: s2wr2 <= 47;
	      {1'd0, 7'd8}: s2wr2 <= 56;
	      {1'd0, 7'd9}: s2wr2 <= 57;
	      {1'd0, 7'd10}: s2wr2 <= 58;
	      {1'd0, 7'd11}: s2wr2 <= 59;
	      {1'd0, 7'd12}: s2wr2 <= 60;
	      {1'd0, 7'd13}: s2wr2 <= 61;
	      {1'd0, 7'd14}: s2wr2 <= 62;
	      {1'd0, 7'd15}: s2wr2 <= 63;
	      {1'd0, 7'd16}: s2wr2 <= 8;
	      {1'd0, 7'd17}: s2wr2 <= 9;
	      {1'd0, 7'd18}: s2wr2 <= 10;
	      {1'd0, 7'd19}: s2wr2 <= 11;
	      {1'd0, 7'd20}: s2wr2 <= 12;
	      {1'd0, 7'd21}: s2wr2 <= 13;
	      {1'd0, 7'd22}: s2wr2 <= 14;
	      {1'd0, 7'd23}: s2wr2 <= 15;
	      {1'd0, 7'd24}: s2wr2 <= 24;
	      {1'd0, 7'd25}: s2wr2 <= 25;
	      {1'd0, 7'd26}: s2wr2 <= 26;
	      {1'd0, 7'd27}: s2wr2 <= 27;
	      {1'd0, 7'd28}: s2wr2 <= 28;
	      {1'd0, 7'd29}: s2wr2 <= 29;
	      {1'd0, 7'd30}: s2wr2 <= 30;
	      {1'd0, 7'd31}: s2wr2 <= 31;
	      {1'd0, 7'd32}: s2wr2 <= 104;
	      {1'd0, 7'd33}: s2wr2 <= 105;
	      {1'd0, 7'd34}: s2wr2 <= 106;
	      {1'd0, 7'd35}: s2wr2 <= 107;
	      {1'd0, 7'd36}: s2wr2 <= 108;
	      {1'd0, 7'd37}: s2wr2 <= 109;
	      {1'd0, 7'd38}: s2wr2 <= 110;
	      {1'd0, 7'd39}: s2wr2 <= 111;
	      {1'd0, 7'd40}: s2wr2 <= 120;
	      {1'd0, 7'd41}: s2wr2 <= 121;
	      {1'd0, 7'd42}: s2wr2 <= 122;
	      {1'd0, 7'd43}: s2wr2 <= 123;
	      {1'd0, 7'd44}: s2wr2 <= 124;
	      {1'd0, 7'd45}: s2wr2 <= 125;
	      {1'd0, 7'd46}: s2wr2 <= 126;
	      {1'd0, 7'd47}: s2wr2 <= 127;
	      {1'd0, 7'd48}: s2wr2 <= 72;
	      {1'd0, 7'd49}: s2wr2 <= 73;
	      {1'd0, 7'd50}: s2wr2 <= 74;
	      {1'd0, 7'd51}: s2wr2 <= 75;
	      {1'd0, 7'd52}: s2wr2 <= 76;
	      {1'd0, 7'd53}: s2wr2 <= 77;
	      {1'd0, 7'd54}: s2wr2 <= 78;
	      {1'd0, 7'd55}: s2wr2 <= 79;
	      {1'd0, 7'd56}: s2wr2 <= 88;
	      {1'd0, 7'd57}: s2wr2 <= 89;
	      {1'd0, 7'd58}: s2wr2 <= 90;
	      {1'd0, 7'd59}: s2wr2 <= 91;
	      {1'd0, 7'd60}: s2wr2 <= 92;
	      {1'd0, 7'd61}: s2wr2 <= 93;
	      {1'd0, 7'd62}: s2wr2 <= 94;
	      {1'd0, 7'd63}: s2wr2 <= 95;
	      {1'd0, 7'd64}: s2wr2 <= 32;
	      {1'd0, 7'd65}: s2wr2 <= 33;
	      {1'd0, 7'd66}: s2wr2 <= 34;
	      {1'd0, 7'd67}: s2wr2 <= 35;
	      {1'd0, 7'd68}: s2wr2 <= 36;
	      {1'd0, 7'd69}: s2wr2 <= 37;
	      {1'd0, 7'd70}: s2wr2 <= 38;
	      {1'd0, 7'd71}: s2wr2 <= 39;
	      {1'd0, 7'd72}: s2wr2 <= 48;
	      {1'd0, 7'd73}: s2wr2 <= 49;
	      {1'd0, 7'd74}: s2wr2 <= 50;
	      {1'd0, 7'd75}: s2wr2 <= 51;
	      {1'd0, 7'd76}: s2wr2 <= 52;
	      {1'd0, 7'd77}: s2wr2 <= 53;
	      {1'd0, 7'd78}: s2wr2 <= 54;
	      {1'd0, 7'd79}: s2wr2 <= 55;
	      {1'd0, 7'd80}: s2wr2 <= 0;
	      {1'd0, 7'd81}: s2wr2 <= 1;
	      {1'd0, 7'd82}: s2wr2 <= 2;
	      {1'd0, 7'd83}: s2wr2 <= 3;
	      {1'd0, 7'd84}: s2wr2 <= 4;
	      {1'd0, 7'd85}: s2wr2 <= 5;
	      {1'd0, 7'd86}: s2wr2 <= 6;
	      {1'd0, 7'd87}: s2wr2 <= 7;
	      {1'd0, 7'd88}: s2wr2 <= 16;
	      {1'd0, 7'd89}: s2wr2 <= 17;
	      {1'd0, 7'd90}: s2wr2 <= 18;
	      {1'd0, 7'd91}: s2wr2 <= 19;
	      {1'd0, 7'd92}: s2wr2 <= 20;
	      {1'd0, 7'd93}: s2wr2 <= 21;
	      {1'd0, 7'd94}: s2wr2 <= 22;
	      {1'd0, 7'd95}: s2wr2 <= 23;
	      {1'd0, 7'd96}: s2wr2 <= 96;
	      {1'd0, 7'd97}: s2wr2 <= 97;
	      {1'd0, 7'd98}: s2wr2 <= 98;
	      {1'd0, 7'd99}: s2wr2 <= 99;
	      {1'd0, 7'd100}: s2wr2 <= 100;
	      {1'd0, 7'd101}: s2wr2 <= 101;
	      {1'd0, 7'd102}: s2wr2 <= 102;
	      {1'd0, 7'd103}: s2wr2 <= 103;
	      {1'd0, 7'd104}: s2wr2 <= 112;
	      {1'd0, 7'd105}: s2wr2 <= 113;
	      {1'd0, 7'd106}: s2wr2 <= 114;
	      {1'd0, 7'd107}: s2wr2 <= 115;
	      {1'd0, 7'd108}: s2wr2 <= 116;
	      {1'd0, 7'd109}: s2wr2 <= 117;
	      {1'd0, 7'd110}: s2wr2 <= 118;
	      {1'd0, 7'd111}: s2wr2 <= 119;
	      {1'd0, 7'd112}: s2wr2 <= 64;
	      {1'd0, 7'd113}: s2wr2 <= 65;
	      {1'd0, 7'd114}: s2wr2 <= 66;
	      {1'd0, 7'd115}: s2wr2 <= 67;
	      {1'd0, 7'd116}: s2wr2 <= 68;
	      {1'd0, 7'd117}: s2wr2 <= 69;
	      {1'd0, 7'd118}: s2wr2 <= 70;
	      {1'd0, 7'd119}: s2wr2 <= 71;
	      {1'd0, 7'd120}: s2wr2 <= 80;
	      {1'd0, 7'd121}: s2wr2 <= 81;
	      {1'd0, 7'd122}: s2wr2 <= 82;
	      {1'd0, 7'd123}: s2wr2 <= 83;
	      {1'd0, 7'd124}: s2wr2 <= 84;
	      {1'd0, 7'd125}: s2wr2 <= 85;
	      {1'd0, 7'd126}: s2wr2 <= 86;
	      {1'd0, 7'd127}: s2wr2 <= 87;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 8;
	      {1'd0, 7'd1}: s2wr3 <= 9;
	      {1'd0, 7'd2}: s2wr3 <= 10;
	      {1'd0, 7'd3}: s2wr3 <= 11;
	      {1'd0, 7'd4}: s2wr3 <= 12;
	      {1'd0, 7'd5}: s2wr3 <= 13;
	      {1'd0, 7'd6}: s2wr3 <= 14;
	      {1'd0, 7'd7}: s2wr3 <= 15;
	      {1'd0, 7'd8}: s2wr3 <= 24;
	      {1'd0, 7'd9}: s2wr3 <= 25;
	      {1'd0, 7'd10}: s2wr3 <= 26;
	      {1'd0, 7'd11}: s2wr3 <= 27;
	      {1'd0, 7'd12}: s2wr3 <= 28;
	      {1'd0, 7'd13}: s2wr3 <= 29;
	      {1'd0, 7'd14}: s2wr3 <= 30;
	      {1'd0, 7'd15}: s2wr3 <= 31;
	      {1'd0, 7'd16}: s2wr3 <= 40;
	      {1'd0, 7'd17}: s2wr3 <= 41;
	      {1'd0, 7'd18}: s2wr3 <= 42;
	      {1'd0, 7'd19}: s2wr3 <= 43;
	      {1'd0, 7'd20}: s2wr3 <= 44;
	      {1'd0, 7'd21}: s2wr3 <= 45;
	      {1'd0, 7'd22}: s2wr3 <= 46;
	      {1'd0, 7'd23}: s2wr3 <= 47;
	      {1'd0, 7'd24}: s2wr3 <= 56;
	      {1'd0, 7'd25}: s2wr3 <= 57;
	      {1'd0, 7'd26}: s2wr3 <= 58;
	      {1'd0, 7'd27}: s2wr3 <= 59;
	      {1'd0, 7'd28}: s2wr3 <= 60;
	      {1'd0, 7'd29}: s2wr3 <= 61;
	      {1'd0, 7'd30}: s2wr3 <= 62;
	      {1'd0, 7'd31}: s2wr3 <= 63;
	      {1'd0, 7'd32}: s2wr3 <= 72;
	      {1'd0, 7'd33}: s2wr3 <= 73;
	      {1'd0, 7'd34}: s2wr3 <= 74;
	      {1'd0, 7'd35}: s2wr3 <= 75;
	      {1'd0, 7'd36}: s2wr3 <= 76;
	      {1'd0, 7'd37}: s2wr3 <= 77;
	      {1'd0, 7'd38}: s2wr3 <= 78;
	      {1'd0, 7'd39}: s2wr3 <= 79;
	      {1'd0, 7'd40}: s2wr3 <= 88;
	      {1'd0, 7'd41}: s2wr3 <= 89;
	      {1'd0, 7'd42}: s2wr3 <= 90;
	      {1'd0, 7'd43}: s2wr3 <= 91;
	      {1'd0, 7'd44}: s2wr3 <= 92;
	      {1'd0, 7'd45}: s2wr3 <= 93;
	      {1'd0, 7'd46}: s2wr3 <= 94;
	      {1'd0, 7'd47}: s2wr3 <= 95;
	      {1'd0, 7'd48}: s2wr3 <= 104;
	      {1'd0, 7'd49}: s2wr3 <= 105;
	      {1'd0, 7'd50}: s2wr3 <= 106;
	      {1'd0, 7'd51}: s2wr3 <= 107;
	      {1'd0, 7'd52}: s2wr3 <= 108;
	      {1'd0, 7'd53}: s2wr3 <= 109;
	      {1'd0, 7'd54}: s2wr3 <= 110;
	      {1'd0, 7'd55}: s2wr3 <= 111;
	      {1'd0, 7'd56}: s2wr3 <= 120;
	      {1'd0, 7'd57}: s2wr3 <= 121;
	      {1'd0, 7'd58}: s2wr3 <= 122;
	      {1'd0, 7'd59}: s2wr3 <= 123;
	      {1'd0, 7'd60}: s2wr3 <= 124;
	      {1'd0, 7'd61}: s2wr3 <= 125;
	      {1'd0, 7'd62}: s2wr3 <= 126;
	      {1'd0, 7'd63}: s2wr3 <= 127;
	      {1'd0, 7'd64}: s2wr3 <= 0;
	      {1'd0, 7'd65}: s2wr3 <= 1;
	      {1'd0, 7'd66}: s2wr3 <= 2;
	      {1'd0, 7'd67}: s2wr3 <= 3;
	      {1'd0, 7'd68}: s2wr3 <= 4;
	      {1'd0, 7'd69}: s2wr3 <= 5;
	      {1'd0, 7'd70}: s2wr3 <= 6;
	      {1'd0, 7'd71}: s2wr3 <= 7;
	      {1'd0, 7'd72}: s2wr3 <= 16;
	      {1'd0, 7'd73}: s2wr3 <= 17;
	      {1'd0, 7'd74}: s2wr3 <= 18;
	      {1'd0, 7'd75}: s2wr3 <= 19;
	      {1'd0, 7'd76}: s2wr3 <= 20;
	      {1'd0, 7'd77}: s2wr3 <= 21;
	      {1'd0, 7'd78}: s2wr3 <= 22;
	      {1'd0, 7'd79}: s2wr3 <= 23;
	      {1'd0, 7'd80}: s2wr3 <= 32;
	      {1'd0, 7'd81}: s2wr3 <= 33;
	      {1'd0, 7'd82}: s2wr3 <= 34;
	      {1'd0, 7'd83}: s2wr3 <= 35;
	      {1'd0, 7'd84}: s2wr3 <= 36;
	      {1'd0, 7'd85}: s2wr3 <= 37;
	      {1'd0, 7'd86}: s2wr3 <= 38;
	      {1'd0, 7'd87}: s2wr3 <= 39;
	      {1'd0, 7'd88}: s2wr3 <= 48;
	      {1'd0, 7'd89}: s2wr3 <= 49;
	      {1'd0, 7'd90}: s2wr3 <= 50;
	      {1'd0, 7'd91}: s2wr3 <= 51;
	      {1'd0, 7'd92}: s2wr3 <= 52;
	      {1'd0, 7'd93}: s2wr3 <= 53;
	      {1'd0, 7'd94}: s2wr3 <= 54;
	      {1'd0, 7'd95}: s2wr3 <= 55;
	      {1'd0, 7'd96}: s2wr3 <= 64;
	      {1'd0, 7'd97}: s2wr3 <= 65;
	      {1'd0, 7'd98}: s2wr3 <= 66;
	      {1'd0, 7'd99}: s2wr3 <= 67;
	      {1'd0, 7'd100}: s2wr3 <= 68;
	      {1'd0, 7'd101}: s2wr3 <= 69;
	      {1'd0, 7'd102}: s2wr3 <= 70;
	      {1'd0, 7'd103}: s2wr3 <= 71;
	      {1'd0, 7'd104}: s2wr3 <= 80;
	      {1'd0, 7'd105}: s2wr3 <= 81;
	      {1'd0, 7'd106}: s2wr3 <= 82;
	      {1'd0, 7'd107}: s2wr3 <= 83;
	      {1'd0, 7'd108}: s2wr3 <= 84;
	      {1'd0, 7'd109}: s2wr3 <= 85;
	      {1'd0, 7'd110}: s2wr3 <= 86;
	      {1'd0, 7'd111}: s2wr3 <= 87;
	      {1'd0, 7'd112}: s2wr3 <= 96;
	      {1'd0, 7'd113}: s2wr3 <= 97;
	      {1'd0, 7'd114}: s2wr3 <= 98;
	      {1'd0, 7'd115}: s2wr3 <= 99;
	      {1'd0, 7'd116}: s2wr3 <= 100;
	      {1'd0, 7'd117}: s2wr3 <= 101;
	      {1'd0, 7'd118}: s2wr3 <= 102;
	      {1'd0, 7'd119}: s2wr3 <= 103;
	      {1'd0, 7'd120}: s2wr3 <= 112;
	      {1'd0, 7'd121}: s2wr3 <= 113;
	      {1'd0, 7'd122}: s2wr3 <= 114;
	      {1'd0, 7'd123}: s2wr3 <= 115;
	      {1'd0, 7'd124}: s2wr3 <= 116;
	      {1'd0, 7'd125}: s2wr3 <= 117;
	      {1'd0, 7'd126}: s2wr3 <= 118;
	      {1'd0, 7'd127}: s2wr3 <= 119;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr4 <= 96;
	      {1'd0, 7'd1}: s2wr4 <= 97;
	      {1'd0, 7'd2}: s2wr4 <= 98;
	      {1'd0, 7'd3}: s2wr4 <= 99;
	      {1'd0, 7'd4}: s2wr4 <= 100;
	      {1'd0, 7'd5}: s2wr4 <= 101;
	      {1'd0, 7'd6}: s2wr4 <= 102;
	      {1'd0, 7'd7}: s2wr4 <= 103;
	      {1'd0, 7'd8}: s2wr4 <= 112;
	      {1'd0, 7'd9}: s2wr4 <= 113;
	      {1'd0, 7'd10}: s2wr4 <= 114;
	      {1'd0, 7'd11}: s2wr4 <= 115;
	      {1'd0, 7'd12}: s2wr4 <= 116;
	      {1'd0, 7'd13}: s2wr4 <= 117;
	      {1'd0, 7'd14}: s2wr4 <= 118;
	      {1'd0, 7'd15}: s2wr4 <= 119;
	      {1'd0, 7'd16}: s2wr4 <= 64;
	      {1'd0, 7'd17}: s2wr4 <= 65;
	      {1'd0, 7'd18}: s2wr4 <= 66;
	      {1'd0, 7'd19}: s2wr4 <= 67;
	      {1'd0, 7'd20}: s2wr4 <= 68;
	      {1'd0, 7'd21}: s2wr4 <= 69;
	      {1'd0, 7'd22}: s2wr4 <= 70;
	      {1'd0, 7'd23}: s2wr4 <= 71;
	      {1'd0, 7'd24}: s2wr4 <= 80;
	      {1'd0, 7'd25}: s2wr4 <= 81;
	      {1'd0, 7'd26}: s2wr4 <= 82;
	      {1'd0, 7'd27}: s2wr4 <= 83;
	      {1'd0, 7'd28}: s2wr4 <= 84;
	      {1'd0, 7'd29}: s2wr4 <= 85;
	      {1'd0, 7'd30}: s2wr4 <= 86;
	      {1'd0, 7'd31}: s2wr4 <= 87;
	      {1'd0, 7'd32}: s2wr4 <= 32;
	      {1'd0, 7'd33}: s2wr4 <= 33;
	      {1'd0, 7'd34}: s2wr4 <= 34;
	      {1'd0, 7'd35}: s2wr4 <= 35;
	      {1'd0, 7'd36}: s2wr4 <= 36;
	      {1'd0, 7'd37}: s2wr4 <= 37;
	      {1'd0, 7'd38}: s2wr4 <= 38;
	      {1'd0, 7'd39}: s2wr4 <= 39;
	      {1'd0, 7'd40}: s2wr4 <= 48;
	      {1'd0, 7'd41}: s2wr4 <= 49;
	      {1'd0, 7'd42}: s2wr4 <= 50;
	      {1'd0, 7'd43}: s2wr4 <= 51;
	      {1'd0, 7'd44}: s2wr4 <= 52;
	      {1'd0, 7'd45}: s2wr4 <= 53;
	      {1'd0, 7'd46}: s2wr4 <= 54;
	      {1'd0, 7'd47}: s2wr4 <= 55;
	      {1'd0, 7'd48}: s2wr4 <= 0;
	      {1'd0, 7'd49}: s2wr4 <= 1;
	      {1'd0, 7'd50}: s2wr4 <= 2;
	      {1'd0, 7'd51}: s2wr4 <= 3;
	      {1'd0, 7'd52}: s2wr4 <= 4;
	      {1'd0, 7'd53}: s2wr4 <= 5;
	      {1'd0, 7'd54}: s2wr4 <= 6;
	      {1'd0, 7'd55}: s2wr4 <= 7;
	      {1'd0, 7'd56}: s2wr4 <= 16;
	      {1'd0, 7'd57}: s2wr4 <= 17;
	      {1'd0, 7'd58}: s2wr4 <= 18;
	      {1'd0, 7'd59}: s2wr4 <= 19;
	      {1'd0, 7'd60}: s2wr4 <= 20;
	      {1'd0, 7'd61}: s2wr4 <= 21;
	      {1'd0, 7'd62}: s2wr4 <= 22;
	      {1'd0, 7'd63}: s2wr4 <= 23;
	      {1'd0, 7'd64}: s2wr4 <= 104;
	      {1'd0, 7'd65}: s2wr4 <= 105;
	      {1'd0, 7'd66}: s2wr4 <= 106;
	      {1'd0, 7'd67}: s2wr4 <= 107;
	      {1'd0, 7'd68}: s2wr4 <= 108;
	      {1'd0, 7'd69}: s2wr4 <= 109;
	      {1'd0, 7'd70}: s2wr4 <= 110;
	      {1'd0, 7'd71}: s2wr4 <= 111;
	      {1'd0, 7'd72}: s2wr4 <= 120;
	      {1'd0, 7'd73}: s2wr4 <= 121;
	      {1'd0, 7'd74}: s2wr4 <= 122;
	      {1'd0, 7'd75}: s2wr4 <= 123;
	      {1'd0, 7'd76}: s2wr4 <= 124;
	      {1'd0, 7'd77}: s2wr4 <= 125;
	      {1'd0, 7'd78}: s2wr4 <= 126;
	      {1'd0, 7'd79}: s2wr4 <= 127;
	      {1'd0, 7'd80}: s2wr4 <= 72;
	      {1'd0, 7'd81}: s2wr4 <= 73;
	      {1'd0, 7'd82}: s2wr4 <= 74;
	      {1'd0, 7'd83}: s2wr4 <= 75;
	      {1'd0, 7'd84}: s2wr4 <= 76;
	      {1'd0, 7'd85}: s2wr4 <= 77;
	      {1'd0, 7'd86}: s2wr4 <= 78;
	      {1'd0, 7'd87}: s2wr4 <= 79;
	      {1'd0, 7'd88}: s2wr4 <= 88;
	      {1'd0, 7'd89}: s2wr4 <= 89;
	      {1'd0, 7'd90}: s2wr4 <= 90;
	      {1'd0, 7'd91}: s2wr4 <= 91;
	      {1'd0, 7'd92}: s2wr4 <= 92;
	      {1'd0, 7'd93}: s2wr4 <= 93;
	      {1'd0, 7'd94}: s2wr4 <= 94;
	      {1'd0, 7'd95}: s2wr4 <= 95;
	      {1'd0, 7'd96}: s2wr4 <= 40;
	      {1'd0, 7'd97}: s2wr4 <= 41;
	      {1'd0, 7'd98}: s2wr4 <= 42;
	      {1'd0, 7'd99}: s2wr4 <= 43;
	      {1'd0, 7'd100}: s2wr4 <= 44;
	      {1'd0, 7'd101}: s2wr4 <= 45;
	      {1'd0, 7'd102}: s2wr4 <= 46;
	      {1'd0, 7'd103}: s2wr4 <= 47;
	      {1'd0, 7'd104}: s2wr4 <= 56;
	      {1'd0, 7'd105}: s2wr4 <= 57;
	      {1'd0, 7'd106}: s2wr4 <= 58;
	      {1'd0, 7'd107}: s2wr4 <= 59;
	      {1'd0, 7'd108}: s2wr4 <= 60;
	      {1'd0, 7'd109}: s2wr4 <= 61;
	      {1'd0, 7'd110}: s2wr4 <= 62;
	      {1'd0, 7'd111}: s2wr4 <= 63;
	      {1'd0, 7'd112}: s2wr4 <= 8;
	      {1'd0, 7'd113}: s2wr4 <= 9;
	      {1'd0, 7'd114}: s2wr4 <= 10;
	      {1'd0, 7'd115}: s2wr4 <= 11;
	      {1'd0, 7'd116}: s2wr4 <= 12;
	      {1'd0, 7'd117}: s2wr4 <= 13;
	      {1'd0, 7'd118}: s2wr4 <= 14;
	      {1'd0, 7'd119}: s2wr4 <= 15;
	      {1'd0, 7'd120}: s2wr4 <= 24;
	      {1'd0, 7'd121}: s2wr4 <= 25;
	      {1'd0, 7'd122}: s2wr4 <= 26;
	      {1'd0, 7'd123}: s2wr4 <= 27;
	      {1'd0, 7'd124}: s2wr4 <= 28;
	      {1'd0, 7'd125}: s2wr4 <= 29;
	      {1'd0, 7'd126}: s2wr4 <= 30;
	      {1'd0, 7'd127}: s2wr4 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr5 <= 64;
	      {1'd0, 7'd1}: s2wr5 <= 65;
	      {1'd0, 7'd2}: s2wr5 <= 66;
	      {1'd0, 7'd3}: s2wr5 <= 67;
	      {1'd0, 7'd4}: s2wr5 <= 68;
	      {1'd0, 7'd5}: s2wr5 <= 69;
	      {1'd0, 7'd6}: s2wr5 <= 70;
	      {1'd0, 7'd7}: s2wr5 <= 71;
	      {1'd0, 7'd8}: s2wr5 <= 80;
	      {1'd0, 7'd9}: s2wr5 <= 81;
	      {1'd0, 7'd10}: s2wr5 <= 82;
	      {1'd0, 7'd11}: s2wr5 <= 83;
	      {1'd0, 7'd12}: s2wr5 <= 84;
	      {1'd0, 7'd13}: s2wr5 <= 85;
	      {1'd0, 7'd14}: s2wr5 <= 86;
	      {1'd0, 7'd15}: s2wr5 <= 87;
	      {1'd0, 7'd16}: s2wr5 <= 96;
	      {1'd0, 7'd17}: s2wr5 <= 97;
	      {1'd0, 7'd18}: s2wr5 <= 98;
	      {1'd0, 7'd19}: s2wr5 <= 99;
	      {1'd0, 7'd20}: s2wr5 <= 100;
	      {1'd0, 7'd21}: s2wr5 <= 101;
	      {1'd0, 7'd22}: s2wr5 <= 102;
	      {1'd0, 7'd23}: s2wr5 <= 103;
	      {1'd0, 7'd24}: s2wr5 <= 112;
	      {1'd0, 7'd25}: s2wr5 <= 113;
	      {1'd0, 7'd26}: s2wr5 <= 114;
	      {1'd0, 7'd27}: s2wr5 <= 115;
	      {1'd0, 7'd28}: s2wr5 <= 116;
	      {1'd0, 7'd29}: s2wr5 <= 117;
	      {1'd0, 7'd30}: s2wr5 <= 118;
	      {1'd0, 7'd31}: s2wr5 <= 119;
	      {1'd0, 7'd32}: s2wr5 <= 0;
	      {1'd0, 7'd33}: s2wr5 <= 1;
	      {1'd0, 7'd34}: s2wr5 <= 2;
	      {1'd0, 7'd35}: s2wr5 <= 3;
	      {1'd0, 7'd36}: s2wr5 <= 4;
	      {1'd0, 7'd37}: s2wr5 <= 5;
	      {1'd0, 7'd38}: s2wr5 <= 6;
	      {1'd0, 7'd39}: s2wr5 <= 7;
	      {1'd0, 7'd40}: s2wr5 <= 16;
	      {1'd0, 7'd41}: s2wr5 <= 17;
	      {1'd0, 7'd42}: s2wr5 <= 18;
	      {1'd0, 7'd43}: s2wr5 <= 19;
	      {1'd0, 7'd44}: s2wr5 <= 20;
	      {1'd0, 7'd45}: s2wr5 <= 21;
	      {1'd0, 7'd46}: s2wr5 <= 22;
	      {1'd0, 7'd47}: s2wr5 <= 23;
	      {1'd0, 7'd48}: s2wr5 <= 32;
	      {1'd0, 7'd49}: s2wr5 <= 33;
	      {1'd0, 7'd50}: s2wr5 <= 34;
	      {1'd0, 7'd51}: s2wr5 <= 35;
	      {1'd0, 7'd52}: s2wr5 <= 36;
	      {1'd0, 7'd53}: s2wr5 <= 37;
	      {1'd0, 7'd54}: s2wr5 <= 38;
	      {1'd0, 7'd55}: s2wr5 <= 39;
	      {1'd0, 7'd56}: s2wr5 <= 48;
	      {1'd0, 7'd57}: s2wr5 <= 49;
	      {1'd0, 7'd58}: s2wr5 <= 50;
	      {1'd0, 7'd59}: s2wr5 <= 51;
	      {1'd0, 7'd60}: s2wr5 <= 52;
	      {1'd0, 7'd61}: s2wr5 <= 53;
	      {1'd0, 7'd62}: s2wr5 <= 54;
	      {1'd0, 7'd63}: s2wr5 <= 55;
	      {1'd0, 7'd64}: s2wr5 <= 72;
	      {1'd0, 7'd65}: s2wr5 <= 73;
	      {1'd0, 7'd66}: s2wr5 <= 74;
	      {1'd0, 7'd67}: s2wr5 <= 75;
	      {1'd0, 7'd68}: s2wr5 <= 76;
	      {1'd0, 7'd69}: s2wr5 <= 77;
	      {1'd0, 7'd70}: s2wr5 <= 78;
	      {1'd0, 7'd71}: s2wr5 <= 79;
	      {1'd0, 7'd72}: s2wr5 <= 88;
	      {1'd0, 7'd73}: s2wr5 <= 89;
	      {1'd0, 7'd74}: s2wr5 <= 90;
	      {1'd0, 7'd75}: s2wr5 <= 91;
	      {1'd0, 7'd76}: s2wr5 <= 92;
	      {1'd0, 7'd77}: s2wr5 <= 93;
	      {1'd0, 7'd78}: s2wr5 <= 94;
	      {1'd0, 7'd79}: s2wr5 <= 95;
	      {1'd0, 7'd80}: s2wr5 <= 104;
	      {1'd0, 7'd81}: s2wr5 <= 105;
	      {1'd0, 7'd82}: s2wr5 <= 106;
	      {1'd0, 7'd83}: s2wr5 <= 107;
	      {1'd0, 7'd84}: s2wr5 <= 108;
	      {1'd0, 7'd85}: s2wr5 <= 109;
	      {1'd0, 7'd86}: s2wr5 <= 110;
	      {1'd0, 7'd87}: s2wr5 <= 111;
	      {1'd0, 7'd88}: s2wr5 <= 120;
	      {1'd0, 7'd89}: s2wr5 <= 121;
	      {1'd0, 7'd90}: s2wr5 <= 122;
	      {1'd0, 7'd91}: s2wr5 <= 123;
	      {1'd0, 7'd92}: s2wr5 <= 124;
	      {1'd0, 7'd93}: s2wr5 <= 125;
	      {1'd0, 7'd94}: s2wr5 <= 126;
	      {1'd0, 7'd95}: s2wr5 <= 127;
	      {1'd0, 7'd96}: s2wr5 <= 8;
	      {1'd0, 7'd97}: s2wr5 <= 9;
	      {1'd0, 7'd98}: s2wr5 <= 10;
	      {1'd0, 7'd99}: s2wr5 <= 11;
	      {1'd0, 7'd100}: s2wr5 <= 12;
	      {1'd0, 7'd101}: s2wr5 <= 13;
	      {1'd0, 7'd102}: s2wr5 <= 14;
	      {1'd0, 7'd103}: s2wr5 <= 15;
	      {1'd0, 7'd104}: s2wr5 <= 24;
	      {1'd0, 7'd105}: s2wr5 <= 25;
	      {1'd0, 7'd106}: s2wr5 <= 26;
	      {1'd0, 7'd107}: s2wr5 <= 27;
	      {1'd0, 7'd108}: s2wr5 <= 28;
	      {1'd0, 7'd109}: s2wr5 <= 29;
	      {1'd0, 7'd110}: s2wr5 <= 30;
	      {1'd0, 7'd111}: s2wr5 <= 31;
	      {1'd0, 7'd112}: s2wr5 <= 40;
	      {1'd0, 7'd113}: s2wr5 <= 41;
	      {1'd0, 7'd114}: s2wr5 <= 42;
	      {1'd0, 7'd115}: s2wr5 <= 43;
	      {1'd0, 7'd116}: s2wr5 <= 44;
	      {1'd0, 7'd117}: s2wr5 <= 45;
	      {1'd0, 7'd118}: s2wr5 <= 46;
	      {1'd0, 7'd119}: s2wr5 <= 47;
	      {1'd0, 7'd120}: s2wr5 <= 56;
	      {1'd0, 7'd121}: s2wr5 <= 57;
	      {1'd0, 7'd122}: s2wr5 <= 58;
	      {1'd0, 7'd123}: s2wr5 <= 59;
	      {1'd0, 7'd124}: s2wr5 <= 60;
	      {1'd0, 7'd125}: s2wr5 <= 61;
	      {1'd0, 7'd126}: s2wr5 <= 62;
	      {1'd0, 7'd127}: s2wr5 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr6 <= 32;
	      {1'd0, 7'd1}: s2wr6 <= 33;
	      {1'd0, 7'd2}: s2wr6 <= 34;
	      {1'd0, 7'd3}: s2wr6 <= 35;
	      {1'd0, 7'd4}: s2wr6 <= 36;
	      {1'd0, 7'd5}: s2wr6 <= 37;
	      {1'd0, 7'd6}: s2wr6 <= 38;
	      {1'd0, 7'd7}: s2wr6 <= 39;
	      {1'd0, 7'd8}: s2wr6 <= 48;
	      {1'd0, 7'd9}: s2wr6 <= 49;
	      {1'd0, 7'd10}: s2wr6 <= 50;
	      {1'd0, 7'd11}: s2wr6 <= 51;
	      {1'd0, 7'd12}: s2wr6 <= 52;
	      {1'd0, 7'd13}: s2wr6 <= 53;
	      {1'd0, 7'd14}: s2wr6 <= 54;
	      {1'd0, 7'd15}: s2wr6 <= 55;
	      {1'd0, 7'd16}: s2wr6 <= 0;
	      {1'd0, 7'd17}: s2wr6 <= 1;
	      {1'd0, 7'd18}: s2wr6 <= 2;
	      {1'd0, 7'd19}: s2wr6 <= 3;
	      {1'd0, 7'd20}: s2wr6 <= 4;
	      {1'd0, 7'd21}: s2wr6 <= 5;
	      {1'd0, 7'd22}: s2wr6 <= 6;
	      {1'd0, 7'd23}: s2wr6 <= 7;
	      {1'd0, 7'd24}: s2wr6 <= 16;
	      {1'd0, 7'd25}: s2wr6 <= 17;
	      {1'd0, 7'd26}: s2wr6 <= 18;
	      {1'd0, 7'd27}: s2wr6 <= 19;
	      {1'd0, 7'd28}: s2wr6 <= 20;
	      {1'd0, 7'd29}: s2wr6 <= 21;
	      {1'd0, 7'd30}: s2wr6 <= 22;
	      {1'd0, 7'd31}: s2wr6 <= 23;
	      {1'd0, 7'd32}: s2wr6 <= 96;
	      {1'd0, 7'd33}: s2wr6 <= 97;
	      {1'd0, 7'd34}: s2wr6 <= 98;
	      {1'd0, 7'd35}: s2wr6 <= 99;
	      {1'd0, 7'd36}: s2wr6 <= 100;
	      {1'd0, 7'd37}: s2wr6 <= 101;
	      {1'd0, 7'd38}: s2wr6 <= 102;
	      {1'd0, 7'd39}: s2wr6 <= 103;
	      {1'd0, 7'd40}: s2wr6 <= 112;
	      {1'd0, 7'd41}: s2wr6 <= 113;
	      {1'd0, 7'd42}: s2wr6 <= 114;
	      {1'd0, 7'd43}: s2wr6 <= 115;
	      {1'd0, 7'd44}: s2wr6 <= 116;
	      {1'd0, 7'd45}: s2wr6 <= 117;
	      {1'd0, 7'd46}: s2wr6 <= 118;
	      {1'd0, 7'd47}: s2wr6 <= 119;
	      {1'd0, 7'd48}: s2wr6 <= 64;
	      {1'd0, 7'd49}: s2wr6 <= 65;
	      {1'd0, 7'd50}: s2wr6 <= 66;
	      {1'd0, 7'd51}: s2wr6 <= 67;
	      {1'd0, 7'd52}: s2wr6 <= 68;
	      {1'd0, 7'd53}: s2wr6 <= 69;
	      {1'd0, 7'd54}: s2wr6 <= 70;
	      {1'd0, 7'd55}: s2wr6 <= 71;
	      {1'd0, 7'd56}: s2wr6 <= 80;
	      {1'd0, 7'd57}: s2wr6 <= 81;
	      {1'd0, 7'd58}: s2wr6 <= 82;
	      {1'd0, 7'd59}: s2wr6 <= 83;
	      {1'd0, 7'd60}: s2wr6 <= 84;
	      {1'd0, 7'd61}: s2wr6 <= 85;
	      {1'd0, 7'd62}: s2wr6 <= 86;
	      {1'd0, 7'd63}: s2wr6 <= 87;
	      {1'd0, 7'd64}: s2wr6 <= 40;
	      {1'd0, 7'd65}: s2wr6 <= 41;
	      {1'd0, 7'd66}: s2wr6 <= 42;
	      {1'd0, 7'd67}: s2wr6 <= 43;
	      {1'd0, 7'd68}: s2wr6 <= 44;
	      {1'd0, 7'd69}: s2wr6 <= 45;
	      {1'd0, 7'd70}: s2wr6 <= 46;
	      {1'd0, 7'd71}: s2wr6 <= 47;
	      {1'd0, 7'd72}: s2wr6 <= 56;
	      {1'd0, 7'd73}: s2wr6 <= 57;
	      {1'd0, 7'd74}: s2wr6 <= 58;
	      {1'd0, 7'd75}: s2wr6 <= 59;
	      {1'd0, 7'd76}: s2wr6 <= 60;
	      {1'd0, 7'd77}: s2wr6 <= 61;
	      {1'd0, 7'd78}: s2wr6 <= 62;
	      {1'd0, 7'd79}: s2wr6 <= 63;
	      {1'd0, 7'd80}: s2wr6 <= 8;
	      {1'd0, 7'd81}: s2wr6 <= 9;
	      {1'd0, 7'd82}: s2wr6 <= 10;
	      {1'd0, 7'd83}: s2wr6 <= 11;
	      {1'd0, 7'd84}: s2wr6 <= 12;
	      {1'd0, 7'd85}: s2wr6 <= 13;
	      {1'd0, 7'd86}: s2wr6 <= 14;
	      {1'd0, 7'd87}: s2wr6 <= 15;
	      {1'd0, 7'd88}: s2wr6 <= 24;
	      {1'd0, 7'd89}: s2wr6 <= 25;
	      {1'd0, 7'd90}: s2wr6 <= 26;
	      {1'd0, 7'd91}: s2wr6 <= 27;
	      {1'd0, 7'd92}: s2wr6 <= 28;
	      {1'd0, 7'd93}: s2wr6 <= 29;
	      {1'd0, 7'd94}: s2wr6 <= 30;
	      {1'd0, 7'd95}: s2wr6 <= 31;
	      {1'd0, 7'd96}: s2wr6 <= 104;
	      {1'd0, 7'd97}: s2wr6 <= 105;
	      {1'd0, 7'd98}: s2wr6 <= 106;
	      {1'd0, 7'd99}: s2wr6 <= 107;
	      {1'd0, 7'd100}: s2wr6 <= 108;
	      {1'd0, 7'd101}: s2wr6 <= 109;
	      {1'd0, 7'd102}: s2wr6 <= 110;
	      {1'd0, 7'd103}: s2wr6 <= 111;
	      {1'd0, 7'd104}: s2wr6 <= 120;
	      {1'd0, 7'd105}: s2wr6 <= 121;
	      {1'd0, 7'd106}: s2wr6 <= 122;
	      {1'd0, 7'd107}: s2wr6 <= 123;
	      {1'd0, 7'd108}: s2wr6 <= 124;
	      {1'd0, 7'd109}: s2wr6 <= 125;
	      {1'd0, 7'd110}: s2wr6 <= 126;
	      {1'd0, 7'd111}: s2wr6 <= 127;
	      {1'd0, 7'd112}: s2wr6 <= 72;
	      {1'd0, 7'd113}: s2wr6 <= 73;
	      {1'd0, 7'd114}: s2wr6 <= 74;
	      {1'd0, 7'd115}: s2wr6 <= 75;
	      {1'd0, 7'd116}: s2wr6 <= 76;
	      {1'd0, 7'd117}: s2wr6 <= 77;
	      {1'd0, 7'd118}: s2wr6 <= 78;
	      {1'd0, 7'd119}: s2wr6 <= 79;
	      {1'd0, 7'd120}: s2wr6 <= 88;
	      {1'd0, 7'd121}: s2wr6 <= 89;
	      {1'd0, 7'd122}: s2wr6 <= 90;
	      {1'd0, 7'd123}: s2wr6 <= 91;
	      {1'd0, 7'd124}: s2wr6 <= 92;
	      {1'd0, 7'd125}: s2wr6 <= 93;
	      {1'd0, 7'd126}: s2wr6 <= 94;
	      {1'd0, 7'd127}: s2wr6 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr7 <= 0;
	      {1'd0, 7'd1}: s2wr7 <= 1;
	      {1'd0, 7'd2}: s2wr7 <= 2;
	      {1'd0, 7'd3}: s2wr7 <= 3;
	      {1'd0, 7'd4}: s2wr7 <= 4;
	      {1'd0, 7'd5}: s2wr7 <= 5;
	      {1'd0, 7'd6}: s2wr7 <= 6;
	      {1'd0, 7'd7}: s2wr7 <= 7;
	      {1'd0, 7'd8}: s2wr7 <= 16;
	      {1'd0, 7'd9}: s2wr7 <= 17;
	      {1'd0, 7'd10}: s2wr7 <= 18;
	      {1'd0, 7'd11}: s2wr7 <= 19;
	      {1'd0, 7'd12}: s2wr7 <= 20;
	      {1'd0, 7'd13}: s2wr7 <= 21;
	      {1'd0, 7'd14}: s2wr7 <= 22;
	      {1'd0, 7'd15}: s2wr7 <= 23;
	      {1'd0, 7'd16}: s2wr7 <= 32;
	      {1'd0, 7'd17}: s2wr7 <= 33;
	      {1'd0, 7'd18}: s2wr7 <= 34;
	      {1'd0, 7'd19}: s2wr7 <= 35;
	      {1'd0, 7'd20}: s2wr7 <= 36;
	      {1'd0, 7'd21}: s2wr7 <= 37;
	      {1'd0, 7'd22}: s2wr7 <= 38;
	      {1'd0, 7'd23}: s2wr7 <= 39;
	      {1'd0, 7'd24}: s2wr7 <= 48;
	      {1'd0, 7'd25}: s2wr7 <= 49;
	      {1'd0, 7'd26}: s2wr7 <= 50;
	      {1'd0, 7'd27}: s2wr7 <= 51;
	      {1'd0, 7'd28}: s2wr7 <= 52;
	      {1'd0, 7'd29}: s2wr7 <= 53;
	      {1'd0, 7'd30}: s2wr7 <= 54;
	      {1'd0, 7'd31}: s2wr7 <= 55;
	      {1'd0, 7'd32}: s2wr7 <= 64;
	      {1'd0, 7'd33}: s2wr7 <= 65;
	      {1'd0, 7'd34}: s2wr7 <= 66;
	      {1'd0, 7'd35}: s2wr7 <= 67;
	      {1'd0, 7'd36}: s2wr7 <= 68;
	      {1'd0, 7'd37}: s2wr7 <= 69;
	      {1'd0, 7'd38}: s2wr7 <= 70;
	      {1'd0, 7'd39}: s2wr7 <= 71;
	      {1'd0, 7'd40}: s2wr7 <= 80;
	      {1'd0, 7'd41}: s2wr7 <= 81;
	      {1'd0, 7'd42}: s2wr7 <= 82;
	      {1'd0, 7'd43}: s2wr7 <= 83;
	      {1'd0, 7'd44}: s2wr7 <= 84;
	      {1'd0, 7'd45}: s2wr7 <= 85;
	      {1'd0, 7'd46}: s2wr7 <= 86;
	      {1'd0, 7'd47}: s2wr7 <= 87;
	      {1'd0, 7'd48}: s2wr7 <= 96;
	      {1'd0, 7'd49}: s2wr7 <= 97;
	      {1'd0, 7'd50}: s2wr7 <= 98;
	      {1'd0, 7'd51}: s2wr7 <= 99;
	      {1'd0, 7'd52}: s2wr7 <= 100;
	      {1'd0, 7'd53}: s2wr7 <= 101;
	      {1'd0, 7'd54}: s2wr7 <= 102;
	      {1'd0, 7'd55}: s2wr7 <= 103;
	      {1'd0, 7'd56}: s2wr7 <= 112;
	      {1'd0, 7'd57}: s2wr7 <= 113;
	      {1'd0, 7'd58}: s2wr7 <= 114;
	      {1'd0, 7'd59}: s2wr7 <= 115;
	      {1'd0, 7'd60}: s2wr7 <= 116;
	      {1'd0, 7'd61}: s2wr7 <= 117;
	      {1'd0, 7'd62}: s2wr7 <= 118;
	      {1'd0, 7'd63}: s2wr7 <= 119;
	      {1'd0, 7'd64}: s2wr7 <= 8;
	      {1'd0, 7'd65}: s2wr7 <= 9;
	      {1'd0, 7'd66}: s2wr7 <= 10;
	      {1'd0, 7'd67}: s2wr7 <= 11;
	      {1'd0, 7'd68}: s2wr7 <= 12;
	      {1'd0, 7'd69}: s2wr7 <= 13;
	      {1'd0, 7'd70}: s2wr7 <= 14;
	      {1'd0, 7'd71}: s2wr7 <= 15;
	      {1'd0, 7'd72}: s2wr7 <= 24;
	      {1'd0, 7'd73}: s2wr7 <= 25;
	      {1'd0, 7'd74}: s2wr7 <= 26;
	      {1'd0, 7'd75}: s2wr7 <= 27;
	      {1'd0, 7'd76}: s2wr7 <= 28;
	      {1'd0, 7'd77}: s2wr7 <= 29;
	      {1'd0, 7'd78}: s2wr7 <= 30;
	      {1'd0, 7'd79}: s2wr7 <= 31;
	      {1'd0, 7'd80}: s2wr7 <= 40;
	      {1'd0, 7'd81}: s2wr7 <= 41;
	      {1'd0, 7'd82}: s2wr7 <= 42;
	      {1'd0, 7'd83}: s2wr7 <= 43;
	      {1'd0, 7'd84}: s2wr7 <= 44;
	      {1'd0, 7'd85}: s2wr7 <= 45;
	      {1'd0, 7'd86}: s2wr7 <= 46;
	      {1'd0, 7'd87}: s2wr7 <= 47;
	      {1'd0, 7'd88}: s2wr7 <= 56;
	      {1'd0, 7'd89}: s2wr7 <= 57;
	      {1'd0, 7'd90}: s2wr7 <= 58;
	      {1'd0, 7'd91}: s2wr7 <= 59;
	      {1'd0, 7'd92}: s2wr7 <= 60;
	      {1'd0, 7'd93}: s2wr7 <= 61;
	      {1'd0, 7'd94}: s2wr7 <= 62;
	      {1'd0, 7'd95}: s2wr7 <= 63;
	      {1'd0, 7'd96}: s2wr7 <= 72;
	      {1'd0, 7'd97}: s2wr7 <= 73;
	      {1'd0, 7'd98}: s2wr7 <= 74;
	      {1'd0, 7'd99}: s2wr7 <= 75;
	      {1'd0, 7'd100}: s2wr7 <= 76;
	      {1'd0, 7'd101}: s2wr7 <= 77;
	      {1'd0, 7'd102}: s2wr7 <= 78;
	      {1'd0, 7'd103}: s2wr7 <= 79;
	      {1'd0, 7'd104}: s2wr7 <= 88;
	      {1'd0, 7'd105}: s2wr7 <= 89;
	      {1'd0, 7'd106}: s2wr7 <= 90;
	      {1'd0, 7'd107}: s2wr7 <= 91;
	      {1'd0, 7'd108}: s2wr7 <= 92;
	      {1'd0, 7'd109}: s2wr7 <= 93;
	      {1'd0, 7'd110}: s2wr7 <= 94;
	      {1'd0, 7'd111}: s2wr7 <= 95;
	      {1'd0, 7'd112}: s2wr7 <= 104;
	      {1'd0, 7'd113}: s2wr7 <= 105;
	      {1'd0, 7'd114}: s2wr7 <= 106;
	      {1'd0, 7'd115}: s2wr7 <= 107;
	      {1'd0, 7'd116}: s2wr7 <= 108;
	      {1'd0, 7'd117}: s2wr7 <= 109;
	      {1'd0, 7'd118}: s2wr7 <= 110;
	      {1'd0, 7'd119}: s2wr7 <= 111;
	      {1'd0, 7'd120}: s2wr7 <= 120;
	      {1'd0, 7'd121}: s2wr7 <= 121;
	      {1'd0, 7'd122}: s2wr7 <= 122;
	      {1'd0, 7'd123}: s2wr7 <= 123;
	      {1'd0, 7'd124}: s2wr7 <= 124;
	      {1'd0, 7'd125}: s2wr7 <= 125;
	      {1'd0, 7'd126}: s2wr7 <= 126;
	      {1'd0, 7'd127}: s2wr7 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule




module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock40207(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_51085(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a994;
   wire signed [15:0] a995;
   wire signed [15:0] a996;
   wire signed [15:0] a997;
   wire signed [15:0] a1002;
   wire signed [15:0] a1003;
   wire signed [15:0] a1004;
   wire signed [15:0] a1005;
   wire signed [15:0] a1010;
   wire signed [15:0] a1011;
   wire signed [15:0] a1012;
   wire signed [15:0] a1013;
   wire signed [15:0] a1018;
   wire signed [15:0] a1019;
   wire signed [15:0] a1020;
   wire signed [15:0] a1021;
   wire signed [16:0] tm315;
   wire signed [16:0] tm316;
   wire signed [16:0] tm317;
   wire signed [16:0] tm318;
   wire signed [16:0] tm319;
   wire signed [16:0] tm320;
   wire signed [16:0] tm321;
   wire signed [16:0] tm322;
   wire signed [16:0] tm331;
   wire signed [16:0] tm332;
   wire signed [16:0] tm333;
   wire signed [16:0] tm334;
   wire signed [16:0] tm335;
   wire signed [16:0] tm336;
   wire signed [16:0] tm337;
   wire signed [16:0] tm338;
   wire signed [15:0] t1170;
   wire signed [15:0] t1171;
   wire signed [15:0] t1172;
   wire signed [15:0] t1173;
   wire signed [15:0] t1174;
   wire signed [15:0] t1175;
   wire signed [15:0] t1176;
   wire signed [15:0] t1177;
   wire signed [15:0] t1186;
   wire signed [15:0] t1187;
   wire signed [15:0] t1188;
   wire signed [15:0] t1189;
   wire signed [15:0] t1190;
   wire signed [15:0] t1191;
   wire signed [15:0] t1192;
   wire signed [15:0] t1193;
   wire signed [16:0] tm323;
   wire signed [16:0] tm324;
   wire signed [16:0] tm325;
   wire signed [16:0] tm326;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm327;
   wire signed [16:0] tm328;
   wire signed [16:0] tm329;
   wire signed [16:0] tm330;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm339;
   wire signed [16:0] tm340;
   wire signed [16:0] tm341;
   wire signed [16:0] tm342;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm343;
   wire signed [16:0] tm344;
   wire signed [16:0] tm345;
   wire signed [16:0] tm346;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t1178;
   wire signed [15:0] t1179;
   wire signed [15:0] t1180;
   wire signed [15:0] t1181;
   wire signed [15:0] t1182;
   wire signed [15:0] t1183;
   wire signed [15:0] t1184;
   wire signed [15:0] t1185;
   wire signed [15:0] t1194;
   wire signed [15:0] t1195;
   wire signed [15:0] t1196;
   wire signed [15:0] t1197;
   wire signed [15:0] t1198;
   wire signed [15:0] t1199;
   wire signed [15:0] t1200;
   wire signed [15:0] t1201;


   assign a994 = X0;
   assign a995 = X4;
   assign a996 = X1;
   assign a997 = X5;
   assign a1002 = X2;
   assign a1003 = X6;
   assign a1004 = X3;
   assign a1005 = X7;
   assign a1010 = X8;
   assign a1011 = X12;
   assign a1012 = X9;
   assign a1013 = X13;
   assign a1018 = X10;
   assign a1019 = X14;
   assign a1020 = X11;
   assign a1021 = X15;
   assign t1170 = tm315[16:1];
   assign t1171 = tm316[16:1];
   assign t1172 = tm317[16:1];
   assign t1173 = tm318[16:1];
   assign t1174 = tm319[16:1];
   assign t1175 = tm320[16:1];
   assign t1176 = tm321[16:1];
   assign t1177 = tm322[16:1];
   assign t1186 = tm331[16:1];
   assign t1187 = tm332[16:1];
   assign t1188 = tm333[16:1];
   assign t1189 = tm334[16:1];
   assign t1190 = tm335[16:1];
   assign t1191 = tm336[16:1];
   assign t1192 = tm337[16:1];
   assign t1193 = tm338[16:1];
   assign Y0 = t1178;
   assign Y1 = t1179;
   assign Y4 = t1180;
   assign Y5 = t1181;
   assign Y2 = t1182;
   assign Y3 = t1183;
   assign Y6 = t1184;
   assign Y7 = t1185;
   assign Y8 = t1194;
   assign Y9 = t1195;
   assign Y12 = t1196;
   assign Y13 = t1197;
   assign Y10 = t1198;
   assign Y11 = t1199;
   assign Y14 = t1200;
   assign Y15 = t1201;
   assign t1178 = tm323[16:1];
   assign t1179 = tm324[16:1];
   assign t1180 = tm325[16:1];
   assign t1181 = tm326[16:1];
   assign t1182 = tm327[16:1];
   assign t1183 = tm328[16:1];
   assign t1184 = tm329[16:1];
   assign t1185 = tm330[16:1];
   assign t1194 = tm339[16:1];
   assign t1195 = tm340[16:1];
   assign t1196 = tm341[16:1];
   assign t1197 = tm342[16:1];
   assign t1198 = tm343[16:1];
   assign t1199 = tm344[16:1];
   assign t1200 = tm345[16:1];
   assign t1201 = tm346[16:1];

    addfxp #(17, 1) add40219(.a({{1{a994[15]}}, a994}), .b({{1{a995[15]}}, a995}), .clk(clk), .q(tm315));    // 0
    addfxp #(17, 1) add40234(.a({{1{a996[15]}}, a996}), .b({{1{a997[15]}}, a997}), .clk(clk), .q(tm316));    // 0
    subfxp #(17, 1) sub40249(.a({{1{a994[15]}}, a994}), .b({{1{a995[15]}}, a995}), .clk(clk), .q(tm317));    // 0
    subfxp #(17, 1) sub40264(.a({{1{a996[15]}}, a996}), .b({{1{a997[15]}}, a997}), .clk(clk), .q(tm318));    // 0
    addfxp #(17, 1) add40279(.a({{1{a1002[15]}}, a1002}), .b({{1{a1003[15]}}, a1003}), .clk(clk), .q(tm319));    // 0
    addfxp #(17, 1) add40294(.a({{1{a1004[15]}}, a1004}), .b({{1{a1005[15]}}, a1005}), .clk(clk), .q(tm320));    // 0
    subfxp #(17, 1) sub40309(.a({{1{a1002[15]}}, a1002}), .b({{1{a1003[15]}}, a1003}), .clk(clk), .q(tm321));    // 0
    subfxp #(17, 1) sub40324(.a({{1{a1004[15]}}, a1004}), .b({{1{a1005[15]}}, a1005}), .clk(clk), .q(tm322));    // 0
    addfxp #(17, 1) add40427(.a({{1{a1010[15]}}, a1010}), .b({{1{a1011[15]}}, a1011}), .clk(clk), .q(tm331));    // 0
    addfxp #(17, 1) add40442(.a({{1{a1012[15]}}, a1012}), .b({{1{a1013[15]}}, a1013}), .clk(clk), .q(tm332));    // 0
    subfxp #(17, 1) sub40457(.a({{1{a1010[15]}}, a1010}), .b({{1{a1011[15]}}, a1011}), .clk(clk), .q(tm333));    // 0
    subfxp #(17, 1) sub40472(.a({{1{a1012[15]}}, a1012}), .b({{1{a1013[15]}}, a1013}), .clk(clk), .q(tm334));    // 0
    addfxp #(17, 1) add40487(.a({{1{a1018[15]}}, a1018}), .b({{1{a1019[15]}}, a1019}), .clk(clk), .q(tm335));    // 0
    addfxp #(17, 1) add40502(.a({{1{a1020[15]}}, a1020}), .b({{1{a1021[15]}}, a1021}), .clk(clk), .q(tm336));    // 0
    subfxp #(17, 1) sub40517(.a({{1{a1018[15]}}, a1018}), .b({{1{a1019[15]}}, a1019}), .clk(clk), .q(tm337));    // 0
    subfxp #(17, 1) sub40532(.a({{1{a1020[15]}}, a1020}), .b({{1{a1021[15]}}, a1021}), .clk(clk), .q(tm338));    // 0
    addfxp #(17, 1) add40331(.a({{1{t1170[15]}}, t1170}), .b({{1{t1174[15]}}, t1174}), .clk(clk), .q(tm323));    // 1
    addfxp #(17, 1) add40338(.a({{1{t1171[15]}}, t1171}), .b({{1{t1175[15]}}, t1175}), .clk(clk), .q(tm324));    // 1
    subfxp #(17, 1) sub40345(.a({{1{t1170[15]}}, t1170}), .b({{1{t1174[15]}}, t1174}), .clk(clk), .q(tm325));    // 1
    subfxp #(17, 1) sub40352(.a({{1{t1171[15]}}, t1171}), .b({{1{t1175[15]}}, t1175}), .clk(clk), .q(tm326));    // 1
    addfxp #(17, 1) add40375(.a({{1{t1172[15]}}, t1172}), .b({{1{t1177[15]}}, t1177}), .clk(clk), .q(tm327));    // 1
    subfxp #(17, 1) sub40382(.a({{1{t1173[15]}}, t1173}), .b({{1{t1176[15]}}, t1176}), .clk(clk), .q(tm328));    // 1
    subfxp #(17, 1) sub40389(.a({{1{t1172[15]}}, t1172}), .b({{1{t1177[15]}}, t1177}), .clk(clk), .q(tm329));    // 1
    addfxp #(17, 1) add40396(.a({{1{t1173[15]}}, t1173}), .b({{1{t1176[15]}}, t1176}), .clk(clk), .q(tm330));    // 1
    addfxp #(17, 1) add40539(.a({{1{t1186[15]}}, t1186}), .b({{1{t1190[15]}}, t1190}), .clk(clk), .q(tm339));    // 1
    addfxp #(17, 1) add40546(.a({{1{t1187[15]}}, t1187}), .b({{1{t1191[15]}}, t1191}), .clk(clk), .q(tm340));    // 1
    subfxp #(17, 1) sub40553(.a({{1{t1186[15]}}, t1186}), .b({{1{t1190[15]}}, t1190}), .clk(clk), .q(tm341));    // 1
    subfxp #(17, 1) sub40560(.a({{1{t1187[15]}}, t1187}), .b({{1{t1191[15]}}, t1191}), .clk(clk), .q(tm342));    // 1
    addfxp #(17, 1) add40583(.a({{1{t1188[15]}}, t1188}), .b({{1{t1193[15]}}, t1193}), .clk(clk), .q(tm343));    // 1
    subfxp #(17, 1) sub40590(.a({{1{t1189[15]}}, t1189}), .b({{1{t1192[15]}}, t1192}), .clk(clk), .q(tm344));    // 1
    subfxp #(17, 1) sub40597(.a({{1{t1188[15]}}, t1188}), .b({{1{t1193[15]}}, t1193}), .clk(clk), .q(tm345));    // 1
    addfxp #(17, 1) add40604(.a({{1{t1189[15]}}, t1189}), .b({{1{t1192[15]}}, t1192}), .clk(clk), .q(tm346));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 10
// Gap: 2
module rc40629(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm40627 instPerm51086(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet40627(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [0:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        1'd0: control <= 4'b1111;
        1'd1: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_3;
     assign t1_3 = t0_2;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_7;
     assign t1_7 = t0_6;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_2;
     assign t5_3 = t4_3;
     assign t5_4 = t4_5;
     assign t5_5 = t4_4;
     assign t5_6 = t4_7;
     assign t5_7 = t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[3] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[3] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[2] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[2] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[1] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[1] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[0] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[0] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_3;
         t9_3 <= t8_2;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_7;
         t9_7 <= t8_6;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 10
// Gap: 2
module perm40627(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 2;

   parameter addrbits = 1;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm1;
   assign tm1 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_51091(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51092(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

shiftRegFIFO #(1, 1) shiftFIFO_51101(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_51102(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(2, 1) shiftFIFO_51103(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51104(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51107(.X(tm1), .Y(tm1_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_51110(.X(tm1_d), .Y(tm1_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 1) shiftFIFO_51115(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd0 <= 1;
	     {1'd0,  1'd1}: s1rd0 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd1 <= 1;
	     {1'd0,  1'd1}: s1rd1 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd2 <= 0;
	     {1'd0,  1'd1}: s1rd2 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd3 <= 0;
	     {1'd0,  1'd1}: s1rd3 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd4 <= 1;
	     {1'd0,  1'd1}: s1rd4 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd5 <= 1;
	     {1'd0,  1'd1}: s1rd5 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd6 <= 0;
	     {1'd0,  1'd1}: s1rd6 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd7 <= 0;
	     {1'd0,  1'd1}: s1rd7 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet40627 sw(tm1_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr0 <= 1;
	      {1'd0, 1'd1}: s2wr0 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr1 <= 1;
	      {1'd0, 1'd1}: s2wr1 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr2 <= 0;
	      {1'd0, 1'd1}: s2wr2 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr3 <= 0;
	      {1'd0, 1'd1}: s2wr3 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr4 <= 1;
	      {1'd0, 1'd1}: s2wr4 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr5 <= 1;
	      {1'd0, 1'd1}: s2wr5 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr6 <= 0;
	      {1'd0, 1'd1}: s2wr6 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr7 <= 0;
	      {1'd0, 1'd1}: s2wr7 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 2
module DirSum_41338(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [0:0] i4;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 1)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock40632 codeBlockIsnt51116(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D72_41276(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hc4df;
      1: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D70_41284(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D68_41292(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D67_41296(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D64_41308(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h187e;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D63_41312(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h2d41;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D62_41316(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D60_41328(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D58_41332(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D59_41336(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock40632(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i4_in;
   reg [0:0] i4;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_51119(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a920;
   reg signed [15:0] tm15;
   reg signed [15:0] tm95;
   wire signed [15:0] a930;
   wire signed [15:0] a883;
   wire signed [15:0] a933;
   wire signed [15:0] a887;
   wire signed [15:0] a934;
   wire signed [15:0] a935;
   wire signed [15:0] a938;
   wire signed [15:0] a939;
   wire signed [15:0] a942;
   wire signed [15:0] a943;
   wire signed [15:0] a946;
   wire signed [15:0] a907;
   wire signed [15:0] a949;
   wire signed [15:0] a911;
   wire signed [15:0] a950;
   wire signed [15:0] a951;
   wire signed [15:0] a954;
   wire signed [15:0] a955;
   wire signed [15:0] a958;
   wire signed [15:0] a959;
   reg signed [15:0] tm475;
   reg signed [15:0] tm479;
   reg signed [15:0] tm491;
   reg signed [15:0] tm495;
   reg signed [15:0] tm507;
   reg signed [15:0] tm511;
   reg signed [15:0] tm523;
   reg signed [15:0] tm527;
   reg signed [15:0] tm539;
   reg signed [15:0] tm547;
   reg signed [15:0] tm555;
   reg signed [15:0] tm559;
   reg signed [15:0] tm571;
   reg signed [15:0] tm578;
   reg signed [15:0] tm585;
   reg signed [15:0] tm592;
   wire signed [15:0] a921;
   wire signed [15:0] a922;
   reg signed [15:0] tm476;
   reg signed [15:0] tm480;
   reg signed [15:0] tm492;
   reg signed [15:0] tm496;
   reg signed [15:0] tm508;
   reg signed [15:0] tm512;
   reg signed [15:0] tm524;
   reg signed [15:0] tm528;
   reg signed [15:0] tm540;
   reg signed [15:0] tm548;
   reg signed [15:0] tm556;
   reg signed [15:0] tm560;
   reg signed [15:0] tm572;
   reg signed [15:0] tm579;
   reg signed [15:0] tm586;
   reg signed [15:0] tm593;
   wire signed [15:0] tm4;
   wire signed [15:0] a888;
   wire signed [15:0] tm5;
   wire signed [15:0] a890;
   wire signed [15:0] tm6;
   wire signed [15:0] a894;
   wire signed [15:0] tm7;
   wire signed [15:0] a896;
   wire signed [15:0] tm8;
   wire signed [15:0] a900;
   wire signed [15:0] tm12;
   wire signed [15:0] a912;
   wire signed [15:0] tm13;
   wire signed [15:0] a914;
   wire signed [15:0] tm14;
   wire signed [15:0] a918;
   wire signed [15:0] tm16;
   wire signed [15:0] a924;
   wire signed [15:0] tm17;
   wire signed [15:0] a926;
   reg signed [15:0] tm477;
   reg signed [15:0] tm481;
   reg signed [15:0] tm493;
   reg signed [15:0] tm497;
   reg signed [15:0] tm509;
   reg signed [15:0] tm513;
   reg signed [15:0] tm525;
   reg signed [15:0] tm529;
   reg signed [15:0] tm541;
   reg signed [15:0] tm543;
   reg signed [15:0] tm549;
   reg signed [15:0] tm551;
   reg signed [15:0] tm557;
   reg signed [15:0] tm561;
   reg signed [15:0] tm573;
   reg signed [15:0] tm580;
   reg signed [15:0] tm587;
   reg signed [15:0] tm594;
   reg signed [15:0] tm74;
   reg signed [15:0] tm75;
   reg signed [15:0] tm78;
   reg signed [15:0] tm79;
   reg signed [15:0] tm82;
   reg signed [15:0] tm90;
   reg signed [15:0] tm91;
   reg signed [15:0] tm94;
   reg signed [15:0] tm98;
   reg signed [15:0] tm99;
   reg signed [15:0] tm478;
   reg signed [15:0] tm482;
   reg signed [15:0] tm494;
   reg signed [15:0] tm498;
   reg signed [15:0] tm510;
   reg signed [15:0] tm514;
   reg signed [15:0] tm526;
   reg signed [15:0] tm530;
   reg signed [15:0] tm542;
   reg signed [15:0] tm544;
   reg signed [15:0] tm550;
   reg signed [15:0] tm552;
   reg signed [15:0] tm558;
   reg signed [15:0] tm562;
   reg signed [15:0] tm574;
   reg signed [15:0] tm581;
   reg signed [15:0] tm588;
   reg signed [15:0] tm595;
   reg signed [15:0] tm545;
   reg signed [15:0] tm553;
   reg signed [15:0] tm575;
   reg signed [15:0] tm582;
   reg signed [15:0] tm589;
   reg signed [15:0] tm596;
   wire signed [15:0] a889;
   wire signed [15:0] a891;
   wire signed [15:0] a892;
   wire signed [15:0] a893;
   wire signed [15:0] a895;
   wire signed [15:0] a897;
   wire signed [15:0] a898;
   wire signed [15:0] a899;
   wire signed [15:0] a901;
   wire signed [15:0] a903;
   wire signed [15:0] a904;
   wire signed [15:0] a905;
   wire signed [15:0] a913;
   wire signed [15:0] a915;
   wire signed [15:0] a916;
   wire signed [15:0] a917;
   wire signed [15:0] a919;
   wire signed [15:0] a923;
   wire signed [15:0] a925;
   wire signed [15:0] a927;
   wire signed [15:0] a928;
   wire signed [15:0] a929;
   reg signed [15:0] tm546;
   reg signed [15:0] tm554;
   reg signed [15:0] tm576;
   reg signed [15:0] tm583;
   reg signed [15:0] tm590;
   reg signed [15:0] tm597;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm577;
   reg signed [15:0] tm584;
   reg signed [15:0] tm591;
   reg signed [15:0] tm598;

   wire signed [15:0] tm226;
   assign tm226 = 16'hd2bf;

   assign a920 = tm15;
   assign a930 = X0;
   assign a883 = a930;
   assign a933 = X1;
   assign a887 = a933;
   assign a934 = X2;
   assign a935 = X3;
   assign a938 = X4;
   assign a939 = X5;
   assign a942 = X6;
   assign a943 = X7;
   assign a946 = X8;
   assign a907 = a946;
   assign a949 = X9;
   assign a911 = a949;
   assign a950 = X10;
   assign a951 = X11;
   assign a954 = X12;
   assign a955 = X13;
   assign a958 = X14;
   assign a959 = X15;
   assign a888 = tm4;
   assign a890 = tm5;
   assign a894 = tm6;
   assign a896 = tm7;
   assign a900 = tm8;
   assign a912 = tm12;
   assign a914 = tm13;
   assign a918 = tm14;
   assign a924 = tm16;
   assign a926 = tm17;
   assign Y0 = tm577;
   assign Y1 = tm584;
   assign Y8 = tm591;
   assign Y9 = tm598;

   D72_41276 instD72inst0_41276(.addr(i4[0:0]), .out(tm17), .clk(clk));

   D70_41284 instD70inst0_41284(.addr(i4[0:0]), .out(tm13), .clk(clk));

   D68_41292 instD68inst0_41292(.addr(i4[0:0]), .out(tm5), .clk(clk));

   D67_41296 instD67inst0_41296(.addr(i4[0:0]), .out(tm7), .clk(clk));

   D64_41308 instD64inst0_41308(.addr(i4[0:0]), .out(tm16), .clk(clk));

   D63_41312 instD63inst0_41312(.addr(i4[0:0]), .out(tm14), .clk(clk));

   D62_41316 instD62inst0_41316(.addr(i4[0:0]), .out(tm12), .clk(clk));

   D60_41328 instD60inst0_41328(.addr(i4[0:0]), .out(tm8), .clk(clk));

   D58_41332 instD58inst0_41332(.addr(i4[0:0]), .out(tm4), .clk(clk));

   D59_41336 instD59inst0_41336(.addr(i4[0:0]), .out(tm6), .clk(clk));

    multfix #(16, 2) m41153(.a(tm95), .b(a955), .clk(clk), .q_sc(a921), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41171(.a(tm95), .b(a954), .clk(clk), .q_sc(a922), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40731(.a(tm74), .b(tm478), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40753(.a(tm75), .b(tm482), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40771(.a(tm75), .b(tm478), .clk(clk), .q_sc(a892), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40782(.a(tm74), .b(tm482), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40811(.a(tm78), .b(tm494), .clk(clk), .q_sc(a895), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40833(.a(tm79), .b(tm498), .clk(clk), .q_sc(a897), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40851(.a(tm79), .b(tm494), .clk(clk), .q_sc(a898), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40862(.a(tm78), .b(tm498), .clk(clk), .q_sc(a899), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40891(.a(tm82), .b(tm510), .clk(clk), .q_sc(a901), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40913(.a(tm75), .b(tm514), .clk(clk), .q_sc(a903), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40931(.a(tm75), .b(tm510), .clk(clk), .q_sc(a904), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40942(.a(tm82), .b(tm514), .clk(clk), .q_sc(a905), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41051(.a(tm90), .b(tm526), .clk(clk), .q_sc(a913), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41073(.a(tm91), .b(tm530), .clk(clk), .q_sc(a915), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41091(.a(tm91), .b(tm526), .clk(clk), .q_sc(a916), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41102(.a(tm90), .b(tm530), .clk(clk), .q_sc(a917), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41131(.a(tm94), .b(tm542), .clk(clk), .q_sc(a919), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41182(.a(tm94), .b(tm550), .clk(clk), .q_sc(a923), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41211(.a(tm98), .b(tm558), .clk(clk), .q_sc(a925), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41233(.a(tm99), .b(tm562), .clk(clk), .q_sc(a927), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41251(.a(tm99), .b(tm558), .clk(clk), .q_sc(a928), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41262(.a(tm98), .b(tm562), .clk(clk), .q_sc(a929), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub40760(.a(a889), .b(a891), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add40789(.a(a892), .b(a893), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub40840(.a(a895), .b(a897), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add40869(.a(a898), .b(a899), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub40920(.a(a901), .b(a903), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add40949(.a(a904), .b(a905), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub41080(.a(a913), .b(a915), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add41109(.a(a916), .b(a917), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub41160(.a(a919), .b(tm546), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add41189(.a(tm554), .b(a923), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub41240(.a(a925), .b(a927), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add41269(.a(a928), .b(a929), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm95 <= 0;
         tm95 <= 0;
         tm74 <= 0;
         tm478 <= 0;
         tm75 <= 0;
         tm482 <= 0;
         tm75 <= 0;
         tm478 <= 0;
         tm74 <= 0;
         tm482 <= 0;
         tm78 <= 0;
         tm494 <= 0;
         tm79 <= 0;
         tm498 <= 0;
         tm79 <= 0;
         tm494 <= 0;
         tm78 <= 0;
         tm498 <= 0;
         tm82 <= 0;
         tm510 <= 0;
         tm75 <= 0;
         tm514 <= 0;
         tm75 <= 0;
         tm510 <= 0;
         tm82 <= 0;
         tm514 <= 0;
         tm90 <= 0;
         tm526 <= 0;
         tm91 <= 0;
         tm530 <= 0;
         tm91 <= 0;
         tm526 <= 0;
         tm90 <= 0;
         tm530 <= 0;
         tm94 <= 0;
         tm542 <= 0;
         tm94 <= 0;
         tm550 <= 0;
         tm98 <= 0;
         tm558 <= 0;
         tm99 <= 0;
         tm562 <= 0;
         tm99 <= 0;
         tm558 <= 0;
         tm98 <= 0;
         tm562 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm15 <= tm226;
         tm95 <= a920;
         tm475 <= a934;
         tm479 <= a935;
         tm491 <= a938;
         tm495 <= a939;
         tm507 <= a942;
         tm511 <= a943;
         tm523 <= a950;
         tm527 <= a951;
         tm539 <= a954;
         tm547 <= a955;
         tm555 <= a958;
         tm559 <= a959;
         tm571 <= a883;
         tm578 <= a887;
         tm585 <= a907;
         tm592 <= a911;
         tm476 <= tm475;
         tm480 <= tm479;
         tm492 <= tm491;
         tm496 <= tm495;
         tm508 <= tm507;
         tm512 <= tm511;
         tm524 <= tm523;
         tm528 <= tm527;
         tm540 <= tm539;
         tm548 <= tm547;
         tm556 <= tm555;
         tm560 <= tm559;
         tm572 <= tm571;
         tm579 <= tm578;
         tm586 <= tm585;
         tm593 <= tm592;
         tm477 <= tm476;
         tm481 <= tm480;
         tm493 <= tm492;
         tm497 <= tm496;
         tm509 <= tm508;
         tm513 <= tm512;
         tm525 <= tm524;
         tm529 <= tm528;
         tm541 <= tm540;
         tm543 <= a921;
         tm549 <= tm548;
         tm551 <= a922;
         tm557 <= tm556;
         tm561 <= tm560;
         tm573 <= tm572;
         tm580 <= tm579;
         tm587 <= tm586;
         tm594 <= tm593;
         tm74 <= a888;
         tm75 <= a890;
         tm78 <= a894;
         tm79 <= a896;
         tm82 <= a900;
         tm90 <= a912;
         tm91 <= a914;
         tm94 <= a918;
         tm98 <= a924;
         tm99 <= a926;
         tm478 <= tm477;
         tm482 <= tm481;
         tm494 <= tm493;
         tm498 <= tm497;
         tm510 <= tm509;
         tm514 <= tm513;
         tm526 <= tm525;
         tm530 <= tm529;
         tm542 <= tm541;
         tm544 <= tm543;
         tm550 <= tm549;
         tm552 <= tm551;
         tm558 <= tm557;
         tm562 <= tm561;
         tm574 <= tm573;
         tm581 <= tm580;
         tm588 <= tm587;
         tm595 <= tm594;
         tm545 <= tm544;
         tm553 <= tm552;
         tm575 <= tm574;
         tm582 <= tm581;
         tm589 <= tm588;
         tm596 <= tm595;
         tm546 <= tm545;
         tm554 <= tm553;
         tm576 <= tm575;
         tm583 <= tm582;
         tm590 <= tm589;
         tm597 <= tm596;
         tm577 <= tm576;
         tm584 <= tm583;
         tm591 <= tm590;
         tm598 <= tm597;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock41341(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_51122(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a754;
   wire signed [15:0] a755;
   wire signed [15:0] a756;
   wire signed [15:0] a757;
   wire signed [15:0] a762;
   wire signed [15:0] a763;
   wire signed [15:0] a764;
   wire signed [15:0] a765;
   wire signed [15:0] a770;
   wire signed [15:0] a771;
   wire signed [15:0] a772;
   wire signed [15:0] a773;
   wire signed [15:0] a778;
   wire signed [15:0] a779;
   wire signed [15:0] a780;
   wire signed [15:0] a781;
   wire signed [16:0] tm347;
   wire signed [16:0] tm348;
   wire signed [16:0] tm349;
   wire signed [16:0] tm350;
   wire signed [16:0] tm351;
   wire signed [16:0] tm352;
   wire signed [16:0] tm353;
   wire signed [16:0] tm354;
   wire signed [16:0] tm363;
   wire signed [16:0] tm364;
   wire signed [16:0] tm365;
   wire signed [16:0] tm366;
   wire signed [16:0] tm367;
   wire signed [16:0] tm368;
   wire signed [16:0] tm369;
   wire signed [16:0] tm370;
   wire signed [15:0] t930;
   wire signed [15:0] t931;
   wire signed [15:0] t932;
   wire signed [15:0] t933;
   wire signed [15:0] t934;
   wire signed [15:0] t935;
   wire signed [15:0] t936;
   wire signed [15:0] t937;
   wire signed [15:0] t946;
   wire signed [15:0] t947;
   wire signed [15:0] t948;
   wire signed [15:0] t949;
   wire signed [15:0] t950;
   wire signed [15:0] t951;
   wire signed [15:0] t952;
   wire signed [15:0] t953;
   wire signed [16:0] tm355;
   wire signed [16:0] tm356;
   wire signed [16:0] tm357;
   wire signed [16:0] tm358;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm359;
   wire signed [16:0] tm360;
   wire signed [16:0] tm361;
   wire signed [16:0] tm362;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm371;
   wire signed [16:0] tm372;
   wire signed [16:0] tm373;
   wire signed [16:0] tm374;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm375;
   wire signed [16:0] tm376;
   wire signed [16:0] tm377;
   wire signed [16:0] tm378;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t938;
   wire signed [15:0] t939;
   wire signed [15:0] t940;
   wire signed [15:0] t941;
   wire signed [15:0] t942;
   wire signed [15:0] t943;
   wire signed [15:0] t944;
   wire signed [15:0] t945;
   wire signed [15:0] t954;
   wire signed [15:0] t955;
   wire signed [15:0] t956;
   wire signed [15:0] t957;
   wire signed [15:0] t958;
   wire signed [15:0] t959;
   wire signed [15:0] t960;
   wire signed [15:0] t961;


   assign a754 = X0;
   assign a755 = X4;
   assign a756 = X1;
   assign a757 = X5;
   assign a762 = X2;
   assign a763 = X6;
   assign a764 = X3;
   assign a765 = X7;
   assign a770 = X8;
   assign a771 = X12;
   assign a772 = X9;
   assign a773 = X13;
   assign a778 = X10;
   assign a779 = X14;
   assign a780 = X11;
   assign a781 = X15;
   assign t930 = tm347[16:1];
   assign t931 = tm348[16:1];
   assign t932 = tm349[16:1];
   assign t933 = tm350[16:1];
   assign t934 = tm351[16:1];
   assign t935 = tm352[16:1];
   assign t936 = tm353[16:1];
   assign t937 = tm354[16:1];
   assign t946 = tm363[16:1];
   assign t947 = tm364[16:1];
   assign t948 = tm365[16:1];
   assign t949 = tm366[16:1];
   assign t950 = tm367[16:1];
   assign t951 = tm368[16:1];
   assign t952 = tm369[16:1];
   assign t953 = tm370[16:1];
   assign Y0 = t938;
   assign Y1 = t939;
   assign Y4 = t940;
   assign Y5 = t941;
   assign Y2 = t942;
   assign Y3 = t943;
   assign Y6 = t944;
   assign Y7 = t945;
   assign Y8 = t954;
   assign Y9 = t955;
   assign Y12 = t956;
   assign Y13 = t957;
   assign Y10 = t958;
   assign Y11 = t959;
   assign Y14 = t960;
   assign Y15 = t961;
   assign t938 = tm355[16:1];
   assign t939 = tm356[16:1];
   assign t940 = tm357[16:1];
   assign t941 = tm358[16:1];
   assign t942 = tm359[16:1];
   assign t943 = tm360[16:1];
   assign t944 = tm361[16:1];
   assign t945 = tm362[16:1];
   assign t954 = tm371[16:1];
   assign t955 = tm372[16:1];
   assign t956 = tm373[16:1];
   assign t957 = tm374[16:1];
   assign t958 = tm375[16:1];
   assign t959 = tm376[16:1];
   assign t960 = tm377[16:1];
   assign t961 = tm378[16:1];

    addfxp #(17, 1) add41353(.a({{1{a754[15]}}, a754}), .b({{1{a755[15]}}, a755}), .clk(clk), .q(tm347));    // 0
    addfxp #(17, 1) add41368(.a({{1{a756[15]}}, a756}), .b({{1{a757[15]}}, a757}), .clk(clk), .q(tm348));    // 0
    subfxp #(17, 1) sub41383(.a({{1{a754[15]}}, a754}), .b({{1{a755[15]}}, a755}), .clk(clk), .q(tm349));    // 0
    subfxp #(17, 1) sub41398(.a({{1{a756[15]}}, a756}), .b({{1{a757[15]}}, a757}), .clk(clk), .q(tm350));    // 0
    addfxp #(17, 1) add41413(.a({{1{a762[15]}}, a762}), .b({{1{a763[15]}}, a763}), .clk(clk), .q(tm351));    // 0
    addfxp #(17, 1) add41428(.a({{1{a764[15]}}, a764}), .b({{1{a765[15]}}, a765}), .clk(clk), .q(tm352));    // 0
    subfxp #(17, 1) sub41443(.a({{1{a762[15]}}, a762}), .b({{1{a763[15]}}, a763}), .clk(clk), .q(tm353));    // 0
    subfxp #(17, 1) sub41458(.a({{1{a764[15]}}, a764}), .b({{1{a765[15]}}, a765}), .clk(clk), .q(tm354));    // 0
    addfxp #(17, 1) add41561(.a({{1{a770[15]}}, a770}), .b({{1{a771[15]}}, a771}), .clk(clk), .q(tm363));    // 0
    addfxp #(17, 1) add41576(.a({{1{a772[15]}}, a772}), .b({{1{a773[15]}}, a773}), .clk(clk), .q(tm364));    // 0
    subfxp #(17, 1) sub41591(.a({{1{a770[15]}}, a770}), .b({{1{a771[15]}}, a771}), .clk(clk), .q(tm365));    // 0
    subfxp #(17, 1) sub41606(.a({{1{a772[15]}}, a772}), .b({{1{a773[15]}}, a773}), .clk(clk), .q(tm366));    // 0
    addfxp #(17, 1) add41621(.a({{1{a778[15]}}, a778}), .b({{1{a779[15]}}, a779}), .clk(clk), .q(tm367));    // 0
    addfxp #(17, 1) add41636(.a({{1{a780[15]}}, a780}), .b({{1{a781[15]}}, a781}), .clk(clk), .q(tm368));    // 0
    subfxp #(17, 1) sub41651(.a({{1{a778[15]}}, a778}), .b({{1{a779[15]}}, a779}), .clk(clk), .q(tm369));    // 0
    subfxp #(17, 1) sub41666(.a({{1{a780[15]}}, a780}), .b({{1{a781[15]}}, a781}), .clk(clk), .q(tm370));    // 0
    addfxp #(17, 1) add41465(.a({{1{t930[15]}}, t930}), .b({{1{t934[15]}}, t934}), .clk(clk), .q(tm355));    // 1
    addfxp #(17, 1) add41472(.a({{1{t931[15]}}, t931}), .b({{1{t935[15]}}, t935}), .clk(clk), .q(tm356));    // 1
    subfxp #(17, 1) sub41479(.a({{1{t930[15]}}, t930}), .b({{1{t934[15]}}, t934}), .clk(clk), .q(tm357));    // 1
    subfxp #(17, 1) sub41486(.a({{1{t931[15]}}, t931}), .b({{1{t935[15]}}, t935}), .clk(clk), .q(tm358));    // 1
    addfxp #(17, 1) add41509(.a({{1{t932[15]}}, t932}), .b({{1{t937[15]}}, t937}), .clk(clk), .q(tm359));    // 1
    subfxp #(17, 1) sub41516(.a({{1{t933[15]}}, t933}), .b({{1{t936[15]}}, t936}), .clk(clk), .q(tm360));    // 1
    subfxp #(17, 1) sub41523(.a({{1{t932[15]}}, t932}), .b({{1{t937[15]}}, t937}), .clk(clk), .q(tm361));    // 1
    addfxp #(17, 1) add41530(.a({{1{t933[15]}}, t933}), .b({{1{t936[15]}}, t936}), .clk(clk), .q(tm362));    // 1
    addfxp #(17, 1) add41673(.a({{1{t946[15]}}, t946}), .b({{1{t950[15]}}, t950}), .clk(clk), .q(tm371));    // 1
    addfxp #(17, 1) add41680(.a({{1{t947[15]}}, t947}), .b({{1{t951[15]}}, t951}), .clk(clk), .q(tm372));    // 1
    subfxp #(17, 1) sub41687(.a({{1{t946[15]}}, t946}), .b({{1{t950[15]}}, t950}), .clk(clk), .q(tm373));    // 1
    subfxp #(17, 1) sub41694(.a({{1{t947[15]}}, t947}), .b({{1{t951[15]}}, t951}), .clk(clk), .q(tm374));    // 1
    addfxp #(17, 1) add41717(.a({{1{t948[15]}}, t948}), .b({{1{t953[15]}}, t953}), .clk(clk), .q(tm375));    // 1
    subfxp #(17, 1) sub41724(.a({{1{t949[15]}}, t949}), .b({{1{t952[15]}}, t952}), .clk(clk), .q(tm376));    // 1
    subfxp #(17, 1) sub41731(.a({{1{t948[15]}}, t948}), .b({{1{t953[15]}}, t953}), .clk(clk), .q(tm377));    // 1
    addfxp #(17, 1) add41738(.a({{1{t949[15]}}, t949}), .b({{1{t952[15]}}, t952}), .clk(clk), .q(tm378));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 22
// Gap: 8
module rc41763(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm41761 instPerm51123(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet41761(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [2:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [7:0] control;

    always @(posedge clk) begin
      case(ct)
        3'd0: control <= 8'b11111111;
        3'd1: control <= 8'b11111111;
        3'd2: control <= 8'b00001111;
        3'd3: control <= 8'b00001111;
        3'd4: control <= 8'b11110000;
        3'd5: control <= 8'b11110000;
        3'd6: control <= 8'b00000000;
        3'd7: control <= 8'b00000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [7:0] control0;
   reg [7:0] control1;
   reg [7:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[7] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[7] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[6] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[6] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[5] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[5] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[4] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[4] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[3] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[3] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[2] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[2] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[1] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[1] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[0] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[0] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 22
// Gap: 8
module perm41761(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 8;

   parameter addrbits = 3;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm18;
   assign tm18 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_51128(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51129(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

shiftRegFIFO #(7, 1) shiftFIFO_51138(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_51139(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(8, 1) shiftFIFO_51140(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51141(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_51144(.X(tm18), .Y(tm18_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_51147(.X(tm18_d), .Y(tm18_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 3) shiftFIFO_51152(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd0 <= 6;
	     {1'd0,  3'd1}: s1rd0 <= 7;
	     {1'd0,  3'd2}: s1rd0 <= 4;
	     {1'd0,  3'd3}: s1rd0 <= 5;
	     {1'd0,  3'd4}: s1rd0 <= 2;
	     {1'd0,  3'd5}: s1rd0 <= 3;
	     {1'd0,  3'd6}: s1rd0 <= 0;
	     {1'd0,  3'd7}: s1rd0 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd1 <= 4;
	     {1'd0,  3'd1}: s1rd1 <= 5;
	     {1'd0,  3'd2}: s1rd1 <= 6;
	     {1'd0,  3'd3}: s1rd1 <= 7;
	     {1'd0,  3'd4}: s1rd1 <= 0;
	     {1'd0,  3'd5}: s1rd1 <= 1;
	     {1'd0,  3'd6}: s1rd1 <= 2;
	     {1'd0,  3'd7}: s1rd1 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd2 <= 2;
	     {1'd0,  3'd1}: s1rd2 <= 3;
	     {1'd0,  3'd2}: s1rd2 <= 0;
	     {1'd0,  3'd3}: s1rd2 <= 1;
	     {1'd0,  3'd4}: s1rd2 <= 6;
	     {1'd0,  3'd5}: s1rd2 <= 7;
	     {1'd0,  3'd6}: s1rd2 <= 4;
	     {1'd0,  3'd7}: s1rd2 <= 5;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd3 <= 0;
	     {1'd0,  3'd1}: s1rd3 <= 1;
	     {1'd0,  3'd2}: s1rd3 <= 2;
	     {1'd0,  3'd3}: s1rd3 <= 3;
	     {1'd0,  3'd4}: s1rd3 <= 4;
	     {1'd0,  3'd5}: s1rd3 <= 5;
	     {1'd0,  3'd6}: s1rd3 <= 6;
	     {1'd0,  3'd7}: s1rd3 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd4 <= 6;
	     {1'd0,  3'd1}: s1rd4 <= 7;
	     {1'd0,  3'd2}: s1rd4 <= 4;
	     {1'd0,  3'd3}: s1rd4 <= 5;
	     {1'd0,  3'd4}: s1rd4 <= 2;
	     {1'd0,  3'd5}: s1rd4 <= 3;
	     {1'd0,  3'd6}: s1rd4 <= 0;
	     {1'd0,  3'd7}: s1rd4 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd5 <= 4;
	     {1'd0,  3'd1}: s1rd5 <= 5;
	     {1'd0,  3'd2}: s1rd5 <= 6;
	     {1'd0,  3'd3}: s1rd5 <= 7;
	     {1'd0,  3'd4}: s1rd5 <= 0;
	     {1'd0,  3'd5}: s1rd5 <= 1;
	     {1'd0,  3'd6}: s1rd5 <= 2;
	     {1'd0,  3'd7}: s1rd5 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd6 <= 2;
	     {1'd0,  3'd1}: s1rd6 <= 3;
	     {1'd0,  3'd2}: s1rd6 <= 0;
	     {1'd0,  3'd3}: s1rd6 <= 1;
	     {1'd0,  3'd4}: s1rd6 <= 6;
	     {1'd0,  3'd5}: s1rd6 <= 7;
	     {1'd0,  3'd6}: s1rd6 <= 4;
	     {1'd0,  3'd7}: s1rd6 <= 5;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm18_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd7 <= 0;
	     {1'd0,  3'd1}: s1rd7 <= 1;
	     {1'd0,  3'd2}: s1rd7 <= 2;
	     {1'd0,  3'd3}: s1rd7 <= 3;
	     {1'd0,  3'd4}: s1rd7 <= 4;
	     {1'd0,  3'd5}: s1rd7 <= 5;
	     {1'd0,  3'd6}: s1rd7 <= 6;
	     {1'd0,  3'd7}: s1rd7 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet41761 sw(tm18_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr0 <= 6;
	      {1'd0, 3'd1}: s2wr0 <= 7;
	      {1'd0, 3'd2}: s2wr0 <= 4;
	      {1'd0, 3'd3}: s2wr0 <= 5;
	      {1'd0, 3'd4}: s2wr0 <= 2;
	      {1'd0, 3'd5}: s2wr0 <= 3;
	      {1'd0, 3'd6}: s2wr0 <= 0;
	      {1'd0, 3'd7}: s2wr0 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr1 <= 4;
	      {1'd0, 3'd1}: s2wr1 <= 5;
	      {1'd0, 3'd2}: s2wr1 <= 6;
	      {1'd0, 3'd3}: s2wr1 <= 7;
	      {1'd0, 3'd4}: s2wr1 <= 0;
	      {1'd0, 3'd5}: s2wr1 <= 1;
	      {1'd0, 3'd6}: s2wr1 <= 2;
	      {1'd0, 3'd7}: s2wr1 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr2 <= 2;
	      {1'd0, 3'd1}: s2wr2 <= 3;
	      {1'd0, 3'd2}: s2wr2 <= 0;
	      {1'd0, 3'd3}: s2wr2 <= 1;
	      {1'd0, 3'd4}: s2wr2 <= 6;
	      {1'd0, 3'd5}: s2wr2 <= 7;
	      {1'd0, 3'd6}: s2wr2 <= 4;
	      {1'd0, 3'd7}: s2wr2 <= 5;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr3 <= 0;
	      {1'd0, 3'd1}: s2wr3 <= 1;
	      {1'd0, 3'd2}: s2wr3 <= 2;
	      {1'd0, 3'd3}: s2wr3 <= 3;
	      {1'd0, 3'd4}: s2wr3 <= 4;
	      {1'd0, 3'd5}: s2wr3 <= 5;
	      {1'd0, 3'd6}: s2wr3 <= 6;
	      {1'd0, 3'd7}: s2wr3 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr4 <= 6;
	      {1'd0, 3'd1}: s2wr4 <= 7;
	      {1'd0, 3'd2}: s2wr4 <= 4;
	      {1'd0, 3'd3}: s2wr4 <= 5;
	      {1'd0, 3'd4}: s2wr4 <= 2;
	      {1'd0, 3'd5}: s2wr4 <= 3;
	      {1'd0, 3'd6}: s2wr4 <= 0;
	      {1'd0, 3'd7}: s2wr4 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr5 <= 4;
	      {1'd0, 3'd1}: s2wr5 <= 5;
	      {1'd0, 3'd2}: s2wr5 <= 6;
	      {1'd0, 3'd3}: s2wr5 <= 7;
	      {1'd0, 3'd4}: s2wr5 <= 0;
	      {1'd0, 3'd5}: s2wr5 <= 1;
	      {1'd0, 3'd6}: s2wr5 <= 2;
	      {1'd0, 3'd7}: s2wr5 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr6 <= 2;
	      {1'd0, 3'd1}: s2wr6 <= 3;
	      {1'd0, 3'd2}: s2wr6 <= 0;
	      {1'd0, 3'd3}: s2wr6 <= 1;
	      {1'd0, 3'd4}: s2wr6 <= 6;
	      {1'd0, 3'd5}: s2wr6 <= 7;
	      {1'd0, 3'd6}: s2wr6 <= 4;
	      {1'd0, 3'd7}: s2wr6 <= 5;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm18_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr7 <= 0;
	      {1'd0, 3'd1}: s2wr7 <= 1;
	      {1'd0, 3'd2}: s2wr7 <= 2;
	      {1'd0, 3'd3}: s2wr7 <= 3;
	      {1'd0, 3'd4}: s2wr7 <= 4;
	      {1'd0, 3'd5}: s2wr7 <= 5;
	      {1'd0, 3'd6}: s2wr7 <= 6;
	      {1'd0, 3'd7}: s2wr7 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 8
module DirSum_42568(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [2:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 7)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock41766 codeBlockIsnt51153(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D40_42426(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D41_42436(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      4: out3 <= 16'h0;
      5: out3 <= 16'he782;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D42_42446(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h187e;
      3: out3 <= 16'hf384;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hc13b;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hdc72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D44_42466(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3871;
      3: out3 <= 16'h3179;
      4: out3 <= 16'h289a;
      5: out3 <= 16'h1e2b;
      6: out3 <= 16'h1294;
      7: out3 <= 16'h646;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D45_42476(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h238e;
      3: out3 <= 16'hc7c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hdc72;
      6: out3 <= 16'hcac9;
      7: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D46_42486(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3d3f;
      1: out3 <= 16'h289a;
      2: out3 <= 16'h646;
      3: out3 <= 16'he1d5;
      4: out3 <= 16'hc78f;
      5: out3 <= 16'hc04f;
      6: out3 <= 16'hce87;
      7: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D48_42506(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D49_42516(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      4: out3 <= 16'hc000;
      5: out3 <= 16'hc4df;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D50_42526(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hc4df;
      3: out3 <= 16'hc13b;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hf384;
      6: out3 <= 16'h187e;
      7: out3 <= 16'h3537;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D52_42546(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'he1d5;
      3: out3 <= 16'hd766;
      4: out3 <= 16'hce87;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hc2c1;
      7: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D53_42556(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hc13b;
      4: out3 <= 16'hc13b;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D54_42566(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hed6c;
      1: out3 <= 16'hce87;
      2: out3 <= 16'hc04f;
      3: out3 <= 16'hc78f;
      4: out3 <= 16'he1d5;
      5: out3 <= 16'h646;
      6: out3 <= 16'h289a;
      7: out3 <= 16'h3d3f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock41766(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i3_in;
   reg [2:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_51156(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a690;
   wire signed [15:0] a643;
   wire signed [15:0] a693;
   wire signed [15:0] a647;
   wire signed [15:0] a694;
   wire signed [15:0] a695;
   wire signed [15:0] a698;
   wire signed [15:0] a699;
   wire signed [15:0] a702;
   wire signed [15:0] a703;
   wire signed [15:0] a706;
   wire signed [15:0] a667;
   wire signed [15:0] a709;
   wire signed [15:0] a671;
   wire signed [15:0] a710;
   wire signed [15:0] a711;
   wire signed [15:0] a714;
   wire signed [15:0] a715;
   wire signed [15:0] a718;
   wire signed [15:0] a719;
   reg signed [15:0] tm599;
   reg signed [15:0] tm603;
   reg signed [15:0] tm615;
   reg signed [15:0] tm619;
   reg signed [15:0] tm631;
   reg signed [15:0] tm635;
   reg signed [15:0] tm647;
   reg signed [15:0] tm651;
   reg signed [15:0] tm663;
   reg signed [15:0] tm667;
   reg signed [15:0] tm679;
   reg signed [15:0] tm683;
   reg signed [15:0] tm695;
   reg signed [15:0] tm702;
   reg signed [15:0] tm709;
   reg signed [15:0] tm716;
   reg signed [15:0] tm600;
   reg signed [15:0] tm604;
   reg signed [15:0] tm616;
   reg signed [15:0] tm620;
   reg signed [15:0] tm632;
   reg signed [15:0] tm636;
   reg signed [15:0] tm648;
   reg signed [15:0] tm652;
   reg signed [15:0] tm664;
   reg signed [15:0] tm668;
   reg signed [15:0] tm680;
   reg signed [15:0] tm684;
   reg signed [15:0] tm696;
   reg signed [15:0] tm703;
   reg signed [15:0] tm710;
   reg signed [15:0] tm717;
   wire signed [15:0] tm21;
   wire signed [15:0] a648;
   wire signed [15:0] tm22;
   wire signed [15:0] a650;
   wire signed [15:0] tm23;
   wire signed [15:0] a654;
   wire signed [15:0] tm24;
   wire signed [15:0] a656;
   wire signed [15:0] tm25;
   wire signed [15:0] a660;
   wire signed [15:0] tm26;
   wire signed [15:0] a662;
   wire signed [15:0] tm29;
   wire signed [15:0] a672;
   wire signed [15:0] tm30;
   wire signed [15:0] a674;
   wire signed [15:0] tm31;
   wire signed [15:0] a678;
   wire signed [15:0] tm32;
   wire signed [15:0] a680;
   wire signed [15:0] tm33;
   wire signed [15:0] a684;
   wire signed [15:0] tm34;
   wire signed [15:0] a686;
   reg signed [15:0] tm601;
   reg signed [15:0] tm605;
   reg signed [15:0] tm617;
   reg signed [15:0] tm621;
   reg signed [15:0] tm633;
   reg signed [15:0] tm637;
   reg signed [15:0] tm649;
   reg signed [15:0] tm653;
   reg signed [15:0] tm665;
   reg signed [15:0] tm669;
   reg signed [15:0] tm681;
   reg signed [15:0] tm685;
   reg signed [15:0] tm697;
   reg signed [15:0] tm704;
   reg signed [15:0] tm711;
   reg signed [15:0] tm718;
   reg signed [15:0] tm106;
   reg signed [15:0] tm107;
   reg signed [15:0] tm110;
   reg signed [15:0] tm111;
   reg signed [15:0] tm114;
   reg signed [15:0] tm115;
   reg signed [15:0] tm122;
   reg signed [15:0] tm123;
   reg signed [15:0] tm126;
   reg signed [15:0] tm127;
   reg signed [15:0] tm130;
   reg signed [15:0] tm131;
   reg signed [15:0] tm602;
   reg signed [15:0] tm606;
   reg signed [15:0] tm618;
   reg signed [15:0] tm622;
   reg signed [15:0] tm634;
   reg signed [15:0] tm638;
   reg signed [15:0] tm650;
   reg signed [15:0] tm654;
   reg signed [15:0] tm666;
   reg signed [15:0] tm670;
   reg signed [15:0] tm682;
   reg signed [15:0] tm686;
   reg signed [15:0] tm698;
   reg signed [15:0] tm705;
   reg signed [15:0] tm712;
   reg signed [15:0] tm719;
   reg signed [15:0] tm699;
   reg signed [15:0] tm706;
   reg signed [15:0] tm713;
   reg signed [15:0] tm720;
   wire signed [15:0] a649;
   wire signed [15:0] a651;
   wire signed [15:0] a652;
   wire signed [15:0] a653;
   wire signed [15:0] a655;
   wire signed [15:0] a657;
   wire signed [15:0] a658;
   wire signed [15:0] a659;
   wire signed [15:0] a661;
   wire signed [15:0] a663;
   wire signed [15:0] a664;
   wire signed [15:0] a665;
   wire signed [15:0] a673;
   wire signed [15:0] a675;
   wire signed [15:0] a676;
   wire signed [15:0] a677;
   wire signed [15:0] a679;
   wire signed [15:0] a681;
   wire signed [15:0] a682;
   wire signed [15:0] a683;
   wire signed [15:0] a685;
   wire signed [15:0] a687;
   wire signed [15:0] a688;
   wire signed [15:0] a689;
   reg signed [15:0] tm700;
   reg signed [15:0] tm707;
   reg signed [15:0] tm714;
   reg signed [15:0] tm721;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm701;
   reg signed [15:0] tm708;
   reg signed [15:0] tm715;
   reg signed [15:0] tm722;


   assign a690 = X0;
   assign a643 = a690;
   assign a693 = X1;
   assign a647 = a693;
   assign a694 = X2;
   assign a695 = X3;
   assign a698 = X4;
   assign a699 = X5;
   assign a702 = X6;
   assign a703 = X7;
   assign a706 = X8;
   assign a667 = a706;
   assign a709 = X9;
   assign a671 = a709;
   assign a710 = X10;
   assign a711 = X11;
   assign a714 = X12;
   assign a715 = X13;
   assign a718 = X14;
   assign a719 = X15;
   assign a648 = tm21;
   assign a650 = tm22;
   assign a654 = tm23;
   assign a656 = tm24;
   assign a660 = tm25;
   assign a662 = tm26;
   assign a672 = tm29;
   assign a674 = tm30;
   assign a678 = tm31;
   assign a680 = tm32;
   assign a684 = tm33;
   assign a686 = tm34;
   assign Y0 = tm701;
   assign Y1 = tm708;
   assign Y8 = tm715;
   assign Y9 = tm722;

   D40_42426 instD40inst0_42426(.addr(i3[2:0]), .out(tm21), .clk(clk));

   D41_42436 instD41inst0_42436(.addr(i3[2:0]), .out(tm23), .clk(clk));

   D42_42446 instD42inst0_42446(.addr(i3[2:0]), .out(tm25), .clk(clk));

   D44_42466 instD44inst0_42466(.addr(i3[2:0]), .out(tm29), .clk(clk));

   D45_42476 instD45inst0_42476(.addr(i3[2:0]), .out(tm31), .clk(clk));

   D46_42486 instD46inst0_42486(.addr(i3[2:0]), .out(tm33), .clk(clk));

   D48_42506 instD48inst0_42506(.addr(i3[2:0]), .out(tm22), .clk(clk));

   D49_42516 instD49inst0_42516(.addr(i3[2:0]), .out(tm24), .clk(clk));

   D50_42526 instD50inst0_42526(.addr(i3[2:0]), .out(tm26), .clk(clk));

   D52_42546 instD52inst0_42546(.addr(i3[2:0]), .out(tm30), .clk(clk));

   D53_42556 instD53inst0_42556(.addr(i3[2:0]), .out(tm32), .clk(clk));

   D54_42566 instD54inst0_42566(.addr(i3[2:0]), .out(tm34), .clk(clk));

    multfix #(16, 2) m41865(.a(tm106), .b(tm602), .clk(clk), .q_sc(a649), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41887(.a(tm107), .b(tm606), .clk(clk), .q_sc(a651), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41905(.a(tm107), .b(tm602), .clk(clk), .q_sc(a652), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41916(.a(tm106), .b(tm606), .clk(clk), .q_sc(a653), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41945(.a(tm110), .b(tm618), .clk(clk), .q_sc(a655), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41967(.a(tm111), .b(tm622), .clk(clk), .q_sc(a657), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41985(.a(tm111), .b(tm618), .clk(clk), .q_sc(a658), .q_unsc(), .rst(reset));
    multfix #(16, 2) m41996(.a(tm110), .b(tm622), .clk(clk), .q_sc(a659), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42025(.a(tm114), .b(tm634), .clk(clk), .q_sc(a661), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42047(.a(tm115), .b(tm638), .clk(clk), .q_sc(a663), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42065(.a(tm115), .b(tm634), .clk(clk), .q_sc(a664), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42076(.a(tm114), .b(tm638), .clk(clk), .q_sc(a665), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42185(.a(tm122), .b(tm650), .clk(clk), .q_sc(a673), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42207(.a(tm123), .b(tm654), .clk(clk), .q_sc(a675), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42225(.a(tm123), .b(tm650), .clk(clk), .q_sc(a676), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42236(.a(tm122), .b(tm654), .clk(clk), .q_sc(a677), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42265(.a(tm126), .b(tm666), .clk(clk), .q_sc(a679), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42287(.a(tm127), .b(tm670), .clk(clk), .q_sc(a681), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42305(.a(tm127), .b(tm666), .clk(clk), .q_sc(a682), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42316(.a(tm126), .b(tm670), .clk(clk), .q_sc(a683), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42345(.a(tm130), .b(tm682), .clk(clk), .q_sc(a685), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42367(.a(tm131), .b(tm686), .clk(clk), .q_sc(a687), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42385(.a(tm131), .b(tm682), .clk(clk), .q_sc(a688), .q_unsc(), .rst(reset));
    multfix #(16, 2) m42396(.a(tm130), .b(tm686), .clk(clk), .q_sc(a689), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub41894(.a(a649), .b(a651), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add41923(.a(a652), .b(a653), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub41974(.a(a655), .b(a657), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add42003(.a(a658), .b(a659), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub42054(.a(a661), .b(a663), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add42083(.a(a664), .b(a665), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub42214(.a(a673), .b(a675), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add42243(.a(a676), .b(a677), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub42294(.a(a679), .b(a681), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add42323(.a(a682), .b(a683), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub42374(.a(a685), .b(a687), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add42403(.a(a688), .b(a689), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm106 <= 0;
         tm602 <= 0;
         tm107 <= 0;
         tm606 <= 0;
         tm107 <= 0;
         tm602 <= 0;
         tm106 <= 0;
         tm606 <= 0;
         tm110 <= 0;
         tm618 <= 0;
         tm111 <= 0;
         tm622 <= 0;
         tm111 <= 0;
         tm618 <= 0;
         tm110 <= 0;
         tm622 <= 0;
         tm114 <= 0;
         tm634 <= 0;
         tm115 <= 0;
         tm638 <= 0;
         tm115 <= 0;
         tm634 <= 0;
         tm114 <= 0;
         tm638 <= 0;
         tm122 <= 0;
         tm650 <= 0;
         tm123 <= 0;
         tm654 <= 0;
         tm123 <= 0;
         tm650 <= 0;
         tm122 <= 0;
         tm654 <= 0;
         tm126 <= 0;
         tm666 <= 0;
         tm127 <= 0;
         tm670 <= 0;
         tm127 <= 0;
         tm666 <= 0;
         tm126 <= 0;
         tm670 <= 0;
         tm130 <= 0;
         tm682 <= 0;
         tm131 <= 0;
         tm686 <= 0;
         tm131 <= 0;
         tm682 <= 0;
         tm130 <= 0;
         tm686 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm599 <= a694;
         tm603 <= a695;
         tm615 <= a698;
         tm619 <= a699;
         tm631 <= a702;
         tm635 <= a703;
         tm647 <= a710;
         tm651 <= a711;
         tm663 <= a714;
         tm667 <= a715;
         tm679 <= a718;
         tm683 <= a719;
         tm695 <= a643;
         tm702 <= a647;
         tm709 <= a667;
         tm716 <= a671;
         tm600 <= tm599;
         tm604 <= tm603;
         tm616 <= tm615;
         tm620 <= tm619;
         tm632 <= tm631;
         tm636 <= tm635;
         tm648 <= tm647;
         tm652 <= tm651;
         tm664 <= tm663;
         tm668 <= tm667;
         tm680 <= tm679;
         tm684 <= tm683;
         tm696 <= tm695;
         tm703 <= tm702;
         tm710 <= tm709;
         tm717 <= tm716;
         tm601 <= tm600;
         tm605 <= tm604;
         tm617 <= tm616;
         tm621 <= tm620;
         tm633 <= tm632;
         tm637 <= tm636;
         tm649 <= tm648;
         tm653 <= tm652;
         tm665 <= tm664;
         tm669 <= tm668;
         tm681 <= tm680;
         tm685 <= tm684;
         tm697 <= tm696;
         tm704 <= tm703;
         tm711 <= tm710;
         tm718 <= tm717;
         tm106 <= a648;
         tm107 <= a650;
         tm110 <= a654;
         tm111 <= a656;
         tm114 <= a660;
         tm115 <= a662;
         tm122 <= a672;
         tm123 <= a674;
         tm126 <= a678;
         tm127 <= a680;
         tm130 <= a684;
         tm131 <= a686;
         tm602 <= tm601;
         tm606 <= tm605;
         tm618 <= tm617;
         tm622 <= tm621;
         tm634 <= tm633;
         tm638 <= tm637;
         tm650 <= tm649;
         tm654 <= tm653;
         tm666 <= tm665;
         tm670 <= tm669;
         tm682 <= tm681;
         tm686 <= tm685;
         tm698 <= tm697;
         tm705 <= tm704;
         tm712 <= tm711;
         tm719 <= tm718;
         tm699 <= tm698;
         tm706 <= tm705;
         tm713 <= tm712;
         tm720 <= tm719;
         tm700 <= tm699;
         tm707 <= tm706;
         tm714 <= tm713;
         tm721 <= tm720;
         tm701 <= tm700;
         tm708 <= tm707;
         tm715 <= tm714;
         tm722 <= tm721;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock42571(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_51159(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a514;
   wire signed [15:0] a515;
   wire signed [15:0] a516;
   wire signed [15:0] a517;
   wire signed [15:0] a522;
   wire signed [15:0] a523;
   wire signed [15:0] a524;
   wire signed [15:0] a525;
   wire signed [15:0] a530;
   wire signed [15:0] a531;
   wire signed [15:0] a532;
   wire signed [15:0] a533;
   wire signed [15:0] a538;
   wire signed [15:0] a539;
   wire signed [15:0] a540;
   wire signed [15:0] a541;
   wire signed [16:0] tm379;
   wire signed [16:0] tm380;
   wire signed [16:0] tm381;
   wire signed [16:0] tm382;
   wire signed [16:0] tm383;
   wire signed [16:0] tm384;
   wire signed [16:0] tm385;
   wire signed [16:0] tm386;
   wire signed [16:0] tm395;
   wire signed [16:0] tm396;
   wire signed [16:0] tm397;
   wire signed [16:0] tm398;
   wire signed [16:0] tm399;
   wire signed [16:0] tm400;
   wire signed [16:0] tm401;
   wire signed [16:0] tm402;
   wire signed [15:0] t690;
   wire signed [15:0] t691;
   wire signed [15:0] t692;
   wire signed [15:0] t693;
   wire signed [15:0] t694;
   wire signed [15:0] t695;
   wire signed [15:0] t696;
   wire signed [15:0] t697;
   wire signed [15:0] t706;
   wire signed [15:0] t707;
   wire signed [15:0] t708;
   wire signed [15:0] t709;
   wire signed [15:0] t710;
   wire signed [15:0] t711;
   wire signed [15:0] t712;
   wire signed [15:0] t713;
   wire signed [16:0] tm387;
   wire signed [16:0] tm388;
   wire signed [16:0] tm389;
   wire signed [16:0] tm390;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm391;
   wire signed [16:0] tm392;
   wire signed [16:0] tm393;
   wire signed [16:0] tm394;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm403;
   wire signed [16:0] tm404;
   wire signed [16:0] tm405;
   wire signed [16:0] tm406;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm407;
   wire signed [16:0] tm408;
   wire signed [16:0] tm409;
   wire signed [16:0] tm410;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t698;
   wire signed [15:0] t699;
   wire signed [15:0] t700;
   wire signed [15:0] t701;
   wire signed [15:0] t702;
   wire signed [15:0] t703;
   wire signed [15:0] t704;
   wire signed [15:0] t705;
   wire signed [15:0] t714;
   wire signed [15:0] t715;
   wire signed [15:0] t716;
   wire signed [15:0] t717;
   wire signed [15:0] t718;
   wire signed [15:0] t719;
   wire signed [15:0] t720;
   wire signed [15:0] t721;


   assign a514 = X0;
   assign a515 = X4;
   assign a516 = X1;
   assign a517 = X5;
   assign a522 = X2;
   assign a523 = X6;
   assign a524 = X3;
   assign a525 = X7;
   assign a530 = X8;
   assign a531 = X12;
   assign a532 = X9;
   assign a533 = X13;
   assign a538 = X10;
   assign a539 = X14;
   assign a540 = X11;
   assign a541 = X15;
   assign t690 = tm379[16:1];
   assign t691 = tm380[16:1];
   assign t692 = tm381[16:1];
   assign t693 = tm382[16:1];
   assign t694 = tm383[16:1];
   assign t695 = tm384[16:1];
   assign t696 = tm385[16:1];
   assign t697 = tm386[16:1];
   assign t706 = tm395[16:1];
   assign t707 = tm396[16:1];
   assign t708 = tm397[16:1];
   assign t709 = tm398[16:1];
   assign t710 = tm399[16:1];
   assign t711 = tm400[16:1];
   assign t712 = tm401[16:1];
   assign t713 = tm402[16:1];
   assign Y0 = t698;
   assign Y1 = t699;
   assign Y4 = t700;
   assign Y5 = t701;
   assign Y2 = t702;
   assign Y3 = t703;
   assign Y6 = t704;
   assign Y7 = t705;
   assign Y8 = t714;
   assign Y9 = t715;
   assign Y12 = t716;
   assign Y13 = t717;
   assign Y10 = t718;
   assign Y11 = t719;
   assign Y14 = t720;
   assign Y15 = t721;
   assign t698 = tm387[16:1];
   assign t699 = tm388[16:1];
   assign t700 = tm389[16:1];
   assign t701 = tm390[16:1];
   assign t702 = tm391[16:1];
   assign t703 = tm392[16:1];
   assign t704 = tm393[16:1];
   assign t705 = tm394[16:1];
   assign t714 = tm403[16:1];
   assign t715 = tm404[16:1];
   assign t716 = tm405[16:1];
   assign t717 = tm406[16:1];
   assign t718 = tm407[16:1];
   assign t719 = tm408[16:1];
   assign t720 = tm409[16:1];
   assign t721 = tm410[16:1];

    addfxp #(17, 1) add42583(.a({{1{a514[15]}}, a514}), .b({{1{a515[15]}}, a515}), .clk(clk), .q(tm379));    // 0
    addfxp #(17, 1) add42598(.a({{1{a516[15]}}, a516}), .b({{1{a517[15]}}, a517}), .clk(clk), .q(tm380));    // 0
    subfxp #(17, 1) sub42613(.a({{1{a514[15]}}, a514}), .b({{1{a515[15]}}, a515}), .clk(clk), .q(tm381));    // 0
    subfxp #(17, 1) sub42628(.a({{1{a516[15]}}, a516}), .b({{1{a517[15]}}, a517}), .clk(clk), .q(tm382));    // 0
    addfxp #(17, 1) add42643(.a({{1{a522[15]}}, a522}), .b({{1{a523[15]}}, a523}), .clk(clk), .q(tm383));    // 0
    addfxp #(17, 1) add42658(.a({{1{a524[15]}}, a524}), .b({{1{a525[15]}}, a525}), .clk(clk), .q(tm384));    // 0
    subfxp #(17, 1) sub42673(.a({{1{a522[15]}}, a522}), .b({{1{a523[15]}}, a523}), .clk(clk), .q(tm385));    // 0
    subfxp #(17, 1) sub42688(.a({{1{a524[15]}}, a524}), .b({{1{a525[15]}}, a525}), .clk(clk), .q(tm386));    // 0
    addfxp #(17, 1) add42791(.a({{1{a530[15]}}, a530}), .b({{1{a531[15]}}, a531}), .clk(clk), .q(tm395));    // 0
    addfxp #(17, 1) add42806(.a({{1{a532[15]}}, a532}), .b({{1{a533[15]}}, a533}), .clk(clk), .q(tm396));    // 0
    subfxp #(17, 1) sub42821(.a({{1{a530[15]}}, a530}), .b({{1{a531[15]}}, a531}), .clk(clk), .q(tm397));    // 0
    subfxp #(17, 1) sub42836(.a({{1{a532[15]}}, a532}), .b({{1{a533[15]}}, a533}), .clk(clk), .q(tm398));    // 0
    addfxp #(17, 1) add42851(.a({{1{a538[15]}}, a538}), .b({{1{a539[15]}}, a539}), .clk(clk), .q(tm399));    // 0
    addfxp #(17, 1) add42866(.a({{1{a540[15]}}, a540}), .b({{1{a541[15]}}, a541}), .clk(clk), .q(tm400));    // 0
    subfxp #(17, 1) sub42881(.a({{1{a538[15]}}, a538}), .b({{1{a539[15]}}, a539}), .clk(clk), .q(tm401));    // 0
    subfxp #(17, 1) sub42896(.a({{1{a540[15]}}, a540}), .b({{1{a541[15]}}, a541}), .clk(clk), .q(tm402));    // 0
    addfxp #(17, 1) add42695(.a({{1{t690[15]}}, t690}), .b({{1{t694[15]}}, t694}), .clk(clk), .q(tm387));    // 1
    addfxp #(17, 1) add42702(.a({{1{t691[15]}}, t691}), .b({{1{t695[15]}}, t695}), .clk(clk), .q(tm388));    // 1
    subfxp #(17, 1) sub42709(.a({{1{t690[15]}}, t690}), .b({{1{t694[15]}}, t694}), .clk(clk), .q(tm389));    // 1
    subfxp #(17, 1) sub42716(.a({{1{t691[15]}}, t691}), .b({{1{t695[15]}}, t695}), .clk(clk), .q(tm390));    // 1
    addfxp #(17, 1) add42739(.a({{1{t692[15]}}, t692}), .b({{1{t697[15]}}, t697}), .clk(clk), .q(tm391));    // 1
    subfxp #(17, 1) sub42746(.a({{1{t693[15]}}, t693}), .b({{1{t696[15]}}, t696}), .clk(clk), .q(tm392));    // 1
    subfxp #(17, 1) sub42753(.a({{1{t692[15]}}, t692}), .b({{1{t697[15]}}, t697}), .clk(clk), .q(tm393));    // 1
    addfxp #(17, 1) add42760(.a({{1{t693[15]}}, t693}), .b({{1{t696[15]}}, t696}), .clk(clk), .q(tm394));    // 1
    addfxp #(17, 1) add42903(.a({{1{t706[15]}}, t706}), .b({{1{t710[15]}}, t710}), .clk(clk), .q(tm403));    // 1
    addfxp #(17, 1) add42910(.a({{1{t707[15]}}, t707}), .b({{1{t711[15]}}, t711}), .clk(clk), .q(tm404));    // 1
    subfxp #(17, 1) sub42917(.a({{1{t706[15]}}, t706}), .b({{1{t710[15]}}, t710}), .clk(clk), .q(tm405));    // 1
    subfxp #(17, 1) sub42924(.a({{1{t707[15]}}, t707}), .b({{1{t711[15]}}, t711}), .clk(clk), .q(tm406));    // 1
    addfxp #(17, 1) add42947(.a({{1{t708[15]}}, t708}), .b({{1{t713[15]}}, t713}), .clk(clk), .q(tm407));    // 1
    subfxp #(17, 1) sub42954(.a({{1{t709[15]}}, t709}), .b({{1{t712[15]}}, t712}), .clk(clk), .q(tm408));    // 1
    subfxp #(17, 1) sub42961(.a({{1{t708[15]}}, t708}), .b({{1{t713[15]}}, t713}), .clk(clk), .q(tm409));    // 1
    addfxp #(17, 1) add42968(.a({{1{t709[15]}}, t709}), .b({{1{t712[15]}}, t712}), .clk(clk), .q(tm410));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 70
// Gap: 32
module rc42993(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm42991 instPerm51160(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet42991(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [4:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [7:0] control;

    always @(posedge clk) begin
      case(ct)
        5'd0: control <= 8'b11111111;
        5'd1: control <= 8'b11111111;
        5'd2: control <= 8'b11111111;
        5'd3: control <= 8'b11111111;
        5'd4: control <= 8'b11111111;
        5'd5: control <= 8'b11111111;
        5'd6: control <= 8'b11111111;
        5'd7: control <= 8'b11111111;
        5'd8: control <= 8'b00001111;
        5'd9: control <= 8'b00001111;
        5'd10: control <= 8'b00001111;
        5'd11: control <= 8'b00001111;
        5'd12: control <= 8'b00001111;
        5'd13: control <= 8'b00001111;
        5'd14: control <= 8'b00001111;
        5'd15: control <= 8'b00001111;
        5'd16: control <= 8'b11110000;
        5'd17: control <= 8'b11110000;
        5'd18: control <= 8'b11110000;
        5'd19: control <= 8'b11110000;
        5'd20: control <= 8'b11110000;
        5'd21: control <= 8'b11110000;
        5'd22: control <= 8'b11110000;
        5'd23: control <= 8'b11110000;
        5'd24: control <= 8'b00000000;
        5'd25: control <= 8'b00000000;
        5'd26: control <= 8'b00000000;
        5'd27: control <= 8'b00000000;
        5'd28: control <= 8'b00000000;
        5'd29: control <= 8'b00000000;
        5'd30: control <= 8'b00000000;
        5'd31: control <= 8'b00000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [7:0] control0;
   reg [7:0] control1;
   reg [7:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[7] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[7] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[6] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[6] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[5] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[5] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[4] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[4] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[3] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[3] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[2] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[2] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[1] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[1] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[0] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[0] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 70
// Gap: 32
module perm42991(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 32;

   parameter addrbits = 5;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm35;
   assign tm35 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_51165(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51166(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(31, 5) nextReg_51177(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_51178(.X(next2), .Y(next3), .clk(clk));
nextReg #(32, 5) nextReg_51181(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51182(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(31, 1) shiftFIFO_51185(.X(tm35), .Y(tm35_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_51188(.X(tm35_d), .Y(tm35_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 5) shiftFIFO_51193(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd0 <= 24;
	     {1'd0,  5'd1}: s1rd0 <= 25;
	     {1'd0,  5'd2}: s1rd0 <= 26;
	     {1'd0,  5'd3}: s1rd0 <= 27;
	     {1'd0,  5'd4}: s1rd0 <= 28;
	     {1'd0,  5'd5}: s1rd0 <= 29;
	     {1'd0,  5'd6}: s1rd0 <= 30;
	     {1'd0,  5'd7}: s1rd0 <= 31;
	     {1'd0,  5'd8}: s1rd0 <= 16;
	     {1'd0,  5'd9}: s1rd0 <= 17;
	     {1'd0,  5'd10}: s1rd0 <= 18;
	     {1'd0,  5'd11}: s1rd0 <= 19;
	     {1'd0,  5'd12}: s1rd0 <= 20;
	     {1'd0,  5'd13}: s1rd0 <= 21;
	     {1'd0,  5'd14}: s1rd0 <= 22;
	     {1'd0,  5'd15}: s1rd0 <= 23;
	     {1'd0,  5'd16}: s1rd0 <= 8;
	     {1'd0,  5'd17}: s1rd0 <= 9;
	     {1'd0,  5'd18}: s1rd0 <= 10;
	     {1'd0,  5'd19}: s1rd0 <= 11;
	     {1'd0,  5'd20}: s1rd0 <= 12;
	     {1'd0,  5'd21}: s1rd0 <= 13;
	     {1'd0,  5'd22}: s1rd0 <= 14;
	     {1'd0,  5'd23}: s1rd0 <= 15;
	     {1'd0,  5'd24}: s1rd0 <= 0;
	     {1'd0,  5'd25}: s1rd0 <= 1;
	     {1'd0,  5'd26}: s1rd0 <= 2;
	     {1'd0,  5'd27}: s1rd0 <= 3;
	     {1'd0,  5'd28}: s1rd0 <= 4;
	     {1'd0,  5'd29}: s1rd0 <= 5;
	     {1'd0,  5'd30}: s1rd0 <= 6;
	     {1'd0,  5'd31}: s1rd0 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd1 <= 16;
	     {1'd0,  5'd1}: s1rd1 <= 17;
	     {1'd0,  5'd2}: s1rd1 <= 18;
	     {1'd0,  5'd3}: s1rd1 <= 19;
	     {1'd0,  5'd4}: s1rd1 <= 20;
	     {1'd0,  5'd5}: s1rd1 <= 21;
	     {1'd0,  5'd6}: s1rd1 <= 22;
	     {1'd0,  5'd7}: s1rd1 <= 23;
	     {1'd0,  5'd8}: s1rd1 <= 24;
	     {1'd0,  5'd9}: s1rd1 <= 25;
	     {1'd0,  5'd10}: s1rd1 <= 26;
	     {1'd0,  5'd11}: s1rd1 <= 27;
	     {1'd0,  5'd12}: s1rd1 <= 28;
	     {1'd0,  5'd13}: s1rd1 <= 29;
	     {1'd0,  5'd14}: s1rd1 <= 30;
	     {1'd0,  5'd15}: s1rd1 <= 31;
	     {1'd0,  5'd16}: s1rd1 <= 0;
	     {1'd0,  5'd17}: s1rd1 <= 1;
	     {1'd0,  5'd18}: s1rd1 <= 2;
	     {1'd0,  5'd19}: s1rd1 <= 3;
	     {1'd0,  5'd20}: s1rd1 <= 4;
	     {1'd0,  5'd21}: s1rd1 <= 5;
	     {1'd0,  5'd22}: s1rd1 <= 6;
	     {1'd0,  5'd23}: s1rd1 <= 7;
	     {1'd0,  5'd24}: s1rd1 <= 8;
	     {1'd0,  5'd25}: s1rd1 <= 9;
	     {1'd0,  5'd26}: s1rd1 <= 10;
	     {1'd0,  5'd27}: s1rd1 <= 11;
	     {1'd0,  5'd28}: s1rd1 <= 12;
	     {1'd0,  5'd29}: s1rd1 <= 13;
	     {1'd0,  5'd30}: s1rd1 <= 14;
	     {1'd0,  5'd31}: s1rd1 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd2 <= 8;
	     {1'd0,  5'd1}: s1rd2 <= 9;
	     {1'd0,  5'd2}: s1rd2 <= 10;
	     {1'd0,  5'd3}: s1rd2 <= 11;
	     {1'd0,  5'd4}: s1rd2 <= 12;
	     {1'd0,  5'd5}: s1rd2 <= 13;
	     {1'd0,  5'd6}: s1rd2 <= 14;
	     {1'd0,  5'd7}: s1rd2 <= 15;
	     {1'd0,  5'd8}: s1rd2 <= 0;
	     {1'd0,  5'd9}: s1rd2 <= 1;
	     {1'd0,  5'd10}: s1rd2 <= 2;
	     {1'd0,  5'd11}: s1rd2 <= 3;
	     {1'd0,  5'd12}: s1rd2 <= 4;
	     {1'd0,  5'd13}: s1rd2 <= 5;
	     {1'd0,  5'd14}: s1rd2 <= 6;
	     {1'd0,  5'd15}: s1rd2 <= 7;
	     {1'd0,  5'd16}: s1rd2 <= 24;
	     {1'd0,  5'd17}: s1rd2 <= 25;
	     {1'd0,  5'd18}: s1rd2 <= 26;
	     {1'd0,  5'd19}: s1rd2 <= 27;
	     {1'd0,  5'd20}: s1rd2 <= 28;
	     {1'd0,  5'd21}: s1rd2 <= 29;
	     {1'd0,  5'd22}: s1rd2 <= 30;
	     {1'd0,  5'd23}: s1rd2 <= 31;
	     {1'd0,  5'd24}: s1rd2 <= 16;
	     {1'd0,  5'd25}: s1rd2 <= 17;
	     {1'd0,  5'd26}: s1rd2 <= 18;
	     {1'd0,  5'd27}: s1rd2 <= 19;
	     {1'd0,  5'd28}: s1rd2 <= 20;
	     {1'd0,  5'd29}: s1rd2 <= 21;
	     {1'd0,  5'd30}: s1rd2 <= 22;
	     {1'd0,  5'd31}: s1rd2 <= 23;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd3 <= 0;
	     {1'd0,  5'd1}: s1rd3 <= 1;
	     {1'd0,  5'd2}: s1rd3 <= 2;
	     {1'd0,  5'd3}: s1rd3 <= 3;
	     {1'd0,  5'd4}: s1rd3 <= 4;
	     {1'd0,  5'd5}: s1rd3 <= 5;
	     {1'd0,  5'd6}: s1rd3 <= 6;
	     {1'd0,  5'd7}: s1rd3 <= 7;
	     {1'd0,  5'd8}: s1rd3 <= 8;
	     {1'd0,  5'd9}: s1rd3 <= 9;
	     {1'd0,  5'd10}: s1rd3 <= 10;
	     {1'd0,  5'd11}: s1rd3 <= 11;
	     {1'd0,  5'd12}: s1rd3 <= 12;
	     {1'd0,  5'd13}: s1rd3 <= 13;
	     {1'd0,  5'd14}: s1rd3 <= 14;
	     {1'd0,  5'd15}: s1rd3 <= 15;
	     {1'd0,  5'd16}: s1rd3 <= 16;
	     {1'd0,  5'd17}: s1rd3 <= 17;
	     {1'd0,  5'd18}: s1rd3 <= 18;
	     {1'd0,  5'd19}: s1rd3 <= 19;
	     {1'd0,  5'd20}: s1rd3 <= 20;
	     {1'd0,  5'd21}: s1rd3 <= 21;
	     {1'd0,  5'd22}: s1rd3 <= 22;
	     {1'd0,  5'd23}: s1rd3 <= 23;
	     {1'd0,  5'd24}: s1rd3 <= 24;
	     {1'd0,  5'd25}: s1rd3 <= 25;
	     {1'd0,  5'd26}: s1rd3 <= 26;
	     {1'd0,  5'd27}: s1rd3 <= 27;
	     {1'd0,  5'd28}: s1rd3 <= 28;
	     {1'd0,  5'd29}: s1rd3 <= 29;
	     {1'd0,  5'd30}: s1rd3 <= 30;
	     {1'd0,  5'd31}: s1rd3 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd4 <= 24;
	     {1'd0,  5'd1}: s1rd4 <= 25;
	     {1'd0,  5'd2}: s1rd4 <= 26;
	     {1'd0,  5'd3}: s1rd4 <= 27;
	     {1'd0,  5'd4}: s1rd4 <= 28;
	     {1'd0,  5'd5}: s1rd4 <= 29;
	     {1'd0,  5'd6}: s1rd4 <= 30;
	     {1'd0,  5'd7}: s1rd4 <= 31;
	     {1'd0,  5'd8}: s1rd4 <= 16;
	     {1'd0,  5'd9}: s1rd4 <= 17;
	     {1'd0,  5'd10}: s1rd4 <= 18;
	     {1'd0,  5'd11}: s1rd4 <= 19;
	     {1'd0,  5'd12}: s1rd4 <= 20;
	     {1'd0,  5'd13}: s1rd4 <= 21;
	     {1'd0,  5'd14}: s1rd4 <= 22;
	     {1'd0,  5'd15}: s1rd4 <= 23;
	     {1'd0,  5'd16}: s1rd4 <= 8;
	     {1'd0,  5'd17}: s1rd4 <= 9;
	     {1'd0,  5'd18}: s1rd4 <= 10;
	     {1'd0,  5'd19}: s1rd4 <= 11;
	     {1'd0,  5'd20}: s1rd4 <= 12;
	     {1'd0,  5'd21}: s1rd4 <= 13;
	     {1'd0,  5'd22}: s1rd4 <= 14;
	     {1'd0,  5'd23}: s1rd4 <= 15;
	     {1'd0,  5'd24}: s1rd4 <= 0;
	     {1'd0,  5'd25}: s1rd4 <= 1;
	     {1'd0,  5'd26}: s1rd4 <= 2;
	     {1'd0,  5'd27}: s1rd4 <= 3;
	     {1'd0,  5'd28}: s1rd4 <= 4;
	     {1'd0,  5'd29}: s1rd4 <= 5;
	     {1'd0,  5'd30}: s1rd4 <= 6;
	     {1'd0,  5'd31}: s1rd4 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd5 <= 16;
	     {1'd0,  5'd1}: s1rd5 <= 17;
	     {1'd0,  5'd2}: s1rd5 <= 18;
	     {1'd0,  5'd3}: s1rd5 <= 19;
	     {1'd0,  5'd4}: s1rd5 <= 20;
	     {1'd0,  5'd5}: s1rd5 <= 21;
	     {1'd0,  5'd6}: s1rd5 <= 22;
	     {1'd0,  5'd7}: s1rd5 <= 23;
	     {1'd0,  5'd8}: s1rd5 <= 24;
	     {1'd0,  5'd9}: s1rd5 <= 25;
	     {1'd0,  5'd10}: s1rd5 <= 26;
	     {1'd0,  5'd11}: s1rd5 <= 27;
	     {1'd0,  5'd12}: s1rd5 <= 28;
	     {1'd0,  5'd13}: s1rd5 <= 29;
	     {1'd0,  5'd14}: s1rd5 <= 30;
	     {1'd0,  5'd15}: s1rd5 <= 31;
	     {1'd0,  5'd16}: s1rd5 <= 0;
	     {1'd0,  5'd17}: s1rd5 <= 1;
	     {1'd0,  5'd18}: s1rd5 <= 2;
	     {1'd0,  5'd19}: s1rd5 <= 3;
	     {1'd0,  5'd20}: s1rd5 <= 4;
	     {1'd0,  5'd21}: s1rd5 <= 5;
	     {1'd0,  5'd22}: s1rd5 <= 6;
	     {1'd0,  5'd23}: s1rd5 <= 7;
	     {1'd0,  5'd24}: s1rd5 <= 8;
	     {1'd0,  5'd25}: s1rd5 <= 9;
	     {1'd0,  5'd26}: s1rd5 <= 10;
	     {1'd0,  5'd27}: s1rd5 <= 11;
	     {1'd0,  5'd28}: s1rd5 <= 12;
	     {1'd0,  5'd29}: s1rd5 <= 13;
	     {1'd0,  5'd30}: s1rd5 <= 14;
	     {1'd0,  5'd31}: s1rd5 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd6 <= 8;
	     {1'd0,  5'd1}: s1rd6 <= 9;
	     {1'd0,  5'd2}: s1rd6 <= 10;
	     {1'd0,  5'd3}: s1rd6 <= 11;
	     {1'd0,  5'd4}: s1rd6 <= 12;
	     {1'd0,  5'd5}: s1rd6 <= 13;
	     {1'd0,  5'd6}: s1rd6 <= 14;
	     {1'd0,  5'd7}: s1rd6 <= 15;
	     {1'd0,  5'd8}: s1rd6 <= 0;
	     {1'd0,  5'd9}: s1rd6 <= 1;
	     {1'd0,  5'd10}: s1rd6 <= 2;
	     {1'd0,  5'd11}: s1rd6 <= 3;
	     {1'd0,  5'd12}: s1rd6 <= 4;
	     {1'd0,  5'd13}: s1rd6 <= 5;
	     {1'd0,  5'd14}: s1rd6 <= 6;
	     {1'd0,  5'd15}: s1rd6 <= 7;
	     {1'd0,  5'd16}: s1rd6 <= 24;
	     {1'd0,  5'd17}: s1rd6 <= 25;
	     {1'd0,  5'd18}: s1rd6 <= 26;
	     {1'd0,  5'd19}: s1rd6 <= 27;
	     {1'd0,  5'd20}: s1rd6 <= 28;
	     {1'd0,  5'd21}: s1rd6 <= 29;
	     {1'd0,  5'd22}: s1rd6 <= 30;
	     {1'd0,  5'd23}: s1rd6 <= 31;
	     {1'd0,  5'd24}: s1rd6 <= 16;
	     {1'd0,  5'd25}: s1rd6 <= 17;
	     {1'd0,  5'd26}: s1rd6 <= 18;
	     {1'd0,  5'd27}: s1rd6 <= 19;
	     {1'd0,  5'd28}: s1rd6 <= 20;
	     {1'd0,  5'd29}: s1rd6 <= 21;
	     {1'd0,  5'd30}: s1rd6 <= 22;
	     {1'd0,  5'd31}: s1rd6 <= 23;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm35_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd7 <= 0;
	     {1'd0,  5'd1}: s1rd7 <= 1;
	     {1'd0,  5'd2}: s1rd7 <= 2;
	     {1'd0,  5'd3}: s1rd7 <= 3;
	     {1'd0,  5'd4}: s1rd7 <= 4;
	     {1'd0,  5'd5}: s1rd7 <= 5;
	     {1'd0,  5'd6}: s1rd7 <= 6;
	     {1'd0,  5'd7}: s1rd7 <= 7;
	     {1'd0,  5'd8}: s1rd7 <= 8;
	     {1'd0,  5'd9}: s1rd7 <= 9;
	     {1'd0,  5'd10}: s1rd7 <= 10;
	     {1'd0,  5'd11}: s1rd7 <= 11;
	     {1'd0,  5'd12}: s1rd7 <= 12;
	     {1'd0,  5'd13}: s1rd7 <= 13;
	     {1'd0,  5'd14}: s1rd7 <= 14;
	     {1'd0,  5'd15}: s1rd7 <= 15;
	     {1'd0,  5'd16}: s1rd7 <= 16;
	     {1'd0,  5'd17}: s1rd7 <= 17;
	     {1'd0,  5'd18}: s1rd7 <= 18;
	     {1'd0,  5'd19}: s1rd7 <= 19;
	     {1'd0,  5'd20}: s1rd7 <= 20;
	     {1'd0,  5'd21}: s1rd7 <= 21;
	     {1'd0,  5'd22}: s1rd7 <= 22;
	     {1'd0,  5'd23}: s1rd7 <= 23;
	     {1'd0,  5'd24}: s1rd7 <= 24;
	     {1'd0,  5'd25}: s1rd7 <= 25;
	     {1'd0,  5'd26}: s1rd7 <= 26;
	     {1'd0,  5'd27}: s1rd7 <= 27;
	     {1'd0,  5'd28}: s1rd7 <= 28;
	     {1'd0,  5'd29}: s1rd7 <= 29;
	     {1'd0,  5'd30}: s1rd7 <= 30;
	     {1'd0,  5'd31}: s1rd7 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet42991 sw(tm35_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr0 <= 24;
	      {1'd0, 5'd1}: s2wr0 <= 25;
	      {1'd0, 5'd2}: s2wr0 <= 26;
	      {1'd0, 5'd3}: s2wr0 <= 27;
	      {1'd0, 5'd4}: s2wr0 <= 28;
	      {1'd0, 5'd5}: s2wr0 <= 29;
	      {1'd0, 5'd6}: s2wr0 <= 30;
	      {1'd0, 5'd7}: s2wr0 <= 31;
	      {1'd0, 5'd8}: s2wr0 <= 16;
	      {1'd0, 5'd9}: s2wr0 <= 17;
	      {1'd0, 5'd10}: s2wr0 <= 18;
	      {1'd0, 5'd11}: s2wr0 <= 19;
	      {1'd0, 5'd12}: s2wr0 <= 20;
	      {1'd0, 5'd13}: s2wr0 <= 21;
	      {1'd0, 5'd14}: s2wr0 <= 22;
	      {1'd0, 5'd15}: s2wr0 <= 23;
	      {1'd0, 5'd16}: s2wr0 <= 8;
	      {1'd0, 5'd17}: s2wr0 <= 9;
	      {1'd0, 5'd18}: s2wr0 <= 10;
	      {1'd0, 5'd19}: s2wr0 <= 11;
	      {1'd0, 5'd20}: s2wr0 <= 12;
	      {1'd0, 5'd21}: s2wr0 <= 13;
	      {1'd0, 5'd22}: s2wr0 <= 14;
	      {1'd0, 5'd23}: s2wr0 <= 15;
	      {1'd0, 5'd24}: s2wr0 <= 0;
	      {1'd0, 5'd25}: s2wr0 <= 1;
	      {1'd0, 5'd26}: s2wr0 <= 2;
	      {1'd0, 5'd27}: s2wr0 <= 3;
	      {1'd0, 5'd28}: s2wr0 <= 4;
	      {1'd0, 5'd29}: s2wr0 <= 5;
	      {1'd0, 5'd30}: s2wr0 <= 6;
	      {1'd0, 5'd31}: s2wr0 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr1 <= 16;
	      {1'd0, 5'd1}: s2wr1 <= 17;
	      {1'd0, 5'd2}: s2wr1 <= 18;
	      {1'd0, 5'd3}: s2wr1 <= 19;
	      {1'd0, 5'd4}: s2wr1 <= 20;
	      {1'd0, 5'd5}: s2wr1 <= 21;
	      {1'd0, 5'd6}: s2wr1 <= 22;
	      {1'd0, 5'd7}: s2wr1 <= 23;
	      {1'd0, 5'd8}: s2wr1 <= 24;
	      {1'd0, 5'd9}: s2wr1 <= 25;
	      {1'd0, 5'd10}: s2wr1 <= 26;
	      {1'd0, 5'd11}: s2wr1 <= 27;
	      {1'd0, 5'd12}: s2wr1 <= 28;
	      {1'd0, 5'd13}: s2wr1 <= 29;
	      {1'd0, 5'd14}: s2wr1 <= 30;
	      {1'd0, 5'd15}: s2wr1 <= 31;
	      {1'd0, 5'd16}: s2wr1 <= 0;
	      {1'd0, 5'd17}: s2wr1 <= 1;
	      {1'd0, 5'd18}: s2wr1 <= 2;
	      {1'd0, 5'd19}: s2wr1 <= 3;
	      {1'd0, 5'd20}: s2wr1 <= 4;
	      {1'd0, 5'd21}: s2wr1 <= 5;
	      {1'd0, 5'd22}: s2wr1 <= 6;
	      {1'd0, 5'd23}: s2wr1 <= 7;
	      {1'd0, 5'd24}: s2wr1 <= 8;
	      {1'd0, 5'd25}: s2wr1 <= 9;
	      {1'd0, 5'd26}: s2wr1 <= 10;
	      {1'd0, 5'd27}: s2wr1 <= 11;
	      {1'd0, 5'd28}: s2wr1 <= 12;
	      {1'd0, 5'd29}: s2wr1 <= 13;
	      {1'd0, 5'd30}: s2wr1 <= 14;
	      {1'd0, 5'd31}: s2wr1 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr2 <= 8;
	      {1'd0, 5'd1}: s2wr2 <= 9;
	      {1'd0, 5'd2}: s2wr2 <= 10;
	      {1'd0, 5'd3}: s2wr2 <= 11;
	      {1'd0, 5'd4}: s2wr2 <= 12;
	      {1'd0, 5'd5}: s2wr2 <= 13;
	      {1'd0, 5'd6}: s2wr2 <= 14;
	      {1'd0, 5'd7}: s2wr2 <= 15;
	      {1'd0, 5'd8}: s2wr2 <= 0;
	      {1'd0, 5'd9}: s2wr2 <= 1;
	      {1'd0, 5'd10}: s2wr2 <= 2;
	      {1'd0, 5'd11}: s2wr2 <= 3;
	      {1'd0, 5'd12}: s2wr2 <= 4;
	      {1'd0, 5'd13}: s2wr2 <= 5;
	      {1'd0, 5'd14}: s2wr2 <= 6;
	      {1'd0, 5'd15}: s2wr2 <= 7;
	      {1'd0, 5'd16}: s2wr2 <= 24;
	      {1'd0, 5'd17}: s2wr2 <= 25;
	      {1'd0, 5'd18}: s2wr2 <= 26;
	      {1'd0, 5'd19}: s2wr2 <= 27;
	      {1'd0, 5'd20}: s2wr2 <= 28;
	      {1'd0, 5'd21}: s2wr2 <= 29;
	      {1'd0, 5'd22}: s2wr2 <= 30;
	      {1'd0, 5'd23}: s2wr2 <= 31;
	      {1'd0, 5'd24}: s2wr2 <= 16;
	      {1'd0, 5'd25}: s2wr2 <= 17;
	      {1'd0, 5'd26}: s2wr2 <= 18;
	      {1'd0, 5'd27}: s2wr2 <= 19;
	      {1'd0, 5'd28}: s2wr2 <= 20;
	      {1'd0, 5'd29}: s2wr2 <= 21;
	      {1'd0, 5'd30}: s2wr2 <= 22;
	      {1'd0, 5'd31}: s2wr2 <= 23;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr3 <= 0;
	      {1'd0, 5'd1}: s2wr3 <= 1;
	      {1'd0, 5'd2}: s2wr3 <= 2;
	      {1'd0, 5'd3}: s2wr3 <= 3;
	      {1'd0, 5'd4}: s2wr3 <= 4;
	      {1'd0, 5'd5}: s2wr3 <= 5;
	      {1'd0, 5'd6}: s2wr3 <= 6;
	      {1'd0, 5'd7}: s2wr3 <= 7;
	      {1'd0, 5'd8}: s2wr3 <= 8;
	      {1'd0, 5'd9}: s2wr3 <= 9;
	      {1'd0, 5'd10}: s2wr3 <= 10;
	      {1'd0, 5'd11}: s2wr3 <= 11;
	      {1'd0, 5'd12}: s2wr3 <= 12;
	      {1'd0, 5'd13}: s2wr3 <= 13;
	      {1'd0, 5'd14}: s2wr3 <= 14;
	      {1'd0, 5'd15}: s2wr3 <= 15;
	      {1'd0, 5'd16}: s2wr3 <= 16;
	      {1'd0, 5'd17}: s2wr3 <= 17;
	      {1'd0, 5'd18}: s2wr3 <= 18;
	      {1'd0, 5'd19}: s2wr3 <= 19;
	      {1'd0, 5'd20}: s2wr3 <= 20;
	      {1'd0, 5'd21}: s2wr3 <= 21;
	      {1'd0, 5'd22}: s2wr3 <= 22;
	      {1'd0, 5'd23}: s2wr3 <= 23;
	      {1'd0, 5'd24}: s2wr3 <= 24;
	      {1'd0, 5'd25}: s2wr3 <= 25;
	      {1'd0, 5'd26}: s2wr3 <= 26;
	      {1'd0, 5'd27}: s2wr3 <= 27;
	      {1'd0, 5'd28}: s2wr3 <= 28;
	      {1'd0, 5'd29}: s2wr3 <= 29;
	      {1'd0, 5'd30}: s2wr3 <= 30;
	      {1'd0, 5'd31}: s2wr3 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr4 <= 24;
	      {1'd0, 5'd1}: s2wr4 <= 25;
	      {1'd0, 5'd2}: s2wr4 <= 26;
	      {1'd0, 5'd3}: s2wr4 <= 27;
	      {1'd0, 5'd4}: s2wr4 <= 28;
	      {1'd0, 5'd5}: s2wr4 <= 29;
	      {1'd0, 5'd6}: s2wr4 <= 30;
	      {1'd0, 5'd7}: s2wr4 <= 31;
	      {1'd0, 5'd8}: s2wr4 <= 16;
	      {1'd0, 5'd9}: s2wr4 <= 17;
	      {1'd0, 5'd10}: s2wr4 <= 18;
	      {1'd0, 5'd11}: s2wr4 <= 19;
	      {1'd0, 5'd12}: s2wr4 <= 20;
	      {1'd0, 5'd13}: s2wr4 <= 21;
	      {1'd0, 5'd14}: s2wr4 <= 22;
	      {1'd0, 5'd15}: s2wr4 <= 23;
	      {1'd0, 5'd16}: s2wr4 <= 8;
	      {1'd0, 5'd17}: s2wr4 <= 9;
	      {1'd0, 5'd18}: s2wr4 <= 10;
	      {1'd0, 5'd19}: s2wr4 <= 11;
	      {1'd0, 5'd20}: s2wr4 <= 12;
	      {1'd0, 5'd21}: s2wr4 <= 13;
	      {1'd0, 5'd22}: s2wr4 <= 14;
	      {1'd0, 5'd23}: s2wr4 <= 15;
	      {1'd0, 5'd24}: s2wr4 <= 0;
	      {1'd0, 5'd25}: s2wr4 <= 1;
	      {1'd0, 5'd26}: s2wr4 <= 2;
	      {1'd0, 5'd27}: s2wr4 <= 3;
	      {1'd0, 5'd28}: s2wr4 <= 4;
	      {1'd0, 5'd29}: s2wr4 <= 5;
	      {1'd0, 5'd30}: s2wr4 <= 6;
	      {1'd0, 5'd31}: s2wr4 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr5 <= 16;
	      {1'd0, 5'd1}: s2wr5 <= 17;
	      {1'd0, 5'd2}: s2wr5 <= 18;
	      {1'd0, 5'd3}: s2wr5 <= 19;
	      {1'd0, 5'd4}: s2wr5 <= 20;
	      {1'd0, 5'd5}: s2wr5 <= 21;
	      {1'd0, 5'd6}: s2wr5 <= 22;
	      {1'd0, 5'd7}: s2wr5 <= 23;
	      {1'd0, 5'd8}: s2wr5 <= 24;
	      {1'd0, 5'd9}: s2wr5 <= 25;
	      {1'd0, 5'd10}: s2wr5 <= 26;
	      {1'd0, 5'd11}: s2wr5 <= 27;
	      {1'd0, 5'd12}: s2wr5 <= 28;
	      {1'd0, 5'd13}: s2wr5 <= 29;
	      {1'd0, 5'd14}: s2wr5 <= 30;
	      {1'd0, 5'd15}: s2wr5 <= 31;
	      {1'd0, 5'd16}: s2wr5 <= 0;
	      {1'd0, 5'd17}: s2wr5 <= 1;
	      {1'd0, 5'd18}: s2wr5 <= 2;
	      {1'd0, 5'd19}: s2wr5 <= 3;
	      {1'd0, 5'd20}: s2wr5 <= 4;
	      {1'd0, 5'd21}: s2wr5 <= 5;
	      {1'd0, 5'd22}: s2wr5 <= 6;
	      {1'd0, 5'd23}: s2wr5 <= 7;
	      {1'd0, 5'd24}: s2wr5 <= 8;
	      {1'd0, 5'd25}: s2wr5 <= 9;
	      {1'd0, 5'd26}: s2wr5 <= 10;
	      {1'd0, 5'd27}: s2wr5 <= 11;
	      {1'd0, 5'd28}: s2wr5 <= 12;
	      {1'd0, 5'd29}: s2wr5 <= 13;
	      {1'd0, 5'd30}: s2wr5 <= 14;
	      {1'd0, 5'd31}: s2wr5 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr6 <= 8;
	      {1'd0, 5'd1}: s2wr6 <= 9;
	      {1'd0, 5'd2}: s2wr6 <= 10;
	      {1'd0, 5'd3}: s2wr6 <= 11;
	      {1'd0, 5'd4}: s2wr6 <= 12;
	      {1'd0, 5'd5}: s2wr6 <= 13;
	      {1'd0, 5'd6}: s2wr6 <= 14;
	      {1'd0, 5'd7}: s2wr6 <= 15;
	      {1'd0, 5'd8}: s2wr6 <= 0;
	      {1'd0, 5'd9}: s2wr6 <= 1;
	      {1'd0, 5'd10}: s2wr6 <= 2;
	      {1'd0, 5'd11}: s2wr6 <= 3;
	      {1'd0, 5'd12}: s2wr6 <= 4;
	      {1'd0, 5'd13}: s2wr6 <= 5;
	      {1'd0, 5'd14}: s2wr6 <= 6;
	      {1'd0, 5'd15}: s2wr6 <= 7;
	      {1'd0, 5'd16}: s2wr6 <= 24;
	      {1'd0, 5'd17}: s2wr6 <= 25;
	      {1'd0, 5'd18}: s2wr6 <= 26;
	      {1'd0, 5'd19}: s2wr6 <= 27;
	      {1'd0, 5'd20}: s2wr6 <= 28;
	      {1'd0, 5'd21}: s2wr6 <= 29;
	      {1'd0, 5'd22}: s2wr6 <= 30;
	      {1'd0, 5'd23}: s2wr6 <= 31;
	      {1'd0, 5'd24}: s2wr6 <= 16;
	      {1'd0, 5'd25}: s2wr6 <= 17;
	      {1'd0, 5'd26}: s2wr6 <= 18;
	      {1'd0, 5'd27}: s2wr6 <= 19;
	      {1'd0, 5'd28}: s2wr6 <= 20;
	      {1'd0, 5'd29}: s2wr6 <= 21;
	      {1'd0, 5'd30}: s2wr6 <= 22;
	      {1'd0, 5'd31}: s2wr6 <= 23;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm35_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr7 <= 0;
	      {1'd0, 5'd1}: s2wr7 <= 1;
	      {1'd0, 5'd2}: s2wr7 <= 2;
	      {1'd0, 5'd3}: s2wr7 <= 3;
	      {1'd0, 5'd4}: s2wr7 <= 4;
	      {1'd0, 5'd5}: s2wr7 <= 5;
	      {1'd0, 5'd6}: s2wr7 <= 6;
	      {1'd0, 5'd7}: s2wr7 <= 7;
	      {1'd0, 5'd8}: s2wr7 <= 8;
	      {1'd0, 5'd9}: s2wr7 <= 9;
	      {1'd0, 5'd10}: s2wr7 <= 10;
	      {1'd0, 5'd11}: s2wr7 <= 11;
	      {1'd0, 5'd12}: s2wr7 <= 12;
	      {1'd0, 5'd13}: s2wr7 <= 13;
	      {1'd0, 5'd14}: s2wr7 <= 14;
	      {1'd0, 5'd15}: s2wr7 <= 15;
	      {1'd0, 5'd16}: s2wr7 <= 16;
	      {1'd0, 5'd17}: s2wr7 <= 17;
	      {1'd0, 5'd18}: s2wr7 <= 18;
	      {1'd0, 5'd19}: s2wr7 <= 19;
	      {1'd0, 5'd20}: s2wr7 <= 20;
	      {1'd0, 5'd21}: s2wr7 <= 21;
	      {1'd0, 5'd22}: s2wr7 <= 22;
	      {1'd0, 5'd23}: s2wr7 <= 23;
	      {1'd0, 5'd24}: s2wr7 <= 24;
	      {1'd0, 5'd25}: s2wr7 <= 25;
	      {1'd0, 5'd26}: s2wr7 <= 26;
	      {1'd0, 5'd27}: s2wr7 <= 27;
	      {1'd0, 5'd28}: s2wr7 <= 28;
	      {1'd0, 5'd29}: s2wr7 <= 29;
	      {1'd0, 5'd30}: s2wr7 <= 30;
	      {1'd0, 5'd31}: s2wr7 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 32
module DirSum_44182(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [4:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 31)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock42996 codeBlockIsnt51198(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D27_43704(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3e15;
      3: out3 <= 16'h3c42;
      4: out3 <= 16'h39db;
      5: out3 <= 16'h36e5;
      6: out3 <= 16'h3368;
      7: out3 <= 16'h2f6c;
      8: out3 <= 16'h2afb;
      9: out3 <= 16'h2620;
      10: out3 <= 16'h20e7;
      11: out3 <= 16'h1b5d;
      12: out3 <= 16'h1590;
      13: out3 <= 16'hf8d;
      14: out3 <= 16'h964;
      15: out3 <= 16'h324;
      16: out3 <= 16'hfcdc;
      17: out3 <= 16'hf69c;
      18: out3 <= 16'hf073;
      19: out3 <= 16'hea70;
      20: out3 <= 16'he4a3;
      21: out3 <= 16'hdf19;
      22: out3 <= 16'hd9e0;
      23: out3 <= 16'hd505;
      24: out3 <= 16'hd094;
      25: out3 <= 16'hcc98;
      26: out3 <= 16'hc91b;
      27: out3 <= 16'hc625;
      28: out3 <= 16'hc3be;
      29: out3 <= 16'hc1eb;
      30: out3 <= 16'hc0b1;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D31_43772(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      16: out3 <= 16'hc000;
      17: out3 <= 16'hc04f;
      18: out3 <= 16'hc13b;
      19: out3 <= 16'hc2c1;
      20: out3 <= 16'hc4df;
      21: out3 <= 16'hc78f;
      22: out3 <= 16'hcac9;
      23: out3 <= 16'hce87;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hd766;
      26: out3 <= 16'hdc72;
      27: out3 <= 16'he1d5;
      28: out3 <= 16'he782;
      29: out3 <= 16'hed6c;
      30: out3 <= 16'hf384;
      31: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D24_43806(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3d3f;
      3: out3 <= 16'h39db;
      4: out3 <= 16'h3537;
      5: out3 <= 16'h2f6c;
      6: out3 <= 16'h289a;
      7: out3 <= 16'h20e7;
      8: out3 <= 16'h187e;
      9: out3 <= 16'hf8d;
      10: out3 <= 16'h646;
      11: out3 <= 16'hfcdc;
      12: out3 <= 16'hf384;
      13: out3 <= 16'hea70;
      14: out3 <= 16'he1d5;
      15: out3 <= 16'hd9e0;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hcc98;
      18: out3 <= 16'hc78f;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc13b;
      21: out3 <= 16'hc014;
      22: out3 <= 16'hc04f;
      23: out3 <= 16'hc1eb;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc91b;
      26: out3 <= 16'hce87;
      27: out3 <= 16'hd505;
      28: out3 <= 16'hdc72;
      29: out3 <= 16'he4a3;
      30: out3 <= 16'hed6c;
      31: out3 <= 16'hf69c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D32_43840(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hed6c;
      3: out3 <= 16'he4a3;
      4: out3 <= 16'hdc72;
      5: out3 <= 16'hd505;
      6: out3 <= 16'hce87;
      7: out3 <= 16'hc91b;
      8: out3 <= 16'hc4df;
      9: out3 <= 16'hc1eb;
      10: out3 <= 16'hc04f;
      11: out3 <= 16'hc014;
      12: out3 <= 16'hc13b;
      13: out3 <= 16'hc3be;
      14: out3 <= 16'hc78f;
      15: out3 <= 16'hcc98;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd9e0;
      18: out3 <= 16'he1d5;
      19: out3 <= 16'hea70;
      20: out3 <= 16'hf384;
      21: out3 <= 16'hfcdc;
      22: out3 <= 16'h646;
      23: out3 <= 16'hf8d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h20e7;
      26: out3 <= 16'h289a;
      27: out3 <= 16'h2f6c;
      28: out3 <= 16'h3537;
      29: out3 <= 16'h39db;
      30: out3 <= 16'h3d3f;
      31: out3 <= 16'h3f4f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D23_43874(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      16: out3 <= 16'h0;
      17: out3 <= 16'hf9ba;
      18: out3 <= 16'hf384;
      19: out3 <= 16'hed6c;
      20: out3 <= 16'he782;
      21: out3 <= 16'he1d5;
      22: out3 <= 16'hdc72;
      23: out3 <= 16'hd766;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hce87;
      26: out3 <= 16'hcac9;
      27: out3 <= 16'hc78f;
      28: out3 <= 16'hc4df;
      29: out3 <= 16'hc2c1;
      30: out3 <= 16'hc13b;
      31: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D22_43942(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fec;
      2: out3 <= 16'h3fb1;
      3: out3 <= 16'h3f4f;
      4: out3 <= 16'h3ec5;
      5: out3 <= 16'h3e15;
      6: out3 <= 16'h3d3f;
      7: out3 <= 16'h3c42;
      8: out3 <= 16'h3b21;
      9: out3 <= 16'h39db;
      10: out3 <= 16'h3871;
      11: out3 <= 16'h36e5;
      12: out3 <= 16'h3537;
      13: out3 <= 16'h3368;
      14: out3 <= 16'h3179;
      15: out3 <= 16'h2f6c;
      16: out3 <= 16'h2d41;
      17: out3 <= 16'h2afb;
      18: out3 <= 16'h289a;
      19: out3 <= 16'h2620;
      20: out3 <= 16'h238e;
      21: out3 <= 16'h20e7;
      22: out3 <= 16'h1e2b;
      23: out3 <= 16'h1b5d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h1590;
      26: out3 <= 16'h1294;
      27: out3 <= 16'hf8d;
      28: out3 <= 16'hc7c;
      29: out3 <= 16'h964;
      30: out3 <= 16'h646;
      31: out3 <= 16'h324;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D34_43976(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf82a;
      3: out3 <= 16'hf50f;
      4: out3 <= 16'hf1fa;
      5: out3 <= 16'heeee;
      6: out3 <= 16'hebed;
      7: out3 <= 16'he8f7;
      8: out3 <= 16'he611;
      9: out3 <= 16'he33a;
      10: out3 <= 16'he074;
      11: out3 <= 16'hddc3;
      12: out3 <= 16'hdb26;
      13: out3 <= 16'hd8a0;
      14: out3 <= 16'hd632;
      15: out3 <= 16'hd3df;
      16: out3 <= 16'hd1a6;
      17: out3 <= 16'hcf8a;
      18: out3 <= 16'hcd8c;
      19: out3 <= 16'hcbad;
      20: out3 <= 16'hc9ee;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hc6d5;
      23: out3 <= 16'hc57e;
      24: out3 <= 16'hc44a;
      25: out3 <= 16'hc33b;
      26: out3 <= 16'hc251;
      27: out3 <= 16'hc18e;
      28: out3 <= 16'hc0f1;
      29: out3 <= 16'hc07b;
      30: out3 <= 16'hc02c;
      31: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D35_44044(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hf073;
      3: out3 <= 16'hea70;
      4: out3 <= 16'he4a3;
      5: out3 <= 16'hdf19;
      6: out3 <= 16'hd9e0;
      7: out3 <= 16'hd505;
      8: out3 <= 16'hd094;
      9: out3 <= 16'hcc98;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hc625;
      12: out3 <= 16'hc3be;
      13: out3 <= 16'hc1eb;
      14: out3 <= 16'hc0b1;
      15: out3 <= 16'hc014;
      16: out3 <= 16'hc014;
      17: out3 <= 16'hc0b1;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc625;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hcc98;
      23: out3 <= 16'hd094;
      24: out3 <= 16'hd505;
      25: out3 <= 16'hd9e0;
      26: out3 <= 16'hdf19;
      27: out3 <= 16'he4a3;
      28: out3 <= 16'hea70;
      29: out3 <= 16'hf073;
      30: out3 <= 16'hf69c;
      31: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D36_44078(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfb4b;
      1: out3 <= 16'hf1fa;
      2: out3 <= 16'he8f7;
      3: out3 <= 16'he074;
      4: out3 <= 16'hd8a0;
      5: out3 <= 16'hd1a6;
      6: out3 <= 16'hcbad;
      7: out3 <= 16'hc6d5;
      8: out3 <= 16'hc33b;
      9: out3 <= 16'hc0f1;
      10: out3 <= 16'hc005;
      11: out3 <= 16'hc07b;
      12: out3 <= 16'hc251;
      13: out3 <= 16'hc57e;
      14: out3 <= 16'hc9ee;
      15: out3 <= 16'hcf8a;
      16: out3 <= 16'hd632;
      17: out3 <= 16'hddc3;
      18: out3 <= 16'he611;
      19: out3 <= 16'heeee;
      20: out3 <= 16'hf82a;
      21: out3 <= 16'h192;
      22: out3 <= 16'haf1;
      23: out3 <= 16'h1413;
      24: out3 <= 16'h1cc6;
      25: out3 <= 16'h24da;
      26: out3 <= 16'h2c21;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h37b0;
      29: out3 <= 16'h3bb6;
      30: out3 <= 16'h3e72;
      31: out3 <= 16'h3fd4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D28_44112(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fd4;
      1: out3 <= 16'h3e72;
      2: out3 <= 16'h3bb6;
      3: out3 <= 16'h37b0;
      4: out3 <= 16'h3274;
      5: out3 <= 16'h2c21;
      6: out3 <= 16'h24da;
      7: out3 <= 16'h1cc6;
      8: out3 <= 16'h1413;
      9: out3 <= 16'haf1;
      10: out3 <= 16'h192;
      11: out3 <= 16'hf82a;
      12: out3 <= 16'heeee;
      13: out3 <= 16'he611;
      14: out3 <= 16'hddc3;
      15: out3 <= 16'hd632;
      16: out3 <= 16'hcf8a;
      17: out3 <= 16'hc9ee;
      18: out3 <= 16'hc57e;
      19: out3 <= 16'hc251;
      20: out3 <= 16'hc07b;
      21: out3 <= 16'hc005;
      22: out3 <= 16'hc0f1;
      23: out3 <= 16'hc33b;
      24: out3 <= 16'hc6d5;
      25: out3 <= 16'hcbad;
      26: out3 <= 16'hd1a6;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'he074;
      29: out3 <= 16'he8f7;
      30: out3 <= 16'hf1fa;
      31: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D30_44146(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfcdc;
      2: out3 <= 16'hf9ba;
      3: out3 <= 16'hf69c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hf073;
      6: out3 <= 16'hed6c;
      7: out3 <= 16'hea70;
      8: out3 <= 16'he782;
      9: out3 <= 16'he4a3;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hdf19;
      12: out3 <= 16'hdc72;
      13: out3 <= 16'hd9e0;
      14: out3 <= 16'hd766;
      15: out3 <= 16'hd505;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd094;
      18: out3 <= 16'hce87;
      19: out3 <= 16'hcc98;
      20: out3 <= 16'hcac9;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hc78f;
      23: out3 <= 16'hc625;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc3be;
      26: out3 <= 16'hc2c1;
      27: out3 <= 16'hc1eb;
      28: out3 <= 16'hc13b;
      29: out3 <= 16'hc0b1;
      30: out3 <= 16'hc04f;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D26_44180(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f85;
      3: out3 <= 16'h3f0f;
      4: out3 <= 16'h3e72;
      5: out3 <= 16'h3daf;
      6: out3 <= 16'h3cc5;
      7: out3 <= 16'h3bb6;
      8: out3 <= 16'h3a82;
      9: out3 <= 16'h392b;
      10: out3 <= 16'h37b0;
      11: out3 <= 16'h3612;
      12: out3 <= 16'h3453;
      13: out3 <= 16'h3274;
      14: out3 <= 16'h3076;
      15: out3 <= 16'h2e5a;
      16: out3 <= 16'h2c21;
      17: out3 <= 16'h29ce;
      18: out3 <= 16'h2760;
      19: out3 <= 16'h24da;
      20: out3 <= 16'h223d;
      21: out3 <= 16'h1f8c;
      22: out3 <= 16'h1cc6;
      23: out3 <= 16'h19ef;
      24: out3 <= 16'h1709;
      25: out3 <= 16'h1413;
      26: out3 <= 16'h1112;
      27: out3 <= 16'he06;
      28: out3 <= 16'haf1;
      29: out3 <= 16'h7d6;
      30: out3 <= 16'h4b5;
      31: out3 <= 16'h192;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock42996(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i2_in;
   reg [4:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_51201(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a450;
   wire signed [15:0] a403;
   wire signed [15:0] a453;
   wire signed [15:0] a407;
   wire signed [15:0] a454;
   wire signed [15:0] a455;
   wire signed [15:0] a458;
   wire signed [15:0] a459;
   wire signed [15:0] a462;
   wire signed [15:0] a463;
   wire signed [15:0] a466;
   wire signed [15:0] a427;
   wire signed [15:0] a469;
   wire signed [15:0] a431;
   wire signed [15:0] a470;
   wire signed [15:0] a471;
   wire signed [15:0] a474;
   wire signed [15:0] a475;
   wire signed [15:0] a478;
   wire signed [15:0] a479;
   reg signed [15:0] tm723;
   reg signed [15:0] tm727;
   reg signed [15:0] tm739;
   reg signed [15:0] tm743;
   reg signed [15:0] tm755;
   reg signed [15:0] tm759;
   reg signed [15:0] tm771;
   reg signed [15:0] tm775;
   reg signed [15:0] tm787;
   reg signed [15:0] tm791;
   reg signed [15:0] tm803;
   reg signed [15:0] tm807;
   reg signed [15:0] tm819;
   reg signed [15:0] tm826;
   reg signed [15:0] tm833;
   reg signed [15:0] tm840;
   reg signed [15:0] tm724;
   reg signed [15:0] tm728;
   reg signed [15:0] tm740;
   reg signed [15:0] tm744;
   reg signed [15:0] tm756;
   reg signed [15:0] tm760;
   reg signed [15:0] tm772;
   reg signed [15:0] tm776;
   reg signed [15:0] tm788;
   reg signed [15:0] tm792;
   reg signed [15:0] tm804;
   reg signed [15:0] tm808;
   reg signed [15:0] tm820;
   reg signed [15:0] tm827;
   reg signed [15:0] tm834;
   reg signed [15:0] tm841;
   wire signed [15:0] tm38;
   wire signed [15:0] a408;
   wire signed [15:0] tm39;
   wire signed [15:0] a410;
   wire signed [15:0] tm40;
   wire signed [15:0] a414;
   wire signed [15:0] tm41;
   wire signed [15:0] a416;
   wire signed [15:0] tm42;
   wire signed [15:0] a420;
   wire signed [15:0] tm43;
   wire signed [15:0] a422;
   wire signed [15:0] tm46;
   wire signed [15:0] a432;
   wire signed [15:0] tm47;
   wire signed [15:0] a434;
   wire signed [15:0] tm48;
   wire signed [15:0] a438;
   wire signed [15:0] tm49;
   wire signed [15:0] a440;
   wire signed [15:0] tm50;
   wire signed [15:0] a444;
   wire signed [15:0] tm51;
   wire signed [15:0] a446;
   reg signed [15:0] tm725;
   reg signed [15:0] tm729;
   reg signed [15:0] tm741;
   reg signed [15:0] tm745;
   reg signed [15:0] tm757;
   reg signed [15:0] tm761;
   reg signed [15:0] tm773;
   reg signed [15:0] tm777;
   reg signed [15:0] tm789;
   reg signed [15:0] tm793;
   reg signed [15:0] tm805;
   reg signed [15:0] tm809;
   reg signed [15:0] tm821;
   reg signed [15:0] tm828;
   reg signed [15:0] tm835;
   reg signed [15:0] tm842;
   reg signed [15:0] tm138;
   reg signed [15:0] tm139;
   reg signed [15:0] tm142;
   reg signed [15:0] tm143;
   reg signed [15:0] tm146;
   reg signed [15:0] tm147;
   reg signed [15:0] tm154;
   reg signed [15:0] tm155;
   reg signed [15:0] tm158;
   reg signed [15:0] tm159;
   reg signed [15:0] tm162;
   reg signed [15:0] tm163;
   reg signed [15:0] tm726;
   reg signed [15:0] tm730;
   reg signed [15:0] tm742;
   reg signed [15:0] tm746;
   reg signed [15:0] tm758;
   reg signed [15:0] tm762;
   reg signed [15:0] tm774;
   reg signed [15:0] tm778;
   reg signed [15:0] tm790;
   reg signed [15:0] tm794;
   reg signed [15:0] tm806;
   reg signed [15:0] tm810;
   reg signed [15:0] tm822;
   reg signed [15:0] tm829;
   reg signed [15:0] tm836;
   reg signed [15:0] tm843;
   reg signed [15:0] tm823;
   reg signed [15:0] tm830;
   reg signed [15:0] tm837;
   reg signed [15:0] tm844;
   wire signed [15:0] a409;
   wire signed [15:0] a411;
   wire signed [15:0] a412;
   wire signed [15:0] a413;
   wire signed [15:0] a415;
   wire signed [15:0] a417;
   wire signed [15:0] a418;
   wire signed [15:0] a419;
   wire signed [15:0] a421;
   wire signed [15:0] a423;
   wire signed [15:0] a424;
   wire signed [15:0] a425;
   wire signed [15:0] a433;
   wire signed [15:0] a435;
   wire signed [15:0] a436;
   wire signed [15:0] a437;
   wire signed [15:0] a439;
   wire signed [15:0] a441;
   wire signed [15:0] a442;
   wire signed [15:0] a443;
   wire signed [15:0] a445;
   wire signed [15:0] a447;
   wire signed [15:0] a448;
   wire signed [15:0] a449;
   reg signed [15:0] tm824;
   reg signed [15:0] tm831;
   reg signed [15:0] tm838;
   reg signed [15:0] tm845;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm825;
   reg signed [15:0] tm832;
   reg signed [15:0] tm839;
   reg signed [15:0] tm846;


   assign a450 = X0;
   assign a403 = a450;
   assign a453 = X1;
   assign a407 = a453;
   assign a454 = X2;
   assign a455 = X3;
   assign a458 = X4;
   assign a459 = X5;
   assign a462 = X6;
   assign a463 = X7;
   assign a466 = X8;
   assign a427 = a466;
   assign a469 = X9;
   assign a431 = a469;
   assign a470 = X10;
   assign a471 = X11;
   assign a474 = X12;
   assign a475 = X13;
   assign a478 = X14;
   assign a479 = X15;
   assign a408 = tm38;
   assign a410 = tm39;
   assign a414 = tm40;
   assign a416 = tm41;
   assign a420 = tm42;
   assign a422 = tm43;
   assign a432 = tm46;
   assign a434 = tm47;
   assign a438 = tm48;
   assign a440 = tm49;
   assign a444 = tm50;
   assign a446 = tm51;
   assign Y0 = tm825;
   assign Y1 = tm832;
   assign Y8 = tm839;
   assign Y9 = tm846;

   D27_43704 instD27inst0_43704(.addr(i2[4:0]), .out(tm48), .clk(clk));

   D31_43772 instD31inst0_43772(.addr(i2[4:0]), .out(tm41), .clk(clk));

   D24_43806 instD24inst0_43806(.addr(i2[4:0]), .out(tm42), .clk(clk));

   D32_43840 instD32inst0_43840(.addr(i2[4:0]), .out(tm43), .clk(clk));

   D23_43874 instD23inst0_43874(.addr(i2[4:0]), .out(tm40), .clk(clk));

   D22_43942 instD22inst0_43942(.addr(i2[4:0]), .out(tm38), .clk(clk));

   D34_43976 instD34inst0_43976(.addr(i2[4:0]), .out(tm47), .clk(clk));

   D35_44044 instD35inst0_44044(.addr(i2[4:0]), .out(tm49), .clk(clk));

   D36_44078 instD36inst0_44078(.addr(i2[4:0]), .out(tm51), .clk(clk));

   D28_44112 instD28inst0_44112(.addr(i2[4:0]), .out(tm50), .clk(clk));

   D30_44146 instD30inst0_44146(.addr(i2[4:0]), .out(tm39), .clk(clk));

   D26_44180 instD26inst0_44180(.addr(i2[4:0]), .out(tm46), .clk(clk));

    multfix #(16, 2) m43095(.a(tm138), .b(tm726), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43117(.a(tm139), .b(tm730), .clk(clk), .q_sc(a411), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43135(.a(tm139), .b(tm726), .clk(clk), .q_sc(a412), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43146(.a(tm138), .b(tm730), .clk(clk), .q_sc(a413), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43175(.a(tm142), .b(tm742), .clk(clk), .q_sc(a415), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43197(.a(tm143), .b(tm746), .clk(clk), .q_sc(a417), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43215(.a(tm143), .b(tm742), .clk(clk), .q_sc(a418), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43226(.a(tm142), .b(tm746), .clk(clk), .q_sc(a419), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43255(.a(tm146), .b(tm758), .clk(clk), .q_sc(a421), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43277(.a(tm147), .b(tm762), .clk(clk), .q_sc(a423), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43295(.a(tm147), .b(tm758), .clk(clk), .q_sc(a424), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43306(.a(tm146), .b(tm762), .clk(clk), .q_sc(a425), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43415(.a(tm154), .b(tm774), .clk(clk), .q_sc(a433), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43437(.a(tm155), .b(tm778), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43455(.a(tm155), .b(tm774), .clk(clk), .q_sc(a436), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43466(.a(tm154), .b(tm778), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43495(.a(tm158), .b(tm790), .clk(clk), .q_sc(a439), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43517(.a(tm159), .b(tm794), .clk(clk), .q_sc(a441), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43535(.a(tm159), .b(tm790), .clk(clk), .q_sc(a442), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43546(.a(tm158), .b(tm794), .clk(clk), .q_sc(a443), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43575(.a(tm162), .b(tm806), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43597(.a(tm163), .b(tm810), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43615(.a(tm163), .b(tm806), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(16, 2) m43626(.a(tm162), .b(tm810), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub43124(.a(a409), .b(a411), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add43153(.a(a412), .b(a413), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub43204(.a(a415), .b(a417), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add43233(.a(a418), .b(a419), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub43284(.a(a421), .b(a423), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add43313(.a(a424), .b(a425), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub43444(.a(a433), .b(a435), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add43473(.a(a436), .b(a437), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub43524(.a(a439), .b(a441), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add43553(.a(a442), .b(a443), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub43604(.a(a445), .b(a447), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add43633(.a(a448), .b(a449), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm138 <= 0;
         tm726 <= 0;
         tm139 <= 0;
         tm730 <= 0;
         tm139 <= 0;
         tm726 <= 0;
         tm138 <= 0;
         tm730 <= 0;
         tm142 <= 0;
         tm742 <= 0;
         tm143 <= 0;
         tm746 <= 0;
         tm143 <= 0;
         tm742 <= 0;
         tm142 <= 0;
         tm746 <= 0;
         tm146 <= 0;
         tm758 <= 0;
         tm147 <= 0;
         tm762 <= 0;
         tm147 <= 0;
         tm758 <= 0;
         tm146 <= 0;
         tm762 <= 0;
         tm154 <= 0;
         tm774 <= 0;
         tm155 <= 0;
         tm778 <= 0;
         tm155 <= 0;
         tm774 <= 0;
         tm154 <= 0;
         tm778 <= 0;
         tm158 <= 0;
         tm790 <= 0;
         tm159 <= 0;
         tm794 <= 0;
         tm159 <= 0;
         tm790 <= 0;
         tm158 <= 0;
         tm794 <= 0;
         tm162 <= 0;
         tm806 <= 0;
         tm163 <= 0;
         tm810 <= 0;
         tm163 <= 0;
         tm806 <= 0;
         tm162 <= 0;
         tm810 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm723 <= a454;
         tm727 <= a455;
         tm739 <= a458;
         tm743 <= a459;
         tm755 <= a462;
         tm759 <= a463;
         tm771 <= a470;
         tm775 <= a471;
         tm787 <= a474;
         tm791 <= a475;
         tm803 <= a478;
         tm807 <= a479;
         tm819 <= a403;
         tm826 <= a407;
         tm833 <= a427;
         tm840 <= a431;
         tm724 <= tm723;
         tm728 <= tm727;
         tm740 <= tm739;
         tm744 <= tm743;
         tm756 <= tm755;
         tm760 <= tm759;
         tm772 <= tm771;
         tm776 <= tm775;
         tm788 <= tm787;
         tm792 <= tm791;
         tm804 <= tm803;
         tm808 <= tm807;
         tm820 <= tm819;
         tm827 <= tm826;
         tm834 <= tm833;
         tm841 <= tm840;
         tm725 <= tm724;
         tm729 <= tm728;
         tm741 <= tm740;
         tm745 <= tm744;
         tm757 <= tm756;
         tm761 <= tm760;
         tm773 <= tm772;
         tm777 <= tm776;
         tm789 <= tm788;
         tm793 <= tm792;
         tm805 <= tm804;
         tm809 <= tm808;
         tm821 <= tm820;
         tm828 <= tm827;
         tm835 <= tm834;
         tm842 <= tm841;
         tm138 <= a408;
         tm139 <= a410;
         tm142 <= a414;
         tm143 <= a416;
         tm146 <= a420;
         tm147 <= a422;
         tm154 <= a432;
         tm155 <= a434;
         tm158 <= a438;
         tm159 <= a440;
         tm162 <= a444;
         tm163 <= a446;
         tm726 <= tm725;
         tm730 <= tm729;
         tm742 <= tm741;
         tm746 <= tm745;
         tm758 <= tm757;
         tm762 <= tm761;
         tm774 <= tm773;
         tm778 <= tm777;
         tm790 <= tm789;
         tm794 <= tm793;
         tm806 <= tm805;
         tm810 <= tm809;
         tm822 <= tm821;
         tm829 <= tm828;
         tm836 <= tm835;
         tm843 <= tm842;
         tm823 <= tm822;
         tm830 <= tm829;
         tm837 <= tm836;
         tm844 <= tm843;
         tm824 <= tm823;
         tm831 <= tm830;
         tm838 <= tm837;
         tm845 <= tm844;
         tm825 <= tm824;
         tm832 <= tm831;
         tm839 <= tm838;
         tm846 <= tm845;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock44185(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_51204(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a273;
   wire signed [15:0] a274;
   wire signed [15:0] a275;
   wire signed [15:0] a276;
   wire signed [15:0] a281;
   wire signed [15:0] a282;
   wire signed [15:0] a283;
   wire signed [15:0] a284;
   wire signed [15:0] a289;
   wire signed [15:0] a290;
   wire signed [15:0] a291;
   wire signed [15:0] a292;
   wire signed [15:0] a297;
   wire signed [15:0] a298;
   wire signed [15:0] a299;
   wire signed [15:0] a300;
   wire signed [16:0] tm411;
   wire signed [16:0] tm412;
   wire signed [16:0] tm413;
   wire signed [16:0] tm414;
   wire signed [16:0] tm415;
   wire signed [16:0] tm416;
   wire signed [16:0] tm417;
   wire signed [16:0] tm418;
   wire signed [16:0] tm427;
   wire signed [16:0] tm428;
   wire signed [16:0] tm429;
   wire signed [16:0] tm430;
   wire signed [16:0] tm431;
   wire signed [16:0] tm432;
   wire signed [16:0] tm433;
   wire signed [16:0] tm434;
   wire signed [15:0] t450;
   wire signed [15:0] t451;
   wire signed [15:0] t452;
   wire signed [15:0] t453;
   wire signed [15:0] t454;
   wire signed [15:0] t455;
   wire signed [15:0] t456;
   wire signed [15:0] t457;
   wire signed [15:0] t466;
   wire signed [15:0] t467;
   wire signed [15:0] t468;
   wire signed [15:0] t469;
   wire signed [15:0] t470;
   wire signed [15:0] t471;
   wire signed [15:0] t472;
   wire signed [15:0] t473;
   wire signed [16:0] tm419;
   wire signed [16:0] tm420;
   wire signed [16:0] tm421;
   wire signed [16:0] tm422;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm423;
   wire signed [16:0] tm424;
   wire signed [16:0] tm425;
   wire signed [16:0] tm426;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm435;
   wire signed [16:0] tm436;
   wire signed [16:0] tm437;
   wire signed [16:0] tm438;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm439;
   wire signed [16:0] tm440;
   wire signed [16:0] tm441;
   wire signed [16:0] tm442;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t458;
   wire signed [15:0] t459;
   wire signed [15:0] t460;
   wire signed [15:0] t461;
   wire signed [15:0] t462;
   wire signed [15:0] t463;
   wire signed [15:0] t464;
   wire signed [15:0] t465;
   wire signed [15:0] t474;
   wire signed [15:0] t475;
   wire signed [15:0] t476;
   wire signed [15:0] t477;
   wire signed [15:0] t478;
   wire signed [15:0] t479;
   wire signed [15:0] t480;
   wire signed [15:0] t481;


   assign a273 = X0;
   assign a274 = X4;
   assign a275 = X1;
   assign a276 = X5;
   assign a281 = X2;
   assign a282 = X6;
   assign a283 = X3;
   assign a284 = X7;
   assign a289 = X8;
   assign a290 = X12;
   assign a291 = X9;
   assign a292 = X13;
   assign a297 = X10;
   assign a298 = X14;
   assign a299 = X11;
   assign a300 = X15;
   assign t450 = tm411[16:1];
   assign t451 = tm412[16:1];
   assign t452 = tm413[16:1];
   assign t453 = tm414[16:1];
   assign t454 = tm415[16:1];
   assign t455 = tm416[16:1];
   assign t456 = tm417[16:1];
   assign t457 = tm418[16:1];
   assign t466 = tm427[16:1];
   assign t467 = tm428[16:1];
   assign t468 = tm429[16:1];
   assign t469 = tm430[16:1];
   assign t470 = tm431[16:1];
   assign t471 = tm432[16:1];
   assign t472 = tm433[16:1];
   assign t473 = tm434[16:1];
   assign Y0 = t458;
   assign Y1 = t459;
   assign Y4 = t460;
   assign Y5 = t461;
   assign Y2 = t462;
   assign Y3 = t463;
   assign Y6 = t464;
   assign Y7 = t465;
   assign Y8 = t474;
   assign Y9 = t475;
   assign Y12 = t476;
   assign Y13 = t477;
   assign Y10 = t478;
   assign Y11 = t479;
   assign Y14 = t480;
   assign Y15 = t481;
   assign t458 = tm419[16:1];
   assign t459 = tm420[16:1];
   assign t460 = tm421[16:1];
   assign t461 = tm422[16:1];
   assign t462 = tm423[16:1];
   assign t463 = tm424[16:1];
   assign t464 = tm425[16:1];
   assign t465 = tm426[16:1];
   assign t474 = tm435[16:1];
   assign t475 = tm436[16:1];
   assign t476 = tm437[16:1];
   assign t477 = tm438[16:1];
   assign t478 = tm439[16:1];
   assign t479 = tm440[16:1];
   assign t480 = tm441[16:1];
   assign t481 = tm442[16:1];

    addfxp #(17, 1) add44197(.a({{1{a273[15]}}, a273}), .b({{1{a274[15]}}, a274}), .clk(clk), .q(tm411));    // 0
    addfxp #(17, 1) add44212(.a({{1{a275[15]}}, a275}), .b({{1{a276[15]}}, a276}), .clk(clk), .q(tm412));    // 0
    subfxp #(17, 1) sub44227(.a({{1{a273[15]}}, a273}), .b({{1{a274[15]}}, a274}), .clk(clk), .q(tm413));    // 0
    subfxp #(17, 1) sub44242(.a({{1{a275[15]}}, a275}), .b({{1{a276[15]}}, a276}), .clk(clk), .q(tm414));    // 0
    addfxp #(17, 1) add44257(.a({{1{a281[15]}}, a281}), .b({{1{a282[15]}}, a282}), .clk(clk), .q(tm415));    // 0
    addfxp #(17, 1) add44272(.a({{1{a283[15]}}, a283}), .b({{1{a284[15]}}, a284}), .clk(clk), .q(tm416));    // 0
    subfxp #(17, 1) sub44287(.a({{1{a281[15]}}, a281}), .b({{1{a282[15]}}, a282}), .clk(clk), .q(tm417));    // 0
    subfxp #(17, 1) sub44302(.a({{1{a283[15]}}, a283}), .b({{1{a284[15]}}, a284}), .clk(clk), .q(tm418));    // 0
    addfxp #(17, 1) add44405(.a({{1{a289[15]}}, a289}), .b({{1{a290[15]}}, a290}), .clk(clk), .q(tm427));    // 0
    addfxp #(17, 1) add44420(.a({{1{a291[15]}}, a291}), .b({{1{a292[15]}}, a292}), .clk(clk), .q(tm428));    // 0
    subfxp #(17, 1) sub44435(.a({{1{a289[15]}}, a289}), .b({{1{a290[15]}}, a290}), .clk(clk), .q(tm429));    // 0
    subfxp #(17, 1) sub44450(.a({{1{a291[15]}}, a291}), .b({{1{a292[15]}}, a292}), .clk(clk), .q(tm430));    // 0
    addfxp #(17, 1) add44465(.a({{1{a297[15]}}, a297}), .b({{1{a298[15]}}, a298}), .clk(clk), .q(tm431));    // 0
    addfxp #(17, 1) add44480(.a({{1{a299[15]}}, a299}), .b({{1{a300[15]}}, a300}), .clk(clk), .q(tm432));    // 0
    subfxp #(17, 1) sub44495(.a({{1{a297[15]}}, a297}), .b({{1{a298[15]}}, a298}), .clk(clk), .q(tm433));    // 0
    subfxp #(17, 1) sub44510(.a({{1{a299[15]}}, a299}), .b({{1{a300[15]}}, a300}), .clk(clk), .q(tm434));    // 0
    addfxp #(17, 1) add44309(.a({{1{t450[15]}}, t450}), .b({{1{t454[15]}}, t454}), .clk(clk), .q(tm419));    // 1
    addfxp #(17, 1) add44316(.a({{1{t451[15]}}, t451}), .b({{1{t455[15]}}, t455}), .clk(clk), .q(tm420));    // 1
    subfxp #(17, 1) sub44323(.a({{1{t450[15]}}, t450}), .b({{1{t454[15]}}, t454}), .clk(clk), .q(tm421));    // 1
    subfxp #(17, 1) sub44330(.a({{1{t451[15]}}, t451}), .b({{1{t455[15]}}, t455}), .clk(clk), .q(tm422));    // 1
    addfxp #(17, 1) add44353(.a({{1{t452[15]}}, t452}), .b({{1{t457[15]}}, t457}), .clk(clk), .q(tm423));    // 1
    subfxp #(17, 1) sub44360(.a({{1{t453[15]}}, t453}), .b({{1{t456[15]}}, t456}), .clk(clk), .q(tm424));    // 1
    subfxp #(17, 1) sub44367(.a({{1{t452[15]}}, t452}), .b({{1{t457[15]}}, t457}), .clk(clk), .q(tm425));    // 1
    addfxp #(17, 1) add44374(.a({{1{t453[15]}}, t453}), .b({{1{t456[15]}}, t456}), .clk(clk), .q(tm426));    // 1
    addfxp #(17, 1) add44517(.a({{1{t466[15]}}, t466}), .b({{1{t470[15]}}, t470}), .clk(clk), .q(tm435));    // 1
    addfxp #(17, 1) add44524(.a({{1{t467[15]}}, t467}), .b({{1{t471[15]}}, t471}), .clk(clk), .q(tm436));    // 1
    subfxp #(17, 1) sub44531(.a({{1{t466[15]}}, t466}), .b({{1{t470[15]}}, t470}), .clk(clk), .q(tm437));    // 1
    subfxp #(17, 1) sub44538(.a({{1{t467[15]}}, t467}), .b({{1{t471[15]}}, t471}), .clk(clk), .q(tm438));    // 1
    addfxp #(17, 1) add44561(.a({{1{t468[15]}}, t468}), .b({{1{t473[15]}}, t473}), .clk(clk), .q(tm439));    // 1
    subfxp #(17, 1) sub44568(.a({{1{t469[15]}}, t469}), .b({{1{t472[15]}}, t472}), .clk(clk), .q(tm440));    // 1
    subfxp #(17, 1) sub44575(.a({{1{t468[15]}}, t468}), .b({{1{t473[15]}}, t473}), .clk(clk), .q(tm441));    // 1
    addfxp #(17, 1) add44582(.a({{1{t469[15]}}, t469}), .b({{1{t472[15]}}, t472}), .clk(clk), .q(tm442));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 262
// Gap: 128
module rc44607(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm44605 instPerm51205(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet44605(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [7:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 8'b11111111;
        7'd1: control <= 8'b11111111;
        7'd2: control <= 8'b11111111;
        7'd3: control <= 8'b11111111;
        7'd4: control <= 8'b11111111;
        7'd5: control <= 8'b11111111;
        7'd6: control <= 8'b11111111;
        7'd7: control <= 8'b11111111;
        7'd8: control <= 8'b11111111;
        7'd9: control <= 8'b11111111;
        7'd10: control <= 8'b11111111;
        7'd11: control <= 8'b11111111;
        7'd12: control <= 8'b11111111;
        7'd13: control <= 8'b11111111;
        7'd14: control <= 8'b11111111;
        7'd15: control <= 8'b11111111;
        7'd16: control <= 8'b11111111;
        7'd17: control <= 8'b11111111;
        7'd18: control <= 8'b11111111;
        7'd19: control <= 8'b11111111;
        7'd20: control <= 8'b11111111;
        7'd21: control <= 8'b11111111;
        7'd22: control <= 8'b11111111;
        7'd23: control <= 8'b11111111;
        7'd24: control <= 8'b11111111;
        7'd25: control <= 8'b11111111;
        7'd26: control <= 8'b11111111;
        7'd27: control <= 8'b11111111;
        7'd28: control <= 8'b11111111;
        7'd29: control <= 8'b11111111;
        7'd30: control <= 8'b11111111;
        7'd31: control <= 8'b11111111;
        7'd32: control <= 8'b00001111;
        7'd33: control <= 8'b00001111;
        7'd34: control <= 8'b00001111;
        7'd35: control <= 8'b00001111;
        7'd36: control <= 8'b00001111;
        7'd37: control <= 8'b00001111;
        7'd38: control <= 8'b00001111;
        7'd39: control <= 8'b00001111;
        7'd40: control <= 8'b00001111;
        7'd41: control <= 8'b00001111;
        7'd42: control <= 8'b00001111;
        7'd43: control <= 8'b00001111;
        7'd44: control <= 8'b00001111;
        7'd45: control <= 8'b00001111;
        7'd46: control <= 8'b00001111;
        7'd47: control <= 8'b00001111;
        7'd48: control <= 8'b00001111;
        7'd49: control <= 8'b00001111;
        7'd50: control <= 8'b00001111;
        7'd51: control <= 8'b00001111;
        7'd52: control <= 8'b00001111;
        7'd53: control <= 8'b00001111;
        7'd54: control <= 8'b00001111;
        7'd55: control <= 8'b00001111;
        7'd56: control <= 8'b00001111;
        7'd57: control <= 8'b00001111;
        7'd58: control <= 8'b00001111;
        7'd59: control <= 8'b00001111;
        7'd60: control <= 8'b00001111;
        7'd61: control <= 8'b00001111;
        7'd62: control <= 8'b00001111;
        7'd63: control <= 8'b00001111;
        7'd64: control <= 8'b11110000;
        7'd65: control <= 8'b11110000;
        7'd66: control <= 8'b11110000;
        7'd67: control <= 8'b11110000;
        7'd68: control <= 8'b11110000;
        7'd69: control <= 8'b11110000;
        7'd70: control <= 8'b11110000;
        7'd71: control <= 8'b11110000;
        7'd72: control <= 8'b11110000;
        7'd73: control <= 8'b11110000;
        7'd74: control <= 8'b11110000;
        7'd75: control <= 8'b11110000;
        7'd76: control <= 8'b11110000;
        7'd77: control <= 8'b11110000;
        7'd78: control <= 8'b11110000;
        7'd79: control <= 8'b11110000;
        7'd80: control <= 8'b11110000;
        7'd81: control <= 8'b11110000;
        7'd82: control <= 8'b11110000;
        7'd83: control <= 8'b11110000;
        7'd84: control <= 8'b11110000;
        7'd85: control <= 8'b11110000;
        7'd86: control <= 8'b11110000;
        7'd87: control <= 8'b11110000;
        7'd88: control <= 8'b11110000;
        7'd89: control <= 8'b11110000;
        7'd90: control <= 8'b11110000;
        7'd91: control <= 8'b11110000;
        7'd92: control <= 8'b11110000;
        7'd93: control <= 8'b11110000;
        7'd94: control <= 8'b11110000;
        7'd95: control <= 8'b11110000;
        7'd96: control <= 8'b00000000;
        7'd97: control <= 8'b00000000;
        7'd98: control <= 8'b00000000;
        7'd99: control <= 8'b00000000;
        7'd100: control <= 8'b00000000;
        7'd101: control <= 8'b00000000;
        7'd102: control <= 8'b00000000;
        7'd103: control <= 8'b00000000;
        7'd104: control <= 8'b00000000;
        7'd105: control <= 8'b00000000;
        7'd106: control <= 8'b00000000;
        7'd107: control <= 8'b00000000;
        7'd108: control <= 8'b00000000;
        7'd109: control <= 8'b00000000;
        7'd110: control <= 8'b00000000;
        7'd111: control <= 8'b00000000;
        7'd112: control <= 8'b00000000;
        7'd113: control <= 8'b00000000;
        7'd114: control <= 8'b00000000;
        7'd115: control <= 8'b00000000;
        7'd116: control <= 8'b00000000;
        7'd117: control <= 8'b00000000;
        7'd118: control <= 8'b00000000;
        7'd119: control <= 8'b00000000;
        7'd120: control <= 8'b00000000;
        7'd121: control <= 8'b00000000;
        7'd122: control <= 8'b00000000;
        7'd123: control <= 8'b00000000;
        7'd124: control <= 8'b00000000;
        7'd125: control <= 8'b00000000;
        7'd126: control <= 8'b00000000;
        7'd127: control <= 8'b00000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [7:0] control0;
   reg [7:0] control1;
   reg [7:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[7] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[7] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[6] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[6] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[5] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[5] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[4] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[4] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[3] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[3] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[2] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[2] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[1] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[1] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[0] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[0] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 262
// Gap: 128
module perm44605(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm52;
   assign tm52 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_51210(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51211(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(127, 7) nextReg_51222(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_51223(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_51226(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51227(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_51230(.X(tm52), .Y(tm52_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_51233(.X(tm52_d), .Y(tm52_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 7) shiftFIFO_51238(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 96;
	     {1'd0,  7'd1}: s1rd0 <= 97;
	     {1'd0,  7'd2}: s1rd0 <= 98;
	     {1'd0,  7'd3}: s1rd0 <= 99;
	     {1'd0,  7'd4}: s1rd0 <= 100;
	     {1'd0,  7'd5}: s1rd0 <= 101;
	     {1'd0,  7'd6}: s1rd0 <= 102;
	     {1'd0,  7'd7}: s1rd0 <= 103;
	     {1'd0,  7'd8}: s1rd0 <= 104;
	     {1'd0,  7'd9}: s1rd0 <= 105;
	     {1'd0,  7'd10}: s1rd0 <= 106;
	     {1'd0,  7'd11}: s1rd0 <= 107;
	     {1'd0,  7'd12}: s1rd0 <= 108;
	     {1'd0,  7'd13}: s1rd0 <= 109;
	     {1'd0,  7'd14}: s1rd0 <= 110;
	     {1'd0,  7'd15}: s1rd0 <= 111;
	     {1'd0,  7'd16}: s1rd0 <= 112;
	     {1'd0,  7'd17}: s1rd0 <= 113;
	     {1'd0,  7'd18}: s1rd0 <= 114;
	     {1'd0,  7'd19}: s1rd0 <= 115;
	     {1'd0,  7'd20}: s1rd0 <= 116;
	     {1'd0,  7'd21}: s1rd0 <= 117;
	     {1'd0,  7'd22}: s1rd0 <= 118;
	     {1'd0,  7'd23}: s1rd0 <= 119;
	     {1'd0,  7'd24}: s1rd0 <= 120;
	     {1'd0,  7'd25}: s1rd0 <= 121;
	     {1'd0,  7'd26}: s1rd0 <= 122;
	     {1'd0,  7'd27}: s1rd0 <= 123;
	     {1'd0,  7'd28}: s1rd0 <= 124;
	     {1'd0,  7'd29}: s1rd0 <= 125;
	     {1'd0,  7'd30}: s1rd0 <= 126;
	     {1'd0,  7'd31}: s1rd0 <= 127;
	     {1'd0,  7'd32}: s1rd0 <= 64;
	     {1'd0,  7'd33}: s1rd0 <= 65;
	     {1'd0,  7'd34}: s1rd0 <= 66;
	     {1'd0,  7'd35}: s1rd0 <= 67;
	     {1'd0,  7'd36}: s1rd0 <= 68;
	     {1'd0,  7'd37}: s1rd0 <= 69;
	     {1'd0,  7'd38}: s1rd0 <= 70;
	     {1'd0,  7'd39}: s1rd0 <= 71;
	     {1'd0,  7'd40}: s1rd0 <= 72;
	     {1'd0,  7'd41}: s1rd0 <= 73;
	     {1'd0,  7'd42}: s1rd0 <= 74;
	     {1'd0,  7'd43}: s1rd0 <= 75;
	     {1'd0,  7'd44}: s1rd0 <= 76;
	     {1'd0,  7'd45}: s1rd0 <= 77;
	     {1'd0,  7'd46}: s1rd0 <= 78;
	     {1'd0,  7'd47}: s1rd0 <= 79;
	     {1'd0,  7'd48}: s1rd0 <= 80;
	     {1'd0,  7'd49}: s1rd0 <= 81;
	     {1'd0,  7'd50}: s1rd0 <= 82;
	     {1'd0,  7'd51}: s1rd0 <= 83;
	     {1'd0,  7'd52}: s1rd0 <= 84;
	     {1'd0,  7'd53}: s1rd0 <= 85;
	     {1'd0,  7'd54}: s1rd0 <= 86;
	     {1'd0,  7'd55}: s1rd0 <= 87;
	     {1'd0,  7'd56}: s1rd0 <= 88;
	     {1'd0,  7'd57}: s1rd0 <= 89;
	     {1'd0,  7'd58}: s1rd0 <= 90;
	     {1'd0,  7'd59}: s1rd0 <= 91;
	     {1'd0,  7'd60}: s1rd0 <= 92;
	     {1'd0,  7'd61}: s1rd0 <= 93;
	     {1'd0,  7'd62}: s1rd0 <= 94;
	     {1'd0,  7'd63}: s1rd0 <= 95;
	     {1'd0,  7'd64}: s1rd0 <= 32;
	     {1'd0,  7'd65}: s1rd0 <= 33;
	     {1'd0,  7'd66}: s1rd0 <= 34;
	     {1'd0,  7'd67}: s1rd0 <= 35;
	     {1'd0,  7'd68}: s1rd0 <= 36;
	     {1'd0,  7'd69}: s1rd0 <= 37;
	     {1'd0,  7'd70}: s1rd0 <= 38;
	     {1'd0,  7'd71}: s1rd0 <= 39;
	     {1'd0,  7'd72}: s1rd0 <= 40;
	     {1'd0,  7'd73}: s1rd0 <= 41;
	     {1'd0,  7'd74}: s1rd0 <= 42;
	     {1'd0,  7'd75}: s1rd0 <= 43;
	     {1'd0,  7'd76}: s1rd0 <= 44;
	     {1'd0,  7'd77}: s1rd0 <= 45;
	     {1'd0,  7'd78}: s1rd0 <= 46;
	     {1'd0,  7'd79}: s1rd0 <= 47;
	     {1'd0,  7'd80}: s1rd0 <= 48;
	     {1'd0,  7'd81}: s1rd0 <= 49;
	     {1'd0,  7'd82}: s1rd0 <= 50;
	     {1'd0,  7'd83}: s1rd0 <= 51;
	     {1'd0,  7'd84}: s1rd0 <= 52;
	     {1'd0,  7'd85}: s1rd0 <= 53;
	     {1'd0,  7'd86}: s1rd0 <= 54;
	     {1'd0,  7'd87}: s1rd0 <= 55;
	     {1'd0,  7'd88}: s1rd0 <= 56;
	     {1'd0,  7'd89}: s1rd0 <= 57;
	     {1'd0,  7'd90}: s1rd0 <= 58;
	     {1'd0,  7'd91}: s1rd0 <= 59;
	     {1'd0,  7'd92}: s1rd0 <= 60;
	     {1'd0,  7'd93}: s1rd0 <= 61;
	     {1'd0,  7'd94}: s1rd0 <= 62;
	     {1'd0,  7'd95}: s1rd0 <= 63;
	     {1'd0,  7'd96}: s1rd0 <= 0;
	     {1'd0,  7'd97}: s1rd0 <= 1;
	     {1'd0,  7'd98}: s1rd0 <= 2;
	     {1'd0,  7'd99}: s1rd0 <= 3;
	     {1'd0,  7'd100}: s1rd0 <= 4;
	     {1'd0,  7'd101}: s1rd0 <= 5;
	     {1'd0,  7'd102}: s1rd0 <= 6;
	     {1'd0,  7'd103}: s1rd0 <= 7;
	     {1'd0,  7'd104}: s1rd0 <= 8;
	     {1'd0,  7'd105}: s1rd0 <= 9;
	     {1'd0,  7'd106}: s1rd0 <= 10;
	     {1'd0,  7'd107}: s1rd0 <= 11;
	     {1'd0,  7'd108}: s1rd0 <= 12;
	     {1'd0,  7'd109}: s1rd0 <= 13;
	     {1'd0,  7'd110}: s1rd0 <= 14;
	     {1'd0,  7'd111}: s1rd0 <= 15;
	     {1'd0,  7'd112}: s1rd0 <= 16;
	     {1'd0,  7'd113}: s1rd0 <= 17;
	     {1'd0,  7'd114}: s1rd0 <= 18;
	     {1'd0,  7'd115}: s1rd0 <= 19;
	     {1'd0,  7'd116}: s1rd0 <= 20;
	     {1'd0,  7'd117}: s1rd0 <= 21;
	     {1'd0,  7'd118}: s1rd0 <= 22;
	     {1'd0,  7'd119}: s1rd0 <= 23;
	     {1'd0,  7'd120}: s1rd0 <= 24;
	     {1'd0,  7'd121}: s1rd0 <= 25;
	     {1'd0,  7'd122}: s1rd0 <= 26;
	     {1'd0,  7'd123}: s1rd0 <= 27;
	     {1'd0,  7'd124}: s1rd0 <= 28;
	     {1'd0,  7'd125}: s1rd0 <= 29;
	     {1'd0,  7'd126}: s1rd0 <= 30;
	     {1'd0,  7'd127}: s1rd0 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 64;
	     {1'd0,  7'd1}: s1rd1 <= 65;
	     {1'd0,  7'd2}: s1rd1 <= 66;
	     {1'd0,  7'd3}: s1rd1 <= 67;
	     {1'd0,  7'd4}: s1rd1 <= 68;
	     {1'd0,  7'd5}: s1rd1 <= 69;
	     {1'd0,  7'd6}: s1rd1 <= 70;
	     {1'd0,  7'd7}: s1rd1 <= 71;
	     {1'd0,  7'd8}: s1rd1 <= 72;
	     {1'd0,  7'd9}: s1rd1 <= 73;
	     {1'd0,  7'd10}: s1rd1 <= 74;
	     {1'd0,  7'd11}: s1rd1 <= 75;
	     {1'd0,  7'd12}: s1rd1 <= 76;
	     {1'd0,  7'd13}: s1rd1 <= 77;
	     {1'd0,  7'd14}: s1rd1 <= 78;
	     {1'd0,  7'd15}: s1rd1 <= 79;
	     {1'd0,  7'd16}: s1rd1 <= 80;
	     {1'd0,  7'd17}: s1rd1 <= 81;
	     {1'd0,  7'd18}: s1rd1 <= 82;
	     {1'd0,  7'd19}: s1rd1 <= 83;
	     {1'd0,  7'd20}: s1rd1 <= 84;
	     {1'd0,  7'd21}: s1rd1 <= 85;
	     {1'd0,  7'd22}: s1rd1 <= 86;
	     {1'd0,  7'd23}: s1rd1 <= 87;
	     {1'd0,  7'd24}: s1rd1 <= 88;
	     {1'd0,  7'd25}: s1rd1 <= 89;
	     {1'd0,  7'd26}: s1rd1 <= 90;
	     {1'd0,  7'd27}: s1rd1 <= 91;
	     {1'd0,  7'd28}: s1rd1 <= 92;
	     {1'd0,  7'd29}: s1rd1 <= 93;
	     {1'd0,  7'd30}: s1rd1 <= 94;
	     {1'd0,  7'd31}: s1rd1 <= 95;
	     {1'd0,  7'd32}: s1rd1 <= 96;
	     {1'd0,  7'd33}: s1rd1 <= 97;
	     {1'd0,  7'd34}: s1rd1 <= 98;
	     {1'd0,  7'd35}: s1rd1 <= 99;
	     {1'd0,  7'd36}: s1rd1 <= 100;
	     {1'd0,  7'd37}: s1rd1 <= 101;
	     {1'd0,  7'd38}: s1rd1 <= 102;
	     {1'd0,  7'd39}: s1rd1 <= 103;
	     {1'd0,  7'd40}: s1rd1 <= 104;
	     {1'd0,  7'd41}: s1rd1 <= 105;
	     {1'd0,  7'd42}: s1rd1 <= 106;
	     {1'd0,  7'd43}: s1rd1 <= 107;
	     {1'd0,  7'd44}: s1rd1 <= 108;
	     {1'd0,  7'd45}: s1rd1 <= 109;
	     {1'd0,  7'd46}: s1rd1 <= 110;
	     {1'd0,  7'd47}: s1rd1 <= 111;
	     {1'd0,  7'd48}: s1rd1 <= 112;
	     {1'd0,  7'd49}: s1rd1 <= 113;
	     {1'd0,  7'd50}: s1rd1 <= 114;
	     {1'd0,  7'd51}: s1rd1 <= 115;
	     {1'd0,  7'd52}: s1rd1 <= 116;
	     {1'd0,  7'd53}: s1rd1 <= 117;
	     {1'd0,  7'd54}: s1rd1 <= 118;
	     {1'd0,  7'd55}: s1rd1 <= 119;
	     {1'd0,  7'd56}: s1rd1 <= 120;
	     {1'd0,  7'd57}: s1rd1 <= 121;
	     {1'd0,  7'd58}: s1rd1 <= 122;
	     {1'd0,  7'd59}: s1rd1 <= 123;
	     {1'd0,  7'd60}: s1rd1 <= 124;
	     {1'd0,  7'd61}: s1rd1 <= 125;
	     {1'd0,  7'd62}: s1rd1 <= 126;
	     {1'd0,  7'd63}: s1rd1 <= 127;
	     {1'd0,  7'd64}: s1rd1 <= 0;
	     {1'd0,  7'd65}: s1rd1 <= 1;
	     {1'd0,  7'd66}: s1rd1 <= 2;
	     {1'd0,  7'd67}: s1rd1 <= 3;
	     {1'd0,  7'd68}: s1rd1 <= 4;
	     {1'd0,  7'd69}: s1rd1 <= 5;
	     {1'd0,  7'd70}: s1rd1 <= 6;
	     {1'd0,  7'd71}: s1rd1 <= 7;
	     {1'd0,  7'd72}: s1rd1 <= 8;
	     {1'd0,  7'd73}: s1rd1 <= 9;
	     {1'd0,  7'd74}: s1rd1 <= 10;
	     {1'd0,  7'd75}: s1rd1 <= 11;
	     {1'd0,  7'd76}: s1rd1 <= 12;
	     {1'd0,  7'd77}: s1rd1 <= 13;
	     {1'd0,  7'd78}: s1rd1 <= 14;
	     {1'd0,  7'd79}: s1rd1 <= 15;
	     {1'd0,  7'd80}: s1rd1 <= 16;
	     {1'd0,  7'd81}: s1rd1 <= 17;
	     {1'd0,  7'd82}: s1rd1 <= 18;
	     {1'd0,  7'd83}: s1rd1 <= 19;
	     {1'd0,  7'd84}: s1rd1 <= 20;
	     {1'd0,  7'd85}: s1rd1 <= 21;
	     {1'd0,  7'd86}: s1rd1 <= 22;
	     {1'd0,  7'd87}: s1rd1 <= 23;
	     {1'd0,  7'd88}: s1rd1 <= 24;
	     {1'd0,  7'd89}: s1rd1 <= 25;
	     {1'd0,  7'd90}: s1rd1 <= 26;
	     {1'd0,  7'd91}: s1rd1 <= 27;
	     {1'd0,  7'd92}: s1rd1 <= 28;
	     {1'd0,  7'd93}: s1rd1 <= 29;
	     {1'd0,  7'd94}: s1rd1 <= 30;
	     {1'd0,  7'd95}: s1rd1 <= 31;
	     {1'd0,  7'd96}: s1rd1 <= 32;
	     {1'd0,  7'd97}: s1rd1 <= 33;
	     {1'd0,  7'd98}: s1rd1 <= 34;
	     {1'd0,  7'd99}: s1rd1 <= 35;
	     {1'd0,  7'd100}: s1rd1 <= 36;
	     {1'd0,  7'd101}: s1rd1 <= 37;
	     {1'd0,  7'd102}: s1rd1 <= 38;
	     {1'd0,  7'd103}: s1rd1 <= 39;
	     {1'd0,  7'd104}: s1rd1 <= 40;
	     {1'd0,  7'd105}: s1rd1 <= 41;
	     {1'd0,  7'd106}: s1rd1 <= 42;
	     {1'd0,  7'd107}: s1rd1 <= 43;
	     {1'd0,  7'd108}: s1rd1 <= 44;
	     {1'd0,  7'd109}: s1rd1 <= 45;
	     {1'd0,  7'd110}: s1rd1 <= 46;
	     {1'd0,  7'd111}: s1rd1 <= 47;
	     {1'd0,  7'd112}: s1rd1 <= 48;
	     {1'd0,  7'd113}: s1rd1 <= 49;
	     {1'd0,  7'd114}: s1rd1 <= 50;
	     {1'd0,  7'd115}: s1rd1 <= 51;
	     {1'd0,  7'd116}: s1rd1 <= 52;
	     {1'd0,  7'd117}: s1rd1 <= 53;
	     {1'd0,  7'd118}: s1rd1 <= 54;
	     {1'd0,  7'd119}: s1rd1 <= 55;
	     {1'd0,  7'd120}: s1rd1 <= 56;
	     {1'd0,  7'd121}: s1rd1 <= 57;
	     {1'd0,  7'd122}: s1rd1 <= 58;
	     {1'd0,  7'd123}: s1rd1 <= 59;
	     {1'd0,  7'd124}: s1rd1 <= 60;
	     {1'd0,  7'd125}: s1rd1 <= 61;
	     {1'd0,  7'd126}: s1rd1 <= 62;
	     {1'd0,  7'd127}: s1rd1 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 32;
	     {1'd0,  7'd1}: s1rd2 <= 33;
	     {1'd0,  7'd2}: s1rd2 <= 34;
	     {1'd0,  7'd3}: s1rd2 <= 35;
	     {1'd0,  7'd4}: s1rd2 <= 36;
	     {1'd0,  7'd5}: s1rd2 <= 37;
	     {1'd0,  7'd6}: s1rd2 <= 38;
	     {1'd0,  7'd7}: s1rd2 <= 39;
	     {1'd0,  7'd8}: s1rd2 <= 40;
	     {1'd0,  7'd9}: s1rd2 <= 41;
	     {1'd0,  7'd10}: s1rd2 <= 42;
	     {1'd0,  7'd11}: s1rd2 <= 43;
	     {1'd0,  7'd12}: s1rd2 <= 44;
	     {1'd0,  7'd13}: s1rd2 <= 45;
	     {1'd0,  7'd14}: s1rd2 <= 46;
	     {1'd0,  7'd15}: s1rd2 <= 47;
	     {1'd0,  7'd16}: s1rd2 <= 48;
	     {1'd0,  7'd17}: s1rd2 <= 49;
	     {1'd0,  7'd18}: s1rd2 <= 50;
	     {1'd0,  7'd19}: s1rd2 <= 51;
	     {1'd0,  7'd20}: s1rd2 <= 52;
	     {1'd0,  7'd21}: s1rd2 <= 53;
	     {1'd0,  7'd22}: s1rd2 <= 54;
	     {1'd0,  7'd23}: s1rd2 <= 55;
	     {1'd0,  7'd24}: s1rd2 <= 56;
	     {1'd0,  7'd25}: s1rd2 <= 57;
	     {1'd0,  7'd26}: s1rd2 <= 58;
	     {1'd0,  7'd27}: s1rd2 <= 59;
	     {1'd0,  7'd28}: s1rd2 <= 60;
	     {1'd0,  7'd29}: s1rd2 <= 61;
	     {1'd0,  7'd30}: s1rd2 <= 62;
	     {1'd0,  7'd31}: s1rd2 <= 63;
	     {1'd0,  7'd32}: s1rd2 <= 0;
	     {1'd0,  7'd33}: s1rd2 <= 1;
	     {1'd0,  7'd34}: s1rd2 <= 2;
	     {1'd0,  7'd35}: s1rd2 <= 3;
	     {1'd0,  7'd36}: s1rd2 <= 4;
	     {1'd0,  7'd37}: s1rd2 <= 5;
	     {1'd0,  7'd38}: s1rd2 <= 6;
	     {1'd0,  7'd39}: s1rd2 <= 7;
	     {1'd0,  7'd40}: s1rd2 <= 8;
	     {1'd0,  7'd41}: s1rd2 <= 9;
	     {1'd0,  7'd42}: s1rd2 <= 10;
	     {1'd0,  7'd43}: s1rd2 <= 11;
	     {1'd0,  7'd44}: s1rd2 <= 12;
	     {1'd0,  7'd45}: s1rd2 <= 13;
	     {1'd0,  7'd46}: s1rd2 <= 14;
	     {1'd0,  7'd47}: s1rd2 <= 15;
	     {1'd0,  7'd48}: s1rd2 <= 16;
	     {1'd0,  7'd49}: s1rd2 <= 17;
	     {1'd0,  7'd50}: s1rd2 <= 18;
	     {1'd0,  7'd51}: s1rd2 <= 19;
	     {1'd0,  7'd52}: s1rd2 <= 20;
	     {1'd0,  7'd53}: s1rd2 <= 21;
	     {1'd0,  7'd54}: s1rd2 <= 22;
	     {1'd0,  7'd55}: s1rd2 <= 23;
	     {1'd0,  7'd56}: s1rd2 <= 24;
	     {1'd0,  7'd57}: s1rd2 <= 25;
	     {1'd0,  7'd58}: s1rd2 <= 26;
	     {1'd0,  7'd59}: s1rd2 <= 27;
	     {1'd0,  7'd60}: s1rd2 <= 28;
	     {1'd0,  7'd61}: s1rd2 <= 29;
	     {1'd0,  7'd62}: s1rd2 <= 30;
	     {1'd0,  7'd63}: s1rd2 <= 31;
	     {1'd0,  7'd64}: s1rd2 <= 96;
	     {1'd0,  7'd65}: s1rd2 <= 97;
	     {1'd0,  7'd66}: s1rd2 <= 98;
	     {1'd0,  7'd67}: s1rd2 <= 99;
	     {1'd0,  7'd68}: s1rd2 <= 100;
	     {1'd0,  7'd69}: s1rd2 <= 101;
	     {1'd0,  7'd70}: s1rd2 <= 102;
	     {1'd0,  7'd71}: s1rd2 <= 103;
	     {1'd0,  7'd72}: s1rd2 <= 104;
	     {1'd0,  7'd73}: s1rd2 <= 105;
	     {1'd0,  7'd74}: s1rd2 <= 106;
	     {1'd0,  7'd75}: s1rd2 <= 107;
	     {1'd0,  7'd76}: s1rd2 <= 108;
	     {1'd0,  7'd77}: s1rd2 <= 109;
	     {1'd0,  7'd78}: s1rd2 <= 110;
	     {1'd0,  7'd79}: s1rd2 <= 111;
	     {1'd0,  7'd80}: s1rd2 <= 112;
	     {1'd0,  7'd81}: s1rd2 <= 113;
	     {1'd0,  7'd82}: s1rd2 <= 114;
	     {1'd0,  7'd83}: s1rd2 <= 115;
	     {1'd0,  7'd84}: s1rd2 <= 116;
	     {1'd0,  7'd85}: s1rd2 <= 117;
	     {1'd0,  7'd86}: s1rd2 <= 118;
	     {1'd0,  7'd87}: s1rd2 <= 119;
	     {1'd0,  7'd88}: s1rd2 <= 120;
	     {1'd0,  7'd89}: s1rd2 <= 121;
	     {1'd0,  7'd90}: s1rd2 <= 122;
	     {1'd0,  7'd91}: s1rd2 <= 123;
	     {1'd0,  7'd92}: s1rd2 <= 124;
	     {1'd0,  7'd93}: s1rd2 <= 125;
	     {1'd0,  7'd94}: s1rd2 <= 126;
	     {1'd0,  7'd95}: s1rd2 <= 127;
	     {1'd0,  7'd96}: s1rd2 <= 64;
	     {1'd0,  7'd97}: s1rd2 <= 65;
	     {1'd0,  7'd98}: s1rd2 <= 66;
	     {1'd0,  7'd99}: s1rd2 <= 67;
	     {1'd0,  7'd100}: s1rd2 <= 68;
	     {1'd0,  7'd101}: s1rd2 <= 69;
	     {1'd0,  7'd102}: s1rd2 <= 70;
	     {1'd0,  7'd103}: s1rd2 <= 71;
	     {1'd0,  7'd104}: s1rd2 <= 72;
	     {1'd0,  7'd105}: s1rd2 <= 73;
	     {1'd0,  7'd106}: s1rd2 <= 74;
	     {1'd0,  7'd107}: s1rd2 <= 75;
	     {1'd0,  7'd108}: s1rd2 <= 76;
	     {1'd0,  7'd109}: s1rd2 <= 77;
	     {1'd0,  7'd110}: s1rd2 <= 78;
	     {1'd0,  7'd111}: s1rd2 <= 79;
	     {1'd0,  7'd112}: s1rd2 <= 80;
	     {1'd0,  7'd113}: s1rd2 <= 81;
	     {1'd0,  7'd114}: s1rd2 <= 82;
	     {1'd0,  7'd115}: s1rd2 <= 83;
	     {1'd0,  7'd116}: s1rd2 <= 84;
	     {1'd0,  7'd117}: s1rd2 <= 85;
	     {1'd0,  7'd118}: s1rd2 <= 86;
	     {1'd0,  7'd119}: s1rd2 <= 87;
	     {1'd0,  7'd120}: s1rd2 <= 88;
	     {1'd0,  7'd121}: s1rd2 <= 89;
	     {1'd0,  7'd122}: s1rd2 <= 90;
	     {1'd0,  7'd123}: s1rd2 <= 91;
	     {1'd0,  7'd124}: s1rd2 <= 92;
	     {1'd0,  7'd125}: s1rd2 <= 93;
	     {1'd0,  7'd126}: s1rd2 <= 94;
	     {1'd0,  7'd127}: s1rd2 <= 95;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 1;
	     {1'd0,  7'd2}: s1rd3 <= 2;
	     {1'd0,  7'd3}: s1rd3 <= 3;
	     {1'd0,  7'd4}: s1rd3 <= 4;
	     {1'd0,  7'd5}: s1rd3 <= 5;
	     {1'd0,  7'd6}: s1rd3 <= 6;
	     {1'd0,  7'd7}: s1rd3 <= 7;
	     {1'd0,  7'd8}: s1rd3 <= 8;
	     {1'd0,  7'd9}: s1rd3 <= 9;
	     {1'd0,  7'd10}: s1rd3 <= 10;
	     {1'd0,  7'd11}: s1rd3 <= 11;
	     {1'd0,  7'd12}: s1rd3 <= 12;
	     {1'd0,  7'd13}: s1rd3 <= 13;
	     {1'd0,  7'd14}: s1rd3 <= 14;
	     {1'd0,  7'd15}: s1rd3 <= 15;
	     {1'd0,  7'd16}: s1rd3 <= 16;
	     {1'd0,  7'd17}: s1rd3 <= 17;
	     {1'd0,  7'd18}: s1rd3 <= 18;
	     {1'd0,  7'd19}: s1rd3 <= 19;
	     {1'd0,  7'd20}: s1rd3 <= 20;
	     {1'd0,  7'd21}: s1rd3 <= 21;
	     {1'd0,  7'd22}: s1rd3 <= 22;
	     {1'd0,  7'd23}: s1rd3 <= 23;
	     {1'd0,  7'd24}: s1rd3 <= 24;
	     {1'd0,  7'd25}: s1rd3 <= 25;
	     {1'd0,  7'd26}: s1rd3 <= 26;
	     {1'd0,  7'd27}: s1rd3 <= 27;
	     {1'd0,  7'd28}: s1rd3 <= 28;
	     {1'd0,  7'd29}: s1rd3 <= 29;
	     {1'd0,  7'd30}: s1rd3 <= 30;
	     {1'd0,  7'd31}: s1rd3 <= 31;
	     {1'd0,  7'd32}: s1rd3 <= 32;
	     {1'd0,  7'd33}: s1rd3 <= 33;
	     {1'd0,  7'd34}: s1rd3 <= 34;
	     {1'd0,  7'd35}: s1rd3 <= 35;
	     {1'd0,  7'd36}: s1rd3 <= 36;
	     {1'd0,  7'd37}: s1rd3 <= 37;
	     {1'd0,  7'd38}: s1rd3 <= 38;
	     {1'd0,  7'd39}: s1rd3 <= 39;
	     {1'd0,  7'd40}: s1rd3 <= 40;
	     {1'd0,  7'd41}: s1rd3 <= 41;
	     {1'd0,  7'd42}: s1rd3 <= 42;
	     {1'd0,  7'd43}: s1rd3 <= 43;
	     {1'd0,  7'd44}: s1rd3 <= 44;
	     {1'd0,  7'd45}: s1rd3 <= 45;
	     {1'd0,  7'd46}: s1rd3 <= 46;
	     {1'd0,  7'd47}: s1rd3 <= 47;
	     {1'd0,  7'd48}: s1rd3 <= 48;
	     {1'd0,  7'd49}: s1rd3 <= 49;
	     {1'd0,  7'd50}: s1rd3 <= 50;
	     {1'd0,  7'd51}: s1rd3 <= 51;
	     {1'd0,  7'd52}: s1rd3 <= 52;
	     {1'd0,  7'd53}: s1rd3 <= 53;
	     {1'd0,  7'd54}: s1rd3 <= 54;
	     {1'd0,  7'd55}: s1rd3 <= 55;
	     {1'd0,  7'd56}: s1rd3 <= 56;
	     {1'd0,  7'd57}: s1rd3 <= 57;
	     {1'd0,  7'd58}: s1rd3 <= 58;
	     {1'd0,  7'd59}: s1rd3 <= 59;
	     {1'd0,  7'd60}: s1rd3 <= 60;
	     {1'd0,  7'd61}: s1rd3 <= 61;
	     {1'd0,  7'd62}: s1rd3 <= 62;
	     {1'd0,  7'd63}: s1rd3 <= 63;
	     {1'd0,  7'd64}: s1rd3 <= 64;
	     {1'd0,  7'd65}: s1rd3 <= 65;
	     {1'd0,  7'd66}: s1rd3 <= 66;
	     {1'd0,  7'd67}: s1rd3 <= 67;
	     {1'd0,  7'd68}: s1rd3 <= 68;
	     {1'd0,  7'd69}: s1rd3 <= 69;
	     {1'd0,  7'd70}: s1rd3 <= 70;
	     {1'd0,  7'd71}: s1rd3 <= 71;
	     {1'd0,  7'd72}: s1rd3 <= 72;
	     {1'd0,  7'd73}: s1rd3 <= 73;
	     {1'd0,  7'd74}: s1rd3 <= 74;
	     {1'd0,  7'd75}: s1rd3 <= 75;
	     {1'd0,  7'd76}: s1rd3 <= 76;
	     {1'd0,  7'd77}: s1rd3 <= 77;
	     {1'd0,  7'd78}: s1rd3 <= 78;
	     {1'd0,  7'd79}: s1rd3 <= 79;
	     {1'd0,  7'd80}: s1rd3 <= 80;
	     {1'd0,  7'd81}: s1rd3 <= 81;
	     {1'd0,  7'd82}: s1rd3 <= 82;
	     {1'd0,  7'd83}: s1rd3 <= 83;
	     {1'd0,  7'd84}: s1rd3 <= 84;
	     {1'd0,  7'd85}: s1rd3 <= 85;
	     {1'd0,  7'd86}: s1rd3 <= 86;
	     {1'd0,  7'd87}: s1rd3 <= 87;
	     {1'd0,  7'd88}: s1rd3 <= 88;
	     {1'd0,  7'd89}: s1rd3 <= 89;
	     {1'd0,  7'd90}: s1rd3 <= 90;
	     {1'd0,  7'd91}: s1rd3 <= 91;
	     {1'd0,  7'd92}: s1rd3 <= 92;
	     {1'd0,  7'd93}: s1rd3 <= 93;
	     {1'd0,  7'd94}: s1rd3 <= 94;
	     {1'd0,  7'd95}: s1rd3 <= 95;
	     {1'd0,  7'd96}: s1rd3 <= 96;
	     {1'd0,  7'd97}: s1rd3 <= 97;
	     {1'd0,  7'd98}: s1rd3 <= 98;
	     {1'd0,  7'd99}: s1rd3 <= 99;
	     {1'd0,  7'd100}: s1rd3 <= 100;
	     {1'd0,  7'd101}: s1rd3 <= 101;
	     {1'd0,  7'd102}: s1rd3 <= 102;
	     {1'd0,  7'd103}: s1rd3 <= 103;
	     {1'd0,  7'd104}: s1rd3 <= 104;
	     {1'd0,  7'd105}: s1rd3 <= 105;
	     {1'd0,  7'd106}: s1rd3 <= 106;
	     {1'd0,  7'd107}: s1rd3 <= 107;
	     {1'd0,  7'd108}: s1rd3 <= 108;
	     {1'd0,  7'd109}: s1rd3 <= 109;
	     {1'd0,  7'd110}: s1rd3 <= 110;
	     {1'd0,  7'd111}: s1rd3 <= 111;
	     {1'd0,  7'd112}: s1rd3 <= 112;
	     {1'd0,  7'd113}: s1rd3 <= 113;
	     {1'd0,  7'd114}: s1rd3 <= 114;
	     {1'd0,  7'd115}: s1rd3 <= 115;
	     {1'd0,  7'd116}: s1rd3 <= 116;
	     {1'd0,  7'd117}: s1rd3 <= 117;
	     {1'd0,  7'd118}: s1rd3 <= 118;
	     {1'd0,  7'd119}: s1rd3 <= 119;
	     {1'd0,  7'd120}: s1rd3 <= 120;
	     {1'd0,  7'd121}: s1rd3 <= 121;
	     {1'd0,  7'd122}: s1rd3 <= 122;
	     {1'd0,  7'd123}: s1rd3 <= 123;
	     {1'd0,  7'd124}: s1rd3 <= 124;
	     {1'd0,  7'd125}: s1rd3 <= 125;
	     {1'd0,  7'd126}: s1rd3 <= 126;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd4 <= 96;
	     {1'd0,  7'd1}: s1rd4 <= 97;
	     {1'd0,  7'd2}: s1rd4 <= 98;
	     {1'd0,  7'd3}: s1rd4 <= 99;
	     {1'd0,  7'd4}: s1rd4 <= 100;
	     {1'd0,  7'd5}: s1rd4 <= 101;
	     {1'd0,  7'd6}: s1rd4 <= 102;
	     {1'd0,  7'd7}: s1rd4 <= 103;
	     {1'd0,  7'd8}: s1rd4 <= 104;
	     {1'd0,  7'd9}: s1rd4 <= 105;
	     {1'd0,  7'd10}: s1rd4 <= 106;
	     {1'd0,  7'd11}: s1rd4 <= 107;
	     {1'd0,  7'd12}: s1rd4 <= 108;
	     {1'd0,  7'd13}: s1rd4 <= 109;
	     {1'd0,  7'd14}: s1rd4 <= 110;
	     {1'd0,  7'd15}: s1rd4 <= 111;
	     {1'd0,  7'd16}: s1rd4 <= 112;
	     {1'd0,  7'd17}: s1rd4 <= 113;
	     {1'd0,  7'd18}: s1rd4 <= 114;
	     {1'd0,  7'd19}: s1rd4 <= 115;
	     {1'd0,  7'd20}: s1rd4 <= 116;
	     {1'd0,  7'd21}: s1rd4 <= 117;
	     {1'd0,  7'd22}: s1rd4 <= 118;
	     {1'd0,  7'd23}: s1rd4 <= 119;
	     {1'd0,  7'd24}: s1rd4 <= 120;
	     {1'd0,  7'd25}: s1rd4 <= 121;
	     {1'd0,  7'd26}: s1rd4 <= 122;
	     {1'd0,  7'd27}: s1rd4 <= 123;
	     {1'd0,  7'd28}: s1rd4 <= 124;
	     {1'd0,  7'd29}: s1rd4 <= 125;
	     {1'd0,  7'd30}: s1rd4 <= 126;
	     {1'd0,  7'd31}: s1rd4 <= 127;
	     {1'd0,  7'd32}: s1rd4 <= 64;
	     {1'd0,  7'd33}: s1rd4 <= 65;
	     {1'd0,  7'd34}: s1rd4 <= 66;
	     {1'd0,  7'd35}: s1rd4 <= 67;
	     {1'd0,  7'd36}: s1rd4 <= 68;
	     {1'd0,  7'd37}: s1rd4 <= 69;
	     {1'd0,  7'd38}: s1rd4 <= 70;
	     {1'd0,  7'd39}: s1rd4 <= 71;
	     {1'd0,  7'd40}: s1rd4 <= 72;
	     {1'd0,  7'd41}: s1rd4 <= 73;
	     {1'd0,  7'd42}: s1rd4 <= 74;
	     {1'd0,  7'd43}: s1rd4 <= 75;
	     {1'd0,  7'd44}: s1rd4 <= 76;
	     {1'd0,  7'd45}: s1rd4 <= 77;
	     {1'd0,  7'd46}: s1rd4 <= 78;
	     {1'd0,  7'd47}: s1rd4 <= 79;
	     {1'd0,  7'd48}: s1rd4 <= 80;
	     {1'd0,  7'd49}: s1rd4 <= 81;
	     {1'd0,  7'd50}: s1rd4 <= 82;
	     {1'd0,  7'd51}: s1rd4 <= 83;
	     {1'd0,  7'd52}: s1rd4 <= 84;
	     {1'd0,  7'd53}: s1rd4 <= 85;
	     {1'd0,  7'd54}: s1rd4 <= 86;
	     {1'd0,  7'd55}: s1rd4 <= 87;
	     {1'd0,  7'd56}: s1rd4 <= 88;
	     {1'd0,  7'd57}: s1rd4 <= 89;
	     {1'd0,  7'd58}: s1rd4 <= 90;
	     {1'd0,  7'd59}: s1rd4 <= 91;
	     {1'd0,  7'd60}: s1rd4 <= 92;
	     {1'd0,  7'd61}: s1rd4 <= 93;
	     {1'd0,  7'd62}: s1rd4 <= 94;
	     {1'd0,  7'd63}: s1rd4 <= 95;
	     {1'd0,  7'd64}: s1rd4 <= 32;
	     {1'd0,  7'd65}: s1rd4 <= 33;
	     {1'd0,  7'd66}: s1rd4 <= 34;
	     {1'd0,  7'd67}: s1rd4 <= 35;
	     {1'd0,  7'd68}: s1rd4 <= 36;
	     {1'd0,  7'd69}: s1rd4 <= 37;
	     {1'd0,  7'd70}: s1rd4 <= 38;
	     {1'd0,  7'd71}: s1rd4 <= 39;
	     {1'd0,  7'd72}: s1rd4 <= 40;
	     {1'd0,  7'd73}: s1rd4 <= 41;
	     {1'd0,  7'd74}: s1rd4 <= 42;
	     {1'd0,  7'd75}: s1rd4 <= 43;
	     {1'd0,  7'd76}: s1rd4 <= 44;
	     {1'd0,  7'd77}: s1rd4 <= 45;
	     {1'd0,  7'd78}: s1rd4 <= 46;
	     {1'd0,  7'd79}: s1rd4 <= 47;
	     {1'd0,  7'd80}: s1rd4 <= 48;
	     {1'd0,  7'd81}: s1rd4 <= 49;
	     {1'd0,  7'd82}: s1rd4 <= 50;
	     {1'd0,  7'd83}: s1rd4 <= 51;
	     {1'd0,  7'd84}: s1rd4 <= 52;
	     {1'd0,  7'd85}: s1rd4 <= 53;
	     {1'd0,  7'd86}: s1rd4 <= 54;
	     {1'd0,  7'd87}: s1rd4 <= 55;
	     {1'd0,  7'd88}: s1rd4 <= 56;
	     {1'd0,  7'd89}: s1rd4 <= 57;
	     {1'd0,  7'd90}: s1rd4 <= 58;
	     {1'd0,  7'd91}: s1rd4 <= 59;
	     {1'd0,  7'd92}: s1rd4 <= 60;
	     {1'd0,  7'd93}: s1rd4 <= 61;
	     {1'd0,  7'd94}: s1rd4 <= 62;
	     {1'd0,  7'd95}: s1rd4 <= 63;
	     {1'd0,  7'd96}: s1rd4 <= 0;
	     {1'd0,  7'd97}: s1rd4 <= 1;
	     {1'd0,  7'd98}: s1rd4 <= 2;
	     {1'd0,  7'd99}: s1rd4 <= 3;
	     {1'd0,  7'd100}: s1rd4 <= 4;
	     {1'd0,  7'd101}: s1rd4 <= 5;
	     {1'd0,  7'd102}: s1rd4 <= 6;
	     {1'd0,  7'd103}: s1rd4 <= 7;
	     {1'd0,  7'd104}: s1rd4 <= 8;
	     {1'd0,  7'd105}: s1rd4 <= 9;
	     {1'd0,  7'd106}: s1rd4 <= 10;
	     {1'd0,  7'd107}: s1rd4 <= 11;
	     {1'd0,  7'd108}: s1rd4 <= 12;
	     {1'd0,  7'd109}: s1rd4 <= 13;
	     {1'd0,  7'd110}: s1rd4 <= 14;
	     {1'd0,  7'd111}: s1rd4 <= 15;
	     {1'd0,  7'd112}: s1rd4 <= 16;
	     {1'd0,  7'd113}: s1rd4 <= 17;
	     {1'd0,  7'd114}: s1rd4 <= 18;
	     {1'd0,  7'd115}: s1rd4 <= 19;
	     {1'd0,  7'd116}: s1rd4 <= 20;
	     {1'd0,  7'd117}: s1rd4 <= 21;
	     {1'd0,  7'd118}: s1rd4 <= 22;
	     {1'd0,  7'd119}: s1rd4 <= 23;
	     {1'd0,  7'd120}: s1rd4 <= 24;
	     {1'd0,  7'd121}: s1rd4 <= 25;
	     {1'd0,  7'd122}: s1rd4 <= 26;
	     {1'd0,  7'd123}: s1rd4 <= 27;
	     {1'd0,  7'd124}: s1rd4 <= 28;
	     {1'd0,  7'd125}: s1rd4 <= 29;
	     {1'd0,  7'd126}: s1rd4 <= 30;
	     {1'd0,  7'd127}: s1rd4 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd5 <= 64;
	     {1'd0,  7'd1}: s1rd5 <= 65;
	     {1'd0,  7'd2}: s1rd5 <= 66;
	     {1'd0,  7'd3}: s1rd5 <= 67;
	     {1'd0,  7'd4}: s1rd5 <= 68;
	     {1'd0,  7'd5}: s1rd5 <= 69;
	     {1'd0,  7'd6}: s1rd5 <= 70;
	     {1'd0,  7'd7}: s1rd5 <= 71;
	     {1'd0,  7'd8}: s1rd5 <= 72;
	     {1'd0,  7'd9}: s1rd5 <= 73;
	     {1'd0,  7'd10}: s1rd5 <= 74;
	     {1'd0,  7'd11}: s1rd5 <= 75;
	     {1'd0,  7'd12}: s1rd5 <= 76;
	     {1'd0,  7'd13}: s1rd5 <= 77;
	     {1'd0,  7'd14}: s1rd5 <= 78;
	     {1'd0,  7'd15}: s1rd5 <= 79;
	     {1'd0,  7'd16}: s1rd5 <= 80;
	     {1'd0,  7'd17}: s1rd5 <= 81;
	     {1'd0,  7'd18}: s1rd5 <= 82;
	     {1'd0,  7'd19}: s1rd5 <= 83;
	     {1'd0,  7'd20}: s1rd5 <= 84;
	     {1'd0,  7'd21}: s1rd5 <= 85;
	     {1'd0,  7'd22}: s1rd5 <= 86;
	     {1'd0,  7'd23}: s1rd5 <= 87;
	     {1'd0,  7'd24}: s1rd5 <= 88;
	     {1'd0,  7'd25}: s1rd5 <= 89;
	     {1'd0,  7'd26}: s1rd5 <= 90;
	     {1'd0,  7'd27}: s1rd5 <= 91;
	     {1'd0,  7'd28}: s1rd5 <= 92;
	     {1'd0,  7'd29}: s1rd5 <= 93;
	     {1'd0,  7'd30}: s1rd5 <= 94;
	     {1'd0,  7'd31}: s1rd5 <= 95;
	     {1'd0,  7'd32}: s1rd5 <= 96;
	     {1'd0,  7'd33}: s1rd5 <= 97;
	     {1'd0,  7'd34}: s1rd5 <= 98;
	     {1'd0,  7'd35}: s1rd5 <= 99;
	     {1'd0,  7'd36}: s1rd5 <= 100;
	     {1'd0,  7'd37}: s1rd5 <= 101;
	     {1'd0,  7'd38}: s1rd5 <= 102;
	     {1'd0,  7'd39}: s1rd5 <= 103;
	     {1'd0,  7'd40}: s1rd5 <= 104;
	     {1'd0,  7'd41}: s1rd5 <= 105;
	     {1'd0,  7'd42}: s1rd5 <= 106;
	     {1'd0,  7'd43}: s1rd5 <= 107;
	     {1'd0,  7'd44}: s1rd5 <= 108;
	     {1'd0,  7'd45}: s1rd5 <= 109;
	     {1'd0,  7'd46}: s1rd5 <= 110;
	     {1'd0,  7'd47}: s1rd5 <= 111;
	     {1'd0,  7'd48}: s1rd5 <= 112;
	     {1'd0,  7'd49}: s1rd5 <= 113;
	     {1'd0,  7'd50}: s1rd5 <= 114;
	     {1'd0,  7'd51}: s1rd5 <= 115;
	     {1'd0,  7'd52}: s1rd5 <= 116;
	     {1'd0,  7'd53}: s1rd5 <= 117;
	     {1'd0,  7'd54}: s1rd5 <= 118;
	     {1'd0,  7'd55}: s1rd5 <= 119;
	     {1'd0,  7'd56}: s1rd5 <= 120;
	     {1'd0,  7'd57}: s1rd5 <= 121;
	     {1'd0,  7'd58}: s1rd5 <= 122;
	     {1'd0,  7'd59}: s1rd5 <= 123;
	     {1'd0,  7'd60}: s1rd5 <= 124;
	     {1'd0,  7'd61}: s1rd5 <= 125;
	     {1'd0,  7'd62}: s1rd5 <= 126;
	     {1'd0,  7'd63}: s1rd5 <= 127;
	     {1'd0,  7'd64}: s1rd5 <= 0;
	     {1'd0,  7'd65}: s1rd5 <= 1;
	     {1'd0,  7'd66}: s1rd5 <= 2;
	     {1'd0,  7'd67}: s1rd5 <= 3;
	     {1'd0,  7'd68}: s1rd5 <= 4;
	     {1'd0,  7'd69}: s1rd5 <= 5;
	     {1'd0,  7'd70}: s1rd5 <= 6;
	     {1'd0,  7'd71}: s1rd5 <= 7;
	     {1'd0,  7'd72}: s1rd5 <= 8;
	     {1'd0,  7'd73}: s1rd5 <= 9;
	     {1'd0,  7'd74}: s1rd5 <= 10;
	     {1'd0,  7'd75}: s1rd5 <= 11;
	     {1'd0,  7'd76}: s1rd5 <= 12;
	     {1'd0,  7'd77}: s1rd5 <= 13;
	     {1'd0,  7'd78}: s1rd5 <= 14;
	     {1'd0,  7'd79}: s1rd5 <= 15;
	     {1'd0,  7'd80}: s1rd5 <= 16;
	     {1'd0,  7'd81}: s1rd5 <= 17;
	     {1'd0,  7'd82}: s1rd5 <= 18;
	     {1'd0,  7'd83}: s1rd5 <= 19;
	     {1'd0,  7'd84}: s1rd5 <= 20;
	     {1'd0,  7'd85}: s1rd5 <= 21;
	     {1'd0,  7'd86}: s1rd5 <= 22;
	     {1'd0,  7'd87}: s1rd5 <= 23;
	     {1'd0,  7'd88}: s1rd5 <= 24;
	     {1'd0,  7'd89}: s1rd5 <= 25;
	     {1'd0,  7'd90}: s1rd5 <= 26;
	     {1'd0,  7'd91}: s1rd5 <= 27;
	     {1'd0,  7'd92}: s1rd5 <= 28;
	     {1'd0,  7'd93}: s1rd5 <= 29;
	     {1'd0,  7'd94}: s1rd5 <= 30;
	     {1'd0,  7'd95}: s1rd5 <= 31;
	     {1'd0,  7'd96}: s1rd5 <= 32;
	     {1'd0,  7'd97}: s1rd5 <= 33;
	     {1'd0,  7'd98}: s1rd5 <= 34;
	     {1'd0,  7'd99}: s1rd5 <= 35;
	     {1'd0,  7'd100}: s1rd5 <= 36;
	     {1'd0,  7'd101}: s1rd5 <= 37;
	     {1'd0,  7'd102}: s1rd5 <= 38;
	     {1'd0,  7'd103}: s1rd5 <= 39;
	     {1'd0,  7'd104}: s1rd5 <= 40;
	     {1'd0,  7'd105}: s1rd5 <= 41;
	     {1'd0,  7'd106}: s1rd5 <= 42;
	     {1'd0,  7'd107}: s1rd5 <= 43;
	     {1'd0,  7'd108}: s1rd5 <= 44;
	     {1'd0,  7'd109}: s1rd5 <= 45;
	     {1'd0,  7'd110}: s1rd5 <= 46;
	     {1'd0,  7'd111}: s1rd5 <= 47;
	     {1'd0,  7'd112}: s1rd5 <= 48;
	     {1'd0,  7'd113}: s1rd5 <= 49;
	     {1'd0,  7'd114}: s1rd5 <= 50;
	     {1'd0,  7'd115}: s1rd5 <= 51;
	     {1'd0,  7'd116}: s1rd5 <= 52;
	     {1'd0,  7'd117}: s1rd5 <= 53;
	     {1'd0,  7'd118}: s1rd5 <= 54;
	     {1'd0,  7'd119}: s1rd5 <= 55;
	     {1'd0,  7'd120}: s1rd5 <= 56;
	     {1'd0,  7'd121}: s1rd5 <= 57;
	     {1'd0,  7'd122}: s1rd5 <= 58;
	     {1'd0,  7'd123}: s1rd5 <= 59;
	     {1'd0,  7'd124}: s1rd5 <= 60;
	     {1'd0,  7'd125}: s1rd5 <= 61;
	     {1'd0,  7'd126}: s1rd5 <= 62;
	     {1'd0,  7'd127}: s1rd5 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd6 <= 32;
	     {1'd0,  7'd1}: s1rd6 <= 33;
	     {1'd0,  7'd2}: s1rd6 <= 34;
	     {1'd0,  7'd3}: s1rd6 <= 35;
	     {1'd0,  7'd4}: s1rd6 <= 36;
	     {1'd0,  7'd5}: s1rd6 <= 37;
	     {1'd0,  7'd6}: s1rd6 <= 38;
	     {1'd0,  7'd7}: s1rd6 <= 39;
	     {1'd0,  7'd8}: s1rd6 <= 40;
	     {1'd0,  7'd9}: s1rd6 <= 41;
	     {1'd0,  7'd10}: s1rd6 <= 42;
	     {1'd0,  7'd11}: s1rd6 <= 43;
	     {1'd0,  7'd12}: s1rd6 <= 44;
	     {1'd0,  7'd13}: s1rd6 <= 45;
	     {1'd0,  7'd14}: s1rd6 <= 46;
	     {1'd0,  7'd15}: s1rd6 <= 47;
	     {1'd0,  7'd16}: s1rd6 <= 48;
	     {1'd0,  7'd17}: s1rd6 <= 49;
	     {1'd0,  7'd18}: s1rd6 <= 50;
	     {1'd0,  7'd19}: s1rd6 <= 51;
	     {1'd0,  7'd20}: s1rd6 <= 52;
	     {1'd0,  7'd21}: s1rd6 <= 53;
	     {1'd0,  7'd22}: s1rd6 <= 54;
	     {1'd0,  7'd23}: s1rd6 <= 55;
	     {1'd0,  7'd24}: s1rd6 <= 56;
	     {1'd0,  7'd25}: s1rd6 <= 57;
	     {1'd0,  7'd26}: s1rd6 <= 58;
	     {1'd0,  7'd27}: s1rd6 <= 59;
	     {1'd0,  7'd28}: s1rd6 <= 60;
	     {1'd0,  7'd29}: s1rd6 <= 61;
	     {1'd0,  7'd30}: s1rd6 <= 62;
	     {1'd0,  7'd31}: s1rd6 <= 63;
	     {1'd0,  7'd32}: s1rd6 <= 0;
	     {1'd0,  7'd33}: s1rd6 <= 1;
	     {1'd0,  7'd34}: s1rd6 <= 2;
	     {1'd0,  7'd35}: s1rd6 <= 3;
	     {1'd0,  7'd36}: s1rd6 <= 4;
	     {1'd0,  7'd37}: s1rd6 <= 5;
	     {1'd0,  7'd38}: s1rd6 <= 6;
	     {1'd0,  7'd39}: s1rd6 <= 7;
	     {1'd0,  7'd40}: s1rd6 <= 8;
	     {1'd0,  7'd41}: s1rd6 <= 9;
	     {1'd0,  7'd42}: s1rd6 <= 10;
	     {1'd0,  7'd43}: s1rd6 <= 11;
	     {1'd0,  7'd44}: s1rd6 <= 12;
	     {1'd0,  7'd45}: s1rd6 <= 13;
	     {1'd0,  7'd46}: s1rd6 <= 14;
	     {1'd0,  7'd47}: s1rd6 <= 15;
	     {1'd0,  7'd48}: s1rd6 <= 16;
	     {1'd0,  7'd49}: s1rd6 <= 17;
	     {1'd0,  7'd50}: s1rd6 <= 18;
	     {1'd0,  7'd51}: s1rd6 <= 19;
	     {1'd0,  7'd52}: s1rd6 <= 20;
	     {1'd0,  7'd53}: s1rd6 <= 21;
	     {1'd0,  7'd54}: s1rd6 <= 22;
	     {1'd0,  7'd55}: s1rd6 <= 23;
	     {1'd0,  7'd56}: s1rd6 <= 24;
	     {1'd0,  7'd57}: s1rd6 <= 25;
	     {1'd0,  7'd58}: s1rd6 <= 26;
	     {1'd0,  7'd59}: s1rd6 <= 27;
	     {1'd0,  7'd60}: s1rd6 <= 28;
	     {1'd0,  7'd61}: s1rd6 <= 29;
	     {1'd0,  7'd62}: s1rd6 <= 30;
	     {1'd0,  7'd63}: s1rd6 <= 31;
	     {1'd0,  7'd64}: s1rd6 <= 96;
	     {1'd0,  7'd65}: s1rd6 <= 97;
	     {1'd0,  7'd66}: s1rd6 <= 98;
	     {1'd0,  7'd67}: s1rd6 <= 99;
	     {1'd0,  7'd68}: s1rd6 <= 100;
	     {1'd0,  7'd69}: s1rd6 <= 101;
	     {1'd0,  7'd70}: s1rd6 <= 102;
	     {1'd0,  7'd71}: s1rd6 <= 103;
	     {1'd0,  7'd72}: s1rd6 <= 104;
	     {1'd0,  7'd73}: s1rd6 <= 105;
	     {1'd0,  7'd74}: s1rd6 <= 106;
	     {1'd0,  7'd75}: s1rd6 <= 107;
	     {1'd0,  7'd76}: s1rd6 <= 108;
	     {1'd0,  7'd77}: s1rd6 <= 109;
	     {1'd0,  7'd78}: s1rd6 <= 110;
	     {1'd0,  7'd79}: s1rd6 <= 111;
	     {1'd0,  7'd80}: s1rd6 <= 112;
	     {1'd0,  7'd81}: s1rd6 <= 113;
	     {1'd0,  7'd82}: s1rd6 <= 114;
	     {1'd0,  7'd83}: s1rd6 <= 115;
	     {1'd0,  7'd84}: s1rd6 <= 116;
	     {1'd0,  7'd85}: s1rd6 <= 117;
	     {1'd0,  7'd86}: s1rd6 <= 118;
	     {1'd0,  7'd87}: s1rd6 <= 119;
	     {1'd0,  7'd88}: s1rd6 <= 120;
	     {1'd0,  7'd89}: s1rd6 <= 121;
	     {1'd0,  7'd90}: s1rd6 <= 122;
	     {1'd0,  7'd91}: s1rd6 <= 123;
	     {1'd0,  7'd92}: s1rd6 <= 124;
	     {1'd0,  7'd93}: s1rd6 <= 125;
	     {1'd0,  7'd94}: s1rd6 <= 126;
	     {1'd0,  7'd95}: s1rd6 <= 127;
	     {1'd0,  7'd96}: s1rd6 <= 64;
	     {1'd0,  7'd97}: s1rd6 <= 65;
	     {1'd0,  7'd98}: s1rd6 <= 66;
	     {1'd0,  7'd99}: s1rd6 <= 67;
	     {1'd0,  7'd100}: s1rd6 <= 68;
	     {1'd0,  7'd101}: s1rd6 <= 69;
	     {1'd0,  7'd102}: s1rd6 <= 70;
	     {1'd0,  7'd103}: s1rd6 <= 71;
	     {1'd0,  7'd104}: s1rd6 <= 72;
	     {1'd0,  7'd105}: s1rd6 <= 73;
	     {1'd0,  7'd106}: s1rd6 <= 74;
	     {1'd0,  7'd107}: s1rd6 <= 75;
	     {1'd0,  7'd108}: s1rd6 <= 76;
	     {1'd0,  7'd109}: s1rd6 <= 77;
	     {1'd0,  7'd110}: s1rd6 <= 78;
	     {1'd0,  7'd111}: s1rd6 <= 79;
	     {1'd0,  7'd112}: s1rd6 <= 80;
	     {1'd0,  7'd113}: s1rd6 <= 81;
	     {1'd0,  7'd114}: s1rd6 <= 82;
	     {1'd0,  7'd115}: s1rd6 <= 83;
	     {1'd0,  7'd116}: s1rd6 <= 84;
	     {1'd0,  7'd117}: s1rd6 <= 85;
	     {1'd0,  7'd118}: s1rd6 <= 86;
	     {1'd0,  7'd119}: s1rd6 <= 87;
	     {1'd0,  7'd120}: s1rd6 <= 88;
	     {1'd0,  7'd121}: s1rd6 <= 89;
	     {1'd0,  7'd122}: s1rd6 <= 90;
	     {1'd0,  7'd123}: s1rd6 <= 91;
	     {1'd0,  7'd124}: s1rd6 <= 92;
	     {1'd0,  7'd125}: s1rd6 <= 93;
	     {1'd0,  7'd126}: s1rd6 <= 94;
	     {1'd0,  7'd127}: s1rd6 <= 95;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm52_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd7 <= 0;
	     {1'd0,  7'd1}: s1rd7 <= 1;
	     {1'd0,  7'd2}: s1rd7 <= 2;
	     {1'd0,  7'd3}: s1rd7 <= 3;
	     {1'd0,  7'd4}: s1rd7 <= 4;
	     {1'd0,  7'd5}: s1rd7 <= 5;
	     {1'd0,  7'd6}: s1rd7 <= 6;
	     {1'd0,  7'd7}: s1rd7 <= 7;
	     {1'd0,  7'd8}: s1rd7 <= 8;
	     {1'd0,  7'd9}: s1rd7 <= 9;
	     {1'd0,  7'd10}: s1rd7 <= 10;
	     {1'd0,  7'd11}: s1rd7 <= 11;
	     {1'd0,  7'd12}: s1rd7 <= 12;
	     {1'd0,  7'd13}: s1rd7 <= 13;
	     {1'd0,  7'd14}: s1rd7 <= 14;
	     {1'd0,  7'd15}: s1rd7 <= 15;
	     {1'd0,  7'd16}: s1rd7 <= 16;
	     {1'd0,  7'd17}: s1rd7 <= 17;
	     {1'd0,  7'd18}: s1rd7 <= 18;
	     {1'd0,  7'd19}: s1rd7 <= 19;
	     {1'd0,  7'd20}: s1rd7 <= 20;
	     {1'd0,  7'd21}: s1rd7 <= 21;
	     {1'd0,  7'd22}: s1rd7 <= 22;
	     {1'd0,  7'd23}: s1rd7 <= 23;
	     {1'd0,  7'd24}: s1rd7 <= 24;
	     {1'd0,  7'd25}: s1rd7 <= 25;
	     {1'd0,  7'd26}: s1rd7 <= 26;
	     {1'd0,  7'd27}: s1rd7 <= 27;
	     {1'd0,  7'd28}: s1rd7 <= 28;
	     {1'd0,  7'd29}: s1rd7 <= 29;
	     {1'd0,  7'd30}: s1rd7 <= 30;
	     {1'd0,  7'd31}: s1rd7 <= 31;
	     {1'd0,  7'd32}: s1rd7 <= 32;
	     {1'd0,  7'd33}: s1rd7 <= 33;
	     {1'd0,  7'd34}: s1rd7 <= 34;
	     {1'd0,  7'd35}: s1rd7 <= 35;
	     {1'd0,  7'd36}: s1rd7 <= 36;
	     {1'd0,  7'd37}: s1rd7 <= 37;
	     {1'd0,  7'd38}: s1rd7 <= 38;
	     {1'd0,  7'd39}: s1rd7 <= 39;
	     {1'd0,  7'd40}: s1rd7 <= 40;
	     {1'd0,  7'd41}: s1rd7 <= 41;
	     {1'd0,  7'd42}: s1rd7 <= 42;
	     {1'd0,  7'd43}: s1rd7 <= 43;
	     {1'd0,  7'd44}: s1rd7 <= 44;
	     {1'd0,  7'd45}: s1rd7 <= 45;
	     {1'd0,  7'd46}: s1rd7 <= 46;
	     {1'd0,  7'd47}: s1rd7 <= 47;
	     {1'd0,  7'd48}: s1rd7 <= 48;
	     {1'd0,  7'd49}: s1rd7 <= 49;
	     {1'd0,  7'd50}: s1rd7 <= 50;
	     {1'd0,  7'd51}: s1rd7 <= 51;
	     {1'd0,  7'd52}: s1rd7 <= 52;
	     {1'd0,  7'd53}: s1rd7 <= 53;
	     {1'd0,  7'd54}: s1rd7 <= 54;
	     {1'd0,  7'd55}: s1rd7 <= 55;
	     {1'd0,  7'd56}: s1rd7 <= 56;
	     {1'd0,  7'd57}: s1rd7 <= 57;
	     {1'd0,  7'd58}: s1rd7 <= 58;
	     {1'd0,  7'd59}: s1rd7 <= 59;
	     {1'd0,  7'd60}: s1rd7 <= 60;
	     {1'd0,  7'd61}: s1rd7 <= 61;
	     {1'd0,  7'd62}: s1rd7 <= 62;
	     {1'd0,  7'd63}: s1rd7 <= 63;
	     {1'd0,  7'd64}: s1rd7 <= 64;
	     {1'd0,  7'd65}: s1rd7 <= 65;
	     {1'd0,  7'd66}: s1rd7 <= 66;
	     {1'd0,  7'd67}: s1rd7 <= 67;
	     {1'd0,  7'd68}: s1rd7 <= 68;
	     {1'd0,  7'd69}: s1rd7 <= 69;
	     {1'd0,  7'd70}: s1rd7 <= 70;
	     {1'd0,  7'd71}: s1rd7 <= 71;
	     {1'd0,  7'd72}: s1rd7 <= 72;
	     {1'd0,  7'd73}: s1rd7 <= 73;
	     {1'd0,  7'd74}: s1rd7 <= 74;
	     {1'd0,  7'd75}: s1rd7 <= 75;
	     {1'd0,  7'd76}: s1rd7 <= 76;
	     {1'd0,  7'd77}: s1rd7 <= 77;
	     {1'd0,  7'd78}: s1rd7 <= 78;
	     {1'd0,  7'd79}: s1rd7 <= 79;
	     {1'd0,  7'd80}: s1rd7 <= 80;
	     {1'd0,  7'd81}: s1rd7 <= 81;
	     {1'd0,  7'd82}: s1rd7 <= 82;
	     {1'd0,  7'd83}: s1rd7 <= 83;
	     {1'd0,  7'd84}: s1rd7 <= 84;
	     {1'd0,  7'd85}: s1rd7 <= 85;
	     {1'd0,  7'd86}: s1rd7 <= 86;
	     {1'd0,  7'd87}: s1rd7 <= 87;
	     {1'd0,  7'd88}: s1rd7 <= 88;
	     {1'd0,  7'd89}: s1rd7 <= 89;
	     {1'd0,  7'd90}: s1rd7 <= 90;
	     {1'd0,  7'd91}: s1rd7 <= 91;
	     {1'd0,  7'd92}: s1rd7 <= 92;
	     {1'd0,  7'd93}: s1rd7 <= 93;
	     {1'd0,  7'd94}: s1rd7 <= 94;
	     {1'd0,  7'd95}: s1rd7 <= 95;
	     {1'd0,  7'd96}: s1rd7 <= 96;
	     {1'd0,  7'd97}: s1rd7 <= 97;
	     {1'd0,  7'd98}: s1rd7 <= 98;
	     {1'd0,  7'd99}: s1rd7 <= 99;
	     {1'd0,  7'd100}: s1rd7 <= 100;
	     {1'd0,  7'd101}: s1rd7 <= 101;
	     {1'd0,  7'd102}: s1rd7 <= 102;
	     {1'd0,  7'd103}: s1rd7 <= 103;
	     {1'd0,  7'd104}: s1rd7 <= 104;
	     {1'd0,  7'd105}: s1rd7 <= 105;
	     {1'd0,  7'd106}: s1rd7 <= 106;
	     {1'd0,  7'd107}: s1rd7 <= 107;
	     {1'd0,  7'd108}: s1rd7 <= 108;
	     {1'd0,  7'd109}: s1rd7 <= 109;
	     {1'd0,  7'd110}: s1rd7 <= 110;
	     {1'd0,  7'd111}: s1rd7 <= 111;
	     {1'd0,  7'd112}: s1rd7 <= 112;
	     {1'd0,  7'd113}: s1rd7 <= 113;
	     {1'd0,  7'd114}: s1rd7 <= 114;
	     {1'd0,  7'd115}: s1rd7 <= 115;
	     {1'd0,  7'd116}: s1rd7 <= 116;
	     {1'd0,  7'd117}: s1rd7 <= 117;
	     {1'd0,  7'd118}: s1rd7 <= 118;
	     {1'd0,  7'd119}: s1rd7 <= 119;
	     {1'd0,  7'd120}: s1rd7 <= 120;
	     {1'd0,  7'd121}: s1rd7 <= 121;
	     {1'd0,  7'd122}: s1rd7 <= 122;
	     {1'd0,  7'd123}: s1rd7 <= 123;
	     {1'd0,  7'd124}: s1rd7 <= 124;
	     {1'd0,  7'd125}: s1rd7 <= 125;
	     {1'd0,  7'd126}: s1rd7 <= 126;
	     {1'd0,  7'd127}: s1rd7 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet44605 sw(tm52_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 96;
	      {1'd0, 7'd1}: s2wr0 <= 97;
	      {1'd0, 7'd2}: s2wr0 <= 98;
	      {1'd0, 7'd3}: s2wr0 <= 99;
	      {1'd0, 7'd4}: s2wr0 <= 100;
	      {1'd0, 7'd5}: s2wr0 <= 101;
	      {1'd0, 7'd6}: s2wr0 <= 102;
	      {1'd0, 7'd7}: s2wr0 <= 103;
	      {1'd0, 7'd8}: s2wr0 <= 104;
	      {1'd0, 7'd9}: s2wr0 <= 105;
	      {1'd0, 7'd10}: s2wr0 <= 106;
	      {1'd0, 7'd11}: s2wr0 <= 107;
	      {1'd0, 7'd12}: s2wr0 <= 108;
	      {1'd0, 7'd13}: s2wr0 <= 109;
	      {1'd0, 7'd14}: s2wr0 <= 110;
	      {1'd0, 7'd15}: s2wr0 <= 111;
	      {1'd0, 7'd16}: s2wr0 <= 112;
	      {1'd0, 7'd17}: s2wr0 <= 113;
	      {1'd0, 7'd18}: s2wr0 <= 114;
	      {1'd0, 7'd19}: s2wr0 <= 115;
	      {1'd0, 7'd20}: s2wr0 <= 116;
	      {1'd0, 7'd21}: s2wr0 <= 117;
	      {1'd0, 7'd22}: s2wr0 <= 118;
	      {1'd0, 7'd23}: s2wr0 <= 119;
	      {1'd0, 7'd24}: s2wr0 <= 120;
	      {1'd0, 7'd25}: s2wr0 <= 121;
	      {1'd0, 7'd26}: s2wr0 <= 122;
	      {1'd0, 7'd27}: s2wr0 <= 123;
	      {1'd0, 7'd28}: s2wr0 <= 124;
	      {1'd0, 7'd29}: s2wr0 <= 125;
	      {1'd0, 7'd30}: s2wr0 <= 126;
	      {1'd0, 7'd31}: s2wr0 <= 127;
	      {1'd0, 7'd32}: s2wr0 <= 64;
	      {1'd0, 7'd33}: s2wr0 <= 65;
	      {1'd0, 7'd34}: s2wr0 <= 66;
	      {1'd0, 7'd35}: s2wr0 <= 67;
	      {1'd0, 7'd36}: s2wr0 <= 68;
	      {1'd0, 7'd37}: s2wr0 <= 69;
	      {1'd0, 7'd38}: s2wr0 <= 70;
	      {1'd0, 7'd39}: s2wr0 <= 71;
	      {1'd0, 7'd40}: s2wr0 <= 72;
	      {1'd0, 7'd41}: s2wr0 <= 73;
	      {1'd0, 7'd42}: s2wr0 <= 74;
	      {1'd0, 7'd43}: s2wr0 <= 75;
	      {1'd0, 7'd44}: s2wr0 <= 76;
	      {1'd0, 7'd45}: s2wr0 <= 77;
	      {1'd0, 7'd46}: s2wr0 <= 78;
	      {1'd0, 7'd47}: s2wr0 <= 79;
	      {1'd0, 7'd48}: s2wr0 <= 80;
	      {1'd0, 7'd49}: s2wr0 <= 81;
	      {1'd0, 7'd50}: s2wr0 <= 82;
	      {1'd0, 7'd51}: s2wr0 <= 83;
	      {1'd0, 7'd52}: s2wr0 <= 84;
	      {1'd0, 7'd53}: s2wr0 <= 85;
	      {1'd0, 7'd54}: s2wr0 <= 86;
	      {1'd0, 7'd55}: s2wr0 <= 87;
	      {1'd0, 7'd56}: s2wr0 <= 88;
	      {1'd0, 7'd57}: s2wr0 <= 89;
	      {1'd0, 7'd58}: s2wr0 <= 90;
	      {1'd0, 7'd59}: s2wr0 <= 91;
	      {1'd0, 7'd60}: s2wr0 <= 92;
	      {1'd0, 7'd61}: s2wr0 <= 93;
	      {1'd0, 7'd62}: s2wr0 <= 94;
	      {1'd0, 7'd63}: s2wr0 <= 95;
	      {1'd0, 7'd64}: s2wr0 <= 32;
	      {1'd0, 7'd65}: s2wr0 <= 33;
	      {1'd0, 7'd66}: s2wr0 <= 34;
	      {1'd0, 7'd67}: s2wr0 <= 35;
	      {1'd0, 7'd68}: s2wr0 <= 36;
	      {1'd0, 7'd69}: s2wr0 <= 37;
	      {1'd0, 7'd70}: s2wr0 <= 38;
	      {1'd0, 7'd71}: s2wr0 <= 39;
	      {1'd0, 7'd72}: s2wr0 <= 40;
	      {1'd0, 7'd73}: s2wr0 <= 41;
	      {1'd0, 7'd74}: s2wr0 <= 42;
	      {1'd0, 7'd75}: s2wr0 <= 43;
	      {1'd0, 7'd76}: s2wr0 <= 44;
	      {1'd0, 7'd77}: s2wr0 <= 45;
	      {1'd0, 7'd78}: s2wr0 <= 46;
	      {1'd0, 7'd79}: s2wr0 <= 47;
	      {1'd0, 7'd80}: s2wr0 <= 48;
	      {1'd0, 7'd81}: s2wr0 <= 49;
	      {1'd0, 7'd82}: s2wr0 <= 50;
	      {1'd0, 7'd83}: s2wr0 <= 51;
	      {1'd0, 7'd84}: s2wr0 <= 52;
	      {1'd0, 7'd85}: s2wr0 <= 53;
	      {1'd0, 7'd86}: s2wr0 <= 54;
	      {1'd0, 7'd87}: s2wr0 <= 55;
	      {1'd0, 7'd88}: s2wr0 <= 56;
	      {1'd0, 7'd89}: s2wr0 <= 57;
	      {1'd0, 7'd90}: s2wr0 <= 58;
	      {1'd0, 7'd91}: s2wr0 <= 59;
	      {1'd0, 7'd92}: s2wr0 <= 60;
	      {1'd0, 7'd93}: s2wr0 <= 61;
	      {1'd0, 7'd94}: s2wr0 <= 62;
	      {1'd0, 7'd95}: s2wr0 <= 63;
	      {1'd0, 7'd96}: s2wr0 <= 0;
	      {1'd0, 7'd97}: s2wr0 <= 1;
	      {1'd0, 7'd98}: s2wr0 <= 2;
	      {1'd0, 7'd99}: s2wr0 <= 3;
	      {1'd0, 7'd100}: s2wr0 <= 4;
	      {1'd0, 7'd101}: s2wr0 <= 5;
	      {1'd0, 7'd102}: s2wr0 <= 6;
	      {1'd0, 7'd103}: s2wr0 <= 7;
	      {1'd0, 7'd104}: s2wr0 <= 8;
	      {1'd0, 7'd105}: s2wr0 <= 9;
	      {1'd0, 7'd106}: s2wr0 <= 10;
	      {1'd0, 7'd107}: s2wr0 <= 11;
	      {1'd0, 7'd108}: s2wr0 <= 12;
	      {1'd0, 7'd109}: s2wr0 <= 13;
	      {1'd0, 7'd110}: s2wr0 <= 14;
	      {1'd0, 7'd111}: s2wr0 <= 15;
	      {1'd0, 7'd112}: s2wr0 <= 16;
	      {1'd0, 7'd113}: s2wr0 <= 17;
	      {1'd0, 7'd114}: s2wr0 <= 18;
	      {1'd0, 7'd115}: s2wr0 <= 19;
	      {1'd0, 7'd116}: s2wr0 <= 20;
	      {1'd0, 7'd117}: s2wr0 <= 21;
	      {1'd0, 7'd118}: s2wr0 <= 22;
	      {1'd0, 7'd119}: s2wr0 <= 23;
	      {1'd0, 7'd120}: s2wr0 <= 24;
	      {1'd0, 7'd121}: s2wr0 <= 25;
	      {1'd0, 7'd122}: s2wr0 <= 26;
	      {1'd0, 7'd123}: s2wr0 <= 27;
	      {1'd0, 7'd124}: s2wr0 <= 28;
	      {1'd0, 7'd125}: s2wr0 <= 29;
	      {1'd0, 7'd126}: s2wr0 <= 30;
	      {1'd0, 7'd127}: s2wr0 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 64;
	      {1'd0, 7'd1}: s2wr1 <= 65;
	      {1'd0, 7'd2}: s2wr1 <= 66;
	      {1'd0, 7'd3}: s2wr1 <= 67;
	      {1'd0, 7'd4}: s2wr1 <= 68;
	      {1'd0, 7'd5}: s2wr1 <= 69;
	      {1'd0, 7'd6}: s2wr1 <= 70;
	      {1'd0, 7'd7}: s2wr1 <= 71;
	      {1'd0, 7'd8}: s2wr1 <= 72;
	      {1'd0, 7'd9}: s2wr1 <= 73;
	      {1'd0, 7'd10}: s2wr1 <= 74;
	      {1'd0, 7'd11}: s2wr1 <= 75;
	      {1'd0, 7'd12}: s2wr1 <= 76;
	      {1'd0, 7'd13}: s2wr1 <= 77;
	      {1'd0, 7'd14}: s2wr1 <= 78;
	      {1'd0, 7'd15}: s2wr1 <= 79;
	      {1'd0, 7'd16}: s2wr1 <= 80;
	      {1'd0, 7'd17}: s2wr1 <= 81;
	      {1'd0, 7'd18}: s2wr1 <= 82;
	      {1'd0, 7'd19}: s2wr1 <= 83;
	      {1'd0, 7'd20}: s2wr1 <= 84;
	      {1'd0, 7'd21}: s2wr1 <= 85;
	      {1'd0, 7'd22}: s2wr1 <= 86;
	      {1'd0, 7'd23}: s2wr1 <= 87;
	      {1'd0, 7'd24}: s2wr1 <= 88;
	      {1'd0, 7'd25}: s2wr1 <= 89;
	      {1'd0, 7'd26}: s2wr1 <= 90;
	      {1'd0, 7'd27}: s2wr1 <= 91;
	      {1'd0, 7'd28}: s2wr1 <= 92;
	      {1'd0, 7'd29}: s2wr1 <= 93;
	      {1'd0, 7'd30}: s2wr1 <= 94;
	      {1'd0, 7'd31}: s2wr1 <= 95;
	      {1'd0, 7'd32}: s2wr1 <= 96;
	      {1'd0, 7'd33}: s2wr1 <= 97;
	      {1'd0, 7'd34}: s2wr1 <= 98;
	      {1'd0, 7'd35}: s2wr1 <= 99;
	      {1'd0, 7'd36}: s2wr1 <= 100;
	      {1'd0, 7'd37}: s2wr1 <= 101;
	      {1'd0, 7'd38}: s2wr1 <= 102;
	      {1'd0, 7'd39}: s2wr1 <= 103;
	      {1'd0, 7'd40}: s2wr1 <= 104;
	      {1'd0, 7'd41}: s2wr1 <= 105;
	      {1'd0, 7'd42}: s2wr1 <= 106;
	      {1'd0, 7'd43}: s2wr1 <= 107;
	      {1'd0, 7'd44}: s2wr1 <= 108;
	      {1'd0, 7'd45}: s2wr1 <= 109;
	      {1'd0, 7'd46}: s2wr1 <= 110;
	      {1'd0, 7'd47}: s2wr1 <= 111;
	      {1'd0, 7'd48}: s2wr1 <= 112;
	      {1'd0, 7'd49}: s2wr1 <= 113;
	      {1'd0, 7'd50}: s2wr1 <= 114;
	      {1'd0, 7'd51}: s2wr1 <= 115;
	      {1'd0, 7'd52}: s2wr1 <= 116;
	      {1'd0, 7'd53}: s2wr1 <= 117;
	      {1'd0, 7'd54}: s2wr1 <= 118;
	      {1'd0, 7'd55}: s2wr1 <= 119;
	      {1'd0, 7'd56}: s2wr1 <= 120;
	      {1'd0, 7'd57}: s2wr1 <= 121;
	      {1'd0, 7'd58}: s2wr1 <= 122;
	      {1'd0, 7'd59}: s2wr1 <= 123;
	      {1'd0, 7'd60}: s2wr1 <= 124;
	      {1'd0, 7'd61}: s2wr1 <= 125;
	      {1'd0, 7'd62}: s2wr1 <= 126;
	      {1'd0, 7'd63}: s2wr1 <= 127;
	      {1'd0, 7'd64}: s2wr1 <= 0;
	      {1'd0, 7'd65}: s2wr1 <= 1;
	      {1'd0, 7'd66}: s2wr1 <= 2;
	      {1'd0, 7'd67}: s2wr1 <= 3;
	      {1'd0, 7'd68}: s2wr1 <= 4;
	      {1'd0, 7'd69}: s2wr1 <= 5;
	      {1'd0, 7'd70}: s2wr1 <= 6;
	      {1'd0, 7'd71}: s2wr1 <= 7;
	      {1'd0, 7'd72}: s2wr1 <= 8;
	      {1'd0, 7'd73}: s2wr1 <= 9;
	      {1'd0, 7'd74}: s2wr1 <= 10;
	      {1'd0, 7'd75}: s2wr1 <= 11;
	      {1'd0, 7'd76}: s2wr1 <= 12;
	      {1'd0, 7'd77}: s2wr1 <= 13;
	      {1'd0, 7'd78}: s2wr1 <= 14;
	      {1'd0, 7'd79}: s2wr1 <= 15;
	      {1'd0, 7'd80}: s2wr1 <= 16;
	      {1'd0, 7'd81}: s2wr1 <= 17;
	      {1'd0, 7'd82}: s2wr1 <= 18;
	      {1'd0, 7'd83}: s2wr1 <= 19;
	      {1'd0, 7'd84}: s2wr1 <= 20;
	      {1'd0, 7'd85}: s2wr1 <= 21;
	      {1'd0, 7'd86}: s2wr1 <= 22;
	      {1'd0, 7'd87}: s2wr1 <= 23;
	      {1'd0, 7'd88}: s2wr1 <= 24;
	      {1'd0, 7'd89}: s2wr1 <= 25;
	      {1'd0, 7'd90}: s2wr1 <= 26;
	      {1'd0, 7'd91}: s2wr1 <= 27;
	      {1'd0, 7'd92}: s2wr1 <= 28;
	      {1'd0, 7'd93}: s2wr1 <= 29;
	      {1'd0, 7'd94}: s2wr1 <= 30;
	      {1'd0, 7'd95}: s2wr1 <= 31;
	      {1'd0, 7'd96}: s2wr1 <= 32;
	      {1'd0, 7'd97}: s2wr1 <= 33;
	      {1'd0, 7'd98}: s2wr1 <= 34;
	      {1'd0, 7'd99}: s2wr1 <= 35;
	      {1'd0, 7'd100}: s2wr1 <= 36;
	      {1'd0, 7'd101}: s2wr1 <= 37;
	      {1'd0, 7'd102}: s2wr1 <= 38;
	      {1'd0, 7'd103}: s2wr1 <= 39;
	      {1'd0, 7'd104}: s2wr1 <= 40;
	      {1'd0, 7'd105}: s2wr1 <= 41;
	      {1'd0, 7'd106}: s2wr1 <= 42;
	      {1'd0, 7'd107}: s2wr1 <= 43;
	      {1'd0, 7'd108}: s2wr1 <= 44;
	      {1'd0, 7'd109}: s2wr1 <= 45;
	      {1'd0, 7'd110}: s2wr1 <= 46;
	      {1'd0, 7'd111}: s2wr1 <= 47;
	      {1'd0, 7'd112}: s2wr1 <= 48;
	      {1'd0, 7'd113}: s2wr1 <= 49;
	      {1'd0, 7'd114}: s2wr1 <= 50;
	      {1'd0, 7'd115}: s2wr1 <= 51;
	      {1'd0, 7'd116}: s2wr1 <= 52;
	      {1'd0, 7'd117}: s2wr1 <= 53;
	      {1'd0, 7'd118}: s2wr1 <= 54;
	      {1'd0, 7'd119}: s2wr1 <= 55;
	      {1'd0, 7'd120}: s2wr1 <= 56;
	      {1'd0, 7'd121}: s2wr1 <= 57;
	      {1'd0, 7'd122}: s2wr1 <= 58;
	      {1'd0, 7'd123}: s2wr1 <= 59;
	      {1'd0, 7'd124}: s2wr1 <= 60;
	      {1'd0, 7'd125}: s2wr1 <= 61;
	      {1'd0, 7'd126}: s2wr1 <= 62;
	      {1'd0, 7'd127}: s2wr1 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 32;
	      {1'd0, 7'd1}: s2wr2 <= 33;
	      {1'd0, 7'd2}: s2wr2 <= 34;
	      {1'd0, 7'd3}: s2wr2 <= 35;
	      {1'd0, 7'd4}: s2wr2 <= 36;
	      {1'd0, 7'd5}: s2wr2 <= 37;
	      {1'd0, 7'd6}: s2wr2 <= 38;
	      {1'd0, 7'd7}: s2wr2 <= 39;
	      {1'd0, 7'd8}: s2wr2 <= 40;
	      {1'd0, 7'd9}: s2wr2 <= 41;
	      {1'd0, 7'd10}: s2wr2 <= 42;
	      {1'd0, 7'd11}: s2wr2 <= 43;
	      {1'd0, 7'd12}: s2wr2 <= 44;
	      {1'd0, 7'd13}: s2wr2 <= 45;
	      {1'd0, 7'd14}: s2wr2 <= 46;
	      {1'd0, 7'd15}: s2wr2 <= 47;
	      {1'd0, 7'd16}: s2wr2 <= 48;
	      {1'd0, 7'd17}: s2wr2 <= 49;
	      {1'd0, 7'd18}: s2wr2 <= 50;
	      {1'd0, 7'd19}: s2wr2 <= 51;
	      {1'd0, 7'd20}: s2wr2 <= 52;
	      {1'd0, 7'd21}: s2wr2 <= 53;
	      {1'd0, 7'd22}: s2wr2 <= 54;
	      {1'd0, 7'd23}: s2wr2 <= 55;
	      {1'd0, 7'd24}: s2wr2 <= 56;
	      {1'd0, 7'd25}: s2wr2 <= 57;
	      {1'd0, 7'd26}: s2wr2 <= 58;
	      {1'd0, 7'd27}: s2wr2 <= 59;
	      {1'd0, 7'd28}: s2wr2 <= 60;
	      {1'd0, 7'd29}: s2wr2 <= 61;
	      {1'd0, 7'd30}: s2wr2 <= 62;
	      {1'd0, 7'd31}: s2wr2 <= 63;
	      {1'd0, 7'd32}: s2wr2 <= 0;
	      {1'd0, 7'd33}: s2wr2 <= 1;
	      {1'd0, 7'd34}: s2wr2 <= 2;
	      {1'd0, 7'd35}: s2wr2 <= 3;
	      {1'd0, 7'd36}: s2wr2 <= 4;
	      {1'd0, 7'd37}: s2wr2 <= 5;
	      {1'd0, 7'd38}: s2wr2 <= 6;
	      {1'd0, 7'd39}: s2wr2 <= 7;
	      {1'd0, 7'd40}: s2wr2 <= 8;
	      {1'd0, 7'd41}: s2wr2 <= 9;
	      {1'd0, 7'd42}: s2wr2 <= 10;
	      {1'd0, 7'd43}: s2wr2 <= 11;
	      {1'd0, 7'd44}: s2wr2 <= 12;
	      {1'd0, 7'd45}: s2wr2 <= 13;
	      {1'd0, 7'd46}: s2wr2 <= 14;
	      {1'd0, 7'd47}: s2wr2 <= 15;
	      {1'd0, 7'd48}: s2wr2 <= 16;
	      {1'd0, 7'd49}: s2wr2 <= 17;
	      {1'd0, 7'd50}: s2wr2 <= 18;
	      {1'd0, 7'd51}: s2wr2 <= 19;
	      {1'd0, 7'd52}: s2wr2 <= 20;
	      {1'd0, 7'd53}: s2wr2 <= 21;
	      {1'd0, 7'd54}: s2wr2 <= 22;
	      {1'd0, 7'd55}: s2wr2 <= 23;
	      {1'd0, 7'd56}: s2wr2 <= 24;
	      {1'd0, 7'd57}: s2wr2 <= 25;
	      {1'd0, 7'd58}: s2wr2 <= 26;
	      {1'd0, 7'd59}: s2wr2 <= 27;
	      {1'd0, 7'd60}: s2wr2 <= 28;
	      {1'd0, 7'd61}: s2wr2 <= 29;
	      {1'd0, 7'd62}: s2wr2 <= 30;
	      {1'd0, 7'd63}: s2wr2 <= 31;
	      {1'd0, 7'd64}: s2wr2 <= 96;
	      {1'd0, 7'd65}: s2wr2 <= 97;
	      {1'd0, 7'd66}: s2wr2 <= 98;
	      {1'd0, 7'd67}: s2wr2 <= 99;
	      {1'd0, 7'd68}: s2wr2 <= 100;
	      {1'd0, 7'd69}: s2wr2 <= 101;
	      {1'd0, 7'd70}: s2wr2 <= 102;
	      {1'd0, 7'd71}: s2wr2 <= 103;
	      {1'd0, 7'd72}: s2wr2 <= 104;
	      {1'd0, 7'd73}: s2wr2 <= 105;
	      {1'd0, 7'd74}: s2wr2 <= 106;
	      {1'd0, 7'd75}: s2wr2 <= 107;
	      {1'd0, 7'd76}: s2wr2 <= 108;
	      {1'd0, 7'd77}: s2wr2 <= 109;
	      {1'd0, 7'd78}: s2wr2 <= 110;
	      {1'd0, 7'd79}: s2wr2 <= 111;
	      {1'd0, 7'd80}: s2wr2 <= 112;
	      {1'd0, 7'd81}: s2wr2 <= 113;
	      {1'd0, 7'd82}: s2wr2 <= 114;
	      {1'd0, 7'd83}: s2wr2 <= 115;
	      {1'd0, 7'd84}: s2wr2 <= 116;
	      {1'd0, 7'd85}: s2wr2 <= 117;
	      {1'd0, 7'd86}: s2wr2 <= 118;
	      {1'd0, 7'd87}: s2wr2 <= 119;
	      {1'd0, 7'd88}: s2wr2 <= 120;
	      {1'd0, 7'd89}: s2wr2 <= 121;
	      {1'd0, 7'd90}: s2wr2 <= 122;
	      {1'd0, 7'd91}: s2wr2 <= 123;
	      {1'd0, 7'd92}: s2wr2 <= 124;
	      {1'd0, 7'd93}: s2wr2 <= 125;
	      {1'd0, 7'd94}: s2wr2 <= 126;
	      {1'd0, 7'd95}: s2wr2 <= 127;
	      {1'd0, 7'd96}: s2wr2 <= 64;
	      {1'd0, 7'd97}: s2wr2 <= 65;
	      {1'd0, 7'd98}: s2wr2 <= 66;
	      {1'd0, 7'd99}: s2wr2 <= 67;
	      {1'd0, 7'd100}: s2wr2 <= 68;
	      {1'd0, 7'd101}: s2wr2 <= 69;
	      {1'd0, 7'd102}: s2wr2 <= 70;
	      {1'd0, 7'd103}: s2wr2 <= 71;
	      {1'd0, 7'd104}: s2wr2 <= 72;
	      {1'd0, 7'd105}: s2wr2 <= 73;
	      {1'd0, 7'd106}: s2wr2 <= 74;
	      {1'd0, 7'd107}: s2wr2 <= 75;
	      {1'd0, 7'd108}: s2wr2 <= 76;
	      {1'd0, 7'd109}: s2wr2 <= 77;
	      {1'd0, 7'd110}: s2wr2 <= 78;
	      {1'd0, 7'd111}: s2wr2 <= 79;
	      {1'd0, 7'd112}: s2wr2 <= 80;
	      {1'd0, 7'd113}: s2wr2 <= 81;
	      {1'd0, 7'd114}: s2wr2 <= 82;
	      {1'd0, 7'd115}: s2wr2 <= 83;
	      {1'd0, 7'd116}: s2wr2 <= 84;
	      {1'd0, 7'd117}: s2wr2 <= 85;
	      {1'd0, 7'd118}: s2wr2 <= 86;
	      {1'd0, 7'd119}: s2wr2 <= 87;
	      {1'd0, 7'd120}: s2wr2 <= 88;
	      {1'd0, 7'd121}: s2wr2 <= 89;
	      {1'd0, 7'd122}: s2wr2 <= 90;
	      {1'd0, 7'd123}: s2wr2 <= 91;
	      {1'd0, 7'd124}: s2wr2 <= 92;
	      {1'd0, 7'd125}: s2wr2 <= 93;
	      {1'd0, 7'd126}: s2wr2 <= 94;
	      {1'd0, 7'd127}: s2wr2 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 0;
	      {1'd0, 7'd1}: s2wr3 <= 1;
	      {1'd0, 7'd2}: s2wr3 <= 2;
	      {1'd0, 7'd3}: s2wr3 <= 3;
	      {1'd0, 7'd4}: s2wr3 <= 4;
	      {1'd0, 7'd5}: s2wr3 <= 5;
	      {1'd0, 7'd6}: s2wr3 <= 6;
	      {1'd0, 7'd7}: s2wr3 <= 7;
	      {1'd0, 7'd8}: s2wr3 <= 8;
	      {1'd0, 7'd9}: s2wr3 <= 9;
	      {1'd0, 7'd10}: s2wr3 <= 10;
	      {1'd0, 7'd11}: s2wr3 <= 11;
	      {1'd0, 7'd12}: s2wr3 <= 12;
	      {1'd0, 7'd13}: s2wr3 <= 13;
	      {1'd0, 7'd14}: s2wr3 <= 14;
	      {1'd0, 7'd15}: s2wr3 <= 15;
	      {1'd0, 7'd16}: s2wr3 <= 16;
	      {1'd0, 7'd17}: s2wr3 <= 17;
	      {1'd0, 7'd18}: s2wr3 <= 18;
	      {1'd0, 7'd19}: s2wr3 <= 19;
	      {1'd0, 7'd20}: s2wr3 <= 20;
	      {1'd0, 7'd21}: s2wr3 <= 21;
	      {1'd0, 7'd22}: s2wr3 <= 22;
	      {1'd0, 7'd23}: s2wr3 <= 23;
	      {1'd0, 7'd24}: s2wr3 <= 24;
	      {1'd0, 7'd25}: s2wr3 <= 25;
	      {1'd0, 7'd26}: s2wr3 <= 26;
	      {1'd0, 7'd27}: s2wr3 <= 27;
	      {1'd0, 7'd28}: s2wr3 <= 28;
	      {1'd0, 7'd29}: s2wr3 <= 29;
	      {1'd0, 7'd30}: s2wr3 <= 30;
	      {1'd0, 7'd31}: s2wr3 <= 31;
	      {1'd0, 7'd32}: s2wr3 <= 32;
	      {1'd0, 7'd33}: s2wr3 <= 33;
	      {1'd0, 7'd34}: s2wr3 <= 34;
	      {1'd0, 7'd35}: s2wr3 <= 35;
	      {1'd0, 7'd36}: s2wr3 <= 36;
	      {1'd0, 7'd37}: s2wr3 <= 37;
	      {1'd0, 7'd38}: s2wr3 <= 38;
	      {1'd0, 7'd39}: s2wr3 <= 39;
	      {1'd0, 7'd40}: s2wr3 <= 40;
	      {1'd0, 7'd41}: s2wr3 <= 41;
	      {1'd0, 7'd42}: s2wr3 <= 42;
	      {1'd0, 7'd43}: s2wr3 <= 43;
	      {1'd0, 7'd44}: s2wr3 <= 44;
	      {1'd0, 7'd45}: s2wr3 <= 45;
	      {1'd0, 7'd46}: s2wr3 <= 46;
	      {1'd0, 7'd47}: s2wr3 <= 47;
	      {1'd0, 7'd48}: s2wr3 <= 48;
	      {1'd0, 7'd49}: s2wr3 <= 49;
	      {1'd0, 7'd50}: s2wr3 <= 50;
	      {1'd0, 7'd51}: s2wr3 <= 51;
	      {1'd0, 7'd52}: s2wr3 <= 52;
	      {1'd0, 7'd53}: s2wr3 <= 53;
	      {1'd0, 7'd54}: s2wr3 <= 54;
	      {1'd0, 7'd55}: s2wr3 <= 55;
	      {1'd0, 7'd56}: s2wr3 <= 56;
	      {1'd0, 7'd57}: s2wr3 <= 57;
	      {1'd0, 7'd58}: s2wr3 <= 58;
	      {1'd0, 7'd59}: s2wr3 <= 59;
	      {1'd0, 7'd60}: s2wr3 <= 60;
	      {1'd0, 7'd61}: s2wr3 <= 61;
	      {1'd0, 7'd62}: s2wr3 <= 62;
	      {1'd0, 7'd63}: s2wr3 <= 63;
	      {1'd0, 7'd64}: s2wr3 <= 64;
	      {1'd0, 7'd65}: s2wr3 <= 65;
	      {1'd0, 7'd66}: s2wr3 <= 66;
	      {1'd0, 7'd67}: s2wr3 <= 67;
	      {1'd0, 7'd68}: s2wr3 <= 68;
	      {1'd0, 7'd69}: s2wr3 <= 69;
	      {1'd0, 7'd70}: s2wr3 <= 70;
	      {1'd0, 7'd71}: s2wr3 <= 71;
	      {1'd0, 7'd72}: s2wr3 <= 72;
	      {1'd0, 7'd73}: s2wr3 <= 73;
	      {1'd0, 7'd74}: s2wr3 <= 74;
	      {1'd0, 7'd75}: s2wr3 <= 75;
	      {1'd0, 7'd76}: s2wr3 <= 76;
	      {1'd0, 7'd77}: s2wr3 <= 77;
	      {1'd0, 7'd78}: s2wr3 <= 78;
	      {1'd0, 7'd79}: s2wr3 <= 79;
	      {1'd0, 7'd80}: s2wr3 <= 80;
	      {1'd0, 7'd81}: s2wr3 <= 81;
	      {1'd0, 7'd82}: s2wr3 <= 82;
	      {1'd0, 7'd83}: s2wr3 <= 83;
	      {1'd0, 7'd84}: s2wr3 <= 84;
	      {1'd0, 7'd85}: s2wr3 <= 85;
	      {1'd0, 7'd86}: s2wr3 <= 86;
	      {1'd0, 7'd87}: s2wr3 <= 87;
	      {1'd0, 7'd88}: s2wr3 <= 88;
	      {1'd0, 7'd89}: s2wr3 <= 89;
	      {1'd0, 7'd90}: s2wr3 <= 90;
	      {1'd0, 7'd91}: s2wr3 <= 91;
	      {1'd0, 7'd92}: s2wr3 <= 92;
	      {1'd0, 7'd93}: s2wr3 <= 93;
	      {1'd0, 7'd94}: s2wr3 <= 94;
	      {1'd0, 7'd95}: s2wr3 <= 95;
	      {1'd0, 7'd96}: s2wr3 <= 96;
	      {1'd0, 7'd97}: s2wr3 <= 97;
	      {1'd0, 7'd98}: s2wr3 <= 98;
	      {1'd0, 7'd99}: s2wr3 <= 99;
	      {1'd0, 7'd100}: s2wr3 <= 100;
	      {1'd0, 7'd101}: s2wr3 <= 101;
	      {1'd0, 7'd102}: s2wr3 <= 102;
	      {1'd0, 7'd103}: s2wr3 <= 103;
	      {1'd0, 7'd104}: s2wr3 <= 104;
	      {1'd0, 7'd105}: s2wr3 <= 105;
	      {1'd0, 7'd106}: s2wr3 <= 106;
	      {1'd0, 7'd107}: s2wr3 <= 107;
	      {1'd0, 7'd108}: s2wr3 <= 108;
	      {1'd0, 7'd109}: s2wr3 <= 109;
	      {1'd0, 7'd110}: s2wr3 <= 110;
	      {1'd0, 7'd111}: s2wr3 <= 111;
	      {1'd0, 7'd112}: s2wr3 <= 112;
	      {1'd0, 7'd113}: s2wr3 <= 113;
	      {1'd0, 7'd114}: s2wr3 <= 114;
	      {1'd0, 7'd115}: s2wr3 <= 115;
	      {1'd0, 7'd116}: s2wr3 <= 116;
	      {1'd0, 7'd117}: s2wr3 <= 117;
	      {1'd0, 7'd118}: s2wr3 <= 118;
	      {1'd0, 7'd119}: s2wr3 <= 119;
	      {1'd0, 7'd120}: s2wr3 <= 120;
	      {1'd0, 7'd121}: s2wr3 <= 121;
	      {1'd0, 7'd122}: s2wr3 <= 122;
	      {1'd0, 7'd123}: s2wr3 <= 123;
	      {1'd0, 7'd124}: s2wr3 <= 124;
	      {1'd0, 7'd125}: s2wr3 <= 125;
	      {1'd0, 7'd126}: s2wr3 <= 126;
	      {1'd0, 7'd127}: s2wr3 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr4 <= 96;
	      {1'd0, 7'd1}: s2wr4 <= 97;
	      {1'd0, 7'd2}: s2wr4 <= 98;
	      {1'd0, 7'd3}: s2wr4 <= 99;
	      {1'd0, 7'd4}: s2wr4 <= 100;
	      {1'd0, 7'd5}: s2wr4 <= 101;
	      {1'd0, 7'd6}: s2wr4 <= 102;
	      {1'd0, 7'd7}: s2wr4 <= 103;
	      {1'd0, 7'd8}: s2wr4 <= 104;
	      {1'd0, 7'd9}: s2wr4 <= 105;
	      {1'd0, 7'd10}: s2wr4 <= 106;
	      {1'd0, 7'd11}: s2wr4 <= 107;
	      {1'd0, 7'd12}: s2wr4 <= 108;
	      {1'd0, 7'd13}: s2wr4 <= 109;
	      {1'd0, 7'd14}: s2wr4 <= 110;
	      {1'd0, 7'd15}: s2wr4 <= 111;
	      {1'd0, 7'd16}: s2wr4 <= 112;
	      {1'd0, 7'd17}: s2wr4 <= 113;
	      {1'd0, 7'd18}: s2wr4 <= 114;
	      {1'd0, 7'd19}: s2wr4 <= 115;
	      {1'd0, 7'd20}: s2wr4 <= 116;
	      {1'd0, 7'd21}: s2wr4 <= 117;
	      {1'd0, 7'd22}: s2wr4 <= 118;
	      {1'd0, 7'd23}: s2wr4 <= 119;
	      {1'd0, 7'd24}: s2wr4 <= 120;
	      {1'd0, 7'd25}: s2wr4 <= 121;
	      {1'd0, 7'd26}: s2wr4 <= 122;
	      {1'd0, 7'd27}: s2wr4 <= 123;
	      {1'd0, 7'd28}: s2wr4 <= 124;
	      {1'd0, 7'd29}: s2wr4 <= 125;
	      {1'd0, 7'd30}: s2wr4 <= 126;
	      {1'd0, 7'd31}: s2wr4 <= 127;
	      {1'd0, 7'd32}: s2wr4 <= 64;
	      {1'd0, 7'd33}: s2wr4 <= 65;
	      {1'd0, 7'd34}: s2wr4 <= 66;
	      {1'd0, 7'd35}: s2wr4 <= 67;
	      {1'd0, 7'd36}: s2wr4 <= 68;
	      {1'd0, 7'd37}: s2wr4 <= 69;
	      {1'd0, 7'd38}: s2wr4 <= 70;
	      {1'd0, 7'd39}: s2wr4 <= 71;
	      {1'd0, 7'd40}: s2wr4 <= 72;
	      {1'd0, 7'd41}: s2wr4 <= 73;
	      {1'd0, 7'd42}: s2wr4 <= 74;
	      {1'd0, 7'd43}: s2wr4 <= 75;
	      {1'd0, 7'd44}: s2wr4 <= 76;
	      {1'd0, 7'd45}: s2wr4 <= 77;
	      {1'd0, 7'd46}: s2wr4 <= 78;
	      {1'd0, 7'd47}: s2wr4 <= 79;
	      {1'd0, 7'd48}: s2wr4 <= 80;
	      {1'd0, 7'd49}: s2wr4 <= 81;
	      {1'd0, 7'd50}: s2wr4 <= 82;
	      {1'd0, 7'd51}: s2wr4 <= 83;
	      {1'd0, 7'd52}: s2wr4 <= 84;
	      {1'd0, 7'd53}: s2wr4 <= 85;
	      {1'd0, 7'd54}: s2wr4 <= 86;
	      {1'd0, 7'd55}: s2wr4 <= 87;
	      {1'd0, 7'd56}: s2wr4 <= 88;
	      {1'd0, 7'd57}: s2wr4 <= 89;
	      {1'd0, 7'd58}: s2wr4 <= 90;
	      {1'd0, 7'd59}: s2wr4 <= 91;
	      {1'd0, 7'd60}: s2wr4 <= 92;
	      {1'd0, 7'd61}: s2wr4 <= 93;
	      {1'd0, 7'd62}: s2wr4 <= 94;
	      {1'd0, 7'd63}: s2wr4 <= 95;
	      {1'd0, 7'd64}: s2wr4 <= 32;
	      {1'd0, 7'd65}: s2wr4 <= 33;
	      {1'd0, 7'd66}: s2wr4 <= 34;
	      {1'd0, 7'd67}: s2wr4 <= 35;
	      {1'd0, 7'd68}: s2wr4 <= 36;
	      {1'd0, 7'd69}: s2wr4 <= 37;
	      {1'd0, 7'd70}: s2wr4 <= 38;
	      {1'd0, 7'd71}: s2wr4 <= 39;
	      {1'd0, 7'd72}: s2wr4 <= 40;
	      {1'd0, 7'd73}: s2wr4 <= 41;
	      {1'd0, 7'd74}: s2wr4 <= 42;
	      {1'd0, 7'd75}: s2wr4 <= 43;
	      {1'd0, 7'd76}: s2wr4 <= 44;
	      {1'd0, 7'd77}: s2wr4 <= 45;
	      {1'd0, 7'd78}: s2wr4 <= 46;
	      {1'd0, 7'd79}: s2wr4 <= 47;
	      {1'd0, 7'd80}: s2wr4 <= 48;
	      {1'd0, 7'd81}: s2wr4 <= 49;
	      {1'd0, 7'd82}: s2wr4 <= 50;
	      {1'd0, 7'd83}: s2wr4 <= 51;
	      {1'd0, 7'd84}: s2wr4 <= 52;
	      {1'd0, 7'd85}: s2wr4 <= 53;
	      {1'd0, 7'd86}: s2wr4 <= 54;
	      {1'd0, 7'd87}: s2wr4 <= 55;
	      {1'd0, 7'd88}: s2wr4 <= 56;
	      {1'd0, 7'd89}: s2wr4 <= 57;
	      {1'd0, 7'd90}: s2wr4 <= 58;
	      {1'd0, 7'd91}: s2wr4 <= 59;
	      {1'd0, 7'd92}: s2wr4 <= 60;
	      {1'd0, 7'd93}: s2wr4 <= 61;
	      {1'd0, 7'd94}: s2wr4 <= 62;
	      {1'd0, 7'd95}: s2wr4 <= 63;
	      {1'd0, 7'd96}: s2wr4 <= 0;
	      {1'd0, 7'd97}: s2wr4 <= 1;
	      {1'd0, 7'd98}: s2wr4 <= 2;
	      {1'd0, 7'd99}: s2wr4 <= 3;
	      {1'd0, 7'd100}: s2wr4 <= 4;
	      {1'd0, 7'd101}: s2wr4 <= 5;
	      {1'd0, 7'd102}: s2wr4 <= 6;
	      {1'd0, 7'd103}: s2wr4 <= 7;
	      {1'd0, 7'd104}: s2wr4 <= 8;
	      {1'd0, 7'd105}: s2wr4 <= 9;
	      {1'd0, 7'd106}: s2wr4 <= 10;
	      {1'd0, 7'd107}: s2wr4 <= 11;
	      {1'd0, 7'd108}: s2wr4 <= 12;
	      {1'd0, 7'd109}: s2wr4 <= 13;
	      {1'd0, 7'd110}: s2wr4 <= 14;
	      {1'd0, 7'd111}: s2wr4 <= 15;
	      {1'd0, 7'd112}: s2wr4 <= 16;
	      {1'd0, 7'd113}: s2wr4 <= 17;
	      {1'd0, 7'd114}: s2wr4 <= 18;
	      {1'd0, 7'd115}: s2wr4 <= 19;
	      {1'd0, 7'd116}: s2wr4 <= 20;
	      {1'd0, 7'd117}: s2wr4 <= 21;
	      {1'd0, 7'd118}: s2wr4 <= 22;
	      {1'd0, 7'd119}: s2wr4 <= 23;
	      {1'd0, 7'd120}: s2wr4 <= 24;
	      {1'd0, 7'd121}: s2wr4 <= 25;
	      {1'd0, 7'd122}: s2wr4 <= 26;
	      {1'd0, 7'd123}: s2wr4 <= 27;
	      {1'd0, 7'd124}: s2wr4 <= 28;
	      {1'd0, 7'd125}: s2wr4 <= 29;
	      {1'd0, 7'd126}: s2wr4 <= 30;
	      {1'd0, 7'd127}: s2wr4 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr5 <= 64;
	      {1'd0, 7'd1}: s2wr5 <= 65;
	      {1'd0, 7'd2}: s2wr5 <= 66;
	      {1'd0, 7'd3}: s2wr5 <= 67;
	      {1'd0, 7'd4}: s2wr5 <= 68;
	      {1'd0, 7'd5}: s2wr5 <= 69;
	      {1'd0, 7'd6}: s2wr5 <= 70;
	      {1'd0, 7'd7}: s2wr5 <= 71;
	      {1'd0, 7'd8}: s2wr5 <= 72;
	      {1'd0, 7'd9}: s2wr5 <= 73;
	      {1'd0, 7'd10}: s2wr5 <= 74;
	      {1'd0, 7'd11}: s2wr5 <= 75;
	      {1'd0, 7'd12}: s2wr5 <= 76;
	      {1'd0, 7'd13}: s2wr5 <= 77;
	      {1'd0, 7'd14}: s2wr5 <= 78;
	      {1'd0, 7'd15}: s2wr5 <= 79;
	      {1'd0, 7'd16}: s2wr5 <= 80;
	      {1'd0, 7'd17}: s2wr5 <= 81;
	      {1'd0, 7'd18}: s2wr5 <= 82;
	      {1'd0, 7'd19}: s2wr5 <= 83;
	      {1'd0, 7'd20}: s2wr5 <= 84;
	      {1'd0, 7'd21}: s2wr5 <= 85;
	      {1'd0, 7'd22}: s2wr5 <= 86;
	      {1'd0, 7'd23}: s2wr5 <= 87;
	      {1'd0, 7'd24}: s2wr5 <= 88;
	      {1'd0, 7'd25}: s2wr5 <= 89;
	      {1'd0, 7'd26}: s2wr5 <= 90;
	      {1'd0, 7'd27}: s2wr5 <= 91;
	      {1'd0, 7'd28}: s2wr5 <= 92;
	      {1'd0, 7'd29}: s2wr5 <= 93;
	      {1'd0, 7'd30}: s2wr5 <= 94;
	      {1'd0, 7'd31}: s2wr5 <= 95;
	      {1'd0, 7'd32}: s2wr5 <= 96;
	      {1'd0, 7'd33}: s2wr5 <= 97;
	      {1'd0, 7'd34}: s2wr5 <= 98;
	      {1'd0, 7'd35}: s2wr5 <= 99;
	      {1'd0, 7'd36}: s2wr5 <= 100;
	      {1'd0, 7'd37}: s2wr5 <= 101;
	      {1'd0, 7'd38}: s2wr5 <= 102;
	      {1'd0, 7'd39}: s2wr5 <= 103;
	      {1'd0, 7'd40}: s2wr5 <= 104;
	      {1'd0, 7'd41}: s2wr5 <= 105;
	      {1'd0, 7'd42}: s2wr5 <= 106;
	      {1'd0, 7'd43}: s2wr5 <= 107;
	      {1'd0, 7'd44}: s2wr5 <= 108;
	      {1'd0, 7'd45}: s2wr5 <= 109;
	      {1'd0, 7'd46}: s2wr5 <= 110;
	      {1'd0, 7'd47}: s2wr5 <= 111;
	      {1'd0, 7'd48}: s2wr5 <= 112;
	      {1'd0, 7'd49}: s2wr5 <= 113;
	      {1'd0, 7'd50}: s2wr5 <= 114;
	      {1'd0, 7'd51}: s2wr5 <= 115;
	      {1'd0, 7'd52}: s2wr5 <= 116;
	      {1'd0, 7'd53}: s2wr5 <= 117;
	      {1'd0, 7'd54}: s2wr5 <= 118;
	      {1'd0, 7'd55}: s2wr5 <= 119;
	      {1'd0, 7'd56}: s2wr5 <= 120;
	      {1'd0, 7'd57}: s2wr5 <= 121;
	      {1'd0, 7'd58}: s2wr5 <= 122;
	      {1'd0, 7'd59}: s2wr5 <= 123;
	      {1'd0, 7'd60}: s2wr5 <= 124;
	      {1'd0, 7'd61}: s2wr5 <= 125;
	      {1'd0, 7'd62}: s2wr5 <= 126;
	      {1'd0, 7'd63}: s2wr5 <= 127;
	      {1'd0, 7'd64}: s2wr5 <= 0;
	      {1'd0, 7'd65}: s2wr5 <= 1;
	      {1'd0, 7'd66}: s2wr5 <= 2;
	      {1'd0, 7'd67}: s2wr5 <= 3;
	      {1'd0, 7'd68}: s2wr5 <= 4;
	      {1'd0, 7'd69}: s2wr5 <= 5;
	      {1'd0, 7'd70}: s2wr5 <= 6;
	      {1'd0, 7'd71}: s2wr5 <= 7;
	      {1'd0, 7'd72}: s2wr5 <= 8;
	      {1'd0, 7'd73}: s2wr5 <= 9;
	      {1'd0, 7'd74}: s2wr5 <= 10;
	      {1'd0, 7'd75}: s2wr5 <= 11;
	      {1'd0, 7'd76}: s2wr5 <= 12;
	      {1'd0, 7'd77}: s2wr5 <= 13;
	      {1'd0, 7'd78}: s2wr5 <= 14;
	      {1'd0, 7'd79}: s2wr5 <= 15;
	      {1'd0, 7'd80}: s2wr5 <= 16;
	      {1'd0, 7'd81}: s2wr5 <= 17;
	      {1'd0, 7'd82}: s2wr5 <= 18;
	      {1'd0, 7'd83}: s2wr5 <= 19;
	      {1'd0, 7'd84}: s2wr5 <= 20;
	      {1'd0, 7'd85}: s2wr5 <= 21;
	      {1'd0, 7'd86}: s2wr5 <= 22;
	      {1'd0, 7'd87}: s2wr5 <= 23;
	      {1'd0, 7'd88}: s2wr5 <= 24;
	      {1'd0, 7'd89}: s2wr5 <= 25;
	      {1'd0, 7'd90}: s2wr5 <= 26;
	      {1'd0, 7'd91}: s2wr5 <= 27;
	      {1'd0, 7'd92}: s2wr5 <= 28;
	      {1'd0, 7'd93}: s2wr5 <= 29;
	      {1'd0, 7'd94}: s2wr5 <= 30;
	      {1'd0, 7'd95}: s2wr5 <= 31;
	      {1'd0, 7'd96}: s2wr5 <= 32;
	      {1'd0, 7'd97}: s2wr5 <= 33;
	      {1'd0, 7'd98}: s2wr5 <= 34;
	      {1'd0, 7'd99}: s2wr5 <= 35;
	      {1'd0, 7'd100}: s2wr5 <= 36;
	      {1'd0, 7'd101}: s2wr5 <= 37;
	      {1'd0, 7'd102}: s2wr5 <= 38;
	      {1'd0, 7'd103}: s2wr5 <= 39;
	      {1'd0, 7'd104}: s2wr5 <= 40;
	      {1'd0, 7'd105}: s2wr5 <= 41;
	      {1'd0, 7'd106}: s2wr5 <= 42;
	      {1'd0, 7'd107}: s2wr5 <= 43;
	      {1'd0, 7'd108}: s2wr5 <= 44;
	      {1'd0, 7'd109}: s2wr5 <= 45;
	      {1'd0, 7'd110}: s2wr5 <= 46;
	      {1'd0, 7'd111}: s2wr5 <= 47;
	      {1'd0, 7'd112}: s2wr5 <= 48;
	      {1'd0, 7'd113}: s2wr5 <= 49;
	      {1'd0, 7'd114}: s2wr5 <= 50;
	      {1'd0, 7'd115}: s2wr5 <= 51;
	      {1'd0, 7'd116}: s2wr5 <= 52;
	      {1'd0, 7'd117}: s2wr5 <= 53;
	      {1'd0, 7'd118}: s2wr5 <= 54;
	      {1'd0, 7'd119}: s2wr5 <= 55;
	      {1'd0, 7'd120}: s2wr5 <= 56;
	      {1'd0, 7'd121}: s2wr5 <= 57;
	      {1'd0, 7'd122}: s2wr5 <= 58;
	      {1'd0, 7'd123}: s2wr5 <= 59;
	      {1'd0, 7'd124}: s2wr5 <= 60;
	      {1'd0, 7'd125}: s2wr5 <= 61;
	      {1'd0, 7'd126}: s2wr5 <= 62;
	      {1'd0, 7'd127}: s2wr5 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr6 <= 32;
	      {1'd0, 7'd1}: s2wr6 <= 33;
	      {1'd0, 7'd2}: s2wr6 <= 34;
	      {1'd0, 7'd3}: s2wr6 <= 35;
	      {1'd0, 7'd4}: s2wr6 <= 36;
	      {1'd0, 7'd5}: s2wr6 <= 37;
	      {1'd0, 7'd6}: s2wr6 <= 38;
	      {1'd0, 7'd7}: s2wr6 <= 39;
	      {1'd0, 7'd8}: s2wr6 <= 40;
	      {1'd0, 7'd9}: s2wr6 <= 41;
	      {1'd0, 7'd10}: s2wr6 <= 42;
	      {1'd0, 7'd11}: s2wr6 <= 43;
	      {1'd0, 7'd12}: s2wr6 <= 44;
	      {1'd0, 7'd13}: s2wr6 <= 45;
	      {1'd0, 7'd14}: s2wr6 <= 46;
	      {1'd0, 7'd15}: s2wr6 <= 47;
	      {1'd0, 7'd16}: s2wr6 <= 48;
	      {1'd0, 7'd17}: s2wr6 <= 49;
	      {1'd0, 7'd18}: s2wr6 <= 50;
	      {1'd0, 7'd19}: s2wr6 <= 51;
	      {1'd0, 7'd20}: s2wr6 <= 52;
	      {1'd0, 7'd21}: s2wr6 <= 53;
	      {1'd0, 7'd22}: s2wr6 <= 54;
	      {1'd0, 7'd23}: s2wr6 <= 55;
	      {1'd0, 7'd24}: s2wr6 <= 56;
	      {1'd0, 7'd25}: s2wr6 <= 57;
	      {1'd0, 7'd26}: s2wr6 <= 58;
	      {1'd0, 7'd27}: s2wr6 <= 59;
	      {1'd0, 7'd28}: s2wr6 <= 60;
	      {1'd0, 7'd29}: s2wr6 <= 61;
	      {1'd0, 7'd30}: s2wr6 <= 62;
	      {1'd0, 7'd31}: s2wr6 <= 63;
	      {1'd0, 7'd32}: s2wr6 <= 0;
	      {1'd0, 7'd33}: s2wr6 <= 1;
	      {1'd0, 7'd34}: s2wr6 <= 2;
	      {1'd0, 7'd35}: s2wr6 <= 3;
	      {1'd0, 7'd36}: s2wr6 <= 4;
	      {1'd0, 7'd37}: s2wr6 <= 5;
	      {1'd0, 7'd38}: s2wr6 <= 6;
	      {1'd0, 7'd39}: s2wr6 <= 7;
	      {1'd0, 7'd40}: s2wr6 <= 8;
	      {1'd0, 7'd41}: s2wr6 <= 9;
	      {1'd0, 7'd42}: s2wr6 <= 10;
	      {1'd0, 7'd43}: s2wr6 <= 11;
	      {1'd0, 7'd44}: s2wr6 <= 12;
	      {1'd0, 7'd45}: s2wr6 <= 13;
	      {1'd0, 7'd46}: s2wr6 <= 14;
	      {1'd0, 7'd47}: s2wr6 <= 15;
	      {1'd0, 7'd48}: s2wr6 <= 16;
	      {1'd0, 7'd49}: s2wr6 <= 17;
	      {1'd0, 7'd50}: s2wr6 <= 18;
	      {1'd0, 7'd51}: s2wr6 <= 19;
	      {1'd0, 7'd52}: s2wr6 <= 20;
	      {1'd0, 7'd53}: s2wr6 <= 21;
	      {1'd0, 7'd54}: s2wr6 <= 22;
	      {1'd0, 7'd55}: s2wr6 <= 23;
	      {1'd0, 7'd56}: s2wr6 <= 24;
	      {1'd0, 7'd57}: s2wr6 <= 25;
	      {1'd0, 7'd58}: s2wr6 <= 26;
	      {1'd0, 7'd59}: s2wr6 <= 27;
	      {1'd0, 7'd60}: s2wr6 <= 28;
	      {1'd0, 7'd61}: s2wr6 <= 29;
	      {1'd0, 7'd62}: s2wr6 <= 30;
	      {1'd0, 7'd63}: s2wr6 <= 31;
	      {1'd0, 7'd64}: s2wr6 <= 96;
	      {1'd0, 7'd65}: s2wr6 <= 97;
	      {1'd0, 7'd66}: s2wr6 <= 98;
	      {1'd0, 7'd67}: s2wr6 <= 99;
	      {1'd0, 7'd68}: s2wr6 <= 100;
	      {1'd0, 7'd69}: s2wr6 <= 101;
	      {1'd0, 7'd70}: s2wr6 <= 102;
	      {1'd0, 7'd71}: s2wr6 <= 103;
	      {1'd0, 7'd72}: s2wr6 <= 104;
	      {1'd0, 7'd73}: s2wr6 <= 105;
	      {1'd0, 7'd74}: s2wr6 <= 106;
	      {1'd0, 7'd75}: s2wr6 <= 107;
	      {1'd0, 7'd76}: s2wr6 <= 108;
	      {1'd0, 7'd77}: s2wr6 <= 109;
	      {1'd0, 7'd78}: s2wr6 <= 110;
	      {1'd0, 7'd79}: s2wr6 <= 111;
	      {1'd0, 7'd80}: s2wr6 <= 112;
	      {1'd0, 7'd81}: s2wr6 <= 113;
	      {1'd0, 7'd82}: s2wr6 <= 114;
	      {1'd0, 7'd83}: s2wr6 <= 115;
	      {1'd0, 7'd84}: s2wr6 <= 116;
	      {1'd0, 7'd85}: s2wr6 <= 117;
	      {1'd0, 7'd86}: s2wr6 <= 118;
	      {1'd0, 7'd87}: s2wr6 <= 119;
	      {1'd0, 7'd88}: s2wr6 <= 120;
	      {1'd0, 7'd89}: s2wr6 <= 121;
	      {1'd0, 7'd90}: s2wr6 <= 122;
	      {1'd0, 7'd91}: s2wr6 <= 123;
	      {1'd0, 7'd92}: s2wr6 <= 124;
	      {1'd0, 7'd93}: s2wr6 <= 125;
	      {1'd0, 7'd94}: s2wr6 <= 126;
	      {1'd0, 7'd95}: s2wr6 <= 127;
	      {1'd0, 7'd96}: s2wr6 <= 64;
	      {1'd0, 7'd97}: s2wr6 <= 65;
	      {1'd0, 7'd98}: s2wr6 <= 66;
	      {1'd0, 7'd99}: s2wr6 <= 67;
	      {1'd0, 7'd100}: s2wr6 <= 68;
	      {1'd0, 7'd101}: s2wr6 <= 69;
	      {1'd0, 7'd102}: s2wr6 <= 70;
	      {1'd0, 7'd103}: s2wr6 <= 71;
	      {1'd0, 7'd104}: s2wr6 <= 72;
	      {1'd0, 7'd105}: s2wr6 <= 73;
	      {1'd0, 7'd106}: s2wr6 <= 74;
	      {1'd0, 7'd107}: s2wr6 <= 75;
	      {1'd0, 7'd108}: s2wr6 <= 76;
	      {1'd0, 7'd109}: s2wr6 <= 77;
	      {1'd0, 7'd110}: s2wr6 <= 78;
	      {1'd0, 7'd111}: s2wr6 <= 79;
	      {1'd0, 7'd112}: s2wr6 <= 80;
	      {1'd0, 7'd113}: s2wr6 <= 81;
	      {1'd0, 7'd114}: s2wr6 <= 82;
	      {1'd0, 7'd115}: s2wr6 <= 83;
	      {1'd0, 7'd116}: s2wr6 <= 84;
	      {1'd0, 7'd117}: s2wr6 <= 85;
	      {1'd0, 7'd118}: s2wr6 <= 86;
	      {1'd0, 7'd119}: s2wr6 <= 87;
	      {1'd0, 7'd120}: s2wr6 <= 88;
	      {1'd0, 7'd121}: s2wr6 <= 89;
	      {1'd0, 7'd122}: s2wr6 <= 90;
	      {1'd0, 7'd123}: s2wr6 <= 91;
	      {1'd0, 7'd124}: s2wr6 <= 92;
	      {1'd0, 7'd125}: s2wr6 <= 93;
	      {1'd0, 7'd126}: s2wr6 <= 94;
	      {1'd0, 7'd127}: s2wr6 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm52_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr7 <= 0;
	      {1'd0, 7'd1}: s2wr7 <= 1;
	      {1'd0, 7'd2}: s2wr7 <= 2;
	      {1'd0, 7'd3}: s2wr7 <= 3;
	      {1'd0, 7'd4}: s2wr7 <= 4;
	      {1'd0, 7'd5}: s2wr7 <= 5;
	      {1'd0, 7'd6}: s2wr7 <= 6;
	      {1'd0, 7'd7}: s2wr7 <= 7;
	      {1'd0, 7'd8}: s2wr7 <= 8;
	      {1'd0, 7'd9}: s2wr7 <= 9;
	      {1'd0, 7'd10}: s2wr7 <= 10;
	      {1'd0, 7'd11}: s2wr7 <= 11;
	      {1'd0, 7'd12}: s2wr7 <= 12;
	      {1'd0, 7'd13}: s2wr7 <= 13;
	      {1'd0, 7'd14}: s2wr7 <= 14;
	      {1'd0, 7'd15}: s2wr7 <= 15;
	      {1'd0, 7'd16}: s2wr7 <= 16;
	      {1'd0, 7'd17}: s2wr7 <= 17;
	      {1'd0, 7'd18}: s2wr7 <= 18;
	      {1'd0, 7'd19}: s2wr7 <= 19;
	      {1'd0, 7'd20}: s2wr7 <= 20;
	      {1'd0, 7'd21}: s2wr7 <= 21;
	      {1'd0, 7'd22}: s2wr7 <= 22;
	      {1'd0, 7'd23}: s2wr7 <= 23;
	      {1'd0, 7'd24}: s2wr7 <= 24;
	      {1'd0, 7'd25}: s2wr7 <= 25;
	      {1'd0, 7'd26}: s2wr7 <= 26;
	      {1'd0, 7'd27}: s2wr7 <= 27;
	      {1'd0, 7'd28}: s2wr7 <= 28;
	      {1'd0, 7'd29}: s2wr7 <= 29;
	      {1'd0, 7'd30}: s2wr7 <= 30;
	      {1'd0, 7'd31}: s2wr7 <= 31;
	      {1'd0, 7'd32}: s2wr7 <= 32;
	      {1'd0, 7'd33}: s2wr7 <= 33;
	      {1'd0, 7'd34}: s2wr7 <= 34;
	      {1'd0, 7'd35}: s2wr7 <= 35;
	      {1'd0, 7'd36}: s2wr7 <= 36;
	      {1'd0, 7'd37}: s2wr7 <= 37;
	      {1'd0, 7'd38}: s2wr7 <= 38;
	      {1'd0, 7'd39}: s2wr7 <= 39;
	      {1'd0, 7'd40}: s2wr7 <= 40;
	      {1'd0, 7'd41}: s2wr7 <= 41;
	      {1'd0, 7'd42}: s2wr7 <= 42;
	      {1'd0, 7'd43}: s2wr7 <= 43;
	      {1'd0, 7'd44}: s2wr7 <= 44;
	      {1'd0, 7'd45}: s2wr7 <= 45;
	      {1'd0, 7'd46}: s2wr7 <= 46;
	      {1'd0, 7'd47}: s2wr7 <= 47;
	      {1'd0, 7'd48}: s2wr7 <= 48;
	      {1'd0, 7'd49}: s2wr7 <= 49;
	      {1'd0, 7'd50}: s2wr7 <= 50;
	      {1'd0, 7'd51}: s2wr7 <= 51;
	      {1'd0, 7'd52}: s2wr7 <= 52;
	      {1'd0, 7'd53}: s2wr7 <= 53;
	      {1'd0, 7'd54}: s2wr7 <= 54;
	      {1'd0, 7'd55}: s2wr7 <= 55;
	      {1'd0, 7'd56}: s2wr7 <= 56;
	      {1'd0, 7'd57}: s2wr7 <= 57;
	      {1'd0, 7'd58}: s2wr7 <= 58;
	      {1'd0, 7'd59}: s2wr7 <= 59;
	      {1'd0, 7'd60}: s2wr7 <= 60;
	      {1'd0, 7'd61}: s2wr7 <= 61;
	      {1'd0, 7'd62}: s2wr7 <= 62;
	      {1'd0, 7'd63}: s2wr7 <= 63;
	      {1'd0, 7'd64}: s2wr7 <= 64;
	      {1'd0, 7'd65}: s2wr7 <= 65;
	      {1'd0, 7'd66}: s2wr7 <= 66;
	      {1'd0, 7'd67}: s2wr7 <= 67;
	      {1'd0, 7'd68}: s2wr7 <= 68;
	      {1'd0, 7'd69}: s2wr7 <= 69;
	      {1'd0, 7'd70}: s2wr7 <= 70;
	      {1'd0, 7'd71}: s2wr7 <= 71;
	      {1'd0, 7'd72}: s2wr7 <= 72;
	      {1'd0, 7'd73}: s2wr7 <= 73;
	      {1'd0, 7'd74}: s2wr7 <= 74;
	      {1'd0, 7'd75}: s2wr7 <= 75;
	      {1'd0, 7'd76}: s2wr7 <= 76;
	      {1'd0, 7'd77}: s2wr7 <= 77;
	      {1'd0, 7'd78}: s2wr7 <= 78;
	      {1'd0, 7'd79}: s2wr7 <= 79;
	      {1'd0, 7'd80}: s2wr7 <= 80;
	      {1'd0, 7'd81}: s2wr7 <= 81;
	      {1'd0, 7'd82}: s2wr7 <= 82;
	      {1'd0, 7'd83}: s2wr7 <= 83;
	      {1'd0, 7'd84}: s2wr7 <= 84;
	      {1'd0, 7'd85}: s2wr7 <= 85;
	      {1'd0, 7'd86}: s2wr7 <= 86;
	      {1'd0, 7'd87}: s2wr7 <= 87;
	      {1'd0, 7'd88}: s2wr7 <= 88;
	      {1'd0, 7'd89}: s2wr7 <= 89;
	      {1'd0, 7'd90}: s2wr7 <= 90;
	      {1'd0, 7'd91}: s2wr7 <= 91;
	      {1'd0, 7'd92}: s2wr7 <= 92;
	      {1'd0, 7'd93}: s2wr7 <= 93;
	      {1'd0, 7'd94}: s2wr7 <= 94;
	      {1'd0, 7'd95}: s2wr7 <= 95;
	      {1'd0, 7'd96}: s2wr7 <= 96;
	      {1'd0, 7'd97}: s2wr7 <= 97;
	      {1'd0, 7'd98}: s2wr7 <= 98;
	      {1'd0, 7'd99}: s2wr7 <= 99;
	      {1'd0, 7'd100}: s2wr7 <= 100;
	      {1'd0, 7'd101}: s2wr7 <= 101;
	      {1'd0, 7'd102}: s2wr7 <= 102;
	      {1'd0, 7'd103}: s2wr7 <= 103;
	      {1'd0, 7'd104}: s2wr7 <= 104;
	      {1'd0, 7'd105}: s2wr7 <= 105;
	      {1'd0, 7'd106}: s2wr7 <= 106;
	      {1'd0, 7'd107}: s2wr7 <= 107;
	      {1'd0, 7'd108}: s2wr7 <= 108;
	      {1'd0, 7'd109}: s2wr7 <= 109;
	      {1'd0, 7'd110}: s2wr7 <= 110;
	      {1'd0, 7'd111}: s2wr7 <= 111;
	      {1'd0, 7'd112}: s2wr7 <= 112;
	      {1'd0, 7'd113}: s2wr7 <= 113;
	      {1'd0, 7'd114}: s2wr7 <= 114;
	      {1'd0, 7'd115}: s2wr7 <= 115;
	      {1'd0, 7'd116}: s2wr7 <= 116;
	      {1'd0, 7'd117}: s2wr7 <= 117;
	      {1'd0, 7'd118}: s2wr7 <= 118;
	      {1'd0, 7'd119}: s2wr7 <= 119;
	      {1'd0, 7'd120}: s2wr7 <= 120;
	      {1'd0, 7'd121}: s2wr7 <= 121;
	      {1'd0, 7'd122}: s2wr7 <= 122;
	      {1'd0, 7'd123}: s2wr7 <= 123;
	      {1'd0, 7'd124}: s2wr7 <= 124;
	      {1'd0, 7'd125}: s2wr7 <= 125;
	      {1'd0, 7'd126}: s2wr7 <= 126;
	      {1'd0, 7'd127}: s2wr7 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 128
module DirSum_47331(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [6:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 127)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock44609 codeBlockIsnt51243(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D13_45509(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfe6e;
      2: out3 <= 16'hfcdc;
      3: out3 <= 16'hfb4b;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'hf69c;
      7: out3 <= 16'hf50f;
      8: out3 <= 16'hf384;
      9: out3 <= 16'hf1fa;
      10: out3 <= 16'hf073;
      11: out3 <= 16'heeee;
      12: out3 <= 16'hed6c;
      13: out3 <= 16'hebed;
      14: out3 <= 16'hea70;
      15: out3 <= 16'he8f7;
      16: out3 <= 16'he782;
      17: out3 <= 16'he611;
      18: out3 <= 16'he4a3;
      19: out3 <= 16'he33a;
      20: out3 <= 16'he1d5;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdf19;
      23: out3 <= 16'hddc3;
      24: out3 <= 16'hdc72;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'hd9e0;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'hd766;
      29: out3 <= 16'hd632;
      30: out3 <= 16'hd505;
      31: out3 <= 16'hd3df;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd1a6;
      34: out3 <= 16'hd094;
      35: out3 <= 16'hcf8a;
      36: out3 <= 16'hce87;
      37: out3 <= 16'hcd8c;
      38: out3 <= 16'hcc98;
      39: out3 <= 16'hcbad;
      40: out3 <= 16'hcac9;
      41: out3 <= 16'hc9ee;
      42: out3 <= 16'hc91b;
      43: out3 <= 16'hc850;
      44: out3 <= 16'hc78f;
      45: out3 <= 16'hc6d5;
      46: out3 <= 16'hc625;
      47: out3 <= 16'hc57e;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc44a;
      50: out3 <= 16'hc3be;
      51: out3 <= 16'hc33b;
      52: out3 <= 16'hc2c1;
      53: out3 <= 16'hc251;
      54: out3 <= 16'hc1eb;
      55: out3 <= 16'hc18e;
      56: out3 <= 16'hc13b;
      57: out3 <= 16'hc0f1;
      58: out3 <= 16'hc0b1;
      59: out3 <= 16'hc07b;
      60: out3 <= 16'hc04f;
      61: out3 <= 16'hc02c;
      62: out3 <= 16'hc014;
      63: out3 <= 16'hc005;
      64: out3 <= 16'hc000;
      65: out3 <= 16'hc005;
      66: out3 <= 16'hc014;
      67: out3 <= 16'hc02c;
      68: out3 <= 16'hc04f;
      69: out3 <= 16'hc07b;
      70: out3 <= 16'hc0b1;
      71: out3 <= 16'hc0f1;
      72: out3 <= 16'hc13b;
      73: out3 <= 16'hc18e;
      74: out3 <= 16'hc1eb;
      75: out3 <= 16'hc251;
      76: out3 <= 16'hc2c1;
      77: out3 <= 16'hc33b;
      78: out3 <= 16'hc3be;
      79: out3 <= 16'hc44a;
      80: out3 <= 16'hc4df;
      81: out3 <= 16'hc57e;
      82: out3 <= 16'hc625;
      83: out3 <= 16'hc6d5;
      84: out3 <= 16'hc78f;
      85: out3 <= 16'hc850;
      86: out3 <= 16'hc91b;
      87: out3 <= 16'hc9ee;
      88: out3 <= 16'hcac9;
      89: out3 <= 16'hcbad;
      90: out3 <= 16'hcc98;
      91: out3 <= 16'hcd8c;
      92: out3 <= 16'hce87;
      93: out3 <= 16'hcf8a;
      94: out3 <= 16'hd094;
      95: out3 <= 16'hd1a6;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd3df;
      98: out3 <= 16'hd505;
      99: out3 <= 16'hd632;
      100: out3 <= 16'hd766;
      101: out3 <= 16'hd8a0;
      102: out3 <= 16'hd9e0;
      103: out3 <= 16'hdb26;
      104: out3 <= 16'hdc72;
      105: out3 <= 16'hddc3;
      106: out3 <= 16'hdf19;
      107: out3 <= 16'he074;
      108: out3 <= 16'he1d5;
      109: out3 <= 16'he33a;
      110: out3 <= 16'he4a3;
      111: out3 <= 16'he611;
      112: out3 <= 16'he782;
      113: out3 <= 16'he8f7;
      114: out3 <= 16'hea70;
      115: out3 <= 16'hebed;
      116: out3 <= 16'hed6c;
      117: out3 <= 16'heeee;
      118: out3 <= 16'hf073;
      119: out3 <= 16'hf1fa;
      120: out3 <= 16'hf384;
      121: out3 <= 16'hf50f;
      122: out3 <= 16'hf69c;
      123: out3 <= 16'hf82a;
      124: out3 <= 16'hf9ba;
      125: out3 <= 16'hfb4b;
      126: out3 <= 16'hfcdc;
      127: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D10_45639(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffd;
      1: out3 <= 16'h3fe7;
      2: out3 <= 16'h3fbb;
      3: out3 <= 16'h3f78;
      4: out3 <= 16'h3f20;
      5: out3 <= 16'h3eb1;
      6: out3 <= 16'h3e2d;
      7: out3 <= 16'h3d93;
      8: out3 <= 16'h3ce4;
      9: out3 <= 16'h3c20;
      10: out3 <= 16'h3b47;
      11: out3 <= 16'h3a59;
      12: out3 <= 16'h3958;
      13: out3 <= 16'h3842;
      14: out3 <= 16'h3718;
      15: out3 <= 16'h35dc;
      16: out3 <= 16'h348d;
      17: out3 <= 16'h332c;
      18: out3 <= 16'h31b9;
      19: out3 <= 16'h3034;
      20: out3 <= 16'h2e9f;
      21: out3 <= 16'h2cfa;
      22: out3 <= 16'h2b45;
      23: out3 <= 16'h2981;
      24: out3 <= 16'h27af;
      25: out3 <= 16'h25cf;
      26: out3 <= 16'h23e2;
      27: out3 <= 16'h21e8;
      28: out3 <= 16'h1fe3;
      29: out3 <= 16'h1dd3;
      30: out3 <= 16'h1bb8;
      31: out3 <= 16'h1993;
      32: out3 <= 16'h1766;
      33: out3 <= 16'h1531;
      34: out3 <= 16'h12f4;
      35: out3 <= 16'h10b1;
      36: out3 <= 16'he68;
      37: out3 <= 16'hc1a;
      38: out3 <= 16'h9c7;
      39: out3 <= 16'h772;
      40: out3 <= 16'h51a;
      41: out3 <= 16'h2c0;
      42: out3 <= 16'h65;
      43: out3 <= 16'hfe09;
      44: out3 <= 16'hfbaf;
      45: out3 <= 16'hf956;
      46: out3 <= 16'hf6ff;
      47: out3 <= 16'hf4ac;
      48: out3 <= 16'hf25c;
      49: out3 <= 16'hf012;
      50: out3 <= 16'hedcc;
      51: out3 <= 16'heb8d;
      52: out3 <= 16'he955;
      53: out3 <= 16'he725;
      54: out3 <= 16'he4fe;
      55: out3 <= 16'he2e0;
      56: out3 <= 16'he0cc;
      57: out3 <= 16'hdec3;
      58: out3 <= 16'hdcc5;
      59: out3 <= 16'hdad4;
      60: out3 <= 16'hd8ef;
      61: out3 <= 16'hd719;
      62: out3 <= 16'hd550;
      63: out3 <= 16'hd396;
      64: out3 <= 16'hd1eb;
      65: out3 <= 16'hd051;
      66: out3 <= 16'hcec7;
      67: out3 <= 16'hcd4e;
      68: out3 <= 16'hcbe7;
      69: out3 <= 16'hca92;
      70: out3 <= 16'hc94f;
      71: out3 <= 16'hc81f;
      72: out3 <= 16'hc703;
      73: out3 <= 16'hc5fa;
      74: out3 <= 16'hc506;
      75: out3 <= 16'hc426;
      76: out3 <= 16'hc35b;
      77: out3 <= 16'hc2a5;
      78: out3 <= 16'hc204;
      79: out3 <= 16'hc178;
      80: out3 <= 16'hc103;
      81: out3 <= 16'hc0a3;
      82: out3 <= 16'hc059;
      83: out3 <= 16'hc025;
      84: out3 <= 16'hc008;
      85: out3 <= 16'hc000;
      86: out3 <= 16'hc00f;
      87: out3 <= 16'hc034;
      88: out3 <= 16'hc06f;
      89: out3 <= 16'hc0c0;
      90: out3 <= 16'hc128;
      91: out3 <= 16'hc1a4;
      92: out3 <= 16'hc237;
      93: out3 <= 16'hc2df;
      94: out3 <= 16'hc39c;
      95: out3 <= 16'hc46e;
      96: out3 <= 16'hc555;
      97: out3 <= 16'hc650;
      98: out3 <= 16'hc75f;
      99: out3 <= 16'hc882;
      100: out3 <= 16'hc9b8;
      101: out3 <= 16'hcb01;
      102: out3 <= 16'hcc5d;
      103: out3 <= 16'hcdca;
      104: out3 <= 16'hcf48;
      105: out3 <= 16'hd0d8;
      106: out3 <= 16'hd278;
      107: out3 <= 16'hd428;
      108: out3 <= 16'hd5e6;
      109: out3 <= 16'hd7b4;
      110: out3 <= 16'hd98f;
      111: out3 <= 16'hdb78;
      112: out3 <= 16'hdd6e;
      113: out3 <= 16'hdf6f;
      114: out3 <= 16'he17c;
      115: out3 <= 16'he394;
      116: out3 <= 16'he5b5;
      117: out3 <= 16'he7df;
      118: out3 <= 16'hea12;
      119: out3 <= 16'hec4c;
      120: out3 <= 16'hee8d;
      121: out3 <= 16'hf0d5;
      122: out3 <= 16'hf321;
      123: out3 <= 16'hf572;
      124: out3 <= 16'hf7c7;
      125: out3 <= 16'hfa1e;
      126: out3 <= 16'hfc78;
      127: out3 <= 16'hfed2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_45769(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fff;
      2: out3 <= 16'h3ffb;
      3: out3 <= 16'h3ff5;
      4: out3 <= 16'h3fec;
      5: out3 <= 16'h3fe1;
      6: out3 <= 16'h3fd4;
      7: out3 <= 16'h3fc4;
      8: out3 <= 16'h3fb1;
      9: out3 <= 16'h3f9c;
      10: out3 <= 16'h3f85;
      11: out3 <= 16'h3f6b;
      12: out3 <= 16'h3f4f;
      13: out3 <= 16'h3f30;
      14: out3 <= 16'h3f0f;
      15: out3 <= 16'h3eeb;
      16: out3 <= 16'h3ec5;
      17: out3 <= 16'h3e9d;
      18: out3 <= 16'h3e72;
      19: out3 <= 16'h3e45;
      20: out3 <= 16'h3e15;
      21: out3 <= 16'h3de3;
      22: out3 <= 16'h3daf;
      23: out3 <= 16'h3d78;
      24: out3 <= 16'h3d3f;
      25: out3 <= 16'h3d03;
      26: out3 <= 16'h3cc5;
      27: out3 <= 16'h3c85;
      28: out3 <= 16'h3c42;
      29: out3 <= 16'h3bfd;
      30: out3 <= 16'h3bb6;
      31: out3 <= 16'h3b6d;
      32: out3 <= 16'h3b21;
      33: out3 <= 16'h3ad3;
      34: out3 <= 16'h3a82;
      35: out3 <= 16'h3a30;
      36: out3 <= 16'h39db;
      37: out3 <= 16'h3984;
      38: out3 <= 16'h392b;
      39: out3 <= 16'h38cf;
      40: out3 <= 16'h3871;
      41: out3 <= 16'h3812;
      42: out3 <= 16'h37b0;
      43: out3 <= 16'h374b;
      44: out3 <= 16'h36e5;
      45: out3 <= 16'h367d;
      46: out3 <= 16'h3612;
      47: out3 <= 16'h35a5;
      48: out3 <= 16'h3537;
      49: out3 <= 16'h34c6;
      50: out3 <= 16'h3453;
      51: out3 <= 16'h33df;
      52: out3 <= 16'h3368;
      53: out3 <= 16'h32ef;
      54: out3 <= 16'h3274;
      55: out3 <= 16'h31f8;
      56: out3 <= 16'h3179;
      57: out3 <= 16'h30f9;
      58: out3 <= 16'h3076;
      59: out3 <= 16'h2ff2;
      60: out3 <= 16'h2f6c;
      61: out3 <= 16'h2ee4;
      62: out3 <= 16'h2e5a;
      63: out3 <= 16'h2dcf;
      64: out3 <= 16'h2d41;
      65: out3 <= 16'h2cb2;
      66: out3 <= 16'h2c21;
      67: out3 <= 16'h2b8f;
      68: out3 <= 16'h2afb;
      69: out3 <= 16'h2a65;
      70: out3 <= 16'h29ce;
      71: out3 <= 16'h2935;
      72: out3 <= 16'h289a;
      73: out3 <= 16'h27fe;
      74: out3 <= 16'h2760;
      75: out3 <= 16'h26c1;
      76: out3 <= 16'h2620;
      77: out3 <= 16'h257e;
      78: out3 <= 16'h24da;
      79: out3 <= 16'h2435;
      80: out3 <= 16'h238e;
      81: out3 <= 16'h22e7;
      82: out3 <= 16'h223d;
      83: out3 <= 16'h2193;
      84: out3 <= 16'h20e7;
      85: out3 <= 16'h203a;
      86: out3 <= 16'h1f8c;
      87: out3 <= 16'h1edc;
      88: out3 <= 16'h1e2b;
      89: out3 <= 16'h1d79;
      90: out3 <= 16'h1cc6;
      91: out3 <= 16'h1c12;
      92: out3 <= 16'h1b5d;
      93: out3 <= 16'h1aa7;
      94: out3 <= 16'h19ef;
      95: out3 <= 16'h1937;
      96: out3 <= 16'h187e;
      97: out3 <= 16'h17c4;
      98: out3 <= 16'h1709;
      99: out3 <= 16'h164c;
      100: out3 <= 16'h1590;
      101: out3 <= 16'h14d2;
      102: out3 <= 16'h1413;
      103: out3 <= 16'h1354;
      104: out3 <= 16'h1294;
      105: out3 <= 16'h11d3;
      106: out3 <= 16'h1112;
      107: out3 <= 16'h1050;
      108: out3 <= 16'hf8d;
      109: out3 <= 16'heca;
      110: out3 <= 16'he06;
      111: out3 <= 16'hd41;
      112: out3 <= 16'hc7c;
      113: out3 <= 16'hbb7;
      114: out3 <= 16'haf1;
      115: out3 <= 16'ha2b;
      116: out3 <= 16'h964;
      117: out3 <= 16'h89d;
      118: out3 <= 16'h7d6;
      119: out3 <= 16'h70e;
      120: out3 <= 16'h646;
      121: out3 <= 16'h57e;
      122: out3 <= 16'h4b5;
      123: out3 <= 16'h3ed;
      124: out3 <= 16'h324;
      125: out3 <= 16'h25b;
      126: out3 <= 16'h192;
      127: out3 <= 16'hc9;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D18_45899(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfed2;
      1: out3 <= 16'hfc78;
      2: out3 <= 16'hfa1e;
      3: out3 <= 16'hf7c7;
      4: out3 <= 16'hf572;
      5: out3 <= 16'hf321;
      6: out3 <= 16'hf0d5;
      7: out3 <= 16'hee8d;
      8: out3 <= 16'hec4c;
      9: out3 <= 16'hea12;
      10: out3 <= 16'he7df;
      11: out3 <= 16'he5b5;
      12: out3 <= 16'he394;
      13: out3 <= 16'he17c;
      14: out3 <= 16'hdf6f;
      15: out3 <= 16'hdd6e;
      16: out3 <= 16'hdb78;
      17: out3 <= 16'hd98f;
      18: out3 <= 16'hd7b4;
      19: out3 <= 16'hd5e6;
      20: out3 <= 16'hd428;
      21: out3 <= 16'hd278;
      22: out3 <= 16'hd0d8;
      23: out3 <= 16'hcf48;
      24: out3 <= 16'hcdca;
      25: out3 <= 16'hcc5d;
      26: out3 <= 16'hcb01;
      27: out3 <= 16'hc9b8;
      28: out3 <= 16'hc882;
      29: out3 <= 16'hc75f;
      30: out3 <= 16'hc650;
      31: out3 <= 16'hc555;
      32: out3 <= 16'hc46e;
      33: out3 <= 16'hc39c;
      34: out3 <= 16'hc2df;
      35: out3 <= 16'hc237;
      36: out3 <= 16'hc1a4;
      37: out3 <= 16'hc128;
      38: out3 <= 16'hc0c0;
      39: out3 <= 16'hc06f;
      40: out3 <= 16'hc034;
      41: out3 <= 16'hc00f;
      42: out3 <= 16'hc000;
      43: out3 <= 16'hc008;
      44: out3 <= 16'hc025;
      45: out3 <= 16'hc059;
      46: out3 <= 16'hc0a3;
      47: out3 <= 16'hc103;
      48: out3 <= 16'hc178;
      49: out3 <= 16'hc204;
      50: out3 <= 16'hc2a5;
      51: out3 <= 16'hc35b;
      52: out3 <= 16'hc426;
      53: out3 <= 16'hc506;
      54: out3 <= 16'hc5fa;
      55: out3 <= 16'hc703;
      56: out3 <= 16'hc81f;
      57: out3 <= 16'hc94f;
      58: out3 <= 16'hca92;
      59: out3 <= 16'hcbe7;
      60: out3 <= 16'hcd4e;
      61: out3 <= 16'hcec7;
      62: out3 <= 16'hd051;
      63: out3 <= 16'hd1eb;
      64: out3 <= 16'hd396;
      65: out3 <= 16'hd550;
      66: out3 <= 16'hd719;
      67: out3 <= 16'hd8ef;
      68: out3 <= 16'hdad4;
      69: out3 <= 16'hdcc5;
      70: out3 <= 16'hdec3;
      71: out3 <= 16'he0cc;
      72: out3 <= 16'he2e0;
      73: out3 <= 16'he4fe;
      74: out3 <= 16'he725;
      75: out3 <= 16'he955;
      76: out3 <= 16'heb8d;
      77: out3 <= 16'hedcc;
      78: out3 <= 16'hf012;
      79: out3 <= 16'hf25c;
      80: out3 <= 16'hf4ac;
      81: out3 <= 16'hf6ff;
      82: out3 <= 16'hf956;
      83: out3 <= 16'hfbaf;
      84: out3 <= 16'hfe09;
      85: out3 <= 16'h65;
      86: out3 <= 16'h2c0;
      87: out3 <= 16'h51a;
      88: out3 <= 16'h772;
      89: out3 <= 16'h9c7;
      90: out3 <= 16'hc1a;
      91: out3 <= 16'he68;
      92: out3 <= 16'h10b1;
      93: out3 <= 16'h12f4;
      94: out3 <= 16'h1531;
      95: out3 <= 16'h1766;
      96: out3 <= 16'h1993;
      97: out3 <= 16'h1bb8;
      98: out3 <= 16'h1dd3;
      99: out3 <= 16'h1fe3;
      100: out3 <= 16'h21e8;
      101: out3 <= 16'h23e2;
      102: out3 <= 16'h25cf;
      103: out3 <= 16'h27af;
      104: out3 <= 16'h2981;
      105: out3 <= 16'h2b45;
      106: out3 <= 16'h2cfa;
      107: out3 <= 16'h2e9f;
      108: out3 <= 16'h3034;
      109: out3 <= 16'h31b9;
      110: out3 <= 16'h332c;
      111: out3 <= 16'h348d;
      112: out3 <= 16'h35dc;
      113: out3 <= 16'h3718;
      114: out3 <= 16'h3842;
      115: out3 <= 16'h3958;
      116: out3 <= 16'h3a59;
      117: out3 <= 16'h3b47;
      118: out3 <= 16'h3c20;
      119: out3 <= 16'h3ce4;
      120: out3 <= 16'h3d93;
      121: out3 <= 16'h3e2d;
      122: out3 <= 16'h3eb1;
      123: out3 <= 16'h3f20;
      124: out3 <= 16'h3f78;
      125: out3 <= 16'h3fbb;
      126: out3 <= 16'h3fe7;
      127: out3 <= 16'h3ffd;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D14_46029(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfb4b;
      3: out3 <= 16'hf8f2;
      4: out3 <= 16'hf69c;
      5: out3 <= 16'hf449;
      6: out3 <= 16'hf1fa;
      7: out3 <= 16'hefb0;
      8: out3 <= 16'hed6c;
      9: out3 <= 16'heb2e;
      10: out3 <= 16'he8f7;
      11: out3 <= 16'he6c9;
      12: out3 <= 16'he4a3;
      13: out3 <= 16'he287;
      14: out3 <= 16'he074;
      15: out3 <= 16'hde6d;
      16: out3 <= 16'hdc72;
      17: out3 <= 16'hda82;
      18: out3 <= 16'hd8a0;
      19: out3 <= 16'hd6cb;
      20: out3 <= 16'hd505;
      21: out3 <= 16'hd34e;
      22: out3 <= 16'hd1a6;
      23: out3 <= 16'hd00e;
      24: out3 <= 16'hce87;
      25: out3 <= 16'hcd11;
      26: out3 <= 16'hcbad;
      27: out3 <= 16'hca5b;
      28: out3 <= 16'hc91b;
      29: out3 <= 16'hc7ee;
      30: out3 <= 16'hc6d5;
      31: out3 <= 16'hc5d0;
      32: out3 <= 16'hc4df;
      33: out3 <= 16'hc403;
      34: out3 <= 16'hc33b;
      35: out3 <= 16'hc288;
      36: out3 <= 16'hc1eb;
      37: out3 <= 16'hc163;
      38: out3 <= 16'hc0f1;
      39: out3 <= 16'hc095;
      40: out3 <= 16'hc04f;
      41: out3 <= 16'hc01f;
      42: out3 <= 16'hc005;
      43: out3 <= 16'hc001;
      44: out3 <= 16'hc014;
      45: out3 <= 16'hc03c;
      46: out3 <= 16'hc07b;
      47: out3 <= 16'hc0d0;
      48: out3 <= 16'hc13b;
      49: out3 <= 16'hc1bb;
      50: out3 <= 16'hc251;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc3be;
      53: out3 <= 16'hc493;
      54: out3 <= 16'hc57e;
      55: out3 <= 16'hc67c;
      56: out3 <= 16'hc78f;
      57: out3 <= 16'hc8b5;
      58: out3 <= 16'hc9ee;
      59: out3 <= 16'hcb3a;
      60: out3 <= 16'hcc98;
      61: out3 <= 16'hce08;
      62: out3 <= 16'hcf8a;
      63: out3 <= 16'hd11c;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd471;
      66: out3 <= 16'hd632;
      67: out3 <= 16'hd802;
      68: out3 <= 16'hd9e0;
      69: out3 <= 16'hdbcb;
      70: out3 <= 16'hddc3;
      71: out3 <= 16'hdfc6;
      72: out3 <= 16'he1d5;
      73: out3 <= 16'he3ee;
      74: out3 <= 16'he611;
      75: out3 <= 16'he83c;
      76: out3 <= 16'hea70;
      77: out3 <= 16'hecac;
      78: out3 <= 16'heeee;
      79: out3 <= 16'hf136;
      80: out3 <= 16'hf384;
      81: out3 <= 16'hf5d5;
      82: out3 <= 16'hf82a;
      83: out3 <= 16'hfa82;
      84: out3 <= 16'hfcdc;
      85: out3 <= 16'hff37;
      86: out3 <= 16'h192;
      87: out3 <= 16'h3ed;
      88: out3 <= 16'h646;
      89: out3 <= 16'h89d;
      90: out3 <= 16'haf1;
      91: out3 <= 16'hd41;
      92: out3 <= 16'hf8d;
      93: out3 <= 16'h11d3;
      94: out3 <= 16'h1413;
      95: out3 <= 16'h164c;
      96: out3 <= 16'h187e;
      97: out3 <= 16'h1aa7;
      98: out3 <= 16'h1cc6;
      99: out3 <= 16'h1edc;
      100: out3 <= 16'h20e7;
      101: out3 <= 16'h22e7;
      102: out3 <= 16'h24da;
      103: out3 <= 16'h26c1;
      104: out3 <= 16'h289a;
      105: out3 <= 16'h2a65;
      106: out3 <= 16'h2c21;
      107: out3 <= 16'h2dcf;
      108: out3 <= 16'h2f6c;
      109: out3 <= 16'h30f9;
      110: out3 <= 16'h3274;
      111: out3 <= 16'h33df;
      112: out3 <= 16'h3537;
      113: out3 <= 16'h367d;
      114: out3 <= 16'h37b0;
      115: out3 <= 16'h38cf;
      116: out3 <= 16'h39db;
      117: out3 <= 16'h3ad3;
      118: out3 <= 16'h3bb6;
      119: out3 <= 16'h3c85;
      120: out3 <= 16'h3d3f;
      121: out3 <= 16'h3de3;
      122: out3 <= 16'h3e72;
      123: out3 <= 16'h3eeb;
      124: out3 <= 16'h3f4f;
      125: out3 <= 16'h3f9c;
      126: out3 <= 16'h3fd4;
      127: out3 <= 16'h3ff5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D9_46159(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fe1;
      3: out3 <= 16'h3fc4;
      4: out3 <= 16'h3f9c;
      5: out3 <= 16'h3f6b;
      6: out3 <= 16'h3f30;
      7: out3 <= 16'h3eeb;
      8: out3 <= 16'h3e9d;
      9: out3 <= 16'h3e45;
      10: out3 <= 16'h3de3;
      11: out3 <= 16'h3d78;
      12: out3 <= 16'h3d03;
      13: out3 <= 16'h3c85;
      14: out3 <= 16'h3bfd;
      15: out3 <= 16'h3b6d;
      16: out3 <= 16'h3ad3;
      17: out3 <= 16'h3a30;
      18: out3 <= 16'h3984;
      19: out3 <= 16'h38cf;
      20: out3 <= 16'h3812;
      21: out3 <= 16'h374b;
      22: out3 <= 16'h367d;
      23: out3 <= 16'h35a5;
      24: out3 <= 16'h34c6;
      25: out3 <= 16'h33df;
      26: out3 <= 16'h32ef;
      27: out3 <= 16'h31f8;
      28: out3 <= 16'h30f9;
      29: out3 <= 16'h2ff2;
      30: out3 <= 16'h2ee4;
      31: out3 <= 16'h2dcf;
      32: out3 <= 16'h2cb2;
      33: out3 <= 16'h2b8f;
      34: out3 <= 16'h2a65;
      35: out3 <= 16'h2935;
      36: out3 <= 16'h27fe;
      37: out3 <= 16'h26c1;
      38: out3 <= 16'h257e;
      39: out3 <= 16'h2435;
      40: out3 <= 16'h22e7;
      41: out3 <= 16'h2193;
      42: out3 <= 16'h203a;
      43: out3 <= 16'h1edc;
      44: out3 <= 16'h1d79;
      45: out3 <= 16'h1c12;
      46: out3 <= 16'h1aa7;
      47: out3 <= 16'h1937;
      48: out3 <= 16'h17c4;
      49: out3 <= 16'h164c;
      50: out3 <= 16'h14d2;
      51: out3 <= 16'h1354;
      52: out3 <= 16'h11d3;
      53: out3 <= 16'h1050;
      54: out3 <= 16'heca;
      55: out3 <= 16'hd41;
      56: out3 <= 16'hbb7;
      57: out3 <= 16'ha2b;
      58: out3 <= 16'h89d;
      59: out3 <= 16'h70e;
      60: out3 <= 16'h57e;
      61: out3 <= 16'h3ed;
      62: out3 <= 16'h25b;
      63: out3 <= 16'hc9;
      64: out3 <= 16'hff37;
      65: out3 <= 16'hfda5;
      66: out3 <= 16'hfc13;
      67: out3 <= 16'hfa82;
      68: out3 <= 16'hf8f2;
      69: out3 <= 16'hf763;
      70: out3 <= 16'hf5d5;
      71: out3 <= 16'hf449;
      72: out3 <= 16'hf2bf;
      73: out3 <= 16'hf136;
      74: out3 <= 16'hefb0;
      75: out3 <= 16'hee2d;
      76: out3 <= 16'hecac;
      77: out3 <= 16'heb2e;
      78: out3 <= 16'he9b4;
      79: out3 <= 16'he83c;
      80: out3 <= 16'he6c9;
      81: out3 <= 16'he559;
      82: out3 <= 16'he3ee;
      83: out3 <= 16'he287;
      84: out3 <= 16'he124;
      85: out3 <= 16'hdfc6;
      86: out3 <= 16'hde6d;
      87: out3 <= 16'hdd19;
      88: out3 <= 16'hdbcb;
      89: out3 <= 16'hda82;
      90: out3 <= 16'hd93f;
      91: out3 <= 16'hd802;
      92: out3 <= 16'hd6cb;
      93: out3 <= 16'hd59b;
      94: out3 <= 16'hd471;
      95: out3 <= 16'hd34e;
      96: out3 <= 16'hd231;
      97: out3 <= 16'hd11c;
      98: out3 <= 16'hd00e;
      99: out3 <= 16'hcf07;
      100: out3 <= 16'hce08;
      101: out3 <= 16'hcd11;
      102: out3 <= 16'hcc21;
      103: out3 <= 16'hcb3a;
      104: out3 <= 16'hca5b;
      105: out3 <= 16'hc983;
      106: out3 <= 16'hc8b5;
      107: out3 <= 16'hc7ee;
      108: out3 <= 16'hc731;
      109: out3 <= 16'hc67c;
      110: out3 <= 16'hc5d0;
      111: out3 <= 16'hc52d;
      112: out3 <= 16'hc493;
      113: out3 <= 16'hc403;
      114: out3 <= 16'hc37b;
      115: out3 <= 16'hc2fd;
      116: out3 <= 16'hc288;
      117: out3 <= 16'hc21d;
      118: out3 <= 16'hc1bb;
      119: out3 <= 16'hc163;
      120: out3 <= 16'hc115;
      121: out3 <= 16'hc0d0;
      122: out3 <= 16'hc095;
      123: out3 <= 16'hc064;
      124: out3 <= 16'hc03c;
      125: out3 <= 16'hc01f;
      126: out3 <= 16'hc00b;
      127: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D5_46289(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffb;
      2: out3 <= 16'h3fec;
      3: out3 <= 16'h3fd4;
      4: out3 <= 16'h3fb1;
      5: out3 <= 16'h3f85;
      6: out3 <= 16'h3f4f;
      7: out3 <= 16'h3f0f;
      8: out3 <= 16'h3ec5;
      9: out3 <= 16'h3e72;
      10: out3 <= 16'h3e15;
      11: out3 <= 16'h3daf;
      12: out3 <= 16'h3d3f;
      13: out3 <= 16'h3cc5;
      14: out3 <= 16'h3c42;
      15: out3 <= 16'h3bb6;
      16: out3 <= 16'h3b21;
      17: out3 <= 16'h3a82;
      18: out3 <= 16'h39db;
      19: out3 <= 16'h392b;
      20: out3 <= 16'h3871;
      21: out3 <= 16'h37b0;
      22: out3 <= 16'h36e5;
      23: out3 <= 16'h3612;
      24: out3 <= 16'h3537;
      25: out3 <= 16'h3453;
      26: out3 <= 16'h3368;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h3179;
      29: out3 <= 16'h3076;
      30: out3 <= 16'h2f6c;
      31: out3 <= 16'h2e5a;
      32: out3 <= 16'h2d41;
      33: out3 <= 16'h2c21;
      34: out3 <= 16'h2afb;
      35: out3 <= 16'h29ce;
      36: out3 <= 16'h289a;
      37: out3 <= 16'h2760;
      38: out3 <= 16'h2620;
      39: out3 <= 16'h24da;
      40: out3 <= 16'h238e;
      41: out3 <= 16'h223d;
      42: out3 <= 16'h20e7;
      43: out3 <= 16'h1f8c;
      44: out3 <= 16'h1e2b;
      45: out3 <= 16'h1cc6;
      46: out3 <= 16'h1b5d;
      47: out3 <= 16'h19ef;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1709;
      50: out3 <= 16'h1590;
      51: out3 <= 16'h1413;
      52: out3 <= 16'h1294;
      53: out3 <= 16'h1112;
      54: out3 <= 16'hf8d;
      55: out3 <= 16'he06;
      56: out3 <= 16'hc7c;
      57: out3 <= 16'haf1;
      58: out3 <= 16'h964;
      59: out3 <= 16'h7d6;
      60: out3 <= 16'h646;
      61: out3 <= 16'h4b5;
      62: out3 <= 16'h324;
      63: out3 <= 16'h192;
      64: out3 <= 16'h0;
      65: out3 <= 16'hfe6e;
      66: out3 <= 16'hfcdc;
      67: out3 <= 16'hfb4b;
      68: out3 <= 16'hf9ba;
      69: out3 <= 16'hf82a;
      70: out3 <= 16'hf69c;
      71: out3 <= 16'hf50f;
      72: out3 <= 16'hf384;
      73: out3 <= 16'hf1fa;
      74: out3 <= 16'hf073;
      75: out3 <= 16'heeee;
      76: out3 <= 16'hed6c;
      77: out3 <= 16'hebed;
      78: out3 <= 16'hea70;
      79: out3 <= 16'he8f7;
      80: out3 <= 16'he782;
      81: out3 <= 16'he611;
      82: out3 <= 16'he4a3;
      83: out3 <= 16'he33a;
      84: out3 <= 16'he1d5;
      85: out3 <= 16'he074;
      86: out3 <= 16'hdf19;
      87: out3 <= 16'hddc3;
      88: out3 <= 16'hdc72;
      89: out3 <= 16'hdb26;
      90: out3 <= 16'hd9e0;
      91: out3 <= 16'hd8a0;
      92: out3 <= 16'hd766;
      93: out3 <= 16'hd632;
      94: out3 <= 16'hd505;
      95: out3 <= 16'hd3df;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd1a6;
      98: out3 <= 16'hd094;
      99: out3 <= 16'hcf8a;
      100: out3 <= 16'hce87;
      101: out3 <= 16'hcd8c;
      102: out3 <= 16'hcc98;
      103: out3 <= 16'hcbad;
      104: out3 <= 16'hcac9;
      105: out3 <= 16'hc9ee;
      106: out3 <= 16'hc91b;
      107: out3 <= 16'hc850;
      108: out3 <= 16'hc78f;
      109: out3 <= 16'hc6d5;
      110: out3 <= 16'hc625;
      111: out3 <= 16'hc57e;
      112: out3 <= 16'hc4df;
      113: out3 <= 16'hc44a;
      114: out3 <= 16'hc3be;
      115: out3 <= 16'hc33b;
      116: out3 <= 16'hc2c1;
      117: out3 <= 16'hc251;
      118: out3 <= 16'hc1eb;
      119: out3 <= 16'hc18e;
      120: out3 <= 16'hc13b;
      121: out3 <= 16'hc0f1;
      122: out3 <= 16'hc0b1;
      123: out3 <= 16'hc07b;
      124: out3 <= 16'hc04f;
      125: out3 <= 16'hc02c;
      126: out3 <= 16'hc014;
      127: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D17_46419(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfc13;
      3: out3 <= 16'hfa82;
      4: out3 <= 16'hf8f2;
      5: out3 <= 16'hf763;
      6: out3 <= 16'hf5d5;
      7: out3 <= 16'hf449;
      8: out3 <= 16'hf2bf;
      9: out3 <= 16'hf136;
      10: out3 <= 16'hefb0;
      11: out3 <= 16'hee2d;
      12: out3 <= 16'hecac;
      13: out3 <= 16'heb2e;
      14: out3 <= 16'he9b4;
      15: out3 <= 16'he83c;
      16: out3 <= 16'he6c9;
      17: out3 <= 16'he559;
      18: out3 <= 16'he3ee;
      19: out3 <= 16'he287;
      20: out3 <= 16'he124;
      21: out3 <= 16'hdfc6;
      22: out3 <= 16'hde6d;
      23: out3 <= 16'hdd19;
      24: out3 <= 16'hdbcb;
      25: out3 <= 16'hda82;
      26: out3 <= 16'hd93f;
      27: out3 <= 16'hd802;
      28: out3 <= 16'hd6cb;
      29: out3 <= 16'hd59b;
      30: out3 <= 16'hd471;
      31: out3 <= 16'hd34e;
      32: out3 <= 16'hd231;
      33: out3 <= 16'hd11c;
      34: out3 <= 16'hd00e;
      35: out3 <= 16'hcf07;
      36: out3 <= 16'hce08;
      37: out3 <= 16'hcd11;
      38: out3 <= 16'hcc21;
      39: out3 <= 16'hcb3a;
      40: out3 <= 16'hca5b;
      41: out3 <= 16'hc983;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hc7ee;
      44: out3 <= 16'hc731;
      45: out3 <= 16'hc67c;
      46: out3 <= 16'hc5d0;
      47: out3 <= 16'hc52d;
      48: out3 <= 16'hc493;
      49: out3 <= 16'hc403;
      50: out3 <= 16'hc37b;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc288;
      53: out3 <= 16'hc21d;
      54: out3 <= 16'hc1bb;
      55: out3 <= 16'hc163;
      56: out3 <= 16'hc115;
      57: out3 <= 16'hc0d0;
      58: out3 <= 16'hc095;
      59: out3 <= 16'hc064;
      60: out3 <= 16'hc03c;
      61: out3 <= 16'hc01f;
      62: out3 <= 16'hc00b;
      63: out3 <= 16'hc001;
      64: out3 <= 16'hc001;
      65: out3 <= 16'hc00b;
      66: out3 <= 16'hc01f;
      67: out3 <= 16'hc03c;
      68: out3 <= 16'hc064;
      69: out3 <= 16'hc095;
      70: out3 <= 16'hc0d0;
      71: out3 <= 16'hc115;
      72: out3 <= 16'hc163;
      73: out3 <= 16'hc1bb;
      74: out3 <= 16'hc21d;
      75: out3 <= 16'hc288;
      76: out3 <= 16'hc2fd;
      77: out3 <= 16'hc37b;
      78: out3 <= 16'hc403;
      79: out3 <= 16'hc493;
      80: out3 <= 16'hc52d;
      81: out3 <= 16'hc5d0;
      82: out3 <= 16'hc67c;
      83: out3 <= 16'hc731;
      84: out3 <= 16'hc7ee;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc983;
      87: out3 <= 16'hca5b;
      88: out3 <= 16'hcb3a;
      89: out3 <= 16'hcc21;
      90: out3 <= 16'hcd11;
      91: out3 <= 16'hce08;
      92: out3 <= 16'hcf07;
      93: out3 <= 16'hd00e;
      94: out3 <= 16'hd11c;
      95: out3 <= 16'hd231;
      96: out3 <= 16'hd34e;
      97: out3 <= 16'hd471;
      98: out3 <= 16'hd59b;
      99: out3 <= 16'hd6cb;
      100: out3 <= 16'hd802;
      101: out3 <= 16'hd93f;
      102: out3 <= 16'hda82;
      103: out3 <= 16'hdbcb;
      104: out3 <= 16'hdd19;
      105: out3 <= 16'hde6d;
      106: out3 <= 16'hdfc6;
      107: out3 <= 16'he124;
      108: out3 <= 16'he287;
      109: out3 <= 16'he3ee;
      110: out3 <= 16'he559;
      111: out3 <= 16'he6c9;
      112: out3 <= 16'he83c;
      113: out3 <= 16'he9b4;
      114: out3 <= 16'heb2e;
      115: out3 <= 16'hecac;
      116: out3 <= 16'hee2d;
      117: out3 <= 16'hefb0;
      118: out3 <= 16'hf136;
      119: out3 <= 16'hf2bf;
      120: out3 <= 16'hf449;
      121: out3 <= 16'hf5d5;
      122: out3 <= 16'hf763;
      123: out3 <= 16'hf8f2;
      124: out3 <= 16'hfa82;
      125: out3 <= 16'hfc13;
      126: out3 <= 16'hfda5;
      127: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8_46549(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffd;
      2: out3 <= 16'h3ff8;
      3: out3 <= 16'h3ff1;
      4: out3 <= 16'h3fe7;
      5: out3 <= 16'h3fdb;
      6: out3 <= 16'h3fcc;
      7: out3 <= 16'h3fbb;
      8: out3 <= 16'h3fa7;
      9: out3 <= 16'h3f91;
      10: out3 <= 16'h3f78;
      11: out3 <= 16'h3f5d;
      12: out3 <= 16'h3f40;
      13: out3 <= 16'h3f20;
      14: out3 <= 16'h3efd;
      15: out3 <= 16'h3ed8;
      16: out3 <= 16'h3eb1;
      17: out3 <= 16'h3e88;
      18: out3 <= 16'h3e5c;
      19: out3 <= 16'h3e2d;
      20: out3 <= 16'h3dfc;
      21: out3 <= 16'h3dc9;
      22: out3 <= 16'h3d93;
      23: out3 <= 16'h3d5b;
      24: out3 <= 16'h3d21;
      25: out3 <= 16'h3ce4;
      26: out3 <= 16'h3ca5;
      27: out3 <= 16'h3c64;
      28: out3 <= 16'h3c20;
      29: out3 <= 16'h3bda;
      30: out3 <= 16'h3b92;
      31: out3 <= 16'h3b47;
      32: out3 <= 16'h3afa;
      33: out3 <= 16'h3aab;
      34: out3 <= 16'h3a59;
      35: out3 <= 16'h3a06;
      36: out3 <= 16'h39b0;
      37: out3 <= 16'h3958;
      38: out3 <= 16'h38fd;
      39: out3 <= 16'h38a1;
      40: out3 <= 16'h3842;
      41: out3 <= 16'h37e1;
      42: out3 <= 16'h377e;
      43: out3 <= 16'h3718;
      44: out3 <= 16'h36b1;
      45: out3 <= 16'h3648;
      46: out3 <= 16'h35dc;
      47: out3 <= 16'h356e;
      48: out3 <= 16'h34ff;
      49: out3 <= 16'h348d;
      50: out3 <= 16'h3419;
      51: out3 <= 16'h33a3;
      52: out3 <= 16'h332c;
      53: out3 <= 16'h32b2;
      54: out3 <= 16'h3236;
      55: out3 <= 16'h31b9;
      56: out3 <= 16'h3139;
      57: out3 <= 16'h30b8;
      58: out3 <= 16'h3034;
      59: out3 <= 16'h2faf;
      60: out3 <= 16'h2f28;
      61: out3 <= 16'h2e9f;
      62: out3 <= 16'h2e15;
      63: out3 <= 16'h2d88;
      64: out3 <= 16'h2cfa;
      65: out3 <= 16'h2c6a;
      66: out3 <= 16'h2bd8;
      67: out3 <= 16'h2b45;
      68: out3 <= 16'h2ab0;
      69: out3 <= 16'h2a1a;
      70: out3 <= 16'h2981;
      71: out3 <= 16'h28e7;
      72: out3 <= 16'h284c;
      73: out3 <= 16'h27af;
      74: out3 <= 16'h2711;
      75: out3 <= 16'h2671;
      76: out3 <= 16'h25cf;
      77: out3 <= 16'h252c;
      78: out3 <= 16'h2488;
      79: out3 <= 16'h23e2;
      80: out3 <= 16'h233b;
      81: out3 <= 16'h2292;
      82: out3 <= 16'h21e8;
      83: out3 <= 16'h213d;
      84: out3 <= 16'h2091;
      85: out3 <= 16'h1fe3;
      86: out3 <= 16'h1f34;
      87: out3 <= 16'h1e84;
      88: out3 <= 16'h1dd3;
      89: out3 <= 16'h1d20;
      90: out3 <= 16'h1c6c;
      91: out3 <= 16'h1bb8;
      92: out3 <= 16'h1b02;
      93: out3 <= 16'h1a4b;
      94: out3 <= 16'h1993;
      95: out3 <= 16'h18db;
      96: out3 <= 16'h1821;
      97: out3 <= 16'h1766;
      98: out3 <= 16'h16ab;
      99: out3 <= 16'h15ee;
      100: out3 <= 16'h1531;
      101: out3 <= 16'h1473;
      102: out3 <= 16'h13b4;
      103: out3 <= 16'h12f4;
      104: out3 <= 16'h1234;
      105: out3 <= 16'h1173;
      106: out3 <= 16'h10b1;
      107: out3 <= 16'hfee;
      108: out3 <= 16'hf2b;
      109: out3 <= 16'he68;
      110: out3 <= 16'hda4;
      111: out3 <= 16'hcdf;
      112: out3 <= 16'hc1a;
      113: out3 <= 16'hb54;
      114: out3 <= 16'ha8e;
      115: out3 <= 16'h9c7;
      116: out3 <= 16'h901;
      117: out3 <= 16'h839;
      118: out3 <= 16'h772;
      119: out3 <= 16'h6aa;
      120: out3 <= 16'h5e2;
      121: out3 <= 16'h51a;
      122: out3 <= 16'h451;
      123: out3 <= 16'h388;
      124: out3 <= 16'h2c0;
      125: out3 <= 16'h1f7;
      126: out3 <= 16'h12e;
      127: out3 <= 16'h65;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_46809(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fd4;
      3: out3 <= 16'h3f9c;
      4: out3 <= 16'h3f4f;
      5: out3 <= 16'h3eeb;
      6: out3 <= 16'h3e72;
      7: out3 <= 16'h3de3;
      8: out3 <= 16'h3d3f;
      9: out3 <= 16'h3c85;
      10: out3 <= 16'h3bb6;
      11: out3 <= 16'h3ad3;
      12: out3 <= 16'h39db;
      13: out3 <= 16'h38cf;
      14: out3 <= 16'h37b0;
      15: out3 <= 16'h367d;
      16: out3 <= 16'h3537;
      17: out3 <= 16'h33df;
      18: out3 <= 16'h3274;
      19: out3 <= 16'h30f9;
      20: out3 <= 16'h2f6c;
      21: out3 <= 16'h2dcf;
      22: out3 <= 16'h2c21;
      23: out3 <= 16'h2a65;
      24: out3 <= 16'h289a;
      25: out3 <= 16'h26c1;
      26: out3 <= 16'h24da;
      27: out3 <= 16'h22e7;
      28: out3 <= 16'h20e7;
      29: out3 <= 16'h1edc;
      30: out3 <= 16'h1cc6;
      31: out3 <= 16'h1aa7;
      32: out3 <= 16'h187e;
      33: out3 <= 16'h164c;
      34: out3 <= 16'h1413;
      35: out3 <= 16'h11d3;
      36: out3 <= 16'hf8d;
      37: out3 <= 16'hd41;
      38: out3 <= 16'haf1;
      39: out3 <= 16'h89d;
      40: out3 <= 16'h646;
      41: out3 <= 16'h3ed;
      42: out3 <= 16'h192;
      43: out3 <= 16'hff37;
      44: out3 <= 16'hfcdc;
      45: out3 <= 16'hfa82;
      46: out3 <= 16'hf82a;
      47: out3 <= 16'hf5d5;
      48: out3 <= 16'hf384;
      49: out3 <= 16'hf136;
      50: out3 <= 16'heeee;
      51: out3 <= 16'hecac;
      52: out3 <= 16'hea70;
      53: out3 <= 16'he83c;
      54: out3 <= 16'he611;
      55: out3 <= 16'he3ee;
      56: out3 <= 16'he1d5;
      57: out3 <= 16'hdfc6;
      58: out3 <= 16'hddc3;
      59: out3 <= 16'hdbcb;
      60: out3 <= 16'hd9e0;
      61: out3 <= 16'hd802;
      62: out3 <= 16'hd632;
      63: out3 <= 16'hd471;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd11c;
      66: out3 <= 16'hcf8a;
      67: out3 <= 16'hce08;
      68: out3 <= 16'hcc98;
      69: out3 <= 16'hcb3a;
      70: out3 <= 16'hc9ee;
      71: out3 <= 16'hc8b5;
      72: out3 <= 16'hc78f;
      73: out3 <= 16'hc67c;
      74: out3 <= 16'hc57e;
      75: out3 <= 16'hc493;
      76: out3 <= 16'hc3be;
      77: out3 <= 16'hc2fd;
      78: out3 <= 16'hc251;
      79: out3 <= 16'hc1bb;
      80: out3 <= 16'hc13b;
      81: out3 <= 16'hc0d0;
      82: out3 <= 16'hc07b;
      83: out3 <= 16'hc03c;
      84: out3 <= 16'hc014;
      85: out3 <= 16'hc001;
      86: out3 <= 16'hc005;
      87: out3 <= 16'hc01f;
      88: out3 <= 16'hc04f;
      89: out3 <= 16'hc095;
      90: out3 <= 16'hc0f1;
      91: out3 <= 16'hc163;
      92: out3 <= 16'hc1eb;
      93: out3 <= 16'hc288;
      94: out3 <= 16'hc33b;
      95: out3 <= 16'hc403;
      96: out3 <= 16'hc4df;
      97: out3 <= 16'hc5d0;
      98: out3 <= 16'hc6d5;
      99: out3 <= 16'hc7ee;
      100: out3 <= 16'hc91b;
      101: out3 <= 16'hca5b;
      102: out3 <= 16'hcbad;
      103: out3 <= 16'hcd11;
      104: out3 <= 16'hce87;
      105: out3 <= 16'hd00e;
      106: out3 <= 16'hd1a6;
      107: out3 <= 16'hd34e;
      108: out3 <= 16'hd505;
      109: out3 <= 16'hd6cb;
      110: out3 <= 16'hd8a0;
      111: out3 <= 16'hda82;
      112: out3 <= 16'hdc72;
      113: out3 <= 16'hde6d;
      114: out3 <= 16'he074;
      115: out3 <= 16'he287;
      116: out3 <= 16'he4a3;
      117: out3 <= 16'he6c9;
      118: out3 <= 16'he8f7;
      119: out3 <= 16'heb2e;
      120: out3 <= 16'hed6c;
      121: out3 <= 16'hefb0;
      122: out3 <= 16'hf1fa;
      123: out3 <= 16'hf449;
      124: out3 <= 16'hf69c;
      125: out3 <= 16'hf8f2;
      126: out3 <= 16'hfb4b;
      127: out3 <= 16'hfda5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16_46939(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff9b;
      1: out3 <= 16'hfed2;
      2: out3 <= 16'hfe09;
      3: out3 <= 16'hfd40;
      4: out3 <= 16'hfc78;
      5: out3 <= 16'hfbaf;
      6: out3 <= 16'hfae6;
      7: out3 <= 16'hfa1e;
      8: out3 <= 16'hf956;
      9: out3 <= 16'hf88e;
      10: out3 <= 16'hf7c7;
      11: out3 <= 16'hf6ff;
      12: out3 <= 16'hf639;
      13: out3 <= 16'hf572;
      14: out3 <= 16'hf4ac;
      15: out3 <= 16'hf3e6;
      16: out3 <= 16'hf321;
      17: out3 <= 16'hf25c;
      18: out3 <= 16'hf198;
      19: out3 <= 16'hf0d5;
      20: out3 <= 16'hf012;
      21: out3 <= 16'hef4f;
      22: out3 <= 16'hee8d;
      23: out3 <= 16'hedcc;
      24: out3 <= 16'hed0c;
      25: out3 <= 16'hec4c;
      26: out3 <= 16'heb8d;
      27: out3 <= 16'heacf;
      28: out3 <= 16'hea12;
      29: out3 <= 16'he955;
      30: out3 <= 16'he89a;
      31: out3 <= 16'he7df;
      32: out3 <= 16'he725;
      33: out3 <= 16'he66d;
      34: out3 <= 16'he5b5;
      35: out3 <= 16'he4fe;
      36: out3 <= 16'he448;
      37: out3 <= 16'he394;
      38: out3 <= 16'he2e0;
      39: out3 <= 16'he22d;
      40: out3 <= 16'he17c;
      41: out3 <= 16'he0cc;
      42: out3 <= 16'he01d;
      43: out3 <= 16'hdf6f;
      44: out3 <= 16'hdec3;
      45: out3 <= 16'hde18;
      46: out3 <= 16'hdd6e;
      47: out3 <= 16'hdcc5;
      48: out3 <= 16'hdc1e;
      49: out3 <= 16'hdb78;
      50: out3 <= 16'hdad4;
      51: out3 <= 16'hda31;
      52: out3 <= 16'hd98f;
      53: out3 <= 16'hd8ef;
      54: out3 <= 16'hd851;
      55: out3 <= 16'hd7b4;
      56: out3 <= 16'hd719;
      57: out3 <= 16'hd67f;
      58: out3 <= 16'hd5e6;
      59: out3 <= 16'hd550;
      60: out3 <= 16'hd4bb;
      61: out3 <= 16'hd428;
      62: out3 <= 16'hd396;
      63: out3 <= 16'hd306;
      64: out3 <= 16'hd278;
      65: out3 <= 16'hd1eb;
      66: out3 <= 16'hd161;
      67: out3 <= 16'hd0d8;
      68: out3 <= 16'hd051;
      69: out3 <= 16'hcfcc;
      70: out3 <= 16'hcf48;
      71: out3 <= 16'hcec7;
      72: out3 <= 16'hce47;
      73: out3 <= 16'hcdca;
      74: out3 <= 16'hcd4e;
      75: out3 <= 16'hccd4;
      76: out3 <= 16'hcc5d;
      77: out3 <= 16'hcbe7;
      78: out3 <= 16'hcb73;
      79: out3 <= 16'hcb01;
      80: out3 <= 16'hca92;
      81: out3 <= 16'hca24;
      82: out3 <= 16'hc9b8;
      83: out3 <= 16'hc94f;
      84: out3 <= 16'hc8e8;
      85: out3 <= 16'hc882;
      86: out3 <= 16'hc81f;
      87: out3 <= 16'hc7be;
      88: out3 <= 16'hc75f;
      89: out3 <= 16'hc703;
      90: out3 <= 16'hc6a8;
      91: out3 <= 16'hc650;
      92: out3 <= 16'hc5fa;
      93: out3 <= 16'hc5a7;
      94: out3 <= 16'hc555;
      95: out3 <= 16'hc506;
      96: out3 <= 16'hc4b9;
      97: out3 <= 16'hc46e;
      98: out3 <= 16'hc426;
      99: out3 <= 16'hc3e0;
      100: out3 <= 16'hc39c;
      101: out3 <= 16'hc35b;
      102: out3 <= 16'hc31c;
      103: out3 <= 16'hc2df;
      104: out3 <= 16'hc2a5;
      105: out3 <= 16'hc26d;
      106: out3 <= 16'hc237;
      107: out3 <= 16'hc204;
      108: out3 <= 16'hc1d3;
      109: out3 <= 16'hc1a4;
      110: out3 <= 16'hc178;
      111: out3 <= 16'hc14f;
      112: out3 <= 16'hc128;
      113: out3 <= 16'hc103;
      114: out3 <= 16'hc0e0;
      115: out3 <= 16'hc0c0;
      116: out3 <= 16'hc0a3;
      117: out3 <= 16'hc088;
      118: out3 <= 16'hc06f;
      119: out3 <= 16'hc059;
      120: out3 <= 16'hc045;
      121: out3 <= 16'hc034;
      122: out3 <= 16'hc025;
      123: out3 <= 16'hc019;
      124: out3 <= 16'hc00f;
      125: out3 <= 16'hc008;
      126: out3 <= 16'hc003;
      127: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D12_47329(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hff37;
      2: out3 <= 16'hfe6e;
      3: out3 <= 16'hfda5;
      4: out3 <= 16'hfcdc;
      5: out3 <= 16'hfc13;
      6: out3 <= 16'hfb4b;
      7: out3 <= 16'hfa82;
      8: out3 <= 16'hf9ba;
      9: out3 <= 16'hf8f2;
      10: out3 <= 16'hf82a;
      11: out3 <= 16'hf763;
      12: out3 <= 16'hf69c;
      13: out3 <= 16'hf5d5;
      14: out3 <= 16'hf50f;
      15: out3 <= 16'hf449;
      16: out3 <= 16'hf384;
      17: out3 <= 16'hf2bf;
      18: out3 <= 16'hf1fa;
      19: out3 <= 16'hf136;
      20: out3 <= 16'hf073;
      21: out3 <= 16'hefb0;
      22: out3 <= 16'heeee;
      23: out3 <= 16'hee2d;
      24: out3 <= 16'hed6c;
      25: out3 <= 16'hecac;
      26: out3 <= 16'hebed;
      27: out3 <= 16'heb2e;
      28: out3 <= 16'hea70;
      29: out3 <= 16'he9b4;
      30: out3 <= 16'he8f7;
      31: out3 <= 16'he83c;
      32: out3 <= 16'he782;
      33: out3 <= 16'he6c9;
      34: out3 <= 16'he611;
      35: out3 <= 16'he559;
      36: out3 <= 16'he4a3;
      37: out3 <= 16'he3ee;
      38: out3 <= 16'he33a;
      39: out3 <= 16'he287;
      40: out3 <= 16'he1d5;
      41: out3 <= 16'he124;
      42: out3 <= 16'he074;
      43: out3 <= 16'hdfc6;
      44: out3 <= 16'hdf19;
      45: out3 <= 16'hde6d;
      46: out3 <= 16'hddc3;
      47: out3 <= 16'hdd19;
      48: out3 <= 16'hdc72;
      49: out3 <= 16'hdbcb;
      50: out3 <= 16'hdb26;
      51: out3 <= 16'hda82;
      52: out3 <= 16'hd9e0;
      53: out3 <= 16'hd93f;
      54: out3 <= 16'hd8a0;
      55: out3 <= 16'hd802;
      56: out3 <= 16'hd766;
      57: out3 <= 16'hd6cb;
      58: out3 <= 16'hd632;
      59: out3 <= 16'hd59b;
      60: out3 <= 16'hd505;
      61: out3 <= 16'hd471;
      62: out3 <= 16'hd3df;
      63: out3 <= 16'hd34e;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd231;
      66: out3 <= 16'hd1a6;
      67: out3 <= 16'hd11c;
      68: out3 <= 16'hd094;
      69: out3 <= 16'hd00e;
      70: out3 <= 16'hcf8a;
      71: out3 <= 16'hcf07;
      72: out3 <= 16'hce87;
      73: out3 <= 16'hce08;
      74: out3 <= 16'hcd8c;
      75: out3 <= 16'hcd11;
      76: out3 <= 16'hcc98;
      77: out3 <= 16'hcc21;
      78: out3 <= 16'hcbad;
      79: out3 <= 16'hcb3a;
      80: out3 <= 16'hcac9;
      81: out3 <= 16'hca5b;
      82: out3 <= 16'hc9ee;
      83: out3 <= 16'hc983;
      84: out3 <= 16'hc91b;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc850;
      87: out3 <= 16'hc7ee;
      88: out3 <= 16'hc78f;
      89: out3 <= 16'hc731;
      90: out3 <= 16'hc6d5;
      91: out3 <= 16'hc67c;
      92: out3 <= 16'hc625;
      93: out3 <= 16'hc5d0;
      94: out3 <= 16'hc57e;
      95: out3 <= 16'hc52d;
      96: out3 <= 16'hc4df;
      97: out3 <= 16'hc493;
      98: out3 <= 16'hc44a;
      99: out3 <= 16'hc403;
      100: out3 <= 16'hc3be;
      101: out3 <= 16'hc37b;
      102: out3 <= 16'hc33b;
      103: out3 <= 16'hc2fd;
      104: out3 <= 16'hc2c1;
      105: out3 <= 16'hc288;
      106: out3 <= 16'hc251;
      107: out3 <= 16'hc21d;
      108: out3 <= 16'hc1eb;
      109: out3 <= 16'hc1bb;
      110: out3 <= 16'hc18e;
      111: out3 <= 16'hc163;
      112: out3 <= 16'hc13b;
      113: out3 <= 16'hc115;
      114: out3 <= 16'hc0f1;
      115: out3 <= 16'hc0d0;
      116: out3 <= 16'hc0b1;
      117: out3 <= 16'hc095;
      118: out3 <= 16'hc07b;
      119: out3 <= 16'hc064;
      120: out3 <= 16'hc04f;
      121: out3 <= 16'hc03c;
      122: out3 <= 16'hc02c;
      123: out3 <= 16'hc01f;
      124: out3 <= 16'hc014;
      125: out3 <= 16'hc00b;
      126: out3 <= 16'hc005;
      127: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock44609(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i1_in;
   reg [6:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_51246(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a209;
   wire signed [15:0] a162;
   wire signed [15:0] a212;
   wire signed [15:0] a166;
   wire signed [15:0] a213;
   wire signed [15:0] a214;
   wire signed [15:0] a217;
   wire signed [15:0] a218;
   wire signed [15:0] a221;
   wire signed [15:0] a222;
   wire signed [15:0] a225;
   wire signed [15:0] a186;
   wire signed [15:0] a228;
   wire signed [15:0] a190;
   wire signed [15:0] a229;
   wire signed [15:0] a230;
   wire signed [15:0] a233;
   wire signed [15:0] a234;
   wire signed [15:0] a237;
   wire signed [15:0] a238;
   reg signed [15:0] tm847;
   reg signed [15:0] tm851;
   reg signed [15:0] tm863;
   reg signed [15:0] tm867;
   reg signed [15:0] tm879;
   reg signed [15:0] tm883;
   reg signed [15:0] tm895;
   reg signed [15:0] tm899;
   reg signed [15:0] tm911;
   reg signed [15:0] tm915;
   reg signed [15:0] tm927;
   reg signed [15:0] tm931;
   reg signed [15:0] tm943;
   reg signed [15:0] tm950;
   reg signed [15:0] tm957;
   reg signed [15:0] tm964;
   reg signed [15:0] tm848;
   reg signed [15:0] tm852;
   reg signed [15:0] tm864;
   reg signed [15:0] tm868;
   reg signed [15:0] tm880;
   reg signed [15:0] tm884;
   reg signed [15:0] tm896;
   reg signed [15:0] tm900;
   reg signed [15:0] tm912;
   reg signed [15:0] tm916;
   reg signed [15:0] tm928;
   reg signed [15:0] tm932;
   reg signed [15:0] tm944;
   reg signed [15:0] tm951;
   reg signed [15:0] tm958;
   reg signed [15:0] tm965;
   wire signed [15:0] tm55;
   wire signed [15:0] a167;
   wire signed [15:0] tm56;
   wire signed [15:0] a169;
   wire signed [15:0] tm57;
   wire signed [15:0] a173;
   wire signed [15:0] tm58;
   wire signed [15:0] a175;
   wire signed [15:0] tm59;
   wire signed [15:0] a179;
   wire signed [15:0] tm60;
   wire signed [15:0] a181;
   wire signed [15:0] tm63;
   wire signed [15:0] a191;
   wire signed [15:0] tm64;
   wire signed [15:0] a193;
   wire signed [15:0] tm65;
   wire signed [15:0] a197;
   wire signed [15:0] tm66;
   wire signed [15:0] a199;
   wire signed [15:0] tm67;
   wire signed [15:0] a203;
   wire signed [15:0] tm68;
   wire signed [15:0] a205;
   reg signed [15:0] tm849;
   reg signed [15:0] tm853;
   reg signed [15:0] tm865;
   reg signed [15:0] tm869;
   reg signed [15:0] tm881;
   reg signed [15:0] tm885;
   reg signed [15:0] tm897;
   reg signed [15:0] tm901;
   reg signed [15:0] tm913;
   reg signed [15:0] tm917;
   reg signed [15:0] tm929;
   reg signed [15:0] tm933;
   reg signed [15:0] tm945;
   reg signed [15:0] tm952;
   reg signed [15:0] tm959;
   reg signed [15:0] tm966;
   reg signed [15:0] tm170;
   reg signed [15:0] tm171;
   reg signed [15:0] tm174;
   reg signed [15:0] tm175;
   reg signed [15:0] tm178;
   reg signed [15:0] tm179;
   reg signed [15:0] tm186;
   reg signed [15:0] tm187;
   reg signed [15:0] tm190;
   reg signed [15:0] tm191;
   reg signed [15:0] tm194;
   reg signed [15:0] tm195;
   reg signed [15:0] tm850;
   reg signed [15:0] tm854;
   reg signed [15:0] tm866;
   reg signed [15:0] tm870;
   reg signed [15:0] tm882;
   reg signed [15:0] tm886;
   reg signed [15:0] tm898;
   reg signed [15:0] tm902;
   reg signed [15:0] tm914;
   reg signed [15:0] tm918;
   reg signed [15:0] tm930;
   reg signed [15:0] tm934;
   reg signed [15:0] tm946;
   reg signed [15:0] tm953;
   reg signed [15:0] tm960;
   reg signed [15:0] tm967;
   reg signed [15:0] tm947;
   reg signed [15:0] tm954;
   reg signed [15:0] tm961;
   reg signed [15:0] tm968;
   wire signed [15:0] a168;
   wire signed [15:0] a170;
   wire signed [15:0] a171;
   wire signed [15:0] a172;
   wire signed [15:0] a174;
   wire signed [15:0] a176;
   wire signed [15:0] a177;
   wire signed [15:0] a178;
   wire signed [15:0] a180;
   wire signed [15:0] a182;
   wire signed [15:0] a183;
   wire signed [15:0] a184;
   wire signed [15:0] a192;
   wire signed [15:0] a194;
   wire signed [15:0] a195;
   wire signed [15:0] a196;
   wire signed [15:0] a198;
   wire signed [15:0] a200;
   wire signed [15:0] a201;
   wire signed [15:0] a202;
   wire signed [15:0] a204;
   wire signed [15:0] a206;
   wire signed [15:0] a207;
   wire signed [15:0] a208;
   reg signed [15:0] tm948;
   reg signed [15:0] tm955;
   reg signed [15:0] tm962;
   reg signed [15:0] tm969;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm949;
   reg signed [15:0] tm956;
   reg signed [15:0] tm963;
   reg signed [15:0] tm970;


   assign a209 = X0;
   assign a162 = a209;
   assign a212 = X1;
   assign a166 = a212;
   assign a213 = X2;
   assign a214 = X3;
   assign a217 = X4;
   assign a218 = X5;
   assign a221 = X6;
   assign a222 = X7;
   assign a225 = X8;
   assign a186 = a225;
   assign a228 = X9;
   assign a190 = a228;
   assign a229 = X10;
   assign a230 = X11;
   assign a233 = X12;
   assign a234 = X13;
   assign a237 = X14;
   assign a238 = X15;
   assign a167 = tm55;
   assign a169 = tm56;
   assign a173 = tm57;
   assign a175 = tm58;
   assign a179 = tm59;
   assign a181 = tm60;
   assign a191 = tm63;
   assign a193 = tm64;
   assign a197 = tm65;
   assign a199 = tm66;
   assign a203 = tm67;
   assign a205 = tm68;
   assign Y0 = tm949;
   assign Y1 = tm956;
   assign Y8 = tm963;
   assign Y9 = tm970;

   D13_45509 instD13inst0_45509(.addr(i1[6:0]), .out(tm58), .clk(clk));

   D10_45639 instD10inst0_45639(.addr(i1[6:0]), .out(tm67), .clk(clk));

   D4_45769 instD4inst0_45769(.addr(i1[6:0]), .out(tm55), .clk(clk));

   D18_45899 instD18inst0_45899(.addr(i1[6:0]), .out(tm68), .clk(clk));

   D14_46029 instD14inst0_46029(.addr(i1[6:0]), .out(tm60), .clk(clk));

   D9_46159 instD9inst0_46159(.addr(i1[6:0]), .out(tm65), .clk(clk));

   D5_46289 instD5inst0_46289(.addr(i1[6:0]), .out(tm57), .clk(clk));

   D17_46419 instD17inst0_46419(.addr(i1[6:0]), .out(tm66), .clk(clk));

   D8_46549 instD8inst0_46549(.addr(i1[6:0]), .out(tm63), .clk(clk));

   D6_46809 instD6inst0_46809(.addr(i1[6:0]), .out(tm59), .clk(clk));

   D16_46939 instD16inst0_46939(.addr(i1[6:0]), .out(tm64), .clk(clk));

   D12_47329 instD12inst0_47329(.addr(i1[6:0]), .out(tm56), .clk(clk));

    multfix #(16, 2) m44708(.a(tm170), .b(tm850), .clk(clk), .q_sc(a168), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44730(.a(tm171), .b(tm854), .clk(clk), .q_sc(a170), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44748(.a(tm171), .b(tm850), .clk(clk), .q_sc(a171), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44759(.a(tm170), .b(tm854), .clk(clk), .q_sc(a172), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44788(.a(tm174), .b(tm866), .clk(clk), .q_sc(a174), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44810(.a(tm175), .b(tm870), .clk(clk), .q_sc(a176), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44828(.a(tm175), .b(tm866), .clk(clk), .q_sc(a177), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44839(.a(tm174), .b(tm870), .clk(clk), .q_sc(a178), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44868(.a(tm178), .b(tm882), .clk(clk), .q_sc(a180), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44890(.a(tm179), .b(tm886), .clk(clk), .q_sc(a182), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44908(.a(tm179), .b(tm882), .clk(clk), .q_sc(a183), .q_unsc(), .rst(reset));
    multfix #(16, 2) m44919(.a(tm178), .b(tm886), .clk(clk), .q_sc(a184), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45028(.a(tm186), .b(tm898), .clk(clk), .q_sc(a192), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45050(.a(tm187), .b(tm902), .clk(clk), .q_sc(a194), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45068(.a(tm187), .b(tm898), .clk(clk), .q_sc(a195), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45079(.a(tm186), .b(tm902), .clk(clk), .q_sc(a196), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45108(.a(tm190), .b(tm914), .clk(clk), .q_sc(a198), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45130(.a(tm191), .b(tm918), .clk(clk), .q_sc(a200), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45148(.a(tm191), .b(tm914), .clk(clk), .q_sc(a201), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45159(.a(tm190), .b(tm918), .clk(clk), .q_sc(a202), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45188(.a(tm194), .b(tm930), .clk(clk), .q_sc(a204), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45210(.a(tm195), .b(tm934), .clk(clk), .q_sc(a206), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45228(.a(tm195), .b(tm930), .clk(clk), .q_sc(a207), .q_unsc(), .rst(reset));
    multfix #(16, 2) m45239(.a(tm194), .b(tm934), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub44737(.a(a168), .b(a170), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add44766(.a(a171), .b(a172), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub44817(.a(a174), .b(a176), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add44846(.a(a177), .b(a178), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub44897(.a(a180), .b(a182), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add44926(.a(a183), .b(a184), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub45057(.a(a192), .b(a194), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add45086(.a(a195), .b(a196), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub45137(.a(a198), .b(a200), .clk(clk), .q(Y12));    // 6
    addfxp #(16, 1) add45166(.a(a201), .b(a202), .clk(clk), .q(Y13));    // 6
    subfxp #(16, 1) sub45217(.a(a204), .b(a206), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add45246(.a(a207), .b(a208), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm170 <= 0;
         tm850 <= 0;
         tm171 <= 0;
         tm854 <= 0;
         tm171 <= 0;
         tm850 <= 0;
         tm170 <= 0;
         tm854 <= 0;
         tm174 <= 0;
         tm866 <= 0;
         tm175 <= 0;
         tm870 <= 0;
         tm175 <= 0;
         tm866 <= 0;
         tm174 <= 0;
         tm870 <= 0;
         tm178 <= 0;
         tm882 <= 0;
         tm179 <= 0;
         tm886 <= 0;
         tm179 <= 0;
         tm882 <= 0;
         tm178 <= 0;
         tm886 <= 0;
         tm186 <= 0;
         tm898 <= 0;
         tm187 <= 0;
         tm902 <= 0;
         tm187 <= 0;
         tm898 <= 0;
         tm186 <= 0;
         tm902 <= 0;
         tm190 <= 0;
         tm914 <= 0;
         tm191 <= 0;
         tm918 <= 0;
         tm191 <= 0;
         tm914 <= 0;
         tm190 <= 0;
         tm918 <= 0;
         tm194 <= 0;
         tm930 <= 0;
         tm195 <= 0;
         tm934 <= 0;
         tm195 <= 0;
         tm930 <= 0;
         tm194 <= 0;
         tm934 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm847 <= a213;
         tm851 <= a214;
         tm863 <= a217;
         tm867 <= a218;
         tm879 <= a221;
         tm883 <= a222;
         tm895 <= a229;
         tm899 <= a230;
         tm911 <= a233;
         tm915 <= a234;
         tm927 <= a237;
         tm931 <= a238;
         tm943 <= a162;
         tm950 <= a166;
         tm957 <= a186;
         tm964 <= a190;
         tm848 <= tm847;
         tm852 <= tm851;
         tm864 <= tm863;
         tm868 <= tm867;
         tm880 <= tm879;
         tm884 <= tm883;
         tm896 <= tm895;
         tm900 <= tm899;
         tm912 <= tm911;
         tm916 <= tm915;
         tm928 <= tm927;
         tm932 <= tm931;
         tm944 <= tm943;
         tm951 <= tm950;
         tm958 <= tm957;
         tm965 <= tm964;
         tm849 <= tm848;
         tm853 <= tm852;
         tm865 <= tm864;
         tm869 <= tm868;
         tm881 <= tm880;
         tm885 <= tm884;
         tm897 <= tm896;
         tm901 <= tm900;
         tm913 <= tm912;
         tm917 <= tm916;
         tm929 <= tm928;
         tm933 <= tm932;
         tm945 <= tm944;
         tm952 <= tm951;
         tm959 <= tm958;
         tm966 <= tm965;
         tm170 <= a167;
         tm171 <= a169;
         tm174 <= a173;
         tm175 <= a175;
         tm178 <= a179;
         tm179 <= a181;
         tm186 <= a191;
         tm187 <= a193;
         tm190 <= a197;
         tm191 <= a199;
         tm194 <= a203;
         tm195 <= a205;
         tm850 <= tm849;
         tm854 <= tm853;
         tm866 <= tm865;
         tm870 <= tm869;
         tm882 <= tm881;
         tm886 <= tm885;
         tm898 <= tm897;
         tm902 <= tm901;
         tm914 <= tm913;
         tm918 <= tm917;
         tm930 <= tm929;
         tm934 <= tm933;
         tm946 <= tm945;
         tm953 <= tm952;
         tm960 <= tm959;
         tm967 <= tm966;
         tm947 <= tm946;
         tm954 <= tm953;
         tm961 <= tm960;
         tm968 <= tm967;
         tm948 <= tm947;
         tm955 <= tm954;
         tm962 <= tm961;
         tm969 <= tm968;
         tm949 <= tm948;
         tm956 <= tm955;
         tm963 <= tm962;
         tm970 <= tm969;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock47334(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_51249(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a33;
   wire signed [15:0] a34;
   wire signed [15:0] a35;
   wire signed [15:0] a36;
   wire signed [15:0] a41;
   wire signed [15:0] a42;
   wire signed [15:0] a43;
   wire signed [15:0] a44;
   wire signed [15:0] a49;
   wire signed [15:0] a50;
   wire signed [15:0] a51;
   wire signed [15:0] a52;
   wire signed [15:0] a57;
   wire signed [15:0] a58;
   wire signed [15:0] a59;
   wire signed [15:0] a60;
   wire signed [16:0] tm443;
   wire signed [16:0] tm444;
   wire signed [16:0] tm445;
   wire signed [16:0] tm446;
   wire signed [16:0] tm447;
   wire signed [16:0] tm448;
   wire signed [16:0] tm449;
   wire signed [16:0] tm450;
   wire signed [16:0] tm459;
   wire signed [16:0] tm460;
   wire signed [16:0] tm461;
   wire signed [16:0] tm462;
   wire signed [16:0] tm463;
   wire signed [16:0] tm464;
   wire signed [16:0] tm465;
   wire signed [16:0] tm466;
   wire signed [15:0] t209;
   wire signed [15:0] t210;
   wire signed [15:0] t211;
   wire signed [15:0] t212;
   wire signed [15:0] t213;
   wire signed [15:0] t214;
   wire signed [15:0] t215;
   wire signed [15:0] t216;
   wire signed [15:0] t225;
   wire signed [15:0] t226;
   wire signed [15:0] t227;
   wire signed [15:0] t228;
   wire signed [15:0] t229;
   wire signed [15:0] t230;
   wire signed [15:0] t231;
   wire signed [15:0] t232;
   wire signed [16:0] tm451;
   wire signed [16:0] tm452;
   wire signed [16:0] tm453;
   wire signed [16:0] tm454;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm455;
   wire signed [16:0] tm456;
   wire signed [16:0] tm457;
   wire signed [16:0] tm458;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm467;
   wire signed [16:0] tm468;
   wire signed [16:0] tm469;
   wire signed [16:0] tm470;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm471;
   wire signed [16:0] tm472;
   wire signed [16:0] tm473;
   wire signed [16:0] tm474;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t217;
   wire signed [15:0] t218;
   wire signed [15:0] t219;
   wire signed [15:0] t220;
   wire signed [15:0] t221;
   wire signed [15:0] t222;
   wire signed [15:0] t223;
   wire signed [15:0] t224;
   wire signed [15:0] t233;
   wire signed [15:0] t234;
   wire signed [15:0] t235;
   wire signed [15:0] t236;
   wire signed [15:0] t237;
   wire signed [15:0] t238;
   wire signed [15:0] t239;
   wire signed [15:0] t240;


   assign a33 = X0;
   assign a34 = X4;
   assign a35 = X1;
   assign a36 = X5;
   assign a41 = X2;
   assign a42 = X6;
   assign a43 = X3;
   assign a44 = X7;
   assign a49 = X8;
   assign a50 = X12;
   assign a51 = X9;
   assign a52 = X13;
   assign a57 = X10;
   assign a58 = X14;
   assign a59 = X11;
   assign a60 = X15;
   assign t209 = tm443[16:1];
   assign t210 = tm444[16:1];
   assign t211 = tm445[16:1];
   assign t212 = tm446[16:1];
   assign t213 = tm447[16:1];
   assign t214 = tm448[16:1];
   assign t215 = tm449[16:1];
   assign t216 = tm450[16:1];
   assign t225 = tm459[16:1];
   assign t226 = tm460[16:1];
   assign t227 = tm461[16:1];
   assign t228 = tm462[16:1];
   assign t229 = tm463[16:1];
   assign t230 = tm464[16:1];
   assign t231 = tm465[16:1];
   assign t232 = tm466[16:1];
   assign Y0 = t217;
   assign Y1 = t218;
   assign Y4 = t219;
   assign Y5 = t220;
   assign Y2 = t221;
   assign Y3 = t222;
   assign Y6 = t223;
   assign Y7 = t224;
   assign Y8 = t233;
   assign Y9 = t234;
   assign Y12 = t235;
   assign Y13 = t236;
   assign Y10 = t237;
   assign Y11 = t238;
   assign Y14 = t239;
   assign Y15 = t240;
   assign t217 = tm451[16:1];
   assign t218 = tm452[16:1];
   assign t219 = tm453[16:1];
   assign t220 = tm454[16:1];
   assign t221 = tm455[16:1];
   assign t222 = tm456[16:1];
   assign t223 = tm457[16:1];
   assign t224 = tm458[16:1];
   assign t233 = tm467[16:1];
   assign t234 = tm468[16:1];
   assign t235 = tm469[16:1];
   assign t236 = tm470[16:1];
   assign t237 = tm471[16:1];
   assign t238 = tm472[16:1];
   assign t239 = tm473[16:1];
   assign t240 = tm474[16:1];

    addfxp #(17, 1) add47346(.a({{1{a33[15]}}, a33}), .b({{1{a34[15]}}, a34}), .clk(clk), .q(tm443));    // 0
    addfxp #(17, 1) add47361(.a({{1{a35[15]}}, a35}), .b({{1{a36[15]}}, a36}), .clk(clk), .q(tm444));    // 0
    subfxp #(17, 1) sub47376(.a({{1{a33[15]}}, a33}), .b({{1{a34[15]}}, a34}), .clk(clk), .q(tm445));    // 0
    subfxp #(17, 1) sub47391(.a({{1{a35[15]}}, a35}), .b({{1{a36[15]}}, a36}), .clk(clk), .q(tm446));    // 0
    addfxp #(17, 1) add47406(.a({{1{a41[15]}}, a41}), .b({{1{a42[15]}}, a42}), .clk(clk), .q(tm447));    // 0
    addfxp #(17, 1) add47421(.a({{1{a43[15]}}, a43}), .b({{1{a44[15]}}, a44}), .clk(clk), .q(tm448));    // 0
    subfxp #(17, 1) sub47436(.a({{1{a41[15]}}, a41}), .b({{1{a42[15]}}, a42}), .clk(clk), .q(tm449));    // 0
    subfxp #(17, 1) sub47451(.a({{1{a43[15]}}, a43}), .b({{1{a44[15]}}, a44}), .clk(clk), .q(tm450));    // 0
    addfxp #(17, 1) add47554(.a({{1{a49[15]}}, a49}), .b({{1{a50[15]}}, a50}), .clk(clk), .q(tm459));    // 0
    addfxp #(17, 1) add47569(.a({{1{a51[15]}}, a51}), .b({{1{a52[15]}}, a52}), .clk(clk), .q(tm460));    // 0
    subfxp #(17, 1) sub47584(.a({{1{a49[15]}}, a49}), .b({{1{a50[15]}}, a50}), .clk(clk), .q(tm461));    // 0
    subfxp #(17, 1) sub47599(.a({{1{a51[15]}}, a51}), .b({{1{a52[15]}}, a52}), .clk(clk), .q(tm462));    // 0
    addfxp #(17, 1) add47614(.a({{1{a57[15]}}, a57}), .b({{1{a58[15]}}, a58}), .clk(clk), .q(tm463));    // 0
    addfxp #(17, 1) add47629(.a({{1{a59[15]}}, a59}), .b({{1{a60[15]}}, a60}), .clk(clk), .q(tm464));    // 0
    subfxp #(17, 1) sub47644(.a({{1{a57[15]}}, a57}), .b({{1{a58[15]}}, a58}), .clk(clk), .q(tm465));    // 0
    subfxp #(17, 1) sub47659(.a({{1{a59[15]}}, a59}), .b({{1{a60[15]}}, a60}), .clk(clk), .q(tm466));    // 0
    addfxp #(17, 1) add47458(.a({{1{t209[15]}}, t209}), .b({{1{t213[15]}}, t213}), .clk(clk), .q(tm451));    // 1
    addfxp #(17, 1) add47465(.a({{1{t210[15]}}, t210}), .b({{1{t214[15]}}, t214}), .clk(clk), .q(tm452));    // 1
    subfxp #(17, 1) sub47472(.a({{1{t209[15]}}, t209}), .b({{1{t213[15]}}, t213}), .clk(clk), .q(tm453));    // 1
    subfxp #(17, 1) sub47479(.a({{1{t210[15]}}, t210}), .b({{1{t214[15]}}, t214}), .clk(clk), .q(tm454));    // 1
    addfxp #(17, 1) add47502(.a({{1{t211[15]}}, t211}), .b({{1{t216[15]}}, t216}), .clk(clk), .q(tm455));    // 1
    subfxp #(17, 1) sub47509(.a({{1{t212[15]}}, t212}), .b({{1{t215[15]}}, t215}), .clk(clk), .q(tm456));    // 1
    subfxp #(17, 1) sub47516(.a({{1{t211[15]}}, t211}), .b({{1{t216[15]}}, t216}), .clk(clk), .q(tm457));    // 1
    addfxp #(17, 1) add47523(.a({{1{t212[15]}}, t212}), .b({{1{t215[15]}}, t215}), .clk(clk), .q(tm458));    // 1
    addfxp #(17, 1) add47666(.a({{1{t225[15]}}, t225}), .b({{1{t229[15]}}, t229}), .clk(clk), .q(tm467));    // 1
    addfxp #(17, 1) add47673(.a({{1{t226[15]}}, t226}), .b({{1{t230[15]}}, t230}), .clk(clk), .q(tm468));    // 1
    subfxp #(17, 1) sub47680(.a({{1{t225[15]}}, t225}), .b({{1{t229[15]}}, t229}), .clk(clk), .q(tm469));    // 1
    subfxp #(17, 1) sub47687(.a({{1{t226[15]}}, t226}), .b({{1{t230[15]}}, t230}), .clk(clk), .q(tm470));    // 1
    addfxp #(17, 1) add47710(.a({{1{t227[15]}}, t227}), .b({{1{t232[15]}}, t232}), .clk(clk), .q(tm471));    // 1
    subfxp #(17, 1) sub47717(.a({{1{t228[15]}}, t228}), .b({{1{t231[15]}}, t231}), .clk(clk), .q(tm472));    // 1
    subfxp #(17, 1) sub47724(.a({{1{t227[15]}}, t227}), .b({{1{t232[15]}}, t232}), .clk(clk), .q(tm473));    // 1
    addfxp #(17, 1) add47731(.a({{1{t228[15]}}, t228}), .b({{1{t231[15]}}, t231}), .clk(clk), .q(tm474));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 262
// Gap: 128
module rc47756(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm47754 instPerm51250(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet47754(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [7:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 8'b10011010;
        7'd1: control <= 8'b10011010;
        7'd2: control <= 8'b10011010;
        7'd3: control <= 8'b10011010;
        7'd4: control <= 8'b10011010;
        7'd5: control <= 8'b10011010;
        7'd6: control <= 8'b10011010;
        7'd7: control <= 8'b10011010;
        7'd8: control <= 8'b10011010;
        7'd9: control <= 8'b10011010;
        7'd10: control <= 8'b10011010;
        7'd11: control <= 8'b10011010;
        7'd12: control <= 8'b10011010;
        7'd13: control <= 8'b10011010;
        7'd14: control <= 8'b10011010;
        7'd15: control <= 8'b10011010;
        7'd16: control <= 8'b10011010;
        7'd17: control <= 8'b10011010;
        7'd18: control <= 8'b10011010;
        7'd19: control <= 8'b10011010;
        7'd20: control <= 8'b10011010;
        7'd21: control <= 8'b10011010;
        7'd22: control <= 8'b10011010;
        7'd23: control <= 8'b10011010;
        7'd24: control <= 8'b10011010;
        7'd25: control <= 8'b10011010;
        7'd26: control <= 8'b10011010;
        7'd27: control <= 8'b10011010;
        7'd28: control <= 8'b10011010;
        7'd29: control <= 8'b10011010;
        7'd30: control <= 8'b10011010;
        7'd31: control <= 8'b10011010;
        7'd32: control <= 8'b01101010;
        7'd33: control <= 8'b01101010;
        7'd34: control <= 8'b01101010;
        7'd35: control <= 8'b01101010;
        7'd36: control <= 8'b01101010;
        7'd37: control <= 8'b01101010;
        7'd38: control <= 8'b01101010;
        7'd39: control <= 8'b01101010;
        7'd40: control <= 8'b01101010;
        7'd41: control <= 8'b01101010;
        7'd42: control <= 8'b01101010;
        7'd43: control <= 8'b01101010;
        7'd44: control <= 8'b01101010;
        7'd45: control <= 8'b01101010;
        7'd46: control <= 8'b01101010;
        7'd47: control <= 8'b01101010;
        7'd48: control <= 8'b01101010;
        7'd49: control <= 8'b01101010;
        7'd50: control <= 8'b01101010;
        7'd51: control <= 8'b01101010;
        7'd52: control <= 8'b01101010;
        7'd53: control <= 8'b01101010;
        7'd54: control <= 8'b01101010;
        7'd55: control <= 8'b01101010;
        7'd56: control <= 8'b01101010;
        7'd57: control <= 8'b01101010;
        7'd58: control <= 8'b01101010;
        7'd59: control <= 8'b01101010;
        7'd60: control <= 8'b01101010;
        7'd61: control <= 8'b01101010;
        7'd62: control <= 8'b01101010;
        7'd63: control <= 8'b01101010;
        7'd64: control <= 8'b10010101;
        7'd65: control <= 8'b10010101;
        7'd66: control <= 8'b10010101;
        7'd67: control <= 8'b10010101;
        7'd68: control <= 8'b10010101;
        7'd69: control <= 8'b10010101;
        7'd70: control <= 8'b10010101;
        7'd71: control <= 8'b10010101;
        7'd72: control <= 8'b10010101;
        7'd73: control <= 8'b10010101;
        7'd74: control <= 8'b10010101;
        7'd75: control <= 8'b10010101;
        7'd76: control <= 8'b10010101;
        7'd77: control <= 8'b10010101;
        7'd78: control <= 8'b10010101;
        7'd79: control <= 8'b10010101;
        7'd80: control <= 8'b10010101;
        7'd81: control <= 8'b10010101;
        7'd82: control <= 8'b10010101;
        7'd83: control <= 8'b10010101;
        7'd84: control <= 8'b10010101;
        7'd85: control <= 8'b10010101;
        7'd86: control <= 8'b10010101;
        7'd87: control <= 8'b10010101;
        7'd88: control <= 8'b10010101;
        7'd89: control <= 8'b10010101;
        7'd90: control <= 8'b10010101;
        7'd91: control <= 8'b10010101;
        7'd92: control <= 8'b10010101;
        7'd93: control <= 8'b10010101;
        7'd94: control <= 8'b10010101;
        7'd95: control <= 8'b10010101;
        7'd96: control <= 8'b01100101;
        7'd97: control <= 8'b01100101;
        7'd98: control <= 8'b01100101;
        7'd99: control <= 8'b01100101;
        7'd100: control <= 8'b01100101;
        7'd101: control <= 8'b01100101;
        7'd102: control <= 8'b01100101;
        7'd103: control <= 8'b01100101;
        7'd104: control <= 8'b01100101;
        7'd105: control <= 8'b01100101;
        7'd106: control <= 8'b01100101;
        7'd107: control <= 8'b01100101;
        7'd108: control <= 8'b01100101;
        7'd109: control <= 8'b01100101;
        7'd110: control <= 8'b01100101;
        7'd111: control <= 8'b01100101;
        7'd112: control <= 8'b01100101;
        7'd113: control <= 8'b01100101;
        7'd114: control <= 8'b01100101;
        7'd115: control <= 8'b01100101;
        7'd116: control <= 8'b01100101;
        7'd117: control <= 8'b01100101;
        7'd118: control <= 8'b01100101;
        7'd119: control <= 8'b01100101;
        7'd120: control <= 8'b01100101;
        7'd121: control <= 8'b01100101;
        7'd122: control <= 8'b01100101;
        7'd123: control <= 8'b01100101;
        7'd124: control <= 8'b01100101;
        7'd125: control <= 8'b01100101;
        7'd126: control <= 8'b01100101;
        7'd127: control <= 8'b01100101;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [7:0] control0;
   reg [7:0] control1;
   reg [7:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_5;
     assign t1_5 = t0_4;
     assign t1_6 = t0_7;
     assign t1_7 = t0_6;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_5;
         t3_5 <= t2_4;
         t3_6 <= t2_7;
         t3_7 <= t2_6;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_3;
     assign t5_3 = t4_2;
     assign t5_4 = t4_5;
     assign t5_5 = t4_4;
     assign t5_6 = t4_6;
     assign t5_7 = t4_7;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[7] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[7] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[6] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[6] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[5] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[5] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[4] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[4] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= (control2[3] == 0) ? t8_0 : t8_1;
         t9_1 <= (control2[3] == 0) ? t8_1 : t8_0;
         t9_2 <= (control2[2] == 0) ? t8_2 : t8_3;
         t9_3 <= (control2[2] == 0) ? t8_3 : t8_2;
         t9_4 <= (control2[1] == 0) ? t8_4 : t8_5;
         t9_5 <= (control2[1] == 0) ? t8_5 : t8_4;
         t9_6 <= (control2[0] == 0) ? t8_6 : t8_7;
         t9_7 <= (control2[0] == 0) ? t8_7 : t8_6;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 262
// Gap: 128
module perm47754(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm69;
   assign tm69 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_51255(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51256(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(127, 7) nextReg_51267(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_51268(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_51271(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_51272(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_51275(.X(tm69), .Y(tm69_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_51278(.X(tm69_d), .Y(tm69_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 7) shiftFIFO_51283(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 3;
	     {1'd0,  7'd1}: s1rd0 <= 7;
	     {1'd0,  7'd2}: s1rd0 <= 11;
	     {1'd0,  7'd3}: s1rd0 <= 15;
	     {1'd0,  7'd4}: s1rd0 <= 19;
	     {1'd0,  7'd5}: s1rd0 <= 23;
	     {1'd0,  7'd6}: s1rd0 <= 27;
	     {1'd0,  7'd7}: s1rd0 <= 31;
	     {1'd0,  7'd8}: s1rd0 <= 35;
	     {1'd0,  7'd9}: s1rd0 <= 39;
	     {1'd0,  7'd10}: s1rd0 <= 43;
	     {1'd0,  7'd11}: s1rd0 <= 47;
	     {1'd0,  7'd12}: s1rd0 <= 51;
	     {1'd0,  7'd13}: s1rd0 <= 55;
	     {1'd0,  7'd14}: s1rd0 <= 59;
	     {1'd0,  7'd15}: s1rd0 <= 63;
	     {1'd0,  7'd16}: s1rd0 <= 67;
	     {1'd0,  7'd17}: s1rd0 <= 71;
	     {1'd0,  7'd18}: s1rd0 <= 75;
	     {1'd0,  7'd19}: s1rd0 <= 79;
	     {1'd0,  7'd20}: s1rd0 <= 83;
	     {1'd0,  7'd21}: s1rd0 <= 87;
	     {1'd0,  7'd22}: s1rd0 <= 91;
	     {1'd0,  7'd23}: s1rd0 <= 95;
	     {1'd0,  7'd24}: s1rd0 <= 99;
	     {1'd0,  7'd25}: s1rd0 <= 103;
	     {1'd0,  7'd26}: s1rd0 <= 107;
	     {1'd0,  7'd27}: s1rd0 <= 111;
	     {1'd0,  7'd28}: s1rd0 <= 115;
	     {1'd0,  7'd29}: s1rd0 <= 119;
	     {1'd0,  7'd30}: s1rd0 <= 123;
	     {1'd0,  7'd31}: s1rd0 <= 127;
	     {1'd0,  7'd32}: s1rd0 <= 2;
	     {1'd0,  7'd33}: s1rd0 <= 6;
	     {1'd0,  7'd34}: s1rd0 <= 10;
	     {1'd0,  7'd35}: s1rd0 <= 14;
	     {1'd0,  7'd36}: s1rd0 <= 18;
	     {1'd0,  7'd37}: s1rd0 <= 22;
	     {1'd0,  7'd38}: s1rd0 <= 26;
	     {1'd0,  7'd39}: s1rd0 <= 30;
	     {1'd0,  7'd40}: s1rd0 <= 34;
	     {1'd0,  7'd41}: s1rd0 <= 38;
	     {1'd0,  7'd42}: s1rd0 <= 42;
	     {1'd0,  7'd43}: s1rd0 <= 46;
	     {1'd0,  7'd44}: s1rd0 <= 50;
	     {1'd0,  7'd45}: s1rd0 <= 54;
	     {1'd0,  7'd46}: s1rd0 <= 58;
	     {1'd0,  7'd47}: s1rd0 <= 62;
	     {1'd0,  7'd48}: s1rd0 <= 66;
	     {1'd0,  7'd49}: s1rd0 <= 70;
	     {1'd0,  7'd50}: s1rd0 <= 74;
	     {1'd0,  7'd51}: s1rd0 <= 78;
	     {1'd0,  7'd52}: s1rd0 <= 82;
	     {1'd0,  7'd53}: s1rd0 <= 86;
	     {1'd0,  7'd54}: s1rd0 <= 90;
	     {1'd0,  7'd55}: s1rd0 <= 94;
	     {1'd0,  7'd56}: s1rd0 <= 98;
	     {1'd0,  7'd57}: s1rd0 <= 102;
	     {1'd0,  7'd58}: s1rd0 <= 106;
	     {1'd0,  7'd59}: s1rd0 <= 110;
	     {1'd0,  7'd60}: s1rd0 <= 114;
	     {1'd0,  7'd61}: s1rd0 <= 118;
	     {1'd0,  7'd62}: s1rd0 <= 122;
	     {1'd0,  7'd63}: s1rd0 <= 126;
	     {1'd0,  7'd64}: s1rd0 <= 1;
	     {1'd0,  7'd65}: s1rd0 <= 5;
	     {1'd0,  7'd66}: s1rd0 <= 9;
	     {1'd0,  7'd67}: s1rd0 <= 13;
	     {1'd0,  7'd68}: s1rd0 <= 17;
	     {1'd0,  7'd69}: s1rd0 <= 21;
	     {1'd0,  7'd70}: s1rd0 <= 25;
	     {1'd0,  7'd71}: s1rd0 <= 29;
	     {1'd0,  7'd72}: s1rd0 <= 33;
	     {1'd0,  7'd73}: s1rd0 <= 37;
	     {1'd0,  7'd74}: s1rd0 <= 41;
	     {1'd0,  7'd75}: s1rd0 <= 45;
	     {1'd0,  7'd76}: s1rd0 <= 49;
	     {1'd0,  7'd77}: s1rd0 <= 53;
	     {1'd0,  7'd78}: s1rd0 <= 57;
	     {1'd0,  7'd79}: s1rd0 <= 61;
	     {1'd0,  7'd80}: s1rd0 <= 65;
	     {1'd0,  7'd81}: s1rd0 <= 69;
	     {1'd0,  7'd82}: s1rd0 <= 73;
	     {1'd0,  7'd83}: s1rd0 <= 77;
	     {1'd0,  7'd84}: s1rd0 <= 81;
	     {1'd0,  7'd85}: s1rd0 <= 85;
	     {1'd0,  7'd86}: s1rd0 <= 89;
	     {1'd0,  7'd87}: s1rd0 <= 93;
	     {1'd0,  7'd88}: s1rd0 <= 97;
	     {1'd0,  7'd89}: s1rd0 <= 101;
	     {1'd0,  7'd90}: s1rd0 <= 105;
	     {1'd0,  7'd91}: s1rd0 <= 109;
	     {1'd0,  7'd92}: s1rd0 <= 113;
	     {1'd0,  7'd93}: s1rd0 <= 117;
	     {1'd0,  7'd94}: s1rd0 <= 121;
	     {1'd0,  7'd95}: s1rd0 <= 125;
	     {1'd0,  7'd96}: s1rd0 <= 0;
	     {1'd0,  7'd97}: s1rd0 <= 4;
	     {1'd0,  7'd98}: s1rd0 <= 8;
	     {1'd0,  7'd99}: s1rd0 <= 12;
	     {1'd0,  7'd100}: s1rd0 <= 16;
	     {1'd0,  7'd101}: s1rd0 <= 20;
	     {1'd0,  7'd102}: s1rd0 <= 24;
	     {1'd0,  7'd103}: s1rd0 <= 28;
	     {1'd0,  7'd104}: s1rd0 <= 32;
	     {1'd0,  7'd105}: s1rd0 <= 36;
	     {1'd0,  7'd106}: s1rd0 <= 40;
	     {1'd0,  7'd107}: s1rd0 <= 44;
	     {1'd0,  7'd108}: s1rd0 <= 48;
	     {1'd0,  7'd109}: s1rd0 <= 52;
	     {1'd0,  7'd110}: s1rd0 <= 56;
	     {1'd0,  7'd111}: s1rd0 <= 60;
	     {1'd0,  7'd112}: s1rd0 <= 64;
	     {1'd0,  7'd113}: s1rd0 <= 68;
	     {1'd0,  7'd114}: s1rd0 <= 72;
	     {1'd0,  7'd115}: s1rd0 <= 76;
	     {1'd0,  7'd116}: s1rd0 <= 80;
	     {1'd0,  7'd117}: s1rd0 <= 84;
	     {1'd0,  7'd118}: s1rd0 <= 88;
	     {1'd0,  7'd119}: s1rd0 <= 92;
	     {1'd0,  7'd120}: s1rd0 <= 96;
	     {1'd0,  7'd121}: s1rd0 <= 100;
	     {1'd0,  7'd122}: s1rd0 <= 104;
	     {1'd0,  7'd123}: s1rd0 <= 108;
	     {1'd0,  7'd124}: s1rd0 <= 112;
	     {1'd0,  7'd125}: s1rd0 <= 116;
	     {1'd0,  7'd126}: s1rd0 <= 120;
	     {1'd0,  7'd127}: s1rd0 <= 124;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 2;
	     {1'd0,  7'd1}: s1rd1 <= 6;
	     {1'd0,  7'd2}: s1rd1 <= 10;
	     {1'd0,  7'd3}: s1rd1 <= 14;
	     {1'd0,  7'd4}: s1rd1 <= 18;
	     {1'd0,  7'd5}: s1rd1 <= 22;
	     {1'd0,  7'd6}: s1rd1 <= 26;
	     {1'd0,  7'd7}: s1rd1 <= 30;
	     {1'd0,  7'd8}: s1rd1 <= 34;
	     {1'd0,  7'd9}: s1rd1 <= 38;
	     {1'd0,  7'd10}: s1rd1 <= 42;
	     {1'd0,  7'd11}: s1rd1 <= 46;
	     {1'd0,  7'd12}: s1rd1 <= 50;
	     {1'd0,  7'd13}: s1rd1 <= 54;
	     {1'd0,  7'd14}: s1rd1 <= 58;
	     {1'd0,  7'd15}: s1rd1 <= 62;
	     {1'd0,  7'd16}: s1rd1 <= 66;
	     {1'd0,  7'd17}: s1rd1 <= 70;
	     {1'd0,  7'd18}: s1rd1 <= 74;
	     {1'd0,  7'd19}: s1rd1 <= 78;
	     {1'd0,  7'd20}: s1rd1 <= 82;
	     {1'd0,  7'd21}: s1rd1 <= 86;
	     {1'd0,  7'd22}: s1rd1 <= 90;
	     {1'd0,  7'd23}: s1rd1 <= 94;
	     {1'd0,  7'd24}: s1rd1 <= 98;
	     {1'd0,  7'd25}: s1rd1 <= 102;
	     {1'd0,  7'd26}: s1rd1 <= 106;
	     {1'd0,  7'd27}: s1rd1 <= 110;
	     {1'd0,  7'd28}: s1rd1 <= 114;
	     {1'd0,  7'd29}: s1rd1 <= 118;
	     {1'd0,  7'd30}: s1rd1 <= 122;
	     {1'd0,  7'd31}: s1rd1 <= 126;
	     {1'd0,  7'd32}: s1rd1 <= 3;
	     {1'd0,  7'd33}: s1rd1 <= 7;
	     {1'd0,  7'd34}: s1rd1 <= 11;
	     {1'd0,  7'd35}: s1rd1 <= 15;
	     {1'd0,  7'd36}: s1rd1 <= 19;
	     {1'd0,  7'd37}: s1rd1 <= 23;
	     {1'd0,  7'd38}: s1rd1 <= 27;
	     {1'd0,  7'd39}: s1rd1 <= 31;
	     {1'd0,  7'd40}: s1rd1 <= 35;
	     {1'd0,  7'd41}: s1rd1 <= 39;
	     {1'd0,  7'd42}: s1rd1 <= 43;
	     {1'd0,  7'd43}: s1rd1 <= 47;
	     {1'd0,  7'd44}: s1rd1 <= 51;
	     {1'd0,  7'd45}: s1rd1 <= 55;
	     {1'd0,  7'd46}: s1rd1 <= 59;
	     {1'd0,  7'd47}: s1rd1 <= 63;
	     {1'd0,  7'd48}: s1rd1 <= 67;
	     {1'd0,  7'd49}: s1rd1 <= 71;
	     {1'd0,  7'd50}: s1rd1 <= 75;
	     {1'd0,  7'd51}: s1rd1 <= 79;
	     {1'd0,  7'd52}: s1rd1 <= 83;
	     {1'd0,  7'd53}: s1rd1 <= 87;
	     {1'd0,  7'd54}: s1rd1 <= 91;
	     {1'd0,  7'd55}: s1rd1 <= 95;
	     {1'd0,  7'd56}: s1rd1 <= 99;
	     {1'd0,  7'd57}: s1rd1 <= 103;
	     {1'd0,  7'd58}: s1rd1 <= 107;
	     {1'd0,  7'd59}: s1rd1 <= 111;
	     {1'd0,  7'd60}: s1rd1 <= 115;
	     {1'd0,  7'd61}: s1rd1 <= 119;
	     {1'd0,  7'd62}: s1rd1 <= 123;
	     {1'd0,  7'd63}: s1rd1 <= 127;
	     {1'd0,  7'd64}: s1rd1 <= 0;
	     {1'd0,  7'd65}: s1rd1 <= 4;
	     {1'd0,  7'd66}: s1rd1 <= 8;
	     {1'd0,  7'd67}: s1rd1 <= 12;
	     {1'd0,  7'd68}: s1rd1 <= 16;
	     {1'd0,  7'd69}: s1rd1 <= 20;
	     {1'd0,  7'd70}: s1rd1 <= 24;
	     {1'd0,  7'd71}: s1rd1 <= 28;
	     {1'd0,  7'd72}: s1rd1 <= 32;
	     {1'd0,  7'd73}: s1rd1 <= 36;
	     {1'd0,  7'd74}: s1rd1 <= 40;
	     {1'd0,  7'd75}: s1rd1 <= 44;
	     {1'd0,  7'd76}: s1rd1 <= 48;
	     {1'd0,  7'd77}: s1rd1 <= 52;
	     {1'd0,  7'd78}: s1rd1 <= 56;
	     {1'd0,  7'd79}: s1rd1 <= 60;
	     {1'd0,  7'd80}: s1rd1 <= 64;
	     {1'd0,  7'd81}: s1rd1 <= 68;
	     {1'd0,  7'd82}: s1rd1 <= 72;
	     {1'd0,  7'd83}: s1rd1 <= 76;
	     {1'd0,  7'd84}: s1rd1 <= 80;
	     {1'd0,  7'd85}: s1rd1 <= 84;
	     {1'd0,  7'd86}: s1rd1 <= 88;
	     {1'd0,  7'd87}: s1rd1 <= 92;
	     {1'd0,  7'd88}: s1rd1 <= 96;
	     {1'd0,  7'd89}: s1rd1 <= 100;
	     {1'd0,  7'd90}: s1rd1 <= 104;
	     {1'd0,  7'd91}: s1rd1 <= 108;
	     {1'd0,  7'd92}: s1rd1 <= 112;
	     {1'd0,  7'd93}: s1rd1 <= 116;
	     {1'd0,  7'd94}: s1rd1 <= 120;
	     {1'd0,  7'd95}: s1rd1 <= 124;
	     {1'd0,  7'd96}: s1rd1 <= 1;
	     {1'd0,  7'd97}: s1rd1 <= 5;
	     {1'd0,  7'd98}: s1rd1 <= 9;
	     {1'd0,  7'd99}: s1rd1 <= 13;
	     {1'd0,  7'd100}: s1rd1 <= 17;
	     {1'd0,  7'd101}: s1rd1 <= 21;
	     {1'd0,  7'd102}: s1rd1 <= 25;
	     {1'd0,  7'd103}: s1rd1 <= 29;
	     {1'd0,  7'd104}: s1rd1 <= 33;
	     {1'd0,  7'd105}: s1rd1 <= 37;
	     {1'd0,  7'd106}: s1rd1 <= 41;
	     {1'd0,  7'd107}: s1rd1 <= 45;
	     {1'd0,  7'd108}: s1rd1 <= 49;
	     {1'd0,  7'd109}: s1rd1 <= 53;
	     {1'd0,  7'd110}: s1rd1 <= 57;
	     {1'd0,  7'd111}: s1rd1 <= 61;
	     {1'd0,  7'd112}: s1rd1 <= 65;
	     {1'd0,  7'd113}: s1rd1 <= 69;
	     {1'd0,  7'd114}: s1rd1 <= 73;
	     {1'd0,  7'd115}: s1rd1 <= 77;
	     {1'd0,  7'd116}: s1rd1 <= 81;
	     {1'd0,  7'd117}: s1rd1 <= 85;
	     {1'd0,  7'd118}: s1rd1 <= 89;
	     {1'd0,  7'd119}: s1rd1 <= 93;
	     {1'd0,  7'd120}: s1rd1 <= 97;
	     {1'd0,  7'd121}: s1rd1 <= 101;
	     {1'd0,  7'd122}: s1rd1 <= 105;
	     {1'd0,  7'd123}: s1rd1 <= 109;
	     {1'd0,  7'd124}: s1rd1 <= 113;
	     {1'd0,  7'd125}: s1rd1 <= 117;
	     {1'd0,  7'd126}: s1rd1 <= 121;
	     {1'd0,  7'd127}: s1rd1 <= 125;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 1;
	     {1'd0,  7'd1}: s1rd2 <= 5;
	     {1'd0,  7'd2}: s1rd2 <= 9;
	     {1'd0,  7'd3}: s1rd2 <= 13;
	     {1'd0,  7'd4}: s1rd2 <= 17;
	     {1'd0,  7'd5}: s1rd2 <= 21;
	     {1'd0,  7'd6}: s1rd2 <= 25;
	     {1'd0,  7'd7}: s1rd2 <= 29;
	     {1'd0,  7'd8}: s1rd2 <= 33;
	     {1'd0,  7'd9}: s1rd2 <= 37;
	     {1'd0,  7'd10}: s1rd2 <= 41;
	     {1'd0,  7'd11}: s1rd2 <= 45;
	     {1'd0,  7'd12}: s1rd2 <= 49;
	     {1'd0,  7'd13}: s1rd2 <= 53;
	     {1'd0,  7'd14}: s1rd2 <= 57;
	     {1'd0,  7'd15}: s1rd2 <= 61;
	     {1'd0,  7'd16}: s1rd2 <= 65;
	     {1'd0,  7'd17}: s1rd2 <= 69;
	     {1'd0,  7'd18}: s1rd2 <= 73;
	     {1'd0,  7'd19}: s1rd2 <= 77;
	     {1'd0,  7'd20}: s1rd2 <= 81;
	     {1'd0,  7'd21}: s1rd2 <= 85;
	     {1'd0,  7'd22}: s1rd2 <= 89;
	     {1'd0,  7'd23}: s1rd2 <= 93;
	     {1'd0,  7'd24}: s1rd2 <= 97;
	     {1'd0,  7'd25}: s1rd2 <= 101;
	     {1'd0,  7'd26}: s1rd2 <= 105;
	     {1'd0,  7'd27}: s1rd2 <= 109;
	     {1'd0,  7'd28}: s1rd2 <= 113;
	     {1'd0,  7'd29}: s1rd2 <= 117;
	     {1'd0,  7'd30}: s1rd2 <= 121;
	     {1'd0,  7'd31}: s1rd2 <= 125;
	     {1'd0,  7'd32}: s1rd2 <= 0;
	     {1'd0,  7'd33}: s1rd2 <= 4;
	     {1'd0,  7'd34}: s1rd2 <= 8;
	     {1'd0,  7'd35}: s1rd2 <= 12;
	     {1'd0,  7'd36}: s1rd2 <= 16;
	     {1'd0,  7'd37}: s1rd2 <= 20;
	     {1'd0,  7'd38}: s1rd2 <= 24;
	     {1'd0,  7'd39}: s1rd2 <= 28;
	     {1'd0,  7'd40}: s1rd2 <= 32;
	     {1'd0,  7'd41}: s1rd2 <= 36;
	     {1'd0,  7'd42}: s1rd2 <= 40;
	     {1'd0,  7'd43}: s1rd2 <= 44;
	     {1'd0,  7'd44}: s1rd2 <= 48;
	     {1'd0,  7'd45}: s1rd2 <= 52;
	     {1'd0,  7'd46}: s1rd2 <= 56;
	     {1'd0,  7'd47}: s1rd2 <= 60;
	     {1'd0,  7'd48}: s1rd2 <= 64;
	     {1'd0,  7'd49}: s1rd2 <= 68;
	     {1'd0,  7'd50}: s1rd2 <= 72;
	     {1'd0,  7'd51}: s1rd2 <= 76;
	     {1'd0,  7'd52}: s1rd2 <= 80;
	     {1'd0,  7'd53}: s1rd2 <= 84;
	     {1'd0,  7'd54}: s1rd2 <= 88;
	     {1'd0,  7'd55}: s1rd2 <= 92;
	     {1'd0,  7'd56}: s1rd2 <= 96;
	     {1'd0,  7'd57}: s1rd2 <= 100;
	     {1'd0,  7'd58}: s1rd2 <= 104;
	     {1'd0,  7'd59}: s1rd2 <= 108;
	     {1'd0,  7'd60}: s1rd2 <= 112;
	     {1'd0,  7'd61}: s1rd2 <= 116;
	     {1'd0,  7'd62}: s1rd2 <= 120;
	     {1'd0,  7'd63}: s1rd2 <= 124;
	     {1'd0,  7'd64}: s1rd2 <= 3;
	     {1'd0,  7'd65}: s1rd2 <= 7;
	     {1'd0,  7'd66}: s1rd2 <= 11;
	     {1'd0,  7'd67}: s1rd2 <= 15;
	     {1'd0,  7'd68}: s1rd2 <= 19;
	     {1'd0,  7'd69}: s1rd2 <= 23;
	     {1'd0,  7'd70}: s1rd2 <= 27;
	     {1'd0,  7'd71}: s1rd2 <= 31;
	     {1'd0,  7'd72}: s1rd2 <= 35;
	     {1'd0,  7'd73}: s1rd2 <= 39;
	     {1'd0,  7'd74}: s1rd2 <= 43;
	     {1'd0,  7'd75}: s1rd2 <= 47;
	     {1'd0,  7'd76}: s1rd2 <= 51;
	     {1'd0,  7'd77}: s1rd2 <= 55;
	     {1'd0,  7'd78}: s1rd2 <= 59;
	     {1'd0,  7'd79}: s1rd2 <= 63;
	     {1'd0,  7'd80}: s1rd2 <= 67;
	     {1'd0,  7'd81}: s1rd2 <= 71;
	     {1'd0,  7'd82}: s1rd2 <= 75;
	     {1'd0,  7'd83}: s1rd2 <= 79;
	     {1'd0,  7'd84}: s1rd2 <= 83;
	     {1'd0,  7'd85}: s1rd2 <= 87;
	     {1'd0,  7'd86}: s1rd2 <= 91;
	     {1'd0,  7'd87}: s1rd2 <= 95;
	     {1'd0,  7'd88}: s1rd2 <= 99;
	     {1'd0,  7'd89}: s1rd2 <= 103;
	     {1'd0,  7'd90}: s1rd2 <= 107;
	     {1'd0,  7'd91}: s1rd2 <= 111;
	     {1'd0,  7'd92}: s1rd2 <= 115;
	     {1'd0,  7'd93}: s1rd2 <= 119;
	     {1'd0,  7'd94}: s1rd2 <= 123;
	     {1'd0,  7'd95}: s1rd2 <= 127;
	     {1'd0,  7'd96}: s1rd2 <= 2;
	     {1'd0,  7'd97}: s1rd2 <= 6;
	     {1'd0,  7'd98}: s1rd2 <= 10;
	     {1'd0,  7'd99}: s1rd2 <= 14;
	     {1'd0,  7'd100}: s1rd2 <= 18;
	     {1'd0,  7'd101}: s1rd2 <= 22;
	     {1'd0,  7'd102}: s1rd2 <= 26;
	     {1'd0,  7'd103}: s1rd2 <= 30;
	     {1'd0,  7'd104}: s1rd2 <= 34;
	     {1'd0,  7'd105}: s1rd2 <= 38;
	     {1'd0,  7'd106}: s1rd2 <= 42;
	     {1'd0,  7'd107}: s1rd2 <= 46;
	     {1'd0,  7'd108}: s1rd2 <= 50;
	     {1'd0,  7'd109}: s1rd2 <= 54;
	     {1'd0,  7'd110}: s1rd2 <= 58;
	     {1'd0,  7'd111}: s1rd2 <= 62;
	     {1'd0,  7'd112}: s1rd2 <= 66;
	     {1'd0,  7'd113}: s1rd2 <= 70;
	     {1'd0,  7'd114}: s1rd2 <= 74;
	     {1'd0,  7'd115}: s1rd2 <= 78;
	     {1'd0,  7'd116}: s1rd2 <= 82;
	     {1'd0,  7'd117}: s1rd2 <= 86;
	     {1'd0,  7'd118}: s1rd2 <= 90;
	     {1'd0,  7'd119}: s1rd2 <= 94;
	     {1'd0,  7'd120}: s1rd2 <= 98;
	     {1'd0,  7'd121}: s1rd2 <= 102;
	     {1'd0,  7'd122}: s1rd2 <= 106;
	     {1'd0,  7'd123}: s1rd2 <= 110;
	     {1'd0,  7'd124}: s1rd2 <= 114;
	     {1'd0,  7'd125}: s1rd2 <= 118;
	     {1'd0,  7'd126}: s1rd2 <= 122;
	     {1'd0,  7'd127}: s1rd2 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 4;
	     {1'd0,  7'd2}: s1rd3 <= 8;
	     {1'd0,  7'd3}: s1rd3 <= 12;
	     {1'd0,  7'd4}: s1rd3 <= 16;
	     {1'd0,  7'd5}: s1rd3 <= 20;
	     {1'd0,  7'd6}: s1rd3 <= 24;
	     {1'd0,  7'd7}: s1rd3 <= 28;
	     {1'd0,  7'd8}: s1rd3 <= 32;
	     {1'd0,  7'd9}: s1rd3 <= 36;
	     {1'd0,  7'd10}: s1rd3 <= 40;
	     {1'd0,  7'd11}: s1rd3 <= 44;
	     {1'd0,  7'd12}: s1rd3 <= 48;
	     {1'd0,  7'd13}: s1rd3 <= 52;
	     {1'd0,  7'd14}: s1rd3 <= 56;
	     {1'd0,  7'd15}: s1rd3 <= 60;
	     {1'd0,  7'd16}: s1rd3 <= 64;
	     {1'd0,  7'd17}: s1rd3 <= 68;
	     {1'd0,  7'd18}: s1rd3 <= 72;
	     {1'd0,  7'd19}: s1rd3 <= 76;
	     {1'd0,  7'd20}: s1rd3 <= 80;
	     {1'd0,  7'd21}: s1rd3 <= 84;
	     {1'd0,  7'd22}: s1rd3 <= 88;
	     {1'd0,  7'd23}: s1rd3 <= 92;
	     {1'd0,  7'd24}: s1rd3 <= 96;
	     {1'd0,  7'd25}: s1rd3 <= 100;
	     {1'd0,  7'd26}: s1rd3 <= 104;
	     {1'd0,  7'd27}: s1rd3 <= 108;
	     {1'd0,  7'd28}: s1rd3 <= 112;
	     {1'd0,  7'd29}: s1rd3 <= 116;
	     {1'd0,  7'd30}: s1rd3 <= 120;
	     {1'd0,  7'd31}: s1rd3 <= 124;
	     {1'd0,  7'd32}: s1rd3 <= 1;
	     {1'd0,  7'd33}: s1rd3 <= 5;
	     {1'd0,  7'd34}: s1rd3 <= 9;
	     {1'd0,  7'd35}: s1rd3 <= 13;
	     {1'd0,  7'd36}: s1rd3 <= 17;
	     {1'd0,  7'd37}: s1rd3 <= 21;
	     {1'd0,  7'd38}: s1rd3 <= 25;
	     {1'd0,  7'd39}: s1rd3 <= 29;
	     {1'd0,  7'd40}: s1rd3 <= 33;
	     {1'd0,  7'd41}: s1rd3 <= 37;
	     {1'd0,  7'd42}: s1rd3 <= 41;
	     {1'd0,  7'd43}: s1rd3 <= 45;
	     {1'd0,  7'd44}: s1rd3 <= 49;
	     {1'd0,  7'd45}: s1rd3 <= 53;
	     {1'd0,  7'd46}: s1rd3 <= 57;
	     {1'd0,  7'd47}: s1rd3 <= 61;
	     {1'd0,  7'd48}: s1rd3 <= 65;
	     {1'd0,  7'd49}: s1rd3 <= 69;
	     {1'd0,  7'd50}: s1rd3 <= 73;
	     {1'd0,  7'd51}: s1rd3 <= 77;
	     {1'd0,  7'd52}: s1rd3 <= 81;
	     {1'd0,  7'd53}: s1rd3 <= 85;
	     {1'd0,  7'd54}: s1rd3 <= 89;
	     {1'd0,  7'd55}: s1rd3 <= 93;
	     {1'd0,  7'd56}: s1rd3 <= 97;
	     {1'd0,  7'd57}: s1rd3 <= 101;
	     {1'd0,  7'd58}: s1rd3 <= 105;
	     {1'd0,  7'd59}: s1rd3 <= 109;
	     {1'd0,  7'd60}: s1rd3 <= 113;
	     {1'd0,  7'd61}: s1rd3 <= 117;
	     {1'd0,  7'd62}: s1rd3 <= 121;
	     {1'd0,  7'd63}: s1rd3 <= 125;
	     {1'd0,  7'd64}: s1rd3 <= 2;
	     {1'd0,  7'd65}: s1rd3 <= 6;
	     {1'd0,  7'd66}: s1rd3 <= 10;
	     {1'd0,  7'd67}: s1rd3 <= 14;
	     {1'd0,  7'd68}: s1rd3 <= 18;
	     {1'd0,  7'd69}: s1rd3 <= 22;
	     {1'd0,  7'd70}: s1rd3 <= 26;
	     {1'd0,  7'd71}: s1rd3 <= 30;
	     {1'd0,  7'd72}: s1rd3 <= 34;
	     {1'd0,  7'd73}: s1rd3 <= 38;
	     {1'd0,  7'd74}: s1rd3 <= 42;
	     {1'd0,  7'd75}: s1rd3 <= 46;
	     {1'd0,  7'd76}: s1rd3 <= 50;
	     {1'd0,  7'd77}: s1rd3 <= 54;
	     {1'd0,  7'd78}: s1rd3 <= 58;
	     {1'd0,  7'd79}: s1rd3 <= 62;
	     {1'd0,  7'd80}: s1rd3 <= 66;
	     {1'd0,  7'd81}: s1rd3 <= 70;
	     {1'd0,  7'd82}: s1rd3 <= 74;
	     {1'd0,  7'd83}: s1rd3 <= 78;
	     {1'd0,  7'd84}: s1rd3 <= 82;
	     {1'd0,  7'd85}: s1rd3 <= 86;
	     {1'd0,  7'd86}: s1rd3 <= 90;
	     {1'd0,  7'd87}: s1rd3 <= 94;
	     {1'd0,  7'd88}: s1rd3 <= 98;
	     {1'd0,  7'd89}: s1rd3 <= 102;
	     {1'd0,  7'd90}: s1rd3 <= 106;
	     {1'd0,  7'd91}: s1rd3 <= 110;
	     {1'd0,  7'd92}: s1rd3 <= 114;
	     {1'd0,  7'd93}: s1rd3 <= 118;
	     {1'd0,  7'd94}: s1rd3 <= 122;
	     {1'd0,  7'd95}: s1rd3 <= 126;
	     {1'd0,  7'd96}: s1rd3 <= 3;
	     {1'd0,  7'd97}: s1rd3 <= 7;
	     {1'd0,  7'd98}: s1rd3 <= 11;
	     {1'd0,  7'd99}: s1rd3 <= 15;
	     {1'd0,  7'd100}: s1rd3 <= 19;
	     {1'd0,  7'd101}: s1rd3 <= 23;
	     {1'd0,  7'd102}: s1rd3 <= 27;
	     {1'd0,  7'd103}: s1rd3 <= 31;
	     {1'd0,  7'd104}: s1rd3 <= 35;
	     {1'd0,  7'd105}: s1rd3 <= 39;
	     {1'd0,  7'd106}: s1rd3 <= 43;
	     {1'd0,  7'd107}: s1rd3 <= 47;
	     {1'd0,  7'd108}: s1rd3 <= 51;
	     {1'd0,  7'd109}: s1rd3 <= 55;
	     {1'd0,  7'd110}: s1rd3 <= 59;
	     {1'd0,  7'd111}: s1rd3 <= 63;
	     {1'd0,  7'd112}: s1rd3 <= 67;
	     {1'd0,  7'd113}: s1rd3 <= 71;
	     {1'd0,  7'd114}: s1rd3 <= 75;
	     {1'd0,  7'd115}: s1rd3 <= 79;
	     {1'd0,  7'd116}: s1rd3 <= 83;
	     {1'd0,  7'd117}: s1rd3 <= 87;
	     {1'd0,  7'd118}: s1rd3 <= 91;
	     {1'd0,  7'd119}: s1rd3 <= 95;
	     {1'd0,  7'd120}: s1rd3 <= 99;
	     {1'd0,  7'd121}: s1rd3 <= 103;
	     {1'd0,  7'd122}: s1rd3 <= 107;
	     {1'd0,  7'd123}: s1rd3 <= 111;
	     {1'd0,  7'd124}: s1rd3 <= 115;
	     {1'd0,  7'd125}: s1rd3 <= 119;
	     {1'd0,  7'd126}: s1rd3 <= 123;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd4 <= 3;
	     {1'd0,  7'd1}: s1rd4 <= 7;
	     {1'd0,  7'd2}: s1rd4 <= 11;
	     {1'd0,  7'd3}: s1rd4 <= 15;
	     {1'd0,  7'd4}: s1rd4 <= 19;
	     {1'd0,  7'd5}: s1rd4 <= 23;
	     {1'd0,  7'd6}: s1rd4 <= 27;
	     {1'd0,  7'd7}: s1rd4 <= 31;
	     {1'd0,  7'd8}: s1rd4 <= 35;
	     {1'd0,  7'd9}: s1rd4 <= 39;
	     {1'd0,  7'd10}: s1rd4 <= 43;
	     {1'd0,  7'd11}: s1rd4 <= 47;
	     {1'd0,  7'd12}: s1rd4 <= 51;
	     {1'd0,  7'd13}: s1rd4 <= 55;
	     {1'd0,  7'd14}: s1rd4 <= 59;
	     {1'd0,  7'd15}: s1rd4 <= 63;
	     {1'd0,  7'd16}: s1rd4 <= 67;
	     {1'd0,  7'd17}: s1rd4 <= 71;
	     {1'd0,  7'd18}: s1rd4 <= 75;
	     {1'd0,  7'd19}: s1rd4 <= 79;
	     {1'd0,  7'd20}: s1rd4 <= 83;
	     {1'd0,  7'd21}: s1rd4 <= 87;
	     {1'd0,  7'd22}: s1rd4 <= 91;
	     {1'd0,  7'd23}: s1rd4 <= 95;
	     {1'd0,  7'd24}: s1rd4 <= 99;
	     {1'd0,  7'd25}: s1rd4 <= 103;
	     {1'd0,  7'd26}: s1rd4 <= 107;
	     {1'd0,  7'd27}: s1rd4 <= 111;
	     {1'd0,  7'd28}: s1rd4 <= 115;
	     {1'd0,  7'd29}: s1rd4 <= 119;
	     {1'd0,  7'd30}: s1rd4 <= 123;
	     {1'd0,  7'd31}: s1rd4 <= 127;
	     {1'd0,  7'd32}: s1rd4 <= 2;
	     {1'd0,  7'd33}: s1rd4 <= 6;
	     {1'd0,  7'd34}: s1rd4 <= 10;
	     {1'd0,  7'd35}: s1rd4 <= 14;
	     {1'd0,  7'd36}: s1rd4 <= 18;
	     {1'd0,  7'd37}: s1rd4 <= 22;
	     {1'd0,  7'd38}: s1rd4 <= 26;
	     {1'd0,  7'd39}: s1rd4 <= 30;
	     {1'd0,  7'd40}: s1rd4 <= 34;
	     {1'd0,  7'd41}: s1rd4 <= 38;
	     {1'd0,  7'd42}: s1rd4 <= 42;
	     {1'd0,  7'd43}: s1rd4 <= 46;
	     {1'd0,  7'd44}: s1rd4 <= 50;
	     {1'd0,  7'd45}: s1rd4 <= 54;
	     {1'd0,  7'd46}: s1rd4 <= 58;
	     {1'd0,  7'd47}: s1rd4 <= 62;
	     {1'd0,  7'd48}: s1rd4 <= 66;
	     {1'd0,  7'd49}: s1rd4 <= 70;
	     {1'd0,  7'd50}: s1rd4 <= 74;
	     {1'd0,  7'd51}: s1rd4 <= 78;
	     {1'd0,  7'd52}: s1rd4 <= 82;
	     {1'd0,  7'd53}: s1rd4 <= 86;
	     {1'd0,  7'd54}: s1rd4 <= 90;
	     {1'd0,  7'd55}: s1rd4 <= 94;
	     {1'd0,  7'd56}: s1rd4 <= 98;
	     {1'd0,  7'd57}: s1rd4 <= 102;
	     {1'd0,  7'd58}: s1rd4 <= 106;
	     {1'd0,  7'd59}: s1rd4 <= 110;
	     {1'd0,  7'd60}: s1rd4 <= 114;
	     {1'd0,  7'd61}: s1rd4 <= 118;
	     {1'd0,  7'd62}: s1rd4 <= 122;
	     {1'd0,  7'd63}: s1rd4 <= 126;
	     {1'd0,  7'd64}: s1rd4 <= 1;
	     {1'd0,  7'd65}: s1rd4 <= 5;
	     {1'd0,  7'd66}: s1rd4 <= 9;
	     {1'd0,  7'd67}: s1rd4 <= 13;
	     {1'd0,  7'd68}: s1rd4 <= 17;
	     {1'd0,  7'd69}: s1rd4 <= 21;
	     {1'd0,  7'd70}: s1rd4 <= 25;
	     {1'd0,  7'd71}: s1rd4 <= 29;
	     {1'd0,  7'd72}: s1rd4 <= 33;
	     {1'd0,  7'd73}: s1rd4 <= 37;
	     {1'd0,  7'd74}: s1rd4 <= 41;
	     {1'd0,  7'd75}: s1rd4 <= 45;
	     {1'd0,  7'd76}: s1rd4 <= 49;
	     {1'd0,  7'd77}: s1rd4 <= 53;
	     {1'd0,  7'd78}: s1rd4 <= 57;
	     {1'd0,  7'd79}: s1rd4 <= 61;
	     {1'd0,  7'd80}: s1rd4 <= 65;
	     {1'd0,  7'd81}: s1rd4 <= 69;
	     {1'd0,  7'd82}: s1rd4 <= 73;
	     {1'd0,  7'd83}: s1rd4 <= 77;
	     {1'd0,  7'd84}: s1rd4 <= 81;
	     {1'd0,  7'd85}: s1rd4 <= 85;
	     {1'd0,  7'd86}: s1rd4 <= 89;
	     {1'd0,  7'd87}: s1rd4 <= 93;
	     {1'd0,  7'd88}: s1rd4 <= 97;
	     {1'd0,  7'd89}: s1rd4 <= 101;
	     {1'd0,  7'd90}: s1rd4 <= 105;
	     {1'd0,  7'd91}: s1rd4 <= 109;
	     {1'd0,  7'd92}: s1rd4 <= 113;
	     {1'd0,  7'd93}: s1rd4 <= 117;
	     {1'd0,  7'd94}: s1rd4 <= 121;
	     {1'd0,  7'd95}: s1rd4 <= 125;
	     {1'd0,  7'd96}: s1rd4 <= 0;
	     {1'd0,  7'd97}: s1rd4 <= 4;
	     {1'd0,  7'd98}: s1rd4 <= 8;
	     {1'd0,  7'd99}: s1rd4 <= 12;
	     {1'd0,  7'd100}: s1rd4 <= 16;
	     {1'd0,  7'd101}: s1rd4 <= 20;
	     {1'd0,  7'd102}: s1rd4 <= 24;
	     {1'd0,  7'd103}: s1rd4 <= 28;
	     {1'd0,  7'd104}: s1rd4 <= 32;
	     {1'd0,  7'd105}: s1rd4 <= 36;
	     {1'd0,  7'd106}: s1rd4 <= 40;
	     {1'd0,  7'd107}: s1rd4 <= 44;
	     {1'd0,  7'd108}: s1rd4 <= 48;
	     {1'd0,  7'd109}: s1rd4 <= 52;
	     {1'd0,  7'd110}: s1rd4 <= 56;
	     {1'd0,  7'd111}: s1rd4 <= 60;
	     {1'd0,  7'd112}: s1rd4 <= 64;
	     {1'd0,  7'd113}: s1rd4 <= 68;
	     {1'd0,  7'd114}: s1rd4 <= 72;
	     {1'd0,  7'd115}: s1rd4 <= 76;
	     {1'd0,  7'd116}: s1rd4 <= 80;
	     {1'd0,  7'd117}: s1rd4 <= 84;
	     {1'd0,  7'd118}: s1rd4 <= 88;
	     {1'd0,  7'd119}: s1rd4 <= 92;
	     {1'd0,  7'd120}: s1rd4 <= 96;
	     {1'd0,  7'd121}: s1rd4 <= 100;
	     {1'd0,  7'd122}: s1rd4 <= 104;
	     {1'd0,  7'd123}: s1rd4 <= 108;
	     {1'd0,  7'd124}: s1rd4 <= 112;
	     {1'd0,  7'd125}: s1rd4 <= 116;
	     {1'd0,  7'd126}: s1rd4 <= 120;
	     {1'd0,  7'd127}: s1rd4 <= 124;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd5 <= 2;
	     {1'd0,  7'd1}: s1rd5 <= 6;
	     {1'd0,  7'd2}: s1rd5 <= 10;
	     {1'd0,  7'd3}: s1rd5 <= 14;
	     {1'd0,  7'd4}: s1rd5 <= 18;
	     {1'd0,  7'd5}: s1rd5 <= 22;
	     {1'd0,  7'd6}: s1rd5 <= 26;
	     {1'd0,  7'd7}: s1rd5 <= 30;
	     {1'd0,  7'd8}: s1rd5 <= 34;
	     {1'd0,  7'd9}: s1rd5 <= 38;
	     {1'd0,  7'd10}: s1rd5 <= 42;
	     {1'd0,  7'd11}: s1rd5 <= 46;
	     {1'd0,  7'd12}: s1rd5 <= 50;
	     {1'd0,  7'd13}: s1rd5 <= 54;
	     {1'd0,  7'd14}: s1rd5 <= 58;
	     {1'd0,  7'd15}: s1rd5 <= 62;
	     {1'd0,  7'd16}: s1rd5 <= 66;
	     {1'd0,  7'd17}: s1rd5 <= 70;
	     {1'd0,  7'd18}: s1rd5 <= 74;
	     {1'd0,  7'd19}: s1rd5 <= 78;
	     {1'd0,  7'd20}: s1rd5 <= 82;
	     {1'd0,  7'd21}: s1rd5 <= 86;
	     {1'd0,  7'd22}: s1rd5 <= 90;
	     {1'd0,  7'd23}: s1rd5 <= 94;
	     {1'd0,  7'd24}: s1rd5 <= 98;
	     {1'd0,  7'd25}: s1rd5 <= 102;
	     {1'd0,  7'd26}: s1rd5 <= 106;
	     {1'd0,  7'd27}: s1rd5 <= 110;
	     {1'd0,  7'd28}: s1rd5 <= 114;
	     {1'd0,  7'd29}: s1rd5 <= 118;
	     {1'd0,  7'd30}: s1rd5 <= 122;
	     {1'd0,  7'd31}: s1rd5 <= 126;
	     {1'd0,  7'd32}: s1rd5 <= 3;
	     {1'd0,  7'd33}: s1rd5 <= 7;
	     {1'd0,  7'd34}: s1rd5 <= 11;
	     {1'd0,  7'd35}: s1rd5 <= 15;
	     {1'd0,  7'd36}: s1rd5 <= 19;
	     {1'd0,  7'd37}: s1rd5 <= 23;
	     {1'd0,  7'd38}: s1rd5 <= 27;
	     {1'd0,  7'd39}: s1rd5 <= 31;
	     {1'd0,  7'd40}: s1rd5 <= 35;
	     {1'd0,  7'd41}: s1rd5 <= 39;
	     {1'd0,  7'd42}: s1rd5 <= 43;
	     {1'd0,  7'd43}: s1rd5 <= 47;
	     {1'd0,  7'd44}: s1rd5 <= 51;
	     {1'd0,  7'd45}: s1rd5 <= 55;
	     {1'd0,  7'd46}: s1rd5 <= 59;
	     {1'd0,  7'd47}: s1rd5 <= 63;
	     {1'd0,  7'd48}: s1rd5 <= 67;
	     {1'd0,  7'd49}: s1rd5 <= 71;
	     {1'd0,  7'd50}: s1rd5 <= 75;
	     {1'd0,  7'd51}: s1rd5 <= 79;
	     {1'd0,  7'd52}: s1rd5 <= 83;
	     {1'd0,  7'd53}: s1rd5 <= 87;
	     {1'd0,  7'd54}: s1rd5 <= 91;
	     {1'd0,  7'd55}: s1rd5 <= 95;
	     {1'd0,  7'd56}: s1rd5 <= 99;
	     {1'd0,  7'd57}: s1rd5 <= 103;
	     {1'd0,  7'd58}: s1rd5 <= 107;
	     {1'd0,  7'd59}: s1rd5 <= 111;
	     {1'd0,  7'd60}: s1rd5 <= 115;
	     {1'd0,  7'd61}: s1rd5 <= 119;
	     {1'd0,  7'd62}: s1rd5 <= 123;
	     {1'd0,  7'd63}: s1rd5 <= 127;
	     {1'd0,  7'd64}: s1rd5 <= 0;
	     {1'd0,  7'd65}: s1rd5 <= 4;
	     {1'd0,  7'd66}: s1rd5 <= 8;
	     {1'd0,  7'd67}: s1rd5 <= 12;
	     {1'd0,  7'd68}: s1rd5 <= 16;
	     {1'd0,  7'd69}: s1rd5 <= 20;
	     {1'd0,  7'd70}: s1rd5 <= 24;
	     {1'd0,  7'd71}: s1rd5 <= 28;
	     {1'd0,  7'd72}: s1rd5 <= 32;
	     {1'd0,  7'd73}: s1rd5 <= 36;
	     {1'd0,  7'd74}: s1rd5 <= 40;
	     {1'd0,  7'd75}: s1rd5 <= 44;
	     {1'd0,  7'd76}: s1rd5 <= 48;
	     {1'd0,  7'd77}: s1rd5 <= 52;
	     {1'd0,  7'd78}: s1rd5 <= 56;
	     {1'd0,  7'd79}: s1rd5 <= 60;
	     {1'd0,  7'd80}: s1rd5 <= 64;
	     {1'd0,  7'd81}: s1rd5 <= 68;
	     {1'd0,  7'd82}: s1rd5 <= 72;
	     {1'd0,  7'd83}: s1rd5 <= 76;
	     {1'd0,  7'd84}: s1rd5 <= 80;
	     {1'd0,  7'd85}: s1rd5 <= 84;
	     {1'd0,  7'd86}: s1rd5 <= 88;
	     {1'd0,  7'd87}: s1rd5 <= 92;
	     {1'd0,  7'd88}: s1rd5 <= 96;
	     {1'd0,  7'd89}: s1rd5 <= 100;
	     {1'd0,  7'd90}: s1rd5 <= 104;
	     {1'd0,  7'd91}: s1rd5 <= 108;
	     {1'd0,  7'd92}: s1rd5 <= 112;
	     {1'd0,  7'd93}: s1rd5 <= 116;
	     {1'd0,  7'd94}: s1rd5 <= 120;
	     {1'd0,  7'd95}: s1rd5 <= 124;
	     {1'd0,  7'd96}: s1rd5 <= 1;
	     {1'd0,  7'd97}: s1rd5 <= 5;
	     {1'd0,  7'd98}: s1rd5 <= 9;
	     {1'd0,  7'd99}: s1rd5 <= 13;
	     {1'd0,  7'd100}: s1rd5 <= 17;
	     {1'd0,  7'd101}: s1rd5 <= 21;
	     {1'd0,  7'd102}: s1rd5 <= 25;
	     {1'd0,  7'd103}: s1rd5 <= 29;
	     {1'd0,  7'd104}: s1rd5 <= 33;
	     {1'd0,  7'd105}: s1rd5 <= 37;
	     {1'd0,  7'd106}: s1rd5 <= 41;
	     {1'd0,  7'd107}: s1rd5 <= 45;
	     {1'd0,  7'd108}: s1rd5 <= 49;
	     {1'd0,  7'd109}: s1rd5 <= 53;
	     {1'd0,  7'd110}: s1rd5 <= 57;
	     {1'd0,  7'd111}: s1rd5 <= 61;
	     {1'd0,  7'd112}: s1rd5 <= 65;
	     {1'd0,  7'd113}: s1rd5 <= 69;
	     {1'd0,  7'd114}: s1rd5 <= 73;
	     {1'd0,  7'd115}: s1rd5 <= 77;
	     {1'd0,  7'd116}: s1rd5 <= 81;
	     {1'd0,  7'd117}: s1rd5 <= 85;
	     {1'd0,  7'd118}: s1rd5 <= 89;
	     {1'd0,  7'd119}: s1rd5 <= 93;
	     {1'd0,  7'd120}: s1rd5 <= 97;
	     {1'd0,  7'd121}: s1rd5 <= 101;
	     {1'd0,  7'd122}: s1rd5 <= 105;
	     {1'd0,  7'd123}: s1rd5 <= 109;
	     {1'd0,  7'd124}: s1rd5 <= 113;
	     {1'd0,  7'd125}: s1rd5 <= 117;
	     {1'd0,  7'd126}: s1rd5 <= 121;
	     {1'd0,  7'd127}: s1rd5 <= 125;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd6 <= 1;
	     {1'd0,  7'd1}: s1rd6 <= 5;
	     {1'd0,  7'd2}: s1rd6 <= 9;
	     {1'd0,  7'd3}: s1rd6 <= 13;
	     {1'd0,  7'd4}: s1rd6 <= 17;
	     {1'd0,  7'd5}: s1rd6 <= 21;
	     {1'd0,  7'd6}: s1rd6 <= 25;
	     {1'd0,  7'd7}: s1rd6 <= 29;
	     {1'd0,  7'd8}: s1rd6 <= 33;
	     {1'd0,  7'd9}: s1rd6 <= 37;
	     {1'd0,  7'd10}: s1rd6 <= 41;
	     {1'd0,  7'd11}: s1rd6 <= 45;
	     {1'd0,  7'd12}: s1rd6 <= 49;
	     {1'd0,  7'd13}: s1rd6 <= 53;
	     {1'd0,  7'd14}: s1rd6 <= 57;
	     {1'd0,  7'd15}: s1rd6 <= 61;
	     {1'd0,  7'd16}: s1rd6 <= 65;
	     {1'd0,  7'd17}: s1rd6 <= 69;
	     {1'd0,  7'd18}: s1rd6 <= 73;
	     {1'd0,  7'd19}: s1rd6 <= 77;
	     {1'd0,  7'd20}: s1rd6 <= 81;
	     {1'd0,  7'd21}: s1rd6 <= 85;
	     {1'd0,  7'd22}: s1rd6 <= 89;
	     {1'd0,  7'd23}: s1rd6 <= 93;
	     {1'd0,  7'd24}: s1rd6 <= 97;
	     {1'd0,  7'd25}: s1rd6 <= 101;
	     {1'd0,  7'd26}: s1rd6 <= 105;
	     {1'd0,  7'd27}: s1rd6 <= 109;
	     {1'd0,  7'd28}: s1rd6 <= 113;
	     {1'd0,  7'd29}: s1rd6 <= 117;
	     {1'd0,  7'd30}: s1rd6 <= 121;
	     {1'd0,  7'd31}: s1rd6 <= 125;
	     {1'd0,  7'd32}: s1rd6 <= 0;
	     {1'd0,  7'd33}: s1rd6 <= 4;
	     {1'd0,  7'd34}: s1rd6 <= 8;
	     {1'd0,  7'd35}: s1rd6 <= 12;
	     {1'd0,  7'd36}: s1rd6 <= 16;
	     {1'd0,  7'd37}: s1rd6 <= 20;
	     {1'd0,  7'd38}: s1rd6 <= 24;
	     {1'd0,  7'd39}: s1rd6 <= 28;
	     {1'd0,  7'd40}: s1rd6 <= 32;
	     {1'd0,  7'd41}: s1rd6 <= 36;
	     {1'd0,  7'd42}: s1rd6 <= 40;
	     {1'd0,  7'd43}: s1rd6 <= 44;
	     {1'd0,  7'd44}: s1rd6 <= 48;
	     {1'd0,  7'd45}: s1rd6 <= 52;
	     {1'd0,  7'd46}: s1rd6 <= 56;
	     {1'd0,  7'd47}: s1rd6 <= 60;
	     {1'd0,  7'd48}: s1rd6 <= 64;
	     {1'd0,  7'd49}: s1rd6 <= 68;
	     {1'd0,  7'd50}: s1rd6 <= 72;
	     {1'd0,  7'd51}: s1rd6 <= 76;
	     {1'd0,  7'd52}: s1rd6 <= 80;
	     {1'd0,  7'd53}: s1rd6 <= 84;
	     {1'd0,  7'd54}: s1rd6 <= 88;
	     {1'd0,  7'd55}: s1rd6 <= 92;
	     {1'd0,  7'd56}: s1rd6 <= 96;
	     {1'd0,  7'd57}: s1rd6 <= 100;
	     {1'd0,  7'd58}: s1rd6 <= 104;
	     {1'd0,  7'd59}: s1rd6 <= 108;
	     {1'd0,  7'd60}: s1rd6 <= 112;
	     {1'd0,  7'd61}: s1rd6 <= 116;
	     {1'd0,  7'd62}: s1rd6 <= 120;
	     {1'd0,  7'd63}: s1rd6 <= 124;
	     {1'd0,  7'd64}: s1rd6 <= 3;
	     {1'd0,  7'd65}: s1rd6 <= 7;
	     {1'd0,  7'd66}: s1rd6 <= 11;
	     {1'd0,  7'd67}: s1rd6 <= 15;
	     {1'd0,  7'd68}: s1rd6 <= 19;
	     {1'd0,  7'd69}: s1rd6 <= 23;
	     {1'd0,  7'd70}: s1rd6 <= 27;
	     {1'd0,  7'd71}: s1rd6 <= 31;
	     {1'd0,  7'd72}: s1rd6 <= 35;
	     {1'd0,  7'd73}: s1rd6 <= 39;
	     {1'd0,  7'd74}: s1rd6 <= 43;
	     {1'd0,  7'd75}: s1rd6 <= 47;
	     {1'd0,  7'd76}: s1rd6 <= 51;
	     {1'd0,  7'd77}: s1rd6 <= 55;
	     {1'd0,  7'd78}: s1rd6 <= 59;
	     {1'd0,  7'd79}: s1rd6 <= 63;
	     {1'd0,  7'd80}: s1rd6 <= 67;
	     {1'd0,  7'd81}: s1rd6 <= 71;
	     {1'd0,  7'd82}: s1rd6 <= 75;
	     {1'd0,  7'd83}: s1rd6 <= 79;
	     {1'd0,  7'd84}: s1rd6 <= 83;
	     {1'd0,  7'd85}: s1rd6 <= 87;
	     {1'd0,  7'd86}: s1rd6 <= 91;
	     {1'd0,  7'd87}: s1rd6 <= 95;
	     {1'd0,  7'd88}: s1rd6 <= 99;
	     {1'd0,  7'd89}: s1rd6 <= 103;
	     {1'd0,  7'd90}: s1rd6 <= 107;
	     {1'd0,  7'd91}: s1rd6 <= 111;
	     {1'd0,  7'd92}: s1rd6 <= 115;
	     {1'd0,  7'd93}: s1rd6 <= 119;
	     {1'd0,  7'd94}: s1rd6 <= 123;
	     {1'd0,  7'd95}: s1rd6 <= 127;
	     {1'd0,  7'd96}: s1rd6 <= 2;
	     {1'd0,  7'd97}: s1rd6 <= 6;
	     {1'd0,  7'd98}: s1rd6 <= 10;
	     {1'd0,  7'd99}: s1rd6 <= 14;
	     {1'd0,  7'd100}: s1rd6 <= 18;
	     {1'd0,  7'd101}: s1rd6 <= 22;
	     {1'd0,  7'd102}: s1rd6 <= 26;
	     {1'd0,  7'd103}: s1rd6 <= 30;
	     {1'd0,  7'd104}: s1rd6 <= 34;
	     {1'd0,  7'd105}: s1rd6 <= 38;
	     {1'd0,  7'd106}: s1rd6 <= 42;
	     {1'd0,  7'd107}: s1rd6 <= 46;
	     {1'd0,  7'd108}: s1rd6 <= 50;
	     {1'd0,  7'd109}: s1rd6 <= 54;
	     {1'd0,  7'd110}: s1rd6 <= 58;
	     {1'd0,  7'd111}: s1rd6 <= 62;
	     {1'd0,  7'd112}: s1rd6 <= 66;
	     {1'd0,  7'd113}: s1rd6 <= 70;
	     {1'd0,  7'd114}: s1rd6 <= 74;
	     {1'd0,  7'd115}: s1rd6 <= 78;
	     {1'd0,  7'd116}: s1rd6 <= 82;
	     {1'd0,  7'd117}: s1rd6 <= 86;
	     {1'd0,  7'd118}: s1rd6 <= 90;
	     {1'd0,  7'd119}: s1rd6 <= 94;
	     {1'd0,  7'd120}: s1rd6 <= 98;
	     {1'd0,  7'd121}: s1rd6 <= 102;
	     {1'd0,  7'd122}: s1rd6 <= 106;
	     {1'd0,  7'd123}: s1rd6 <= 110;
	     {1'd0,  7'd124}: s1rd6 <= 114;
	     {1'd0,  7'd125}: s1rd6 <= 118;
	     {1'd0,  7'd126}: s1rd6 <= 122;
	     {1'd0,  7'd127}: s1rd6 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm69_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd7 <= 0;
	     {1'd0,  7'd1}: s1rd7 <= 4;
	     {1'd0,  7'd2}: s1rd7 <= 8;
	     {1'd0,  7'd3}: s1rd7 <= 12;
	     {1'd0,  7'd4}: s1rd7 <= 16;
	     {1'd0,  7'd5}: s1rd7 <= 20;
	     {1'd0,  7'd6}: s1rd7 <= 24;
	     {1'd0,  7'd7}: s1rd7 <= 28;
	     {1'd0,  7'd8}: s1rd7 <= 32;
	     {1'd0,  7'd9}: s1rd7 <= 36;
	     {1'd0,  7'd10}: s1rd7 <= 40;
	     {1'd0,  7'd11}: s1rd7 <= 44;
	     {1'd0,  7'd12}: s1rd7 <= 48;
	     {1'd0,  7'd13}: s1rd7 <= 52;
	     {1'd0,  7'd14}: s1rd7 <= 56;
	     {1'd0,  7'd15}: s1rd7 <= 60;
	     {1'd0,  7'd16}: s1rd7 <= 64;
	     {1'd0,  7'd17}: s1rd7 <= 68;
	     {1'd0,  7'd18}: s1rd7 <= 72;
	     {1'd0,  7'd19}: s1rd7 <= 76;
	     {1'd0,  7'd20}: s1rd7 <= 80;
	     {1'd0,  7'd21}: s1rd7 <= 84;
	     {1'd0,  7'd22}: s1rd7 <= 88;
	     {1'd0,  7'd23}: s1rd7 <= 92;
	     {1'd0,  7'd24}: s1rd7 <= 96;
	     {1'd0,  7'd25}: s1rd7 <= 100;
	     {1'd0,  7'd26}: s1rd7 <= 104;
	     {1'd0,  7'd27}: s1rd7 <= 108;
	     {1'd0,  7'd28}: s1rd7 <= 112;
	     {1'd0,  7'd29}: s1rd7 <= 116;
	     {1'd0,  7'd30}: s1rd7 <= 120;
	     {1'd0,  7'd31}: s1rd7 <= 124;
	     {1'd0,  7'd32}: s1rd7 <= 1;
	     {1'd0,  7'd33}: s1rd7 <= 5;
	     {1'd0,  7'd34}: s1rd7 <= 9;
	     {1'd0,  7'd35}: s1rd7 <= 13;
	     {1'd0,  7'd36}: s1rd7 <= 17;
	     {1'd0,  7'd37}: s1rd7 <= 21;
	     {1'd0,  7'd38}: s1rd7 <= 25;
	     {1'd0,  7'd39}: s1rd7 <= 29;
	     {1'd0,  7'd40}: s1rd7 <= 33;
	     {1'd0,  7'd41}: s1rd7 <= 37;
	     {1'd0,  7'd42}: s1rd7 <= 41;
	     {1'd0,  7'd43}: s1rd7 <= 45;
	     {1'd0,  7'd44}: s1rd7 <= 49;
	     {1'd0,  7'd45}: s1rd7 <= 53;
	     {1'd0,  7'd46}: s1rd7 <= 57;
	     {1'd0,  7'd47}: s1rd7 <= 61;
	     {1'd0,  7'd48}: s1rd7 <= 65;
	     {1'd0,  7'd49}: s1rd7 <= 69;
	     {1'd0,  7'd50}: s1rd7 <= 73;
	     {1'd0,  7'd51}: s1rd7 <= 77;
	     {1'd0,  7'd52}: s1rd7 <= 81;
	     {1'd0,  7'd53}: s1rd7 <= 85;
	     {1'd0,  7'd54}: s1rd7 <= 89;
	     {1'd0,  7'd55}: s1rd7 <= 93;
	     {1'd0,  7'd56}: s1rd7 <= 97;
	     {1'd0,  7'd57}: s1rd7 <= 101;
	     {1'd0,  7'd58}: s1rd7 <= 105;
	     {1'd0,  7'd59}: s1rd7 <= 109;
	     {1'd0,  7'd60}: s1rd7 <= 113;
	     {1'd0,  7'd61}: s1rd7 <= 117;
	     {1'd0,  7'd62}: s1rd7 <= 121;
	     {1'd0,  7'd63}: s1rd7 <= 125;
	     {1'd0,  7'd64}: s1rd7 <= 2;
	     {1'd0,  7'd65}: s1rd7 <= 6;
	     {1'd0,  7'd66}: s1rd7 <= 10;
	     {1'd0,  7'd67}: s1rd7 <= 14;
	     {1'd0,  7'd68}: s1rd7 <= 18;
	     {1'd0,  7'd69}: s1rd7 <= 22;
	     {1'd0,  7'd70}: s1rd7 <= 26;
	     {1'd0,  7'd71}: s1rd7 <= 30;
	     {1'd0,  7'd72}: s1rd7 <= 34;
	     {1'd0,  7'd73}: s1rd7 <= 38;
	     {1'd0,  7'd74}: s1rd7 <= 42;
	     {1'd0,  7'd75}: s1rd7 <= 46;
	     {1'd0,  7'd76}: s1rd7 <= 50;
	     {1'd0,  7'd77}: s1rd7 <= 54;
	     {1'd0,  7'd78}: s1rd7 <= 58;
	     {1'd0,  7'd79}: s1rd7 <= 62;
	     {1'd0,  7'd80}: s1rd7 <= 66;
	     {1'd0,  7'd81}: s1rd7 <= 70;
	     {1'd0,  7'd82}: s1rd7 <= 74;
	     {1'd0,  7'd83}: s1rd7 <= 78;
	     {1'd0,  7'd84}: s1rd7 <= 82;
	     {1'd0,  7'd85}: s1rd7 <= 86;
	     {1'd0,  7'd86}: s1rd7 <= 90;
	     {1'd0,  7'd87}: s1rd7 <= 94;
	     {1'd0,  7'd88}: s1rd7 <= 98;
	     {1'd0,  7'd89}: s1rd7 <= 102;
	     {1'd0,  7'd90}: s1rd7 <= 106;
	     {1'd0,  7'd91}: s1rd7 <= 110;
	     {1'd0,  7'd92}: s1rd7 <= 114;
	     {1'd0,  7'd93}: s1rd7 <= 118;
	     {1'd0,  7'd94}: s1rd7 <= 122;
	     {1'd0,  7'd95}: s1rd7 <= 126;
	     {1'd0,  7'd96}: s1rd7 <= 3;
	     {1'd0,  7'd97}: s1rd7 <= 7;
	     {1'd0,  7'd98}: s1rd7 <= 11;
	     {1'd0,  7'd99}: s1rd7 <= 15;
	     {1'd0,  7'd100}: s1rd7 <= 19;
	     {1'd0,  7'd101}: s1rd7 <= 23;
	     {1'd0,  7'd102}: s1rd7 <= 27;
	     {1'd0,  7'd103}: s1rd7 <= 31;
	     {1'd0,  7'd104}: s1rd7 <= 35;
	     {1'd0,  7'd105}: s1rd7 <= 39;
	     {1'd0,  7'd106}: s1rd7 <= 43;
	     {1'd0,  7'd107}: s1rd7 <= 47;
	     {1'd0,  7'd108}: s1rd7 <= 51;
	     {1'd0,  7'd109}: s1rd7 <= 55;
	     {1'd0,  7'd110}: s1rd7 <= 59;
	     {1'd0,  7'd111}: s1rd7 <= 63;
	     {1'd0,  7'd112}: s1rd7 <= 67;
	     {1'd0,  7'd113}: s1rd7 <= 71;
	     {1'd0,  7'd114}: s1rd7 <= 75;
	     {1'd0,  7'd115}: s1rd7 <= 79;
	     {1'd0,  7'd116}: s1rd7 <= 83;
	     {1'd0,  7'd117}: s1rd7 <= 87;
	     {1'd0,  7'd118}: s1rd7 <= 91;
	     {1'd0,  7'd119}: s1rd7 <= 95;
	     {1'd0,  7'd120}: s1rd7 <= 99;
	     {1'd0,  7'd121}: s1rd7 <= 103;
	     {1'd0,  7'd122}: s1rd7 <= 107;
	     {1'd0,  7'd123}: s1rd7 <= 111;
	     {1'd0,  7'd124}: s1rd7 <= 115;
	     {1'd0,  7'd125}: s1rd7 <= 119;
	     {1'd0,  7'd126}: s1rd7 <= 123;
	     {1'd0,  7'd127}: s1rd7 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet47754 sw(tm69_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 96;
	      {1'd0, 7'd1}: s2wr0 <= 97;
	      {1'd0, 7'd2}: s2wr0 <= 98;
	      {1'd0, 7'd3}: s2wr0 <= 99;
	      {1'd0, 7'd4}: s2wr0 <= 100;
	      {1'd0, 7'd5}: s2wr0 <= 101;
	      {1'd0, 7'd6}: s2wr0 <= 102;
	      {1'd0, 7'd7}: s2wr0 <= 103;
	      {1'd0, 7'd8}: s2wr0 <= 104;
	      {1'd0, 7'd9}: s2wr0 <= 105;
	      {1'd0, 7'd10}: s2wr0 <= 106;
	      {1'd0, 7'd11}: s2wr0 <= 107;
	      {1'd0, 7'd12}: s2wr0 <= 108;
	      {1'd0, 7'd13}: s2wr0 <= 109;
	      {1'd0, 7'd14}: s2wr0 <= 110;
	      {1'd0, 7'd15}: s2wr0 <= 111;
	      {1'd0, 7'd16}: s2wr0 <= 112;
	      {1'd0, 7'd17}: s2wr0 <= 113;
	      {1'd0, 7'd18}: s2wr0 <= 114;
	      {1'd0, 7'd19}: s2wr0 <= 115;
	      {1'd0, 7'd20}: s2wr0 <= 116;
	      {1'd0, 7'd21}: s2wr0 <= 117;
	      {1'd0, 7'd22}: s2wr0 <= 118;
	      {1'd0, 7'd23}: s2wr0 <= 119;
	      {1'd0, 7'd24}: s2wr0 <= 120;
	      {1'd0, 7'd25}: s2wr0 <= 121;
	      {1'd0, 7'd26}: s2wr0 <= 122;
	      {1'd0, 7'd27}: s2wr0 <= 123;
	      {1'd0, 7'd28}: s2wr0 <= 124;
	      {1'd0, 7'd29}: s2wr0 <= 125;
	      {1'd0, 7'd30}: s2wr0 <= 126;
	      {1'd0, 7'd31}: s2wr0 <= 127;
	      {1'd0, 7'd32}: s2wr0 <= 64;
	      {1'd0, 7'd33}: s2wr0 <= 65;
	      {1'd0, 7'd34}: s2wr0 <= 66;
	      {1'd0, 7'd35}: s2wr0 <= 67;
	      {1'd0, 7'd36}: s2wr0 <= 68;
	      {1'd0, 7'd37}: s2wr0 <= 69;
	      {1'd0, 7'd38}: s2wr0 <= 70;
	      {1'd0, 7'd39}: s2wr0 <= 71;
	      {1'd0, 7'd40}: s2wr0 <= 72;
	      {1'd0, 7'd41}: s2wr0 <= 73;
	      {1'd0, 7'd42}: s2wr0 <= 74;
	      {1'd0, 7'd43}: s2wr0 <= 75;
	      {1'd0, 7'd44}: s2wr0 <= 76;
	      {1'd0, 7'd45}: s2wr0 <= 77;
	      {1'd0, 7'd46}: s2wr0 <= 78;
	      {1'd0, 7'd47}: s2wr0 <= 79;
	      {1'd0, 7'd48}: s2wr0 <= 80;
	      {1'd0, 7'd49}: s2wr0 <= 81;
	      {1'd0, 7'd50}: s2wr0 <= 82;
	      {1'd0, 7'd51}: s2wr0 <= 83;
	      {1'd0, 7'd52}: s2wr0 <= 84;
	      {1'd0, 7'd53}: s2wr0 <= 85;
	      {1'd0, 7'd54}: s2wr0 <= 86;
	      {1'd0, 7'd55}: s2wr0 <= 87;
	      {1'd0, 7'd56}: s2wr0 <= 88;
	      {1'd0, 7'd57}: s2wr0 <= 89;
	      {1'd0, 7'd58}: s2wr0 <= 90;
	      {1'd0, 7'd59}: s2wr0 <= 91;
	      {1'd0, 7'd60}: s2wr0 <= 92;
	      {1'd0, 7'd61}: s2wr0 <= 93;
	      {1'd0, 7'd62}: s2wr0 <= 94;
	      {1'd0, 7'd63}: s2wr0 <= 95;
	      {1'd0, 7'd64}: s2wr0 <= 32;
	      {1'd0, 7'd65}: s2wr0 <= 33;
	      {1'd0, 7'd66}: s2wr0 <= 34;
	      {1'd0, 7'd67}: s2wr0 <= 35;
	      {1'd0, 7'd68}: s2wr0 <= 36;
	      {1'd0, 7'd69}: s2wr0 <= 37;
	      {1'd0, 7'd70}: s2wr0 <= 38;
	      {1'd0, 7'd71}: s2wr0 <= 39;
	      {1'd0, 7'd72}: s2wr0 <= 40;
	      {1'd0, 7'd73}: s2wr0 <= 41;
	      {1'd0, 7'd74}: s2wr0 <= 42;
	      {1'd0, 7'd75}: s2wr0 <= 43;
	      {1'd0, 7'd76}: s2wr0 <= 44;
	      {1'd0, 7'd77}: s2wr0 <= 45;
	      {1'd0, 7'd78}: s2wr0 <= 46;
	      {1'd0, 7'd79}: s2wr0 <= 47;
	      {1'd0, 7'd80}: s2wr0 <= 48;
	      {1'd0, 7'd81}: s2wr0 <= 49;
	      {1'd0, 7'd82}: s2wr0 <= 50;
	      {1'd0, 7'd83}: s2wr0 <= 51;
	      {1'd0, 7'd84}: s2wr0 <= 52;
	      {1'd0, 7'd85}: s2wr0 <= 53;
	      {1'd0, 7'd86}: s2wr0 <= 54;
	      {1'd0, 7'd87}: s2wr0 <= 55;
	      {1'd0, 7'd88}: s2wr0 <= 56;
	      {1'd0, 7'd89}: s2wr0 <= 57;
	      {1'd0, 7'd90}: s2wr0 <= 58;
	      {1'd0, 7'd91}: s2wr0 <= 59;
	      {1'd0, 7'd92}: s2wr0 <= 60;
	      {1'd0, 7'd93}: s2wr0 <= 61;
	      {1'd0, 7'd94}: s2wr0 <= 62;
	      {1'd0, 7'd95}: s2wr0 <= 63;
	      {1'd0, 7'd96}: s2wr0 <= 0;
	      {1'd0, 7'd97}: s2wr0 <= 1;
	      {1'd0, 7'd98}: s2wr0 <= 2;
	      {1'd0, 7'd99}: s2wr0 <= 3;
	      {1'd0, 7'd100}: s2wr0 <= 4;
	      {1'd0, 7'd101}: s2wr0 <= 5;
	      {1'd0, 7'd102}: s2wr0 <= 6;
	      {1'd0, 7'd103}: s2wr0 <= 7;
	      {1'd0, 7'd104}: s2wr0 <= 8;
	      {1'd0, 7'd105}: s2wr0 <= 9;
	      {1'd0, 7'd106}: s2wr0 <= 10;
	      {1'd0, 7'd107}: s2wr0 <= 11;
	      {1'd0, 7'd108}: s2wr0 <= 12;
	      {1'd0, 7'd109}: s2wr0 <= 13;
	      {1'd0, 7'd110}: s2wr0 <= 14;
	      {1'd0, 7'd111}: s2wr0 <= 15;
	      {1'd0, 7'd112}: s2wr0 <= 16;
	      {1'd0, 7'd113}: s2wr0 <= 17;
	      {1'd0, 7'd114}: s2wr0 <= 18;
	      {1'd0, 7'd115}: s2wr0 <= 19;
	      {1'd0, 7'd116}: s2wr0 <= 20;
	      {1'd0, 7'd117}: s2wr0 <= 21;
	      {1'd0, 7'd118}: s2wr0 <= 22;
	      {1'd0, 7'd119}: s2wr0 <= 23;
	      {1'd0, 7'd120}: s2wr0 <= 24;
	      {1'd0, 7'd121}: s2wr0 <= 25;
	      {1'd0, 7'd122}: s2wr0 <= 26;
	      {1'd0, 7'd123}: s2wr0 <= 27;
	      {1'd0, 7'd124}: s2wr0 <= 28;
	      {1'd0, 7'd125}: s2wr0 <= 29;
	      {1'd0, 7'd126}: s2wr0 <= 30;
	      {1'd0, 7'd127}: s2wr0 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 96;
	      {1'd0, 7'd1}: s2wr1 <= 97;
	      {1'd0, 7'd2}: s2wr1 <= 98;
	      {1'd0, 7'd3}: s2wr1 <= 99;
	      {1'd0, 7'd4}: s2wr1 <= 100;
	      {1'd0, 7'd5}: s2wr1 <= 101;
	      {1'd0, 7'd6}: s2wr1 <= 102;
	      {1'd0, 7'd7}: s2wr1 <= 103;
	      {1'd0, 7'd8}: s2wr1 <= 104;
	      {1'd0, 7'd9}: s2wr1 <= 105;
	      {1'd0, 7'd10}: s2wr1 <= 106;
	      {1'd0, 7'd11}: s2wr1 <= 107;
	      {1'd0, 7'd12}: s2wr1 <= 108;
	      {1'd0, 7'd13}: s2wr1 <= 109;
	      {1'd0, 7'd14}: s2wr1 <= 110;
	      {1'd0, 7'd15}: s2wr1 <= 111;
	      {1'd0, 7'd16}: s2wr1 <= 112;
	      {1'd0, 7'd17}: s2wr1 <= 113;
	      {1'd0, 7'd18}: s2wr1 <= 114;
	      {1'd0, 7'd19}: s2wr1 <= 115;
	      {1'd0, 7'd20}: s2wr1 <= 116;
	      {1'd0, 7'd21}: s2wr1 <= 117;
	      {1'd0, 7'd22}: s2wr1 <= 118;
	      {1'd0, 7'd23}: s2wr1 <= 119;
	      {1'd0, 7'd24}: s2wr1 <= 120;
	      {1'd0, 7'd25}: s2wr1 <= 121;
	      {1'd0, 7'd26}: s2wr1 <= 122;
	      {1'd0, 7'd27}: s2wr1 <= 123;
	      {1'd0, 7'd28}: s2wr1 <= 124;
	      {1'd0, 7'd29}: s2wr1 <= 125;
	      {1'd0, 7'd30}: s2wr1 <= 126;
	      {1'd0, 7'd31}: s2wr1 <= 127;
	      {1'd0, 7'd32}: s2wr1 <= 64;
	      {1'd0, 7'd33}: s2wr1 <= 65;
	      {1'd0, 7'd34}: s2wr1 <= 66;
	      {1'd0, 7'd35}: s2wr1 <= 67;
	      {1'd0, 7'd36}: s2wr1 <= 68;
	      {1'd0, 7'd37}: s2wr1 <= 69;
	      {1'd0, 7'd38}: s2wr1 <= 70;
	      {1'd0, 7'd39}: s2wr1 <= 71;
	      {1'd0, 7'd40}: s2wr1 <= 72;
	      {1'd0, 7'd41}: s2wr1 <= 73;
	      {1'd0, 7'd42}: s2wr1 <= 74;
	      {1'd0, 7'd43}: s2wr1 <= 75;
	      {1'd0, 7'd44}: s2wr1 <= 76;
	      {1'd0, 7'd45}: s2wr1 <= 77;
	      {1'd0, 7'd46}: s2wr1 <= 78;
	      {1'd0, 7'd47}: s2wr1 <= 79;
	      {1'd0, 7'd48}: s2wr1 <= 80;
	      {1'd0, 7'd49}: s2wr1 <= 81;
	      {1'd0, 7'd50}: s2wr1 <= 82;
	      {1'd0, 7'd51}: s2wr1 <= 83;
	      {1'd0, 7'd52}: s2wr1 <= 84;
	      {1'd0, 7'd53}: s2wr1 <= 85;
	      {1'd0, 7'd54}: s2wr1 <= 86;
	      {1'd0, 7'd55}: s2wr1 <= 87;
	      {1'd0, 7'd56}: s2wr1 <= 88;
	      {1'd0, 7'd57}: s2wr1 <= 89;
	      {1'd0, 7'd58}: s2wr1 <= 90;
	      {1'd0, 7'd59}: s2wr1 <= 91;
	      {1'd0, 7'd60}: s2wr1 <= 92;
	      {1'd0, 7'd61}: s2wr1 <= 93;
	      {1'd0, 7'd62}: s2wr1 <= 94;
	      {1'd0, 7'd63}: s2wr1 <= 95;
	      {1'd0, 7'd64}: s2wr1 <= 32;
	      {1'd0, 7'd65}: s2wr1 <= 33;
	      {1'd0, 7'd66}: s2wr1 <= 34;
	      {1'd0, 7'd67}: s2wr1 <= 35;
	      {1'd0, 7'd68}: s2wr1 <= 36;
	      {1'd0, 7'd69}: s2wr1 <= 37;
	      {1'd0, 7'd70}: s2wr1 <= 38;
	      {1'd0, 7'd71}: s2wr1 <= 39;
	      {1'd0, 7'd72}: s2wr1 <= 40;
	      {1'd0, 7'd73}: s2wr1 <= 41;
	      {1'd0, 7'd74}: s2wr1 <= 42;
	      {1'd0, 7'd75}: s2wr1 <= 43;
	      {1'd0, 7'd76}: s2wr1 <= 44;
	      {1'd0, 7'd77}: s2wr1 <= 45;
	      {1'd0, 7'd78}: s2wr1 <= 46;
	      {1'd0, 7'd79}: s2wr1 <= 47;
	      {1'd0, 7'd80}: s2wr1 <= 48;
	      {1'd0, 7'd81}: s2wr1 <= 49;
	      {1'd0, 7'd82}: s2wr1 <= 50;
	      {1'd0, 7'd83}: s2wr1 <= 51;
	      {1'd0, 7'd84}: s2wr1 <= 52;
	      {1'd0, 7'd85}: s2wr1 <= 53;
	      {1'd0, 7'd86}: s2wr1 <= 54;
	      {1'd0, 7'd87}: s2wr1 <= 55;
	      {1'd0, 7'd88}: s2wr1 <= 56;
	      {1'd0, 7'd89}: s2wr1 <= 57;
	      {1'd0, 7'd90}: s2wr1 <= 58;
	      {1'd0, 7'd91}: s2wr1 <= 59;
	      {1'd0, 7'd92}: s2wr1 <= 60;
	      {1'd0, 7'd93}: s2wr1 <= 61;
	      {1'd0, 7'd94}: s2wr1 <= 62;
	      {1'd0, 7'd95}: s2wr1 <= 63;
	      {1'd0, 7'd96}: s2wr1 <= 0;
	      {1'd0, 7'd97}: s2wr1 <= 1;
	      {1'd0, 7'd98}: s2wr1 <= 2;
	      {1'd0, 7'd99}: s2wr1 <= 3;
	      {1'd0, 7'd100}: s2wr1 <= 4;
	      {1'd0, 7'd101}: s2wr1 <= 5;
	      {1'd0, 7'd102}: s2wr1 <= 6;
	      {1'd0, 7'd103}: s2wr1 <= 7;
	      {1'd0, 7'd104}: s2wr1 <= 8;
	      {1'd0, 7'd105}: s2wr1 <= 9;
	      {1'd0, 7'd106}: s2wr1 <= 10;
	      {1'd0, 7'd107}: s2wr1 <= 11;
	      {1'd0, 7'd108}: s2wr1 <= 12;
	      {1'd0, 7'd109}: s2wr1 <= 13;
	      {1'd0, 7'd110}: s2wr1 <= 14;
	      {1'd0, 7'd111}: s2wr1 <= 15;
	      {1'd0, 7'd112}: s2wr1 <= 16;
	      {1'd0, 7'd113}: s2wr1 <= 17;
	      {1'd0, 7'd114}: s2wr1 <= 18;
	      {1'd0, 7'd115}: s2wr1 <= 19;
	      {1'd0, 7'd116}: s2wr1 <= 20;
	      {1'd0, 7'd117}: s2wr1 <= 21;
	      {1'd0, 7'd118}: s2wr1 <= 22;
	      {1'd0, 7'd119}: s2wr1 <= 23;
	      {1'd0, 7'd120}: s2wr1 <= 24;
	      {1'd0, 7'd121}: s2wr1 <= 25;
	      {1'd0, 7'd122}: s2wr1 <= 26;
	      {1'd0, 7'd123}: s2wr1 <= 27;
	      {1'd0, 7'd124}: s2wr1 <= 28;
	      {1'd0, 7'd125}: s2wr1 <= 29;
	      {1'd0, 7'd126}: s2wr1 <= 30;
	      {1'd0, 7'd127}: s2wr1 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 64;
	      {1'd0, 7'd1}: s2wr2 <= 65;
	      {1'd0, 7'd2}: s2wr2 <= 66;
	      {1'd0, 7'd3}: s2wr2 <= 67;
	      {1'd0, 7'd4}: s2wr2 <= 68;
	      {1'd0, 7'd5}: s2wr2 <= 69;
	      {1'd0, 7'd6}: s2wr2 <= 70;
	      {1'd0, 7'd7}: s2wr2 <= 71;
	      {1'd0, 7'd8}: s2wr2 <= 72;
	      {1'd0, 7'd9}: s2wr2 <= 73;
	      {1'd0, 7'd10}: s2wr2 <= 74;
	      {1'd0, 7'd11}: s2wr2 <= 75;
	      {1'd0, 7'd12}: s2wr2 <= 76;
	      {1'd0, 7'd13}: s2wr2 <= 77;
	      {1'd0, 7'd14}: s2wr2 <= 78;
	      {1'd0, 7'd15}: s2wr2 <= 79;
	      {1'd0, 7'd16}: s2wr2 <= 80;
	      {1'd0, 7'd17}: s2wr2 <= 81;
	      {1'd0, 7'd18}: s2wr2 <= 82;
	      {1'd0, 7'd19}: s2wr2 <= 83;
	      {1'd0, 7'd20}: s2wr2 <= 84;
	      {1'd0, 7'd21}: s2wr2 <= 85;
	      {1'd0, 7'd22}: s2wr2 <= 86;
	      {1'd0, 7'd23}: s2wr2 <= 87;
	      {1'd0, 7'd24}: s2wr2 <= 88;
	      {1'd0, 7'd25}: s2wr2 <= 89;
	      {1'd0, 7'd26}: s2wr2 <= 90;
	      {1'd0, 7'd27}: s2wr2 <= 91;
	      {1'd0, 7'd28}: s2wr2 <= 92;
	      {1'd0, 7'd29}: s2wr2 <= 93;
	      {1'd0, 7'd30}: s2wr2 <= 94;
	      {1'd0, 7'd31}: s2wr2 <= 95;
	      {1'd0, 7'd32}: s2wr2 <= 96;
	      {1'd0, 7'd33}: s2wr2 <= 97;
	      {1'd0, 7'd34}: s2wr2 <= 98;
	      {1'd0, 7'd35}: s2wr2 <= 99;
	      {1'd0, 7'd36}: s2wr2 <= 100;
	      {1'd0, 7'd37}: s2wr2 <= 101;
	      {1'd0, 7'd38}: s2wr2 <= 102;
	      {1'd0, 7'd39}: s2wr2 <= 103;
	      {1'd0, 7'd40}: s2wr2 <= 104;
	      {1'd0, 7'd41}: s2wr2 <= 105;
	      {1'd0, 7'd42}: s2wr2 <= 106;
	      {1'd0, 7'd43}: s2wr2 <= 107;
	      {1'd0, 7'd44}: s2wr2 <= 108;
	      {1'd0, 7'd45}: s2wr2 <= 109;
	      {1'd0, 7'd46}: s2wr2 <= 110;
	      {1'd0, 7'd47}: s2wr2 <= 111;
	      {1'd0, 7'd48}: s2wr2 <= 112;
	      {1'd0, 7'd49}: s2wr2 <= 113;
	      {1'd0, 7'd50}: s2wr2 <= 114;
	      {1'd0, 7'd51}: s2wr2 <= 115;
	      {1'd0, 7'd52}: s2wr2 <= 116;
	      {1'd0, 7'd53}: s2wr2 <= 117;
	      {1'd0, 7'd54}: s2wr2 <= 118;
	      {1'd0, 7'd55}: s2wr2 <= 119;
	      {1'd0, 7'd56}: s2wr2 <= 120;
	      {1'd0, 7'd57}: s2wr2 <= 121;
	      {1'd0, 7'd58}: s2wr2 <= 122;
	      {1'd0, 7'd59}: s2wr2 <= 123;
	      {1'd0, 7'd60}: s2wr2 <= 124;
	      {1'd0, 7'd61}: s2wr2 <= 125;
	      {1'd0, 7'd62}: s2wr2 <= 126;
	      {1'd0, 7'd63}: s2wr2 <= 127;
	      {1'd0, 7'd64}: s2wr2 <= 0;
	      {1'd0, 7'd65}: s2wr2 <= 1;
	      {1'd0, 7'd66}: s2wr2 <= 2;
	      {1'd0, 7'd67}: s2wr2 <= 3;
	      {1'd0, 7'd68}: s2wr2 <= 4;
	      {1'd0, 7'd69}: s2wr2 <= 5;
	      {1'd0, 7'd70}: s2wr2 <= 6;
	      {1'd0, 7'd71}: s2wr2 <= 7;
	      {1'd0, 7'd72}: s2wr2 <= 8;
	      {1'd0, 7'd73}: s2wr2 <= 9;
	      {1'd0, 7'd74}: s2wr2 <= 10;
	      {1'd0, 7'd75}: s2wr2 <= 11;
	      {1'd0, 7'd76}: s2wr2 <= 12;
	      {1'd0, 7'd77}: s2wr2 <= 13;
	      {1'd0, 7'd78}: s2wr2 <= 14;
	      {1'd0, 7'd79}: s2wr2 <= 15;
	      {1'd0, 7'd80}: s2wr2 <= 16;
	      {1'd0, 7'd81}: s2wr2 <= 17;
	      {1'd0, 7'd82}: s2wr2 <= 18;
	      {1'd0, 7'd83}: s2wr2 <= 19;
	      {1'd0, 7'd84}: s2wr2 <= 20;
	      {1'd0, 7'd85}: s2wr2 <= 21;
	      {1'd0, 7'd86}: s2wr2 <= 22;
	      {1'd0, 7'd87}: s2wr2 <= 23;
	      {1'd0, 7'd88}: s2wr2 <= 24;
	      {1'd0, 7'd89}: s2wr2 <= 25;
	      {1'd0, 7'd90}: s2wr2 <= 26;
	      {1'd0, 7'd91}: s2wr2 <= 27;
	      {1'd0, 7'd92}: s2wr2 <= 28;
	      {1'd0, 7'd93}: s2wr2 <= 29;
	      {1'd0, 7'd94}: s2wr2 <= 30;
	      {1'd0, 7'd95}: s2wr2 <= 31;
	      {1'd0, 7'd96}: s2wr2 <= 32;
	      {1'd0, 7'd97}: s2wr2 <= 33;
	      {1'd0, 7'd98}: s2wr2 <= 34;
	      {1'd0, 7'd99}: s2wr2 <= 35;
	      {1'd0, 7'd100}: s2wr2 <= 36;
	      {1'd0, 7'd101}: s2wr2 <= 37;
	      {1'd0, 7'd102}: s2wr2 <= 38;
	      {1'd0, 7'd103}: s2wr2 <= 39;
	      {1'd0, 7'd104}: s2wr2 <= 40;
	      {1'd0, 7'd105}: s2wr2 <= 41;
	      {1'd0, 7'd106}: s2wr2 <= 42;
	      {1'd0, 7'd107}: s2wr2 <= 43;
	      {1'd0, 7'd108}: s2wr2 <= 44;
	      {1'd0, 7'd109}: s2wr2 <= 45;
	      {1'd0, 7'd110}: s2wr2 <= 46;
	      {1'd0, 7'd111}: s2wr2 <= 47;
	      {1'd0, 7'd112}: s2wr2 <= 48;
	      {1'd0, 7'd113}: s2wr2 <= 49;
	      {1'd0, 7'd114}: s2wr2 <= 50;
	      {1'd0, 7'd115}: s2wr2 <= 51;
	      {1'd0, 7'd116}: s2wr2 <= 52;
	      {1'd0, 7'd117}: s2wr2 <= 53;
	      {1'd0, 7'd118}: s2wr2 <= 54;
	      {1'd0, 7'd119}: s2wr2 <= 55;
	      {1'd0, 7'd120}: s2wr2 <= 56;
	      {1'd0, 7'd121}: s2wr2 <= 57;
	      {1'd0, 7'd122}: s2wr2 <= 58;
	      {1'd0, 7'd123}: s2wr2 <= 59;
	      {1'd0, 7'd124}: s2wr2 <= 60;
	      {1'd0, 7'd125}: s2wr2 <= 61;
	      {1'd0, 7'd126}: s2wr2 <= 62;
	      {1'd0, 7'd127}: s2wr2 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 64;
	      {1'd0, 7'd1}: s2wr3 <= 65;
	      {1'd0, 7'd2}: s2wr3 <= 66;
	      {1'd0, 7'd3}: s2wr3 <= 67;
	      {1'd0, 7'd4}: s2wr3 <= 68;
	      {1'd0, 7'd5}: s2wr3 <= 69;
	      {1'd0, 7'd6}: s2wr3 <= 70;
	      {1'd0, 7'd7}: s2wr3 <= 71;
	      {1'd0, 7'd8}: s2wr3 <= 72;
	      {1'd0, 7'd9}: s2wr3 <= 73;
	      {1'd0, 7'd10}: s2wr3 <= 74;
	      {1'd0, 7'd11}: s2wr3 <= 75;
	      {1'd0, 7'd12}: s2wr3 <= 76;
	      {1'd0, 7'd13}: s2wr3 <= 77;
	      {1'd0, 7'd14}: s2wr3 <= 78;
	      {1'd0, 7'd15}: s2wr3 <= 79;
	      {1'd0, 7'd16}: s2wr3 <= 80;
	      {1'd0, 7'd17}: s2wr3 <= 81;
	      {1'd0, 7'd18}: s2wr3 <= 82;
	      {1'd0, 7'd19}: s2wr3 <= 83;
	      {1'd0, 7'd20}: s2wr3 <= 84;
	      {1'd0, 7'd21}: s2wr3 <= 85;
	      {1'd0, 7'd22}: s2wr3 <= 86;
	      {1'd0, 7'd23}: s2wr3 <= 87;
	      {1'd0, 7'd24}: s2wr3 <= 88;
	      {1'd0, 7'd25}: s2wr3 <= 89;
	      {1'd0, 7'd26}: s2wr3 <= 90;
	      {1'd0, 7'd27}: s2wr3 <= 91;
	      {1'd0, 7'd28}: s2wr3 <= 92;
	      {1'd0, 7'd29}: s2wr3 <= 93;
	      {1'd0, 7'd30}: s2wr3 <= 94;
	      {1'd0, 7'd31}: s2wr3 <= 95;
	      {1'd0, 7'd32}: s2wr3 <= 96;
	      {1'd0, 7'd33}: s2wr3 <= 97;
	      {1'd0, 7'd34}: s2wr3 <= 98;
	      {1'd0, 7'd35}: s2wr3 <= 99;
	      {1'd0, 7'd36}: s2wr3 <= 100;
	      {1'd0, 7'd37}: s2wr3 <= 101;
	      {1'd0, 7'd38}: s2wr3 <= 102;
	      {1'd0, 7'd39}: s2wr3 <= 103;
	      {1'd0, 7'd40}: s2wr3 <= 104;
	      {1'd0, 7'd41}: s2wr3 <= 105;
	      {1'd0, 7'd42}: s2wr3 <= 106;
	      {1'd0, 7'd43}: s2wr3 <= 107;
	      {1'd0, 7'd44}: s2wr3 <= 108;
	      {1'd0, 7'd45}: s2wr3 <= 109;
	      {1'd0, 7'd46}: s2wr3 <= 110;
	      {1'd0, 7'd47}: s2wr3 <= 111;
	      {1'd0, 7'd48}: s2wr3 <= 112;
	      {1'd0, 7'd49}: s2wr3 <= 113;
	      {1'd0, 7'd50}: s2wr3 <= 114;
	      {1'd0, 7'd51}: s2wr3 <= 115;
	      {1'd0, 7'd52}: s2wr3 <= 116;
	      {1'd0, 7'd53}: s2wr3 <= 117;
	      {1'd0, 7'd54}: s2wr3 <= 118;
	      {1'd0, 7'd55}: s2wr3 <= 119;
	      {1'd0, 7'd56}: s2wr3 <= 120;
	      {1'd0, 7'd57}: s2wr3 <= 121;
	      {1'd0, 7'd58}: s2wr3 <= 122;
	      {1'd0, 7'd59}: s2wr3 <= 123;
	      {1'd0, 7'd60}: s2wr3 <= 124;
	      {1'd0, 7'd61}: s2wr3 <= 125;
	      {1'd0, 7'd62}: s2wr3 <= 126;
	      {1'd0, 7'd63}: s2wr3 <= 127;
	      {1'd0, 7'd64}: s2wr3 <= 0;
	      {1'd0, 7'd65}: s2wr3 <= 1;
	      {1'd0, 7'd66}: s2wr3 <= 2;
	      {1'd0, 7'd67}: s2wr3 <= 3;
	      {1'd0, 7'd68}: s2wr3 <= 4;
	      {1'd0, 7'd69}: s2wr3 <= 5;
	      {1'd0, 7'd70}: s2wr3 <= 6;
	      {1'd0, 7'd71}: s2wr3 <= 7;
	      {1'd0, 7'd72}: s2wr3 <= 8;
	      {1'd0, 7'd73}: s2wr3 <= 9;
	      {1'd0, 7'd74}: s2wr3 <= 10;
	      {1'd0, 7'd75}: s2wr3 <= 11;
	      {1'd0, 7'd76}: s2wr3 <= 12;
	      {1'd0, 7'd77}: s2wr3 <= 13;
	      {1'd0, 7'd78}: s2wr3 <= 14;
	      {1'd0, 7'd79}: s2wr3 <= 15;
	      {1'd0, 7'd80}: s2wr3 <= 16;
	      {1'd0, 7'd81}: s2wr3 <= 17;
	      {1'd0, 7'd82}: s2wr3 <= 18;
	      {1'd0, 7'd83}: s2wr3 <= 19;
	      {1'd0, 7'd84}: s2wr3 <= 20;
	      {1'd0, 7'd85}: s2wr3 <= 21;
	      {1'd0, 7'd86}: s2wr3 <= 22;
	      {1'd0, 7'd87}: s2wr3 <= 23;
	      {1'd0, 7'd88}: s2wr3 <= 24;
	      {1'd0, 7'd89}: s2wr3 <= 25;
	      {1'd0, 7'd90}: s2wr3 <= 26;
	      {1'd0, 7'd91}: s2wr3 <= 27;
	      {1'd0, 7'd92}: s2wr3 <= 28;
	      {1'd0, 7'd93}: s2wr3 <= 29;
	      {1'd0, 7'd94}: s2wr3 <= 30;
	      {1'd0, 7'd95}: s2wr3 <= 31;
	      {1'd0, 7'd96}: s2wr3 <= 32;
	      {1'd0, 7'd97}: s2wr3 <= 33;
	      {1'd0, 7'd98}: s2wr3 <= 34;
	      {1'd0, 7'd99}: s2wr3 <= 35;
	      {1'd0, 7'd100}: s2wr3 <= 36;
	      {1'd0, 7'd101}: s2wr3 <= 37;
	      {1'd0, 7'd102}: s2wr3 <= 38;
	      {1'd0, 7'd103}: s2wr3 <= 39;
	      {1'd0, 7'd104}: s2wr3 <= 40;
	      {1'd0, 7'd105}: s2wr3 <= 41;
	      {1'd0, 7'd106}: s2wr3 <= 42;
	      {1'd0, 7'd107}: s2wr3 <= 43;
	      {1'd0, 7'd108}: s2wr3 <= 44;
	      {1'd0, 7'd109}: s2wr3 <= 45;
	      {1'd0, 7'd110}: s2wr3 <= 46;
	      {1'd0, 7'd111}: s2wr3 <= 47;
	      {1'd0, 7'd112}: s2wr3 <= 48;
	      {1'd0, 7'd113}: s2wr3 <= 49;
	      {1'd0, 7'd114}: s2wr3 <= 50;
	      {1'd0, 7'd115}: s2wr3 <= 51;
	      {1'd0, 7'd116}: s2wr3 <= 52;
	      {1'd0, 7'd117}: s2wr3 <= 53;
	      {1'd0, 7'd118}: s2wr3 <= 54;
	      {1'd0, 7'd119}: s2wr3 <= 55;
	      {1'd0, 7'd120}: s2wr3 <= 56;
	      {1'd0, 7'd121}: s2wr3 <= 57;
	      {1'd0, 7'd122}: s2wr3 <= 58;
	      {1'd0, 7'd123}: s2wr3 <= 59;
	      {1'd0, 7'd124}: s2wr3 <= 60;
	      {1'd0, 7'd125}: s2wr3 <= 61;
	      {1'd0, 7'd126}: s2wr3 <= 62;
	      {1'd0, 7'd127}: s2wr3 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr4 <= 32;
	      {1'd0, 7'd1}: s2wr4 <= 33;
	      {1'd0, 7'd2}: s2wr4 <= 34;
	      {1'd0, 7'd3}: s2wr4 <= 35;
	      {1'd0, 7'd4}: s2wr4 <= 36;
	      {1'd0, 7'd5}: s2wr4 <= 37;
	      {1'd0, 7'd6}: s2wr4 <= 38;
	      {1'd0, 7'd7}: s2wr4 <= 39;
	      {1'd0, 7'd8}: s2wr4 <= 40;
	      {1'd0, 7'd9}: s2wr4 <= 41;
	      {1'd0, 7'd10}: s2wr4 <= 42;
	      {1'd0, 7'd11}: s2wr4 <= 43;
	      {1'd0, 7'd12}: s2wr4 <= 44;
	      {1'd0, 7'd13}: s2wr4 <= 45;
	      {1'd0, 7'd14}: s2wr4 <= 46;
	      {1'd0, 7'd15}: s2wr4 <= 47;
	      {1'd0, 7'd16}: s2wr4 <= 48;
	      {1'd0, 7'd17}: s2wr4 <= 49;
	      {1'd0, 7'd18}: s2wr4 <= 50;
	      {1'd0, 7'd19}: s2wr4 <= 51;
	      {1'd0, 7'd20}: s2wr4 <= 52;
	      {1'd0, 7'd21}: s2wr4 <= 53;
	      {1'd0, 7'd22}: s2wr4 <= 54;
	      {1'd0, 7'd23}: s2wr4 <= 55;
	      {1'd0, 7'd24}: s2wr4 <= 56;
	      {1'd0, 7'd25}: s2wr4 <= 57;
	      {1'd0, 7'd26}: s2wr4 <= 58;
	      {1'd0, 7'd27}: s2wr4 <= 59;
	      {1'd0, 7'd28}: s2wr4 <= 60;
	      {1'd0, 7'd29}: s2wr4 <= 61;
	      {1'd0, 7'd30}: s2wr4 <= 62;
	      {1'd0, 7'd31}: s2wr4 <= 63;
	      {1'd0, 7'd32}: s2wr4 <= 0;
	      {1'd0, 7'd33}: s2wr4 <= 1;
	      {1'd0, 7'd34}: s2wr4 <= 2;
	      {1'd0, 7'd35}: s2wr4 <= 3;
	      {1'd0, 7'd36}: s2wr4 <= 4;
	      {1'd0, 7'd37}: s2wr4 <= 5;
	      {1'd0, 7'd38}: s2wr4 <= 6;
	      {1'd0, 7'd39}: s2wr4 <= 7;
	      {1'd0, 7'd40}: s2wr4 <= 8;
	      {1'd0, 7'd41}: s2wr4 <= 9;
	      {1'd0, 7'd42}: s2wr4 <= 10;
	      {1'd0, 7'd43}: s2wr4 <= 11;
	      {1'd0, 7'd44}: s2wr4 <= 12;
	      {1'd0, 7'd45}: s2wr4 <= 13;
	      {1'd0, 7'd46}: s2wr4 <= 14;
	      {1'd0, 7'd47}: s2wr4 <= 15;
	      {1'd0, 7'd48}: s2wr4 <= 16;
	      {1'd0, 7'd49}: s2wr4 <= 17;
	      {1'd0, 7'd50}: s2wr4 <= 18;
	      {1'd0, 7'd51}: s2wr4 <= 19;
	      {1'd0, 7'd52}: s2wr4 <= 20;
	      {1'd0, 7'd53}: s2wr4 <= 21;
	      {1'd0, 7'd54}: s2wr4 <= 22;
	      {1'd0, 7'd55}: s2wr4 <= 23;
	      {1'd0, 7'd56}: s2wr4 <= 24;
	      {1'd0, 7'd57}: s2wr4 <= 25;
	      {1'd0, 7'd58}: s2wr4 <= 26;
	      {1'd0, 7'd59}: s2wr4 <= 27;
	      {1'd0, 7'd60}: s2wr4 <= 28;
	      {1'd0, 7'd61}: s2wr4 <= 29;
	      {1'd0, 7'd62}: s2wr4 <= 30;
	      {1'd0, 7'd63}: s2wr4 <= 31;
	      {1'd0, 7'd64}: s2wr4 <= 96;
	      {1'd0, 7'd65}: s2wr4 <= 97;
	      {1'd0, 7'd66}: s2wr4 <= 98;
	      {1'd0, 7'd67}: s2wr4 <= 99;
	      {1'd0, 7'd68}: s2wr4 <= 100;
	      {1'd0, 7'd69}: s2wr4 <= 101;
	      {1'd0, 7'd70}: s2wr4 <= 102;
	      {1'd0, 7'd71}: s2wr4 <= 103;
	      {1'd0, 7'd72}: s2wr4 <= 104;
	      {1'd0, 7'd73}: s2wr4 <= 105;
	      {1'd0, 7'd74}: s2wr4 <= 106;
	      {1'd0, 7'd75}: s2wr4 <= 107;
	      {1'd0, 7'd76}: s2wr4 <= 108;
	      {1'd0, 7'd77}: s2wr4 <= 109;
	      {1'd0, 7'd78}: s2wr4 <= 110;
	      {1'd0, 7'd79}: s2wr4 <= 111;
	      {1'd0, 7'd80}: s2wr4 <= 112;
	      {1'd0, 7'd81}: s2wr4 <= 113;
	      {1'd0, 7'd82}: s2wr4 <= 114;
	      {1'd0, 7'd83}: s2wr4 <= 115;
	      {1'd0, 7'd84}: s2wr4 <= 116;
	      {1'd0, 7'd85}: s2wr4 <= 117;
	      {1'd0, 7'd86}: s2wr4 <= 118;
	      {1'd0, 7'd87}: s2wr4 <= 119;
	      {1'd0, 7'd88}: s2wr4 <= 120;
	      {1'd0, 7'd89}: s2wr4 <= 121;
	      {1'd0, 7'd90}: s2wr4 <= 122;
	      {1'd0, 7'd91}: s2wr4 <= 123;
	      {1'd0, 7'd92}: s2wr4 <= 124;
	      {1'd0, 7'd93}: s2wr4 <= 125;
	      {1'd0, 7'd94}: s2wr4 <= 126;
	      {1'd0, 7'd95}: s2wr4 <= 127;
	      {1'd0, 7'd96}: s2wr4 <= 64;
	      {1'd0, 7'd97}: s2wr4 <= 65;
	      {1'd0, 7'd98}: s2wr4 <= 66;
	      {1'd0, 7'd99}: s2wr4 <= 67;
	      {1'd0, 7'd100}: s2wr4 <= 68;
	      {1'd0, 7'd101}: s2wr4 <= 69;
	      {1'd0, 7'd102}: s2wr4 <= 70;
	      {1'd0, 7'd103}: s2wr4 <= 71;
	      {1'd0, 7'd104}: s2wr4 <= 72;
	      {1'd0, 7'd105}: s2wr4 <= 73;
	      {1'd0, 7'd106}: s2wr4 <= 74;
	      {1'd0, 7'd107}: s2wr4 <= 75;
	      {1'd0, 7'd108}: s2wr4 <= 76;
	      {1'd0, 7'd109}: s2wr4 <= 77;
	      {1'd0, 7'd110}: s2wr4 <= 78;
	      {1'd0, 7'd111}: s2wr4 <= 79;
	      {1'd0, 7'd112}: s2wr4 <= 80;
	      {1'd0, 7'd113}: s2wr4 <= 81;
	      {1'd0, 7'd114}: s2wr4 <= 82;
	      {1'd0, 7'd115}: s2wr4 <= 83;
	      {1'd0, 7'd116}: s2wr4 <= 84;
	      {1'd0, 7'd117}: s2wr4 <= 85;
	      {1'd0, 7'd118}: s2wr4 <= 86;
	      {1'd0, 7'd119}: s2wr4 <= 87;
	      {1'd0, 7'd120}: s2wr4 <= 88;
	      {1'd0, 7'd121}: s2wr4 <= 89;
	      {1'd0, 7'd122}: s2wr4 <= 90;
	      {1'd0, 7'd123}: s2wr4 <= 91;
	      {1'd0, 7'd124}: s2wr4 <= 92;
	      {1'd0, 7'd125}: s2wr4 <= 93;
	      {1'd0, 7'd126}: s2wr4 <= 94;
	      {1'd0, 7'd127}: s2wr4 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr5 <= 32;
	      {1'd0, 7'd1}: s2wr5 <= 33;
	      {1'd0, 7'd2}: s2wr5 <= 34;
	      {1'd0, 7'd3}: s2wr5 <= 35;
	      {1'd0, 7'd4}: s2wr5 <= 36;
	      {1'd0, 7'd5}: s2wr5 <= 37;
	      {1'd0, 7'd6}: s2wr5 <= 38;
	      {1'd0, 7'd7}: s2wr5 <= 39;
	      {1'd0, 7'd8}: s2wr5 <= 40;
	      {1'd0, 7'd9}: s2wr5 <= 41;
	      {1'd0, 7'd10}: s2wr5 <= 42;
	      {1'd0, 7'd11}: s2wr5 <= 43;
	      {1'd0, 7'd12}: s2wr5 <= 44;
	      {1'd0, 7'd13}: s2wr5 <= 45;
	      {1'd0, 7'd14}: s2wr5 <= 46;
	      {1'd0, 7'd15}: s2wr5 <= 47;
	      {1'd0, 7'd16}: s2wr5 <= 48;
	      {1'd0, 7'd17}: s2wr5 <= 49;
	      {1'd0, 7'd18}: s2wr5 <= 50;
	      {1'd0, 7'd19}: s2wr5 <= 51;
	      {1'd0, 7'd20}: s2wr5 <= 52;
	      {1'd0, 7'd21}: s2wr5 <= 53;
	      {1'd0, 7'd22}: s2wr5 <= 54;
	      {1'd0, 7'd23}: s2wr5 <= 55;
	      {1'd0, 7'd24}: s2wr5 <= 56;
	      {1'd0, 7'd25}: s2wr5 <= 57;
	      {1'd0, 7'd26}: s2wr5 <= 58;
	      {1'd0, 7'd27}: s2wr5 <= 59;
	      {1'd0, 7'd28}: s2wr5 <= 60;
	      {1'd0, 7'd29}: s2wr5 <= 61;
	      {1'd0, 7'd30}: s2wr5 <= 62;
	      {1'd0, 7'd31}: s2wr5 <= 63;
	      {1'd0, 7'd32}: s2wr5 <= 0;
	      {1'd0, 7'd33}: s2wr5 <= 1;
	      {1'd0, 7'd34}: s2wr5 <= 2;
	      {1'd0, 7'd35}: s2wr5 <= 3;
	      {1'd0, 7'd36}: s2wr5 <= 4;
	      {1'd0, 7'd37}: s2wr5 <= 5;
	      {1'd0, 7'd38}: s2wr5 <= 6;
	      {1'd0, 7'd39}: s2wr5 <= 7;
	      {1'd0, 7'd40}: s2wr5 <= 8;
	      {1'd0, 7'd41}: s2wr5 <= 9;
	      {1'd0, 7'd42}: s2wr5 <= 10;
	      {1'd0, 7'd43}: s2wr5 <= 11;
	      {1'd0, 7'd44}: s2wr5 <= 12;
	      {1'd0, 7'd45}: s2wr5 <= 13;
	      {1'd0, 7'd46}: s2wr5 <= 14;
	      {1'd0, 7'd47}: s2wr5 <= 15;
	      {1'd0, 7'd48}: s2wr5 <= 16;
	      {1'd0, 7'd49}: s2wr5 <= 17;
	      {1'd0, 7'd50}: s2wr5 <= 18;
	      {1'd0, 7'd51}: s2wr5 <= 19;
	      {1'd0, 7'd52}: s2wr5 <= 20;
	      {1'd0, 7'd53}: s2wr5 <= 21;
	      {1'd0, 7'd54}: s2wr5 <= 22;
	      {1'd0, 7'd55}: s2wr5 <= 23;
	      {1'd0, 7'd56}: s2wr5 <= 24;
	      {1'd0, 7'd57}: s2wr5 <= 25;
	      {1'd0, 7'd58}: s2wr5 <= 26;
	      {1'd0, 7'd59}: s2wr5 <= 27;
	      {1'd0, 7'd60}: s2wr5 <= 28;
	      {1'd0, 7'd61}: s2wr5 <= 29;
	      {1'd0, 7'd62}: s2wr5 <= 30;
	      {1'd0, 7'd63}: s2wr5 <= 31;
	      {1'd0, 7'd64}: s2wr5 <= 96;
	      {1'd0, 7'd65}: s2wr5 <= 97;
	      {1'd0, 7'd66}: s2wr5 <= 98;
	      {1'd0, 7'd67}: s2wr5 <= 99;
	      {1'd0, 7'd68}: s2wr5 <= 100;
	      {1'd0, 7'd69}: s2wr5 <= 101;
	      {1'd0, 7'd70}: s2wr5 <= 102;
	      {1'd0, 7'd71}: s2wr5 <= 103;
	      {1'd0, 7'd72}: s2wr5 <= 104;
	      {1'd0, 7'd73}: s2wr5 <= 105;
	      {1'd0, 7'd74}: s2wr5 <= 106;
	      {1'd0, 7'd75}: s2wr5 <= 107;
	      {1'd0, 7'd76}: s2wr5 <= 108;
	      {1'd0, 7'd77}: s2wr5 <= 109;
	      {1'd0, 7'd78}: s2wr5 <= 110;
	      {1'd0, 7'd79}: s2wr5 <= 111;
	      {1'd0, 7'd80}: s2wr5 <= 112;
	      {1'd0, 7'd81}: s2wr5 <= 113;
	      {1'd0, 7'd82}: s2wr5 <= 114;
	      {1'd0, 7'd83}: s2wr5 <= 115;
	      {1'd0, 7'd84}: s2wr5 <= 116;
	      {1'd0, 7'd85}: s2wr5 <= 117;
	      {1'd0, 7'd86}: s2wr5 <= 118;
	      {1'd0, 7'd87}: s2wr5 <= 119;
	      {1'd0, 7'd88}: s2wr5 <= 120;
	      {1'd0, 7'd89}: s2wr5 <= 121;
	      {1'd0, 7'd90}: s2wr5 <= 122;
	      {1'd0, 7'd91}: s2wr5 <= 123;
	      {1'd0, 7'd92}: s2wr5 <= 124;
	      {1'd0, 7'd93}: s2wr5 <= 125;
	      {1'd0, 7'd94}: s2wr5 <= 126;
	      {1'd0, 7'd95}: s2wr5 <= 127;
	      {1'd0, 7'd96}: s2wr5 <= 64;
	      {1'd0, 7'd97}: s2wr5 <= 65;
	      {1'd0, 7'd98}: s2wr5 <= 66;
	      {1'd0, 7'd99}: s2wr5 <= 67;
	      {1'd0, 7'd100}: s2wr5 <= 68;
	      {1'd0, 7'd101}: s2wr5 <= 69;
	      {1'd0, 7'd102}: s2wr5 <= 70;
	      {1'd0, 7'd103}: s2wr5 <= 71;
	      {1'd0, 7'd104}: s2wr5 <= 72;
	      {1'd0, 7'd105}: s2wr5 <= 73;
	      {1'd0, 7'd106}: s2wr5 <= 74;
	      {1'd0, 7'd107}: s2wr5 <= 75;
	      {1'd0, 7'd108}: s2wr5 <= 76;
	      {1'd0, 7'd109}: s2wr5 <= 77;
	      {1'd0, 7'd110}: s2wr5 <= 78;
	      {1'd0, 7'd111}: s2wr5 <= 79;
	      {1'd0, 7'd112}: s2wr5 <= 80;
	      {1'd0, 7'd113}: s2wr5 <= 81;
	      {1'd0, 7'd114}: s2wr5 <= 82;
	      {1'd0, 7'd115}: s2wr5 <= 83;
	      {1'd0, 7'd116}: s2wr5 <= 84;
	      {1'd0, 7'd117}: s2wr5 <= 85;
	      {1'd0, 7'd118}: s2wr5 <= 86;
	      {1'd0, 7'd119}: s2wr5 <= 87;
	      {1'd0, 7'd120}: s2wr5 <= 88;
	      {1'd0, 7'd121}: s2wr5 <= 89;
	      {1'd0, 7'd122}: s2wr5 <= 90;
	      {1'd0, 7'd123}: s2wr5 <= 91;
	      {1'd0, 7'd124}: s2wr5 <= 92;
	      {1'd0, 7'd125}: s2wr5 <= 93;
	      {1'd0, 7'd126}: s2wr5 <= 94;
	      {1'd0, 7'd127}: s2wr5 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr6 <= 0;
	      {1'd0, 7'd1}: s2wr6 <= 1;
	      {1'd0, 7'd2}: s2wr6 <= 2;
	      {1'd0, 7'd3}: s2wr6 <= 3;
	      {1'd0, 7'd4}: s2wr6 <= 4;
	      {1'd0, 7'd5}: s2wr6 <= 5;
	      {1'd0, 7'd6}: s2wr6 <= 6;
	      {1'd0, 7'd7}: s2wr6 <= 7;
	      {1'd0, 7'd8}: s2wr6 <= 8;
	      {1'd0, 7'd9}: s2wr6 <= 9;
	      {1'd0, 7'd10}: s2wr6 <= 10;
	      {1'd0, 7'd11}: s2wr6 <= 11;
	      {1'd0, 7'd12}: s2wr6 <= 12;
	      {1'd0, 7'd13}: s2wr6 <= 13;
	      {1'd0, 7'd14}: s2wr6 <= 14;
	      {1'd0, 7'd15}: s2wr6 <= 15;
	      {1'd0, 7'd16}: s2wr6 <= 16;
	      {1'd0, 7'd17}: s2wr6 <= 17;
	      {1'd0, 7'd18}: s2wr6 <= 18;
	      {1'd0, 7'd19}: s2wr6 <= 19;
	      {1'd0, 7'd20}: s2wr6 <= 20;
	      {1'd0, 7'd21}: s2wr6 <= 21;
	      {1'd0, 7'd22}: s2wr6 <= 22;
	      {1'd0, 7'd23}: s2wr6 <= 23;
	      {1'd0, 7'd24}: s2wr6 <= 24;
	      {1'd0, 7'd25}: s2wr6 <= 25;
	      {1'd0, 7'd26}: s2wr6 <= 26;
	      {1'd0, 7'd27}: s2wr6 <= 27;
	      {1'd0, 7'd28}: s2wr6 <= 28;
	      {1'd0, 7'd29}: s2wr6 <= 29;
	      {1'd0, 7'd30}: s2wr6 <= 30;
	      {1'd0, 7'd31}: s2wr6 <= 31;
	      {1'd0, 7'd32}: s2wr6 <= 32;
	      {1'd0, 7'd33}: s2wr6 <= 33;
	      {1'd0, 7'd34}: s2wr6 <= 34;
	      {1'd0, 7'd35}: s2wr6 <= 35;
	      {1'd0, 7'd36}: s2wr6 <= 36;
	      {1'd0, 7'd37}: s2wr6 <= 37;
	      {1'd0, 7'd38}: s2wr6 <= 38;
	      {1'd0, 7'd39}: s2wr6 <= 39;
	      {1'd0, 7'd40}: s2wr6 <= 40;
	      {1'd0, 7'd41}: s2wr6 <= 41;
	      {1'd0, 7'd42}: s2wr6 <= 42;
	      {1'd0, 7'd43}: s2wr6 <= 43;
	      {1'd0, 7'd44}: s2wr6 <= 44;
	      {1'd0, 7'd45}: s2wr6 <= 45;
	      {1'd0, 7'd46}: s2wr6 <= 46;
	      {1'd0, 7'd47}: s2wr6 <= 47;
	      {1'd0, 7'd48}: s2wr6 <= 48;
	      {1'd0, 7'd49}: s2wr6 <= 49;
	      {1'd0, 7'd50}: s2wr6 <= 50;
	      {1'd0, 7'd51}: s2wr6 <= 51;
	      {1'd0, 7'd52}: s2wr6 <= 52;
	      {1'd0, 7'd53}: s2wr6 <= 53;
	      {1'd0, 7'd54}: s2wr6 <= 54;
	      {1'd0, 7'd55}: s2wr6 <= 55;
	      {1'd0, 7'd56}: s2wr6 <= 56;
	      {1'd0, 7'd57}: s2wr6 <= 57;
	      {1'd0, 7'd58}: s2wr6 <= 58;
	      {1'd0, 7'd59}: s2wr6 <= 59;
	      {1'd0, 7'd60}: s2wr6 <= 60;
	      {1'd0, 7'd61}: s2wr6 <= 61;
	      {1'd0, 7'd62}: s2wr6 <= 62;
	      {1'd0, 7'd63}: s2wr6 <= 63;
	      {1'd0, 7'd64}: s2wr6 <= 64;
	      {1'd0, 7'd65}: s2wr6 <= 65;
	      {1'd0, 7'd66}: s2wr6 <= 66;
	      {1'd0, 7'd67}: s2wr6 <= 67;
	      {1'd0, 7'd68}: s2wr6 <= 68;
	      {1'd0, 7'd69}: s2wr6 <= 69;
	      {1'd0, 7'd70}: s2wr6 <= 70;
	      {1'd0, 7'd71}: s2wr6 <= 71;
	      {1'd0, 7'd72}: s2wr6 <= 72;
	      {1'd0, 7'd73}: s2wr6 <= 73;
	      {1'd0, 7'd74}: s2wr6 <= 74;
	      {1'd0, 7'd75}: s2wr6 <= 75;
	      {1'd0, 7'd76}: s2wr6 <= 76;
	      {1'd0, 7'd77}: s2wr6 <= 77;
	      {1'd0, 7'd78}: s2wr6 <= 78;
	      {1'd0, 7'd79}: s2wr6 <= 79;
	      {1'd0, 7'd80}: s2wr6 <= 80;
	      {1'd0, 7'd81}: s2wr6 <= 81;
	      {1'd0, 7'd82}: s2wr6 <= 82;
	      {1'd0, 7'd83}: s2wr6 <= 83;
	      {1'd0, 7'd84}: s2wr6 <= 84;
	      {1'd0, 7'd85}: s2wr6 <= 85;
	      {1'd0, 7'd86}: s2wr6 <= 86;
	      {1'd0, 7'd87}: s2wr6 <= 87;
	      {1'd0, 7'd88}: s2wr6 <= 88;
	      {1'd0, 7'd89}: s2wr6 <= 89;
	      {1'd0, 7'd90}: s2wr6 <= 90;
	      {1'd0, 7'd91}: s2wr6 <= 91;
	      {1'd0, 7'd92}: s2wr6 <= 92;
	      {1'd0, 7'd93}: s2wr6 <= 93;
	      {1'd0, 7'd94}: s2wr6 <= 94;
	      {1'd0, 7'd95}: s2wr6 <= 95;
	      {1'd0, 7'd96}: s2wr6 <= 96;
	      {1'd0, 7'd97}: s2wr6 <= 97;
	      {1'd0, 7'd98}: s2wr6 <= 98;
	      {1'd0, 7'd99}: s2wr6 <= 99;
	      {1'd0, 7'd100}: s2wr6 <= 100;
	      {1'd0, 7'd101}: s2wr6 <= 101;
	      {1'd0, 7'd102}: s2wr6 <= 102;
	      {1'd0, 7'd103}: s2wr6 <= 103;
	      {1'd0, 7'd104}: s2wr6 <= 104;
	      {1'd0, 7'd105}: s2wr6 <= 105;
	      {1'd0, 7'd106}: s2wr6 <= 106;
	      {1'd0, 7'd107}: s2wr6 <= 107;
	      {1'd0, 7'd108}: s2wr6 <= 108;
	      {1'd0, 7'd109}: s2wr6 <= 109;
	      {1'd0, 7'd110}: s2wr6 <= 110;
	      {1'd0, 7'd111}: s2wr6 <= 111;
	      {1'd0, 7'd112}: s2wr6 <= 112;
	      {1'd0, 7'd113}: s2wr6 <= 113;
	      {1'd0, 7'd114}: s2wr6 <= 114;
	      {1'd0, 7'd115}: s2wr6 <= 115;
	      {1'd0, 7'd116}: s2wr6 <= 116;
	      {1'd0, 7'd117}: s2wr6 <= 117;
	      {1'd0, 7'd118}: s2wr6 <= 118;
	      {1'd0, 7'd119}: s2wr6 <= 119;
	      {1'd0, 7'd120}: s2wr6 <= 120;
	      {1'd0, 7'd121}: s2wr6 <= 121;
	      {1'd0, 7'd122}: s2wr6 <= 122;
	      {1'd0, 7'd123}: s2wr6 <= 123;
	      {1'd0, 7'd124}: s2wr6 <= 124;
	      {1'd0, 7'd125}: s2wr6 <= 125;
	      {1'd0, 7'd126}: s2wr6 <= 126;
	      {1'd0, 7'd127}: s2wr6 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm69_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr7 <= 0;
	      {1'd0, 7'd1}: s2wr7 <= 1;
	      {1'd0, 7'd2}: s2wr7 <= 2;
	      {1'd0, 7'd3}: s2wr7 <= 3;
	      {1'd0, 7'd4}: s2wr7 <= 4;
	      {1'd0, 7'd5}: s2wr7 <= 5;
	      {1'd0, 7'd6}: s2wr7 <= 6;
	      {1'd0, 7'd7}: s2wr7 <= 7;
	      {1'd0, 7'd8}: s2wr7 <= 8;
	      {1'd0, 7'd9}: s2wr7 <= 9;
	      {1'd0, 7'd10}: s2wr7 <= 10;
	      {1'd0, 7'd11}: s2wr7 <= 11;
	      {1'd0, 7'd12}: s2wr7 <= 12;
	      {1'd0, 7'd13}: s2wr7 <= 13;
	      {1'd0, 7'd14}: s2wr7 <= 14;
	      {1'd0, 7'd15}: s2wr7 <= 15;
	      {1'd0, 7'd16}: s2wr7 <= 16;
	      {1'd0, 7'd17}: s2wr7 <= 17;
	      {1'd0, 7'd18}: s2wr7 <= 18;
	      {1'd0, 7'd19}: s2wr7 <= 19;
	      {1'd0, 7'd20}: s2wr7 <= 20;
	      {1'd0, 7'd21}: s2wr7 <= 21;
	      {1'd0, 7'd22}: s2wr7 <= 22;
	      {1'd0, 7'd23}: s2wr7 <= 23;
	      {1'd0, 7'd24}: s2wr7 <= 24;
	      {1'd0, 7'd25}: s2wr7 <= 25;
	      {1'd0, 7'd26}: s2wr7 <= 26;
	      {1'd0, 7'd27}: s2wr7 <= 27;
	      {1'd0, 7'd28}: s2wr7 <= 28;
	      {1'd0, 7'd29}: s2wr7 <= 29;
	      {1'd0, 7'd30}: s2wr7 <= 30;
	      {1'd0, 7'd31}: s2wr7 <= 31;
	      {1'd0, 7'd32}: s2wr7 <= 32;
	      {1'd0, 7'd33}: s2wr7 <= 33;
	      {1'd0, 7'd34}: s2wr7 <= 34;
	      {1'd0, 7'd35}: s2wr7 <= 35;
	      {1'd0, 7'd36}: s2wr7 <= 36;
	      {1'd0, 7'd37}: s2wr7 <= 37;
	      {1'd0, 7'd38}: s2wr7 <= 38;
	      {1'd0, 7'd39}: s2wr7 <= 39;
	      {1'd0, 7'd40}: s2wr7 <= 40;
	      {1'd0, 7'd41}: s2wr7 <= 41;
	      {1'd0, 7'd42}: s2wr7 <= 42;
	      {1'd0, 7'd43}: s2wr7 <= 43;
	      {1'd0, 7'd44}: s2wr7 <= 44;
	      {1'd0, 7'd45}: s2wr7 <= 45;
	      {1'd0, 7'd46}: s2wr7 <= 46;
	      {1'd0, 7'd47}: s2wr7 <= 47;
	      {1'd0, 7'd48}: s2wr7 <= 48;
	      {1'd0, 7'd49}: s2wr7 <= 49;
	      {1'd0, 7'd50}: s2wr7 <= 50;
	      {1'd0, 7'd51}: s2wr7 <= 51;
	      {1'd0, 7'd52}: s2wr7 <= 52;
	      {1'd0, 7'd53}: s2wr7 <= 53;
	      {1'd0, 7'd54}: s2wr7 <= 54;
	      {1'd0, 7'd55}: s2wr7 <= 55;
	      {1'd0, 7'd56}: s2wr7 <= 56;
	      {1'd0, 7'd57}: s2wr7 <= 57;
	      {1'd0, 7'd58}: s2wr7 <= 58;
	      {1'd0, 7'd59}: s2wr7 <= 59;
	      {1'd0, 7'd60}: s2wr7 <= 60;
	      {1'd0, 7'd61}: s2wr7 <= 61;
	      {1'd0, 7'd62}: s2wr7 <= 62;
	      {1'd0, 7'd63}: s2wr7 <= 63;
	      {1'd0, 7'd64}: s2wr7 <= 64;
	      {1'd0, 7'd65}: s2wr7 <= 65;
	      {1'd0, 7'd66}: s2wr7 <= 66;
	      {1'd0, 7'd67}: s2wr7 <= 67;
	      {1'd0, 7'd68}: s2wr7 <= 68;
	      {1'd0, 7'd69}: s2wr7 <= 69;
	      {1'd0, 7'd70}: s2wr7 <= 70;
	      {1'd0, 7'd71}: s2wr7 <= 71;
	      {1'd0, 7'd72}: s2wr7 <= 72;
	      {1'd0, 7'd73}: s2wr7 <= 73;
	      {1'd0, 7'd74}: s2wr7 <= 74;
	      {1'd0, 7'd75}: s2wr7 <= 75;
	      {1'd0, 7'd76}: s2wr7 <= 76;
	      {1'd0, 7'd77}: s2wr7 <= 77;
	      {1'd0, 7'd78}: s2wr7 <= 78;
	      {1'd0, 7'd79}: s2wr7 <= 79;
	      {1'd0, 7'd80}: s2wr7 <= 80;
	      {1'd0, 7'd81}: s2wr7 <= 81;
	      {1'd0, 7'd82}: s2wr7 <= 82;
	      {1'd0, 7'd83}: s2wr7 <= 83;
	      {1'd0, 7'd84}: s2wr7 <= 84;
	      {1'd0, 7'd85}: s2wr7 <= 85;
	      {1'd0, 7'd86}: s2wr7 <= 86;
	      {1'd0, 7'd87}: s2wr7 <= 87;
	      {1'd0, 7'd88}: s2wr7 <= 88;
	      {1'd0, 7'd89}: s2wr7 <= 89;
	      {1'd0, 7'd90}: s2wr7 <= 90;
	      {1'd0, 7'd91}: s2wr7 <= 91;
	      {1'd0, 7'd92}: s2wr7 <= 92;
	      {1'd0, 7'd93}: s2wr7 <= 93;
	      {1'd0, 7'd94}: s2wr7 <= 94;
	      {1'd0, 7'd95}: s2wr7 <= 95;
	      {1'd0, 7'd96}: s2wr7 <= 96;
	      {1'd0, 7'd97}: s2wr7 <= 97;
	      {1'd0, 7'd98}: s2wr7 <= 98;
	      {1'd0, 7'd99}: s2wr7 <= 99;
	      {1'd0, 7'd100}: s2wr7 <= 100;
	      {1'd0, 7'd101}: s2wr7 <= 101;
	      {1'd0, 7'd102}: s2wr7 <= 102;
	      {1'd0, 7'd103}: s2wr7 <= 103;
	      {1'd0, 7'd104}: s2wr7 <= 104;
	      {1'd0, 7'd105}: s2wr7 <= 105;
	      {1'd0, 7'd106}: s2wr7 <= 106;
	      {1'd0, 7'd107}: s2wr7 <= 107;
	      {1'd0, 7'd108}: s2wr7 <= 108;
	      {1'd0, 7'd109}: s2wr7 <= 109;
	      {1'd0, 7'd110}: s2wr7 <= 110;
	      {1'd0, 7'd111}: s2wr7 <= 111;
	      {1'd0, 7'd112}: s2wr7 <= 112;
	      {1'd0, 7'd113}: s2wr7 <= 113;
	      {1'd0, 7'd114}: s2wr7 <= 114;
	      {1'd0, 7'd115}: s2wr7 <= 115;
	      {1'd0, 7'd116}: s2wr7 <= 116;
	      {1'd0, 7'd117}: s2wr7 <= 117;
	      {1'd0, 7'd118}: s2wr7 <= 118;
	      {1'd0, 7'd119}: s2wr7 <= 119;
	      {1'd0, 7'd120}: s2wr7 <= 120;
	      {1'd0, 7'd121}: s2wr7 <= 121;
	      {1'd0, 7'd122}: s2wr7 <= 122;
	      {1'd0, 7'd123}: s2wr7 <= 123;
	      {1'd0, 7'd124}: s2wr7 <= 124;
	      {1'd0, 7'd125}: s2wr7 <= 125;
	      {1'd0, 7'd126}: s2wr7 <= 126;
	      {1'd0, 7'd127}: s2wr7 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule

